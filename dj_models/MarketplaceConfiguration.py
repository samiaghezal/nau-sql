class MarketplaceConfiguration(models.Model):
    tenant = models.Tenant()
    id = models.UUID()
    marketplaceName = models.String()
    requireProductApproval = models.Boolean()
    requireProductTypes = models.Boolean()
    payoutAutomationStrategy = models.MarketplaceConfigurationPayoutAutomationStrategyEnum()
    domiciledCurrency = models.MarketplaceConfigurationCurrencyEnum()
    supportedCurrencies = models.String()
    defaultCountry = models.String()
    supportedCountries = models.String()
    sellerCanSendQuote = models.Boolean()
    variantUniqueness = models.VariantUniquenessEnum()
    defaultSellerChecklists = models.DefaultSellerChecklist()
    enableStockAllocationForQuotes = models.Boolean()
    enableStockAllocationForOffers = models.Boolean()
    enableStockAllocationForDrafts = models.Boolean()
    validateStockOnOrderPaymentCreation = models.Boolean()
    timezone = models.String()
    enableBackorders = models.Boolean()
    revenueAccrualStrategy = models.RevenueAccrualStrategyEnum()
    availableShippingStrategy = models.AvailableShippingStrategyEnum()
    attributeTemplateStrategy = models.MarketplaceConfigurationAttributeTemplateStrategy()
    fulfillmentModel = models.FulfillmentModelEnum()
    defaultWeightUnit = models.WeightUnitsEnum()
    automaticFulfillmentDigitalProducts = models.Boolean()
    defaultDigitalMaxDownloads = models.Int()
    defaultDigitalUrlValidDays = models.Int()
    trackInventoryByDefault = models.Boolean()
    description = models.String()
    name = models.String()
    companyAddress = models.Address()
    defaultMailSenderName = models.String()
    defaultMailSenderAddress = models.String()
    defaultMailSupportAddress = models.String()
    customerSetPasswordUrl = models.String()
    includeTaxesInPrices = models.Boolean()
    chargeTaxesOnShipping = models.Boolean()


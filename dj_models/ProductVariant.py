class ProductVariant(models.Model):
    id = models.ID()
    createdAt = models.DateTime()
    updatedAt = models.DateTime()
    description = models.String()
    descriptionHtml = models.String()
    externalId = models.String()
    externalSource = models.String()
    seoTitle = models.String()
    seoDescription = models.String()
    sku = models.String()
    name = models.String()
    nauticalStockNumber = models.String()
    status = models.ProductVariantStatus()
    subStatus = models.ProductVariantSubStatus()
    currency = models.String()
    product = models.Product()
    trackInventory = models.Boolean()
    weight = models.Weight()
    seller = models.Seller()
    publishedAt = models.DateTime()
    isPublished = models.Boolean()
    overrideCurrency = models.Boolean()
    requiresQuote = models.Boolean()
    allowBackorders = models.Boolean()
    isPriceOverrideAllowed = models.Boolean()
    isShippingRequired = models.Boolean()
    isDigital = models.Boolean()
    privateMetadata = models.MetadataItem()
    metadata = models.MetadataItem()
    price = models.Money()
    pricing = models.VariantPricingInfo()
    isVisible = models.Boolean()
    size = models.VariantSize()
    attributes = models.SelectedAttribute()
    customFields = models.SelectedAttribute()
    costPrice = models.Money()
    margin = models.Int()
    quantityOrdered = models.Int()
    features = models.VariantFeature()
    images = models.ProductImage()
    availableImages = models.ProductImage()
    digitalContent = models.DigitalContent()
    stocks = models.Stock()
    quantityAvailable = models.Int()
    netRevenue = models.Float()
    grossRevenue = models.Float()
    sortOrderInCollection = models.Int()
    documents = models.Document()
    stockEvents = models.StockEvent()
    sales = models.Sale()
    vouchers = models.Voucher()


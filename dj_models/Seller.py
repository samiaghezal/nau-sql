class Seller(models.Model):
    id = models.ID()
    companyName = models.String()
    slug = models.String()
    logo = models.Image()
    status = models.SellerStatus()
    banner = models.Image()
    products = models.ProductCountableConnection()
    variants = models.ProductVariantCountableConnection()
    externalPayoutAccountId = models.String()
    externalPayoutSource = models.SellerExternalPayoutSource()
    externalPayoutOnboardingUrl = models.String()
    isMarketplaceSeller = models.Boolean()
    identification = models.String()
    addresses = models.Address()
    defaultShippingAddress = models.Address()
    defaultBillingAddress = models.Address()
    owner = models.User()
    defaultCurrency = models.String()
    fulfilledByMarketplace = models.Boolean()
    sellerusers = models.SellerUserTypeCountableConnection()
    events = models.SellerEventTypeCountableConnection()
    checklists = models.SellerOnboardingChecklist()
    application = models.SellerApplication()
    payouts = models.VendorPayoutCountableConnection()
    shippingZones = models.ShippingZoneCountableConnection()
    orders = models.OrderCountableConnection()
    sellerAgreements = models.AgreementSellersCountableConnection()
    warehouses = models.WarehouseCountableConnection()
    privateMetadata = models.MetadataItem()
    metadata = models.MetadataItem()
    agreement = models.Agreement()
    agreementAcknowledged = models.DateTime()
    canUseInStorefront = models.Boolean()
    microsite = models.Microsite()
    pk = models.Int()
    externalPayoutStatus = models.Boolean()
    externalPayoutSchedule = models.String()
    agreementDecisionReason = models.String()
    storeDescription = models.String()
    documents = models.Document()
    approvedDate = models.DateTime()
    firstProductCreatedDate = models.DateTime()
    firstOrderPlacedDate = models.DateTime()
    created = models.DateTime()
    updated = models.DateTime()
    accountSetupTasksAreDone = models.Boolean()


class Product(models.Model):
    id = models.ID()
    publicationDate = models.Date()
    description = models.String()
    descriptionHtml = models.String()
    externalId = models.String()
    externalSource = models.String()
    seller = models.Seller()
    mpn = models.String()
    brand = models.String()
    manufacturer = models.String()
    model = models.String()
    seoTitle = models.String()
    seoDescription = models.String()
    productType = models.ProductType()
    name = models.String()
    slug = models.String()
    category = models.Category()
    currency = models.String()
    updatedAt = models.DateTime()
    createdAt = models.DateTime()
    chargeTaxes = models.Boolean()
    weight = models.Weight()
    availableForPurchase = models.Date()
    visibleInListings = models.Boolean()
    defaultVariant = models.ProductVariant()
    overridePrice = models.Boolean()
    overrideCurrency = models.Boolean()
    status = models.ProductStatus()
    subStatus = models.ProductSubStatus()
    isPriceOverrideAllowed = models.Boolean()
    isShippingRequired = models.Boolean()
    isDigital = models.Boolean()
    privateMetadata = models.MetadataItem()
    metadata = models.MetadataItem()
    thumbnail = models.Image()
    pricing = models.ProductPricingInfo()
    isAvailable = models.Boolean()
    minimalVariantPrice = models.Money()
    taxType = models.TaxType()
    attributes = models.SelectedAttribute()
    customFields = models.SelectedAttribute()
    purchaseCost = models.MoneyRange()
    margin = models.Margin()
    imageById = models.ProductImage()
    variants = models.ProductVariant()
    images = models.ProductImage()
    countableImages = models.ProductImageCountableConnection()
    collections = models.Collection()
    isAvailableForPurchase = models.Boolean()
    sortOrder = models.Int()
    isPublished = models.Boolean()
    features = models.ProductFeature()
    locations = models.Location()
    originLocation = models.Location()
    destinationLocation = models.Location()
    primaryLocation = models.Location()
    warehousesStats = models.WarehouseStats()
    actions = models.ProductAction()
    documents = models.Document()
    sales = models.Sale()
    vouchers = models.Voucher()
    sortPriorityWeight = models.Decimal()
    productStatusLogs = models.ProductStatusLog()


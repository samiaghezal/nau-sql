generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model PageInfo {
  hasNextPage Boolean
  hasPreviousPage Boolean
  startCursor String?
  endCursor String?
}

model Query {
  id String @id
  ) String?
  id String @id
  content String
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  wishlistName String
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  webhookEvents String[]
  eventType String
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  slug String?
  ) String
  id String @id?
  slug String?
  ) String
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  ) String
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  shop String
  analyticsId String?
  customStorefrontDomain String?
  id String @id
  ) String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  number String @id?
  taxId String?
  slug String?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  email String?
  ) String?
  email String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  email String?
  ) String[]
  seller String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  query String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  query String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  period String
  identifier String @id
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  allCategories String[]
  filter String?
  sortBy String?
  level Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  slug String?
  ) String?
  id String @id?
  slug String?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  slug String?
  identifier String @id?
  ) String?
  filter String?
  sortBy String?
  MPO only filter String?
  identifier String @id?
  microsite String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  nsn String?
  ) String?
  identifier String @id?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  period String
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  variantId String @id?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  productId String @id?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  productTypeId String @id?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  variantId String @id
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  productId String @id
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  priceBookId String @id
  productTypeId String @id
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  sortBy String?
  priceBookId String @id
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  seller String @id?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String[]
  source String
  ) String?
  source String
  id String @id
  ) String?
  availableImportSources String[]
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  taxExemptCodes String[]
  page Int?
  search String?
  ) String?
  id String @id?
  ) String?
  id String @id
  seller String @id?
  ) String[]
  gateway String @id
  paymentInformation String
  ) String?
  getPayoutGateways String[]
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  endDate String?
  payoutId String @id?
  ) String?
  vendorType String?
  vendorId String @id?
  ) String?
  id String @id
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  slug String?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  sortBy String?
  filter String?
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  sortBy String?
  filter String?
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  token String
  ) String?
  sortBy String?
  filter String?
  identifier String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  identifier String @id?
  period String?
  ) String?
  period String?
  ) String?
  token String
  ) String?
  token String
  ) String?
  identifier String @id?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  isMarketplace Boolean
  identifier String @id?
  startDate String
  endDate String
  ) String?
  configurationName String
  ) String?
  nauticalConfigurationList String[]
  id String @id?
  slug String?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  id String @id?
  name String?
  slug String?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  marketplaceConfiguration String
  currencies String[]
  countries String[]
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  searchData String
  ) String[]
  locationData String?
  ) String[]
  startDate String
  endDate String
  ) String?
  startDate String
  endDate String
  ) String?
  startDate String
  endDate String
  dimension String?
  ) String?
  startDate String
  endDate String
  ) String?
  startDate String
  endDate String
  dimension String?
  ) String?
  startDate String
  endDate String
  ) String?
  startDate String
  endDate String
  ) String?
  startDate String
  identifier String @id?
  endDate String
  limit String?
  perspective String
  ) String?
  startDate String
  identifier String @id?
  endDate String
  limit String?
  perspective String
  ) String?
  startDate String
  endDate String
  limit String?
  dimension String?
  ) String?
  identifier String @id?
  startDate String
  endDate String
  dimension String?
  ) String?
  startDate String
  endDate String
  dimension String?
  ) String?
  identifier String @id?
  startDate String
  endDate String
  dimension String?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  query String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  query String?
  productId String @id?
  variantId String @id?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  designerdatalist String[]
  integrationEmbeddingToken String?
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  taxTypes String[]
  token String?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  customFieldTemplates String[]
  id String @id?
  contentType String?
  ) String?
  appsInstallations String[]
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id
  ) String?
  id String @id?
  slug String?
  ) String?
  sortBy String?
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  id String @id?
  ) String?
  id String @id
  ) String[]
  countryCode String
  countryArea String?
  city String?
  cityArea String?
  ) String
  id String @id
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  id String @id
  ) String?
  me String?
  filter String?
  seller String @id?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  id String @id
  ) String?
  email String
  ) String?
  _service String
}

model EmailTemplate {
  id String @id
  title String
  subject String
  senderEmailAddress String?
  content String?
  defaultContent String?
  renderedContent String?
  description String?
  isCustom Boolean
  isActive Boolean
  isEditable Boolean
  createdAt DateTime
  updatedAt DateTime
  recipientType String
  eventType String
}

}

enum RecipientTypeEnum {
}

enum EventTypeEnum {
}

model EmailTemplatePreview {
  id String @id?
  renderedContent String?
}

model EmailTemplateCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model EmailTemplateCountableEdge {
  node String
  cursor String
}

}

}

enum OrderDirection {
}

enum EmailTemplateSortField {
}

model WishlistItemCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model WishlistItemCountableEdge {
  node String
  cursor String
}

model WishlistItem {
  id String @id
  wishlist String
  product String?
  variant String?
  note String?
  expiryDate DateTime?
  quantity Int
  requestedPrice String?
}

model Wishlist {
  id String @id
  createdAt DateTime
  name String
  isDefault Boolean
  user String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
}

model User {
  id String @id
  lastLogin DateTime?
  privateMetadata String[]
  metadata String[]
  externalId String?
  externalSource String?
  externalPayoutAccountId String?
  externalPayoutSource String?
  externalPayoutOnboardingUrl String?
  companyName String
  email String
  firstName String
  lastName String
  isStaff Boolean
  isActive Boolean
  note String?
  dateJoined DateTime
  lastStatusChangedAt DateTime?
  defaultShippingAddress String?
  defaultBillingAddress String?
  personalPhone String?
  taxExemptCode String?
  vatIdentificationNumber String?
  addresses String[]
  checkout String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  numOrders Int?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  userPermissions String[]
  permissionGroups String[]
  editableGroups String[]
  size Int?
  ) String?
  events String[]
  storedPaymentSources String[]
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  seller String?
  isAssignable Boolean?
  documents String[]
  priceBook String?
  dashboardEmbeddingToken String?
  customFields String[]
}

}

model MetadataItem {
  key String
  value String
}

enum UserExternalPayoutSource {
}

model Address {
  id String @id
  firstName String
  lastName String
  companyName String
  streetAddress1 String
  streetAddress2 String
  city String
  cityArea String
  postalCode String
  country String
  countryArea String
  phone String?
  isDefaultShippingAddress Boolean?
  isDefaultBillingAddress Boolean?
}

model CountryDisplay {
  code String
  country String
  requiredFields String[]
  allowedCountryAreas String[]
  reason String?
  detailedAllowedCountryAreas String[]
}

model CountryArea {
  code String
  name String
}

model Checkout {
  created DateTime
  lastChange DateTime
  user String?
  quantity Int
  billingAddress String?
  shippingAddress String?
  note String
  currency String
  discount String?
  discountName String?
  translatedDiscountName String?
  voucherCode String?
  poNumbers String[]
  id String @id
  privateMetadata String[]
  metadata String[]
  availableMarketplaceShippingMethods String[]
  availableShippingMethodsBySeller String[]
  applicableVolumeDiscounts String?
  applicableVolumeDiscountsBySeller String[]
  availablePaymentGateways String[]
  email String
  isShippingRequired Boolean
  lines String[]
  shippingPrice String
  subtotalPrice String
  token String
  totalPrice String
  discountType String?
  shippingMethods String[]
  shippingSaleDiscount String
  marketplaceShippingMethod String?
  marketplaceShippingPrice String
}

model Money {
  currency String
  baseAmount String
}

model ShippingMethod {
  id String @id
  privateMetadata String[]
  metadata String[]
  name String
  price String?
  minimumOrderPrice String?
  maximumOrderPrice String?
  minimumOrderWeight String?
  maximumOrderWeight String?
  type String?
  Deprecated String?
  requiresSecondaryAddress Boolean?
}

model Weight {
  unit String
  value Float
}

enum WeightUnitsEnum {
}

enum ShippingMethodTypeEnum {
}

model MultiSellerShippingMethod {
  seller Int?
  reason String?
  sellerId String @id
  sellerName String
  value String[]
}

model SellerVolumeDiscount {
  seller Int?
  volumeDiscount String?
}

model PaymentGateway {
  name String
  id String @id
  config String[]
  currencies String[]
}

model GatewayConfigLine {
  field String
  value String?
}

model CheckoutLine {
  id String @id
  privateMetadata String[]
  metadata String[]
  isLinePriceOverridden Boolean
  unitPriceOverriddenNote String?
  note String?
  variant String
  quantity Int
  sale String?
  totalPrice String
  requiresShipping Boolean?
  seller String?
  discountedUnitPrice String
  originalUnitPrice String
}

model ProductVariant {
  id String @id
  createdAt DateTime
  updatedAt DateTime
  description String
  descriptionHtml String
  externalId String?
  externalSource String?
  seoTitle String?
  seoDescription String?
  sku String?
  name String
  nauticalStockNumber String
  status String
  subStatus String
  currency String?
  product String
  trackInventory Boolean
  weight String?
  seller String?
  publishedAt DateTime?
  isPublished Boolean
  overrideCurrency Boolean
  requiresQuote Boolean
  allowBackorders Boolean?
  isPriceOverrideAllowed Boolean
  isShippingRequired Boolean
  isDigital Boolean
  privateMetadata String[]
  metadata String[]
  price String?
  pricing String?
  isVisible Boolean
  size String?
  attributes String[]
  customFields String[]
  costPrice String?
  margin Int?
  quantityOrdered Int?
  features String[]
  List of product variant images. When 'strict_product_image_handling' is enabled String?
  images String[]
  List the product images available for assignment to a variant.When the 'strict_product_image_handling' is enabled String?
  availableImages String[]
  digitalContent String?
  countryCode String?
  ) String[]
  countryCode String?
  ) Int
  netRevenue Float?
  grossRevenue Float?
  sortOrderInCollection Int?
  documents String[]
  stockEvents String[]
  sales String[]
  vouchers String[]
}

enum ProductVariantStatus {
}

enum ProductVariantSubStatus {
}

model Product {
  id String @id
  publicationDate String?
  description String
  descriptionHtml String
  externalId String?
  externalSource String?
  seller String?
  mpn String?
  brand String?
  manufacturer String?
  model String?
  seoTitle String?
  seoDescription String?
  productType String?
  name String
  slug String
  category String?
  currency String
  updatedAt DateTime?
  createdAt DateTime
  chargeTaxes Boolean
  weight String?
  availableForPurchase String?
  visibleInListings Boolean
  defaultVariant String?
  overridePrice Boolean
  overrideCurrency Boolean
  status String
  subStatus String
  isPriceOverrideAllowed Boolean
  isShippingRequired Boolean
  isDigital Boolean
  privateMetadata String[]
  metadata String[]
  size Int?
  ) String?
  pricing String?
  isAvailable Boolean?
  minimalVariantPrice String?
  taxType String?
  attributes String[]
  customFields String[]
  purchaseCost String?
  margin String?
  id String @id?
  ) String?
  variants String[]
  images String[]
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  collections String[]
  isAvailableForPurchase Boolean?
  sortOrder Int?
  isPublished Boolean
  features String[]
  locations String[]
  originLocation String?
  destinationLocation String?
  primaryLocation String?
  warehousesStats String[]
  actions String[]
  documents String[]
  sales String[]
  vouchers String[]
  sortPriorityWeight Decimal?
  productStatusLogs String[]
}

model Seller {
  id String @id
  companyName String
  slug String
  size Int?
  ) String?
  status String
  size Int?
  ) String?
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  externalPayoutAccountId String?
  externalPayoutSource String?
  externalPayoutOnboardingUrl String?
  isMarketplaceSeller Boolean
  identification String[]
  addresses String[]
  defaultShippingAddress String?
  defaultBillingAddress String?
  owner String?
  defaultCurrency String
  fulfilledByMarketplace Boolean
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  checklists String[]
  application String?
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  privateMetadata String[]
  metadata String[]
  agreement String?
  agreementAcknowledged DateTime?
  canUseInStorefront Boolean?
  microsite String?
  pk Int?
  externalPayoutStatus Boolean?
  externalPayoutSchedule String?
  agreementDecisionReason String?
  storeDescription String?
  documents String[]
  approvedDate DateTime?
  firstProductCreatedDate DateTime?
  firstOrderPlacedDate DateTime?
  created DateTime
  updated DateTime
  accountSetupTasksAreDone Boolean?
}

model Image {
  url String
  alt String?
}

enum SellerStatus {
}

model ProductCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ProductCountableEdge {
  node String
  cursor String
}

model ProductVariantCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ProductVariantCountableEdge {
  node String
  cursor String
}

enum SellerExternalPayoutSource {
}

model SellerUserTypeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model SellerUserTypeCountableEdge {
  node String
  cursor String
}

model SellerUserType {
  id String @id
  tenant String
  seller String
  user String
  isDefault Boolean
}

model Tenant {
  id String @id
  name String
  isActive Boolean
}

model SellerEventTypeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model SellerEventTypeCountableEdge {
  node String
  cursor String
}

model SellerEventType {
  id String @id
  date DateTime?
  type String?
  user String?
  parameters Json?
  status String?
  message String?
  seller String?
}

enum SellerEventsEnum {
}

model SellerOnboardingChecklist {
  id String @id
  createdAt DateTime
  updatedAt DateTime
  tenant String
  seller String
  position Int
  title String
  description String
  completeOn String?
  completedAt DateTime?
}

enum SellerChecklistCompletionTriggersEnum {
}

model SellerApplication {
  createdAt DateTime
  updatedAt DateTime
  checkpoint String
  formData Json
  seller String
  submittedAt DateTime?
  id String @id
}

enum SellerApplicationCheckpoint {
}

model VendorPayoutCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model VendorPayoutCountableEdge {
  node String
  cursor String
}

model VendorPayout {
  id String @id
  privateMetadata String[]
  metadata String[]
  tenant String
  created DateTime
  updated DateTime
  gateway String
  payout String
  seller String?
  currency String
  average Decimal
  discounts Decimal
  net Decimal
  shipping Decimal
  volumeDiscounts Decimal
  commission Decimal
  feeAmount Decimal
  fees String
  payoutAmount Decimal
  payable String
  included Boolean
  status String
  statusMessage String?
  adjustmentAmount Decimal
  adjustment String
  refundAmount Decimal
  refund String
  ledgerVersion String
  eventTypes String[]
  ) String[]
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  commissionMoney String
  discountsMoney String
  netSales String
  shippingMoney String
  subtotal String
  total String
}

model Payout {
  id String @id
  privateMetadata String[]
  metadata String[]
  tenant String
  created String
  updated DateTime
  startDate String?
  endDate String
  status String
  name String?
  currency String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  vendors Int
  netSales String
  discounts String
  shipping String
  commission String
  fees String
  refunds String
  adjustments String
  payout String
}

enum PayoutStatus {
}

enum VendorPayoutStatus {
}

model VendorPayoutEvent {
  id String @id
  parameters Json
  date DateTime
  createdAt DateTime
  updatedAt DateTime
  type String
  user String?
  message String?
}

enum VendorPayoutEventsEnum {
}

model OrderCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model OrderCountableEdge {
  node String
  cursor String
}

model Order {
  id String @id
  externalId String?
  externalSource String?
  orderSource String
  seller String?
  created DateTime
  updated DateTime?
  status String
  subStatus String?
  user String?
  languageCode String
  trackingClientId String
  billingAddress String?
  shippingAddress String?
  vatCode String
  euInvoiceMessaging String?
  vatIdentificationNumber String?
  mpVatIdentificationNumber String?
  currency String
  shippingMethod String?
  shippingMethodName String?
  shippingPrice String?
  isShippingPriceOverridden Boolean
  token String
  voucher String?
  discount String?
  discountName String?
  translatedDiscountName String?
  displayGrossPrices Boolean
  customerNote String
  weight String?
  importedAt DateTime?
  privateMetadata String[]
  metadata String[]
  fulfillments String[]
  fees String[]
  lines String[]
  allowedSubStatuses String[]
  availableShippingMethods String[]
  invoices String[]
  number String?
  marketplaceOrderNumber String?
  isPaid Boolean?
  paymentStatus String
  paymentStatusDisplay String
  total String?
  originalTotal String?
  subtotal String?
  statusDisplay String?
  canFinalize Boolean
  events String[]
  userEmail String?
  isShippingRequired Boolean
  payoutStatus String?
  payoutStatus String?
  ) String[]
  availablePayoutBalance String?
  sellerCommission String?
  volumeDiscount String?
  validationStatus String[]
  Determines if seller is the only seller on the related nautical order. Note String?
  isOnlySellerOnNauticalOrder Boolean?
  marketplaceOrder String?
  vendorPayout String?
  reason String?
  vendorPayouts String[]
}

enum OrderOrderSource {
}

enum OrderStatus {
}

enum OrderSubStatus {
}

model TaxedMoney {
  currency String
  gross String
  net String
  tax String
}

model Voucher {
  id String @id
  type String
  name String?
  code String
  usageLimit Int?
  used Int
  startDate DateTime
  endDate DateTime?
  applyOncePerOrder Boolean
  applyOncePerCustomer Boolean
  discountValueType String
  discountValue Decimal
  currency String
  minSpent String?
  minCheckoutItemsQuantity Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  countries String[]
}

enum VoucherTypeEnum {
}

enum DiscountValueTypeEnum {
}

model CategoryCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CategoryCountableEdge {
  node String
  cursor String
}

model Category {
  id String @id
  description String
  descriptionHtml String
  externalId String?
  externalSource String?
  seoTitle String?
  seoDescription String?
  name String
  slug String
  parent String?
  allowProductAssignment Boolean
  level Int
  privateMetadata String[]
  metadata String[]
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  size Int?
  ) String?
  trailingBreadcrumbs String[]
  customFields String[]
}

}

}

enum AttributeFilterConnector {
}

}

}

enum StockAvailability {
}

}

}

enum ProductSubStatusEnum {
}

}

enum FeatureFilterConnector {
}

}

enum FeatureFilterOperationCondition {
}

}

}

}

enum LocationTypeEnum {
}

enum DistanceUnit {
}

}

enum ProductSearchFieldEnum {
}

}

}

enum ProductOrderField {
}

model SelectedAttribute {
  attribute String
  values String[]
  templated Boolean?
}

model Attribute {
  id String @id
  externalId String?
  externalSource String?
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  privateMetadata String[]
  metadata String[]
  inputType String
  name String
  slug String
  allProductTypes String[]
  values String[]
  valueRequired Boolean
  visibleInStorefront Boolean
  filterableInStorefront Boolean
  filterableInDashboard Boolean
  availableInGrid Boolean
  storefrontSearchPosition Int
  createdBy String?
}

model ProductTypeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ProductTypeCountableEdge {
  node String
  cursor String
}

model ProductType {
  id String @id
  externalId String?
  externalSource String?
  name String
  slug String
  isShippingRequired Boolean
  isDigital Boolean
  weight String?
  isPriceOverrideAllowed Boolean
  createdBy String?
  privateMetadata String[]
  metadata String[]
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  taxType String?
  variantAttributes String[]
  hasVariants Boolean?
  productAttributes String[]
  filter String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  productFeatures String[]
  variantFeatures String[]
  model String?
}

model TaxType {
  description String?
  taxCode String?
}

model AttributeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model AttributeCountableEdge {
  node String
  cursor String
}

}

model ProductTypeProductFeature {
  id String @id
  sortOrder Int?
  tenant String
  featureType String
  name String
  description String
  options String[]
  productType String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
}

enum FeatureTypeEnum {
}

model ProductFeatureCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ProductFeatureCountableEdge {
  node String
  cursor String
}

model ProductFeature {
  id String @id
  sortOrder Int?
  deletedAt DateTime?
  deletedByUser String?
  deletedByApp String?
  deletionBatchUuid String?
  tenant String
  featureType String
  name String
  description String
  options String[]
  product String
  productTypeFeature String?
}

model App {
  id String @id
  name String?
  created DateTime?
  isActive Boolean?
  permissions String[]
  user String?
  tokens String[]
  privateMetadata String[]
  metadata String[]
  type String?
  webhooks String[]
  aboutApp String?
  dataPrivacy String?
  dataPrivacyUrl String?
  homepageUrl String?
  supportUrl String?
  configurationUrl String?
  appUrl String?
  version String?
  accessToken String?
}

model Permission {
  code String
  name String
}

enum PermissionEnum {
}

model AppToken {
  name String
  authToken String
  id String @id
}

enum AppTypeEnum {
}

model Webhook {
  name String
  targetUrl String
  isActive Boolean
  secretKey String?
  connectionString String?
  queueName String?
  id String @id
  events String[]
  app String
}

model WebhookEvent {
  eventType String
  name String
}

enum WebhookEventTypeEnum {
}

model ProductTypeVariantFeature {
  id String @id
  sortOrder Int?
  tenant String
  featureType String
  name String
  description String
  options String[]
  productType String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
}

model VariantFeatureCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model VariantFeatureCountableEdge {
  node String
  cursor String
}

model VariantFeature {
  id String @id
  sortOrder Int?
  tenant String
  featureType String
  name String
  description String
  options String[]
  variant String
  productTypeFeature String?
}

enum AttributeInputTypeEnum {
}

model AttributeValue {
  id String @id
  sortOrder Int?
  tenant String
  name String
  value String
  slug String
  attribute String
  dateTime DateTime?
  plainText String
  richText String
  currency String
  amount Decimal
  money String?
  reference String
  boolean Boolean
  file String?
  fileUrl String?
  date String?
  type String?
  inputType String
}

model File {
  url String
}

enum AttributeValueType {
}

model CollectionCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CollectionCountableEdge {
  node String
  cursor String
}

model Collection {
  id String @id
  publicationDate String?
  privateMetadata String[]
  metadata String[]
  description String
  descriptionHtml String
  seoTitle String?
  seoDescription String?
  isVisible Boolean
  name String
  slug String
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  size Int?
  ) String?
  isPublished Boolean
  type String?
  customFields String[]
  sales String[]
  vouchers String[]
  onSale Boolean?
}

}

enum ProductVariantSubStatusEnum {
}

}

enum ProductVariantSearchFieldEnum {
}

}

enum VariantSortField {
}

enum CollectionTypeEnum {
}

model Sale {
  id String @id
  name String
  type String
  value Decimal
  startDate DateTime
  endDate DateTime?
  currency String
  minSpent String?
  minCheckoutItemsQuantity Int
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  saleType String
}

enum SaleTypeEnum {
}

model Fulfillment {
  id String @id
  fulfillmentOrder Int
  relatedTo String?
  order String
  nauticalOrder String?
  status String
  trackingCompany String?
  trackingNumber String?
  trackingUrl String?
  shippingLabelUrl String?
  created DateTime
  updated DateTime
  user String?
  privateMetadata String[]
  metadata String[]
  lines String[]
  seller String?
  statusDisplay String?
  warehouse String?
  totalLinesQuantity Int?
  totalLinesMoney String
  customFields String[]
}

model NauticalOrder {
  id String @id
  externalId String?
  externalSource String?
  orderSource String
  created DateTime
  updated DateTime?
  status String
  subStatus String?
  user String?
  languageCode String
  trackingClientId String
  billingAddress String?
  shippingAddress String?
  currency String
  isMarketplaceShippingPriceOverridden Boolean
  shippingPrice String?
  euInvoiceMessaging String?
  vatIdentificationNumber String?
  mpVatIdentificationNumber String?
  token String
  voucher String?
  shippingDiscount String?
  discount String?
  discountName String?
  translatedDiscountName String?
  displayGrossPrices Boolean
  customerNote String
  weight String?
  importedAt DateTime?
  poNumbers String[]
  privateMetadata String[]
  metadata String[]
  availableMarketplaceShippingMethods String[]
  sellerFulfillments String[]
  allowedSubStatuses String[]
  sellerUnfulfilled String[]
  lines String[]
  actions String[]
  availableShippingMethodsBySeller String[]
  invoices String[]
  number String?
  isPaid Boolean?
  paymentStatus String
  paymentStatusDisplay String
  payments String[]
  total String?
  subtotal String?
  statusDisplay String?
  canFinalize Boolean
  validationStatus String[]
  totalAuthorized String?
  totalCaptured String?
  totalRefunded String?
  events String[]
  positive Boolean?
  ) String
  userEmail String?
  isShippingRequired Boolean
  volumeDiscount String?
  shippingMethodName String
  subOrders String[]
  refunds String[]
  marketplaceShippingPrice String
  marketplaceShippingMethod String?
  marketplaceShippingMethodName String?
}

enum NauticalOrderOrderSource {
}

enum NauticalOrderStatus {
}

enum NauticalOrderSubStatus {
}

enum OrderSubStatusEnum {
}

model OrderLine {
  id String @id
  privateMetadata String[]
  metadata String[]
  isLinePriceOverridden Boolean
  unitPriceOverriddenNote String?
  note String?
  productName String
  variantName String
  productSku String?
  isShippingRequired Boolean
  quantityFulfilled Int
  quantityDeclined Int
  digitalContentUrl String?
  order String
  nauticalOrderLine String
  size Int?
  ) String?
  unitPrice String?
  totalPrice String?
  A purchased product variant. Note String?
  variant String?
  translatedProductName String
  translatedVariantName String
  allocations String[]
  priceBook String?
  quantityOrdered Int
  unfulfilledQuantityRefunded Int
  fulfilledQuantityRefunded Int
}

model DigitalContentUrl {
  content String
  created DateTime
  downloadNum Int
  id String @id
  url String?
  token String
}

model DigitalContent {
  useDefaultSettings Boolean
  automaticFulfillment Boolean
  productVariant String
  contentFile String?
  maxDownloads Int?
  urlValidDays Int?
  urls String[]
  id String @id
  privateMetadata String[]
  metadata String[]
}

model NauticalOrderLine {
  id String @id
  privateMetadata String[]
  metadata String[]
  isLinePriceOverridden Boolean
  unitPriceOverriddenNote String?
  note String?
  productName String
  variantName String
  productSku String?
  isShippingRequired Boolean
  digitalContentUrl String?
  size Int?
  ) String?
  unitPrice String?
  totalPrice String?
  A purchased product variant. Note String?
  variant String?
  translatedProductName String
  translatedVariantName String
  priceBook String?
  sellerOrderline String?
  quantityOrdered Int
  sale String?
  saleDiscount String?
  voucherDiscount String?
  originalUnitPrice String?
  discountedUnitPrice String?
}

model PriceBook {
  description String
  descriptionHtml String
  id String @id
  privateMetadata String[]
  metadata String[]
  name String
  deleted Boolean
  priceBookVariants String[]
  priceBookProducts String[]
  priceBookProductTypes String[]
  numberOfProducts Int
  numberOfProductTypes Int
  numberOfVariants Int
}

model PriceBookVariant {
  id String @id
  priceBook String
  variant String
  valueType String
  currency String
  price String
  percentage Float
}

enum PriceBookVariantValueType {
}

model PriceBookProduct {
  id String @id
  priceBook String
  product String
  valueType String
  currency String
  price String
  percentage Float
}

enum PriceBookProductValueType {
}

model PriceBookProductType {
  id String @id
  priceBook String
  productType String
  valueType String
  currency String
  price String
  percentage Float
}

enum PriceBookProductTypeValueType {
}

model Allocation {
  id String @id
  quantity Int
  warehouse String
}

model Warehouse {
  externalId String?
  externalSource String?
  id String @id
  name String
  slug String
  companyName String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  address String
  email String
  seller String
  privateMetadata String[]
  metadata String[]
}

model ShippingZoneCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ShippingZoneCountableEdge {
  node String
  cursor String
}

model ShippingZone {
  id String @id
  privateMetadata String[]
  metadata String[]
  name String
  seller String
  warehouses String[]
  priceRange String
  countries String[]
  shippingMethods String[]
  countryAreas String[]
}

model MoneyRange {
  start String?
  stop String?
}

model ShippingZoneCountryArea {
  id String @id
  country String
  countryArea String
}

enum OrderAction {
}

model Invoice {
  id String @id
  metadata String[]
  status String
  number String
  externalUrl String?
  isValid Boolean
  isEditable Boolean
  privateMetadata String[]
  createdAt DateTime
  updatedAt DateTime
  message String?
  url String?
}

}

enum JobStatusEnum {
}

enum PaymentChargeStatusEnum {
}

model Payment {
  id String @id
  gateway String
  isActive Boolean
  created DateTime
  modified DateTime
  token String
  checkout String?
  nauticalOrder String?
  paymentMethodType String
  paymentMethodToken String?
  customerIpAddress String?
  privateMetadata String[]
  metadata String[]
  chargeStatus String
  actions String[]
  total String?
  capturedAmount String?
  transactions String[]
  availableCaptureAmount String?
  availableRefundAmount String?
  creditCard String?
}

model Transaction {
  id String @id
  created DateTime
  payment String
  token String
  kind String
  isSuccess Boolean
  error String?
  amount String?
}

enum TransactionKind {
}

model CreditCard {
  brand String
  firstDigits String?
  lastDigits String
  expMonth Int?
  expYear Int?
}

model ValidationStatus {
  message String?
  code String?
  variant String @id?
}

model NauticalOrderEvent {
  id String @id
  date DateTime
  type String
  user String?
  message String?
  email String?
  emailType String?
  amount Float?
  paymentId String?
  paymentGateway String?
  quantity Int?
  composedId String?
  orderNumber String?
  invoiceNumber String?
  oversoldItems String[]
  lines String[]
  warehouse String?
}

enum OrderEventsEnum {
}

enum OrderEventsEmailsEnum {
}

model NauticalOrderEventOrderLineObject {
  quantity Int?
  orderLine String?
  itemName String?
}

model Refund {
  createdAt DateTime
  updatedAt DateTime
  description String
  descriptionHtml String
  id String @id
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  privateMetadata String[]
  metadata String[]
  buyer String?
  externalId String?
  name String
  order String
  status String
  token String
  Type of the refund String?
  refundType String
}

model RefundLineCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model RefundLineCountableEdge {
  node String
  cursor String
}

model RefundLine {
  createdAt DateTime
  updatedAt DateTime
  id String @id
  chargedTo String
  currency String
  lineScope String
  lineType String
  percentage Float
  quantityFulfilled Int
  quantityUnfulfilled Int
  refund String
  refundScope String
  total String
}

enum RefundChargeToEnum {
}

enum RefundLineScopeEnum {
}

enum RefundLineTypeEnum {
}

model RefundPaymentCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model RefundPaymentCountableEdge {
  node String
  cursor String
}

model RefundPayment {
  createdAt DateTime
  updatedAt DateTime
  id String @id
  paymentType String
  refund String
  refundMethod String
}

enum RefundPaymentTypeEnum {
}

enum RefundStatusEnum {
}

enum RefundTypeEnum {
}

enum FulfillmentStatus {
}

model FulfillmentLine {
  id String @id
  quantity Int
  orderLine String?
  returnReason String?
}

model OrderFee {
  id String @id
  tenant String
  order String?
  currency String
  transactionAmount Decimal
  transactionCurrency String
  transactionFee String?
  domiciledAmount Decimal
  domiciledFee String?
  source String?
  name String
  notes String
  data Json
}

model NauticalCurrency {
  code String
}

enum SourceFeeEnum {
}

model OrderEvent {
  id String @id
  date DateTime
  type String?
  user String?
  message String?
  email String?
  emailType String?
  amount Float?
  paymentId String?
  paymentGateway String?
  quantity Int?
  composedId String?
  orderNumber String?
  invoiceNumber String?
  oversoldItems String[]
  lines String[]
  fulfilledItems String[]
  warehouse String?
}

model OrderEventOrderLineObject {
  quantity Int?
  orderLine String?
  itemName String?
}

enum OrderPayoutStatusEnum {
}

model OrderPayoutSummary {
  commissions String
  discounts String
  fees String
  refunds String
  refundsCommission String
  sales String
  shipping String
  total String
  vendorPayout String
}

enum PayoutStatusEnum {
}

model AgreementSellersCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model AgreementSellersCountableEdge {
  node String
  cursor String
}

model AgreementSellers {
  id String @id
  tenant String
  seller String
  acknowledgedOn DateTime?
  plan String?
  effectiveAt DateTime
  privateMetadata String[]
  metadata String[]
}

model Agreement {
  id String @id
  publicationDate String?
  isPublished Boolean
  createdAt DateTime
  updatedAt DateTime
  content String
  contentHtml String
  tenant String
  seoTitle String?
  seoDescription String?
  slug String
  title String
  commissionType String
  reason String?
  defaultCommission Decimal
  markupCommissionType String
  reason String?
  markupCommissionValue Decimal?
  reason String?
  isActive Boolean?
  granularCommissions String[]
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  fees String[]
  privateMetadata String[]
  metadata String[]
}

enum CommissionTypeEnum {
}

enum MarkupCommissionTypeEnum {
}

model AgreementCommission {
  id String @id
  tenant String
  commission Decimal
  agreement String
  privateMetadata String[]
  metadata String[]
  instance String?
}

model AgreementFees {
  id String @id
  tenant String
  agreement String
model of fee {
  feeType String
  feeScope String
  feeValue Decimal
  feeName String
}

enum FeeType {
}

enum FeeScope {
}

model WarehouseCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model WarehouseCountableEdge {
  node String
  cursor String
}

model Microsite {
  id String @id
  publicationDate String?
  description String
  descriptionHtml String
  seoTitle String?
  seoDescription String?
  name String
  slug String
  footerText String?
  seller String?
  privateMetadata String[]
  metadata String[]
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
  size Int?
  ) String?
  size Int?
  ) String?
  isPublished Boolean
}

model Document {
  id String @id
  createdAt DateTime
  updatedAt DateTime
  tenant String
  file String
  name String
  description String
  fileExtension String
  fileContentType String?
  fileSize String?
  url String?
}

model FileSize {
  bytes String?
  kilobytes Decimal?
  megabytes Decimal?
}

enum ProductStatus {
}

enum ProductSubStatus {
}

model ProductPricingInfo {
  onSale Boolean
  discount String
  discountLocalCurrency String
  priceRange String
  priceRangeUndiscounted String
  priceRangeLocalCurrency String
  priceRangeUndiscountedLocalCurrency String
}

model TaxedMoneyRange {
  start String?
  stop String?
}

model Margin {
  start Int?
  stop Int?
}

model ProductImage {
  id String @id
  sortOrder Int?
  externalId String?
  externalSource String?
  alt String
  size Int?
  ) String
}

model ProductImageCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ProductImageCountableEdge {
  node String
  cursor String
}

model Location {
  id String @id
  lon Float?
  lat Float?
  locationType String?
  locationKind String?
  companyName String
  streetAddress1 String
  streetAddress2 String
  city String
  cityArea String
  postalCode String
  country String
  countryArea String
  phone String?
}

enum LocationKindEnum {
}

model WarehouseStats {
  warehouseId String @id
  quantity Int
  quantityAllocated Int
  quantityAvailable Int
}

enum ProductAction {
}

model ProductStatusLog {
  user String?
  subStatus String?
  subStatusReason String?
  createdAt DateTime?
  id String @id
  privateMetadata String[]
  metadata String[]
}

model VariantPricingInfo {
  onSale Boolean
  discount String
  discountLocalCurrency String
  price String
  priceUndiscounted String
  priceLocalCurrency String
  priceUndiscountedLocalCurrency String
}

model VariantSize {
  length Decimal?
  width Decimal?
  height Decimal?
  sizeUnits String?
}

enum DistanceUnitsEnum {
}

model Stock {
  warehouse String
  productVariant String
  quantity Int
  outOfStockThreshold Int?
  quantityAllocated Int
  id String @id
  quantityAvailable Int
}

enum CountryCode {
}

model StockEvent {
  id String @id
  date DateTime
  type String
  stock String?
  parameters Json
  user String?
}

enum StockEventType {
}

model SellerType {
  id String @id
  privateMetadata String[]
  metadata String[]
  pk Int?
  companyName String?
  owner String?
}

model UserType {
  id String @id
  privateMetadata String[]
  metadata String[]
  firstName String?
  lastName String?
  email String?
  defaultShippingAddress String?
}

model AddressType {
  id String @id
  privateMetadata String[]
  metadata String[]
  firstName String?
  lastName String?
  streetAddress1 String?
  streetAddress2 String?
  city String?
  postalCode String?
  country String?
  countryArea String?
  phone String?
}

model CheckoutSellerShipping {
  tenant String
  id String @id
  seller String
  shippingMethod String
  isPriceOverridden Boolean
  priceOverrideAmount Decimal
}

}

enum OrderStatusFilter {
}

enum OrderSourceFilter {
}

enum OfferOrderSubStatusFilter {
}

}

enum OrderSortField {
}

model NauticalOrderCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model NauticalOrderCountableEdge {
  node String
  cursor String
}

}

model UserPermission {
  code String
  name String
  userId String @id?
  ) String[]
}

model Group {
  id String @id
  name String
  permissions String[]
  users String[]
  userCanManage Boolean
}

model CustomerEvent {
  id String @id
  date DateTime?
  type String?
  user String?
  message String?
  count Int?
  order String?
  orderLine String?
  nauticalOrder String?
}

enum CustomerEventsEnum {
}

model PaymentSource {
  id String
  gateway String
  creditCardInfo String?
}

model WishlistCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model WishlistCountableEdge {
  node String
  cursor String
}

}

}

enum WishlistItemSortField {
}

enum WebhookSampleEventTypeEnum {
}

model WebhookEventLogCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model WebhookEventLogCountableEdge {
  node String
  cursor String
}

model WebhookEventLog {
  id String @id
  tenant String
  date DateTime
  targetUrl String?
  eventType String
  webhookId String?
  transactionId String?
  appId String?
  pluginId String?
  payload Json
  error String?
  direction String?
}

enum WebhookDirectionEnum {
}

model WebhookJobCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model WebhookJobCountableEdge {
  node String
  cursor String
}

model WebhookJob {
  id String @id
  status String
  message String?
  createdAt DateTime
  updatedAt DateTime
  tenant String
  body Json?
  requestMeta Json?
  source String?
  type String?
  vendorEntityLink String?
  marketplaceEntityLink String?
  seller String?
}

enum GenericWebhookTransactionType {
}

}

enum WebhookJobStatus {
}

enum WebhookJobSource {
}

enum WebhookJobType {
}

}

enum WebhookJobSortField {
}

}

}

enum WarehouseSortField {
}

model StockCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model StockCountableEdge {
  node String
  cursor String
}

}

model Content {
  publicationDate String?
  isPublished Boolean
  createdAt DateTime
  updatedAt DateTime
  id String @id
  slug String
  isPage Boolean
  lockedBy String?
  lockExpiry DateTime?
  data Json
  draftData Json
  revision Int
  hasActiveDraft Boolean?
  contentPageData String?
}

model ContentPageData {
  seoTitle String?
  seoDescription String?
  id String @id
}

model ContentCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ContentCountableEdge {
  node String
  cursor String
}

}

}

enum ContentSortField {
}

model Media {
  tenant String
  id String @id
  title String
  createdAt String
  image String?
  alt String
}

model MediaCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model MediaCountableEdge {
  node String
  cursor String
}

}

}

enum MediaSortField {
}

model TenantCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model TenantCountableEdge {
  node String
  cursor String
}

model Shop {
  currency String?
  ) String[]
  geolocalization String?
  languageCode String?
  ) String[]
  supportedCurrencies String[]
  defaultCountry String?
  defaultMailSenderName String?
  defaultMailSenderAddress String?
  defaultMailSupportAddress String?
  description String?
  domain String
  apiUrl String?
  dashboardUrl String?
  enableQuoteOrders Boolean?
  enableOfferOrders Boolean?
  name String
  permissions String[]
  phonePrefixes String[]
  includeTaxesInPrices Boolean
  chargeTaxesOnShipping Boolean
  trackInventoryByDefault Boolean?
  defaultWeightUnit String?
  automaticFulfillmentDigitalProducts Boolean?
  defaultDigitalMaxDownloads Int?
  defaultDigitalUrlValidDays Int?
  companyAddress String?
  customerSetPasswordUrl String?
  loginForCheckout Boolean?
  loginForPrice Boolean?
  activePlugins String[]
  crispWebsiteId String?
  geolocationEnabled Boolean?
  requireProductApproval Boolean?
  timezone String
  checkoutTheme String?
  storefrontTheme String?
  sellerOnboardingSettings String?
}

model Geolocalization {
  country String?
}

enum LanguageCodeEnum {
}

model Domain {
  host String
  url String
}

model Plugin {
  id String @id
  privateMetadata Json
  metadata Json
  company String?
  category String?
  descriptionShort String
  logoUrl String?
  created DateTime
  externalUrl String?
  supportUrl String?
  allowSellers Boolean?
  allowManyActivePluginsInCategory Boolean
  tenant String
  identifier String
  name String
  description String
  active Boolean
  configuration String[]
  defaultConfiguration String[]
  supportSellerConfiguration Boolean?
  version String
}

enum PluginConfigurationCategory {
}

model ConfigurationItem {
  name String
  value String?
  type String?
  helpText String?
  label String?
  options String[]
}

enum ConfigurationTypeFieldEnum {
}

model CheckoutTheme {
  id String @id
  confirmationUrl String
}

model StorefrontTheme {
  id String @id
  primaryColor String?
  backgroundColor String?
  logo String?
  faviconImage String?
  faviconUrl String?
  font String?
  fontColor String?
}

model Font {
  id String @id
  name String?
  slug String?
}

model SellerOnboardingSettings {
  id String @id
  isAcceptingNewSellers Boolean?
  summary String?
  welcomeMessage String?
  fulfillmentModel String?
  requiredDocuments String?
  notAcceptingSellersMessage String?
  isProductImportAllowed Boolean?
}

model CustomDomain {
  id String @id
  domain String
  status String
  errorDetails String
  sslCertName String
}

enum DomainStatusEnum {
}

}

model PublicSeller {
  id String @id
  companyName String
  slug String
  size Int?
  ) String?
  status String
  size Int?
  ) String?
  storeDescription String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
  offset Int?
  before String?
  after String?
  first Int?
  last Int?
  ) String
}

model SellerCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model SellerCountableEdge {
  node String
  cursor String
}

}

enum SellerStatusFilter {
}

}

enum SellerSortField {
}

model UserCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model UserCountableEdge {
  node String
  cursor String
}

model AgreementCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model AgreementCountableEdge {
  node String
  cursor String
}

model SellerCards {
  newSellers Int?
  sellerOrders Int?
  sellerCommissions String?
}

enum ReportingPeriod {
}

model SellerDetailCards {
  sellerOrders Int?
  sellerCommissions String?
  sellerSales String?
}

model RefundCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model RefundCountableEdge {
  node String
  cursor String
}

}

}

enum RefundSortField {
}

model DigitalContentCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model DigitalContentCountableEdge {
  node String
  cursor String
}

}

}

enum CategorySortField {
}

}

enum CollectionPublished {
}

enum CollectionVisible {
}

}

enum CollectionSortField {
}

}

enum ProductTypeEnum {
}

enum ProductTypeConfigurable {
}

}

enum ProductTypeSortField {
}

model PriceBookCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookCountableEdge {
  node String
  cursor String
}

}

}

enum PriceBookSortField {
}

model PriceBookVariantCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookVariantCountableEdge {
  node String
  cursor String
}

}

}

enum PriceBookVariantSortField {
}

model PriceBookProductCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookProductCountableEdge {
  node String
  cursor String
}

}

}

enum PriceBookProductSortField {
}

model PriceBookProductTypeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookProductTypeCountableEdge {
  node String
  cursor String
}

}

}

enum PriceBookProductTypeSortField {
}

model PriceBookVariantHistoryCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookVariantHistoryCountableEdge {
  node String
  cursor String
}

model PriceBookVariantHistory {
  id String @id
  priceBook String?
  variantId Int
  valueType String
  currency String
  createdAt String
  price String
  percentage Float
  deleted Boolean
}

enum PriceBookVariantHistoryValueType {
}

}

}

enum PriceBookVariantHistorySortField {
}

model PriceBookProductHistoryCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookProductHistoryCountableEdge {
  node String
  cursor String
}

model PriceBookProductHistory {
  id String @id
  priceBook String?
  productId Int
  valueType String
  currency String
  createdAt String
  price String
  percentage Float
  deleted Boolean
}

enum PriceBookProductHistoryValueType {
}

}

}

enum PriceBookProductHistorySortField {
}

model PriceBookProductTypeHistoryCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PriceBookProductTypeHistoryCountableEdge {
  node String
  cursor String
}

model PriceBookProductTypeHistory {
  id String @id
  priceBook String?
  productTypeId Int
  valueType String
  currency String
  createdAt String
  price String
  percentage Float
  deleted Boolean
}

enum PriceBookProductTypeHistoryValueType {
}

}

}

enum PriceBookProductTypeHistorySortField {
}

}

enum UserSortField {
}

model PluginCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PluginCountableEdge {
  node String
  cursor String
}

}

}

enum PluginSortField {
}

model TaxCertificate {
  id Int?
  companyId String?
  signedDate String?
  expirationDate String?
  filename String?
  documentExists Boolean?
  downloadUrl String?
  valid Boolean?
  verified Boolean?
  exemptPercentage String?
  isSingleCertificate Boolean?
  exemptionNumber String?
  exemptionReasonName String?
  exemptionReasonId Int?
  status String?
  createdDate String?
  modifiedDate String?
  taxNumberType String?
  businessNumberType String?
  exposureZoneName String?
}

model CatalogImportProcess {
  status String
  message String?
  createdAt DateTime
  updatedAt DateTime
  taskId String?
  externalSource String
  finishedAt DateTime?
  createdBy String?
  seller String?
  internalNotes String?
  id String @id
  filter String?
  sortBy String?
  before String?
  after String?
  first Int?
  last Int?
  ) String?
}

enum CatalogImportProcessStatus {
}

model CatalogImportProcessLogRecordCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CatalogImportProcessLogRecordCountableEdge {
  node String
  cursor String
}

model CatalogImportProcessLogRecord {
  id String @id
  createdAt DateTime
  taskId String?
  objectId String?
  operation String
  relatedObjectName String?
}

enum CatalogImportProcessLogRecordOperation {
}

}

enum CatalogImportOperation {
}

}

enum CatalogImportProcessLogRecordSortField {
}

model CatalogImportProcessCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CatalogImportProcessCountableEdge {
  node String
  cursor String
}

}

}

enum CatalogImportProcessSortField {
}

model TaxExemptCode {
  code String
  name String
  description String
  validCountries String[]
}

model TypeformForms {
  totalItems Int?
  pageCount Int?
  items String[]
}

model TypeformFormsItem {
  Links String?
  id String?
  lastUpdatedAt String?
  self String?
  theme String?
  title String?
}

model TypeformFormsItemLink {
  display String?
}

model TypeformFormsItemSelf {
  href String?
}

model TypeformForm {
  id String?
  title String?
  language String?
  fields String[]
  hidden String[]
}

model TypeformFormFields {
  attachment String?
  fieldType String?
  id String?
  layout String?
  name String?
  options String[]
  ref String?
  required Boolean?
  title String?
  properties String?
  type String?
}

model TypeformFormAttachment {
  type String?
  href String?
  properties String?
}

model TypeformFormProperties {
  description String?
  fields String[]
}

model TypeformGroupProperties {
  id String?
  title String?
  ref String?
  type String?
}

model TypeformFormLayout {
  type String?
  placement String?
  attachment String?
}

model TypeformFormOption {
  label String?
}

model Flow {
  id String @id
  tenant String
  identifier String
  seller String?
  process String
  mapping Json
  formId String
}

enum FlowProcess {
}

}

}

model AvalaraRequestLogCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model AvalaraRequestLogCountableEdge {
  node String
  cursor String
}

model AvalaraRequestLog {
  createdAt DateTime
  requestUrl String?
  requestData Json
  responseData Json
  error String?
  id String @id
}

model CheckoutEventCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CheckoutEventCountableEdge {
  node String
  cursor String
}

model CheckoutEvent {
  tenant String
  id String @id
  createdAt DateTime
  type String
  checkoutId String
}

enum CheckoutEventType {
}

}

}

enum CheckoutEventSortField {
}

model PayoutCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PayoutCountableEdge {
  node String
  cursor String
}

}

enum PayoutStatusFilter {
}

}

enum PayoutSortField {
}

model VendorPayoutReport {
  included String?
  excluded String?
}

model VendorPayoutReportSubset {
  category String?
  columns String[]
  filters String[]
  summary String?
  report String[]
  title String?
}

model ColumnObjectType {
  display String
  fieldType String
  name String
  order Int
}

model FilterObjectType {
  display String
  fieldType String
  name String
  placeholder String
  required Boolean
  value String?
}

model OrderVendorSummaryType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  vendors Int?
  adjustments Decimal?
  penalties Decimal?
  refunds Decimal?
  fees Decimal?
}

model OrderVendorReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  vendorId Int?
  vendor String?
  vendorPayout String?
  adjustments Decimal?
  penalties Decimal?
  refunds Decimal?
  fees Decimal?
}

model SingleVendorPayoutReport {
  payouts String[]
  summary String?
}

model SingleVendorReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Decimal?
  adjustments Decimal?
  penalties Decimal?
  refunds Decimal?
  fees Decimal?
  startDate String?
  endDate String?
  payoutEndDate String?
  status String?
  vendorPayout String?
}

model SingleVendorSummaryType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  adjustments Decimal?
  penalties Decimal?
  refunds Decimal?
  fees Decimal?
}

model PaymentCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PaymentCountableEdge {
  node String
  cursor String
}

model Page {
  id String @id
  publicationDate String?
  createdAt DateTime
  updatedAt DateTime
  content String
  contentHtml String
  seoTitle String?
  seoDescription String?
  slug String
  title String
  privateMetadata String[]
  metadata String[]
  isPublished Boolean
}

model PageCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model PageCountableEdge {
  node String
  cursor String
}

}

enum PageSortField {
}

}

model OrderEventCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model OrderEventCountableEdge {
  node String
  cursor String
}

model NauticalOrderEventCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model NauticalOrderEventCountableEdge {
  node String
  cursor String
}

}

}

}

}

}

enum QuoteOrderSubStatusFilter {
}

}

model FulfillmentCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model FulfillmentCountableEdge {
  node String
  cursor String
}

}

enum FulfillmentStatusFilter {
}

}

enum ReturnFulfillmentSortField {
}

model OptimizedHome {
  sales String?
  orders Int?
  toFulfill Int?
  toCapture Int?
  outOfStock Int?
  topProducts String[]
  sellerActivities String[]
  marketplaceActivities String[]
}

model NauticalConfiguration {
  configurationName String?
  configurationValue Boolean?
  configurationValueDatetime DateTime?
  configurationValueString String?
}

model MicrositeCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model MicrositeCountableEdge {
  node String
  cursor String
}

}

enum MicrositePublished {
}

}

enum MicrositeSortField {
}

model Menu {
  id String @id
  name String
  slug String
  items String[]
}

model MenuItem {
  id String @id
  menu String
  name String
  parent String?
  category String?
  collection String?
  page String?
  level Int
  children String[]
  url String?
}

model MenuCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model MenuCountableEdge {
  node String
  cursor String
}

}

enum MenuSortField {
}

}

model MenuItemCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model MenuItemCountableEdge {
  node String
  cursor String
}

}

enum MenuItemsSortField {
}

}

model MarketplaceConfiguration {
  tenant String
  id String
  marketplaceName String
  requireProductApproval Boolean
  requireProductTypes Boolean
  payoutAutomationStrategy String?
  domiciledCurrency String
  supportedCurrencies String[]
  defaultCountry String
  supportedCountries String[]
  sellerCanSendQuote Boolean
  variantUniqueness String?
  defaultSellerChecklists String[]
  enableStockAllocationForQuotes Boolean
  enableStockAllocationForOffers Boolean?
  reason String?
  enableStockAllocationForDrafts Boolean
  validateStockOnOrderPaymentCreation Boolean
  timezone String
  enableBackorders Boolean
  revenueAccrualStrategy String?
  availableShippingStrategy String?
  attributeTemplateStrategy String
  fulfillmentModel String
  defaultWeightUnit String?
  automaticFulfillmentDigitalProducts Boolean
  defaultDigitalMaxDownloads Int?
  defaultDigitalUrlValidDays Int?
  trackInventoryByDefault Boolean
  description String
  name String
  companyAddress String?
  defaultMailSenderName String?
  defaultMailSenderAddress String?
  defaultMailSupportAddress String?
  customerSetPasswordUrl String?
  includeTaxesInPrices Boolean
  chargeTaxesOnShipping Boolean
}

enum MarketplaceConfigurationPayoutAutomationStrategyEnum {
}

enum MarketplaceConfigurationCurrencyEnum {
}

enum VariantUniquenessEnum {
}

model DefaultSellerChecklist {
  title String
  description String
  completeOn String?
  isEnabled Boolean
}

enum RevenueAccrualStrategyEnum {
}

enum AvailableShippingStrategyEnum {
}

enum MarketplaceConfigurationAttributeTemplateStrategy {
}

enum FulfillmentModelEnum {
}

model EmailEventCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model EmailEventCountableEdge {
  node String
  cursor String
}

model EmailEvent {
  id String @id
  tenant String
  date DateTime
  fromEmail String
  toEmails String[]
  bccEmails String[]
  ccEmails String[]
  messageType String
  emailPluginId String
  template String?
  payload Json
  error String?
}

enum EmailEventMessageType {
}

}

enum NotifyEventTypeEnum {
}

}

enum EmailEventSortField {
}

model LocationSuggestion {
  label String
  address String?
}

model Coordinates {
  label String?
  latitude Decimal?
  longitude Decimal?
}

model InReportOrderCustomerSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model OrderSellerSummaryType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  sellers Float?
}

model OrderCustomerReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  userId Int?
  user String?
}

model InReportOrderSellerSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model OrderSellerReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  sellerId Int?
  seller String?
}

model InReportOrderMarketplaceSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model OrderMarketplaceReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  dimension String?
}

enum InsightDimensionEnum {
}

model InReportMarketplacePayoutsSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model InReportMarketplaceTaxSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model AbstractOrderSellerReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
}

model MarketplaceTaxReportType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  dimension String?
}

model InReportMarketplaceTaxesByCountryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model MarketplaceTaxReportByLocaleType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  billingAddress_Country String?
  billingAddress_CountryArea String?
  countryArea String?
  country String?
  countryName String?
  countryAreaName String?
  countryState String?
}

model CountryState {
  area String?
  areaName String?
  country String?
  countryName String?
}

model InReportTopPerformingProductsType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model AbstractProductVariantType {
  totals Int?
  grossRevenue Float?
  quantityOrdered Int?
  avgPriceGrossAmount Float?
  maxPriceGrossAmount Float?
  minPriceGrossAmount Float?
  revenue Float?
  avgPrice Float?
  maxPrice Float?
  minPrice Float?
}

model ProductVariantReportType {
  totals Int?
  grossRevenue Float?
  quantityOrdered Int?
  avgPriceGrossAmount Float?
  maxPriceGrossAmount Float?
  minPriceGrossAmount Float?
  revenue Float?
  avgPrice Float?
  maxPrice Float?
  minPrice Float?
  productId Int
  product String
  name String
  id String @id
}

enum PerformancePerspective {
}

model InReportTopPerformingCategoriesType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model ProductCategoryReportType {
  totals Int?
  grossRevenue Float?
  quantityOrdered Int?
  avgPriceGrossAmount Float?
  maxPriceGrossAmount Float?
  minPriceGrossAmount Float?
  revenue Float?
  avgPrice Float?
  maxPrice Float?
  minPrice Float?
  product_CategoryId Int?
  category String?
}

model InReportMarketplacePaymentsSummaryType {
  category String
  title String
  Description of main columns in report and summary. Note String?
  columns String[]
  filters String[]
  summary String
  report String[]
}

model AbstractPaymentsType {
  payments Int?
  totalAuthorized Float?
  captured Float?
  average Float?
}

model PaymentsDayReportType {
  payments Int?
  totalAuthorized Float?
  captured Float?
  average Float?
  dimension String?
  chargeStatus String?
}

model DashboardOrdersSummaryType {
  filters String[]
  current String?
  previous String?
  deltas String?
  ordersToFulfill Int?
  paymentsToProcess Int?
  returnsToProcess Int?
  pendingReviews Int?
  pendingPayouts Int?
}

model OrderSummaryDeltaDataType {
  percent String?
  values String?
}

model AbstractPercentReportType {
  gross Float?
  orders Float?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Float?
}

model DashboardTopSellerPerformanceType {
  filters String[]
  current String[]
  previous String[]
}

model DashboardSellerOrderPerformanceType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  sellerId Int?
  seller String?
}

model DashboardGraphType {
  filters String[]
  graph String[]
}

model GraphDataType {
  gross Float?
  orders Int?
  net Float?
  shipping Float?
  average Float?
  taxes Float?
  discounts Float?
  volumeDiscounts Float?
  revenue Float?
  totals Int?
  commission Float?
  payout Float?
  dimension DateTime?
}

model FontCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model FontCountableEdge {
  node String
  cursor String
}

model JournalEntryCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model JournalEntryCountableEdge {
  node String
  cursor String
}

model JournalEntry {
  createdAt DateTime
  updatedAt DateTime
  id String @id
  description String
  fulfillmentLine String?
  nauticalOrder String?
  order String?
  orderLine String?
  payment String?
  refund String?
  refundLine String?
  vendorPayout String?
  type String
  privateMetadata String[]
  metadata String[]
  ledgerEntries String[]
}

enum JournalEntryTypeEnum {
}

model LedgerEntry {
  createdAt DateTime
  updatedAt DateTime
  id String @id
  journalEntry String
  ledger String
  ledgerVersion String
  privateMetadata String[]
  metadata String[]
  amount String
  ledgerBalance String
}

model Ledger {
  id String @id
  accountType String
  balance String
  seller String?
  type String
  version String
  privateMetadata String[]
  metadata String[]
  buyer String?
}

enum LedgerAccountTypeEnum {
}

enum LedgerTypeEnum {
}

}

}

enum JournalEntrySortField {
}

model LedgerCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model LedgerCountableEdge {
  node String
  cursor String
}

}

}

enum LedgerSortField {
}

model SaleCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model SaleCountableEdge {
  node String
  cursor String
}

}

enum DiscountStatusEnum {
}

}

enum SaleSortField {
}

model VoucherCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model VoucherCountableEdge {
  node String
  cursor String
}

}

enum VoucherDiscountType {
}

}

enum VoucherSortField {
}

model DesignerDataType {
  tenant String
  id String @id
  name String
  jsonContent Json
}

model ExportFile {
  id String @id
  user String?
  app String?
  status String
  createdAt DateTime
  updatedAt DateTime
  message String?
  url String?
  events String[]
}

model ExportEvent {
  id String @id
  date DateTime
  type String
  user String?
  app String?
  message String
}

enum ExportEventsEnum {
}

model ExportFileCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model ExportFileCountableEdge {
  node String
  cursor String
}

}

}

enum ExportFileSortField {
}

model CheckoutCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CheckoutCountableEdge {
  node String
  cursor String
}

model CheckoutLineCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model CheckoutLineCountableEdge {
  node String
  cursor String
}

}

enum AttributeSortField {
}

model CustomFieldTemplate {
  id String @id
  createdAt DateTime
  updatedAt DateTime
  contentType String?
  customAttributes String[]
}

enum CustomFieldTemplateEnum {
}

model AppInstallation {
  appName String
  manifestUrl String
  id String @id
  status String
  createdAt DateTime
  updatedAt DateTime
  message String?
}

model AppCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model AppCountableEdge {
  node String
  cursor String
}

}

}

enum AppSortField {
}

}

enum AgreementSortField {
}

}

model AddressValidationData {
  countryCode String?
  countryName String?
  addressFormat String?
  addressLatinFormat String?
  allowedFields String[]
  requiredFields String[]
  upperFields String[]
  countryAreaType String?
  countryAreaChoices String[]
  cityType String?
  cityChoices String[]
  cityAreaType String?
  cityAreaChoices String[]
  postalCodeType String?
  postalCodeMatchers String[]
  postalCodeExamples String[]
  postalCodePrefix String?
}

model ChoiceValue {
  raw String?
  verbose String?
}

}

model GroupCountableConnection {
  pageInfo String
  edges String[]
  totalCount Int?
}

model GroupCountableEdge {
  node String
  cursor String
}

}

}

enum PermissionGroupSortField {
}

}

enum StaffMemberStatus {
}

model _Service {
  sdl String?
}

model Mutation {
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  Add or attach a document to any allowed entity (note String?
  description String?
  Used when uploading a new document or file in a multipart request that does not exist in the system already. Supported file types String?
  file String
  relatedObjectId String @id
  ) String?
  id String @id
  input String
  ) String?
  documentId String @id
  ids String @id[]
  ) String?
  delete String?
  id String @id
  targetIds String @id[]
  ) String?
  input String[]
  ) String?
  input String
  ) String?
  input String
  ) String?
  id String @id?
  input String?
  ) String?
  id String @id
  ) String?
  id String @id
  input String?
  ) String?
  id String @id
  input String
  ) String?
  ids String @id[]
  ) String?
  payoutId String @id
  sellerId String @id
  ) String?
  id String @id
  input String
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  ) String?
  gateway String @id
  ids String @id[]
  ) String?
  input String
  vendorPayoutId String @id
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  wishlistId String @id
  ) String?
  id String @id
  input String
  ) String?
  productId String @id
  userId String @id?
  wishlistId String @id?
  ) String?
  productId String @id
  userId String @id?
  wishlistId String @id?
  ) String?
  userId String @id?
  variantId String @id
  wishlistId String @id?
  ) String?
  userId String @id?
  variantId String @id
  wishlistId String @id?
  ) String?
  micrositeId String @id
  products String @id[]
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  micrositeId String @id
  moves String[]
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  isPublished Boolean
  ) String?
  micrositeId String @id
  products String @id[]
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  isPublished Boolean
  ) String?
  id String @id
  input String
  ) String?
  input String?
  ) String?
  id String @id
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  input String?
  ) String?
  id String @id
  input String?
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  defaultBillingAddress String?
  defaultShippingAddress String?
  seller String
  user String
  ) String?
  image String
  seller String @id?
  ) String?
  id String @id
  ) String?
  banner String
  seller String @id
  ) String?
  id String @id
  ) String?
  input String
  sellerId String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  addressId String @id
  sellerId String @id
  type String
  ) String?
  id String @id
  input String
  ) String?
  id String?
  isCompleted String?
  ) String?
  id String @id
  input String
  ) String?
  input String?
  name String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  ids String @id[]
  ) String?
  input String?
  ) String?
  input String
  ) String?
  reason String?
  shopFetchTaxRates String?
  input String?
  ) String?
  reason String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  status String
  ) String?
  lineItems String[]
  refundId String @id
  ) String?
  lineItems String[]
  refundId String @id
  ) String?
  ids String @id[]
  refundId String @id
  ) String?
  payments String[]
  refund String @id
  ) String?
  payments String[]
  refund String @id
  ) String?
  ids String @id[]
  refundId String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  input String
  parent String @id?
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  collectionId String @id
  products String @id[]
  ) String?
  collectionId String @id
  variants String @id[]
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  collectionId String @id
  moves String[]
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  isPublished Boolean
  ) String?
  collectionId String @id
  products String @id[]
  ) String?
  collectionId String @id
  variants String @id[]
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  isPublished Boolean
  ) String?
  category String @id
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  isAvailable Boolean
  productId String @id
  startDate String?
  ) String?
  input String
  ) String?
  moves String[]
  productId String @id
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  imagesIds String @id[]
  productId String @id
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  moves String[]
  productTypeId String @id
  type String
  ) String?
  input String
  variantId String @id
  ) String?
  variantId String @id
  ) String?
  input String
  variantId String @id
  ) String?
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  product String @id
  variants String[]
  ) String?
  ids String @id[]
  ) String?
  stocks String[]
  variantId String @id
  ) String?
  variantId String @id
  warehouseIds String @id[]
  ) String?
  stocks String[]
  variantId String @id
  ) String?
  id String @id
  input String
  ) String?
  productId String @id
  variantId String @id
  ) String?
  imageId String @id
  transferImageOwnership Boolean?
  variantId String @id
  ) String?
  imageId String @id
  variantId String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  input String
  productId String @id?
  ) String?
  input String
  locationId String @id?
  productId String @id?
  ) String?
  locationId String @id?
  productId String @id?
  ) String?
  locationId String @id?
  productId String @id?
  type String
  ) String?
  amount String?
  paymentId String @id
  ) String?
  paymentId String @id
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  isPublished Boolean
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  paymentData Json?
  seller String @id
  ) String?
  id String @id?
  paymentData Json?
  token String?
  ) String?
  currency String
  orderId String @id
  ) String?
  currency String
  nauticalOrderId String @id
  ) String?
  input String
  ) String?
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String[]
  ) String?
  id String @id
  input String[]
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id?
  input String
  token String?
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  order String @id
  input String
  ) String?
  order String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  order String @id
  input String
  ) String?
  id String @id
  ) String?
  id String @id?
  voucherCode String?
  ) String?
  id String @id?
  ) String?
  order String @id
  input String
  ) String?
  order String @id
  input String
  ) String?
  order String @id
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  amount String
  id String @id
  paymentId String @id?
  ) String?
  input String
  order String @id?
  ) String?
  input String
  order String @id?
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  input String[]
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  order String @id
  input String?
  ) String?
  order String @id
  input String?
  ) String?
  order String @id
  input String?
  ) String?
  id String @id
  paymentId String @id?
  ) String?
  ids String @id[]
  ) String?
  ids String @id[]
  ) String?
  input String
  orderId String @id
  ) String?
  id String @id
  storefrontUrl String
  ) String?
  reason String?
  input String
  ) String?
  id String @id
  ) String?
  file String
  orderId String @id
  ) String?
  file String
  orderId String @id
  ) String?
  id String @id
  keys String[]
  ) String?
  id String @id
  keys String[]
  ) String?
  id String @id
  input String[]
  ) String?
  id String @id
  input String[]
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  menu String @id
  moves String[]
  ) String?
  Document type (for order requests) String?
  documentType Int?
  number String?
  orderId String @id?
  refundId String @id?
  ) String?
  id String @id
  ) String?
  input String
  orderId String @id
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  Document type String?
  documentType Int?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id?
  sellerId String @id?
  ) String?
  id String @id?
  sellerId String @id?
  ) String?
  id String @id?
  sellerId String @id?
  ) String?
  id String @id
  input String?
  ) String?
  id String @id
  ) String?
  gateway String
  refreshUrl String
  returnUrl String
  vendorId String @id
  vendorType String?
  ) String?
  plugin String
  ) String?
  checkoutId String
  type String
  ) String?
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  input String
  ) String?
  dashboardEmbeddingToken String?
  input String
  ) String?
  file String
  ) String?
  checkoutId String @id
  promoCode String
  ) String?
  billingAddress String
  checkoutId String @id
  ) String?
  checkoutId String @id
  microsite String @id?
  paymentData Json?
  poNumber String?
  redirectUrl String?
  storeSource String?
  userOverride String @id?
  vehicles String?
  volumeDiscount Float?
  ) String?
  checkoutId String @id
  ) String?
  input String
  ) String?
  checkoutId String @id
  ) String?
  checkoutId String @id
  ) String?
  checkoutId String @id?
  email String
  ) String?
  checkoutId String @id?
  currency String
  ) String?
  checkoutId String @id
  note String
  ) String?
  checkoutId String @id
  lineId String @id?
  ) String?
  checkoutId String @id
  lines String[]
  ) String?
  checkoutId String @id
  lines String[]
  ) String?
  checkoutId String @id
  promoCode String
  ) String?
  checkoutId String @id
  input String
  ) String?
  checkoutId String @id
  shippingAddress String
  ) String?
  checkoutId String @id
  seller String @id
  shippingMethodPriceOverrideAmount String?
  reason String?
  shippingMethodSelection String @id
  ) String?
  checkoutId String @id
  shippingMethodSelection String @id
  ) String?
  checkoutId String @id
  sellerShippingMethods String[]
  ) String?
  checkoutId String @id
  ) String?
  token String
  ) String?
  checkoutId String @id
  poNumbers String[]
  ) String?
  checkoutId String @id
  poNumber String
  ) String?
  id String @id
  input String
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  operations String[]
  productTypeId String @id
  ) String?
  attributeIds String @id[]
  productTypeId String @id
  ) String?
  id String @id
  input String
  ) String?
  operations String[]
  template String
  ) String?
  attributeIds String @id[]
  template String
  ) String?
  attributeId String @id
  custom Boolean
  instanceId String @id
  ) String?
  attribute String @id
  input String
  ) String?
  id String @id
  ) String?
  attribute String @id
  values String[]
  ) String?
  ids String @id[]
  ) String?
  id String @id
  input String
  ) String?
  attributeId String @id
  moves String[]
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  input String
  ) String?
  id String @id
  ) String?
  token String
  ) String?
  input String
  ) String?
  activateAfterInstallation String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  id String @id
  ) String?
  oauthProviderSource String
  oauthProviderToken String
  ) String?
  email String
  password String
  ) String?
  provider String?
  ) String?
  accessCode String
  ) String?
  csrfToken String?
  refreshToken String?
  ) String?
  token String
  ) String?
  tokensDeactivateAll String?
  email String
  redirectUrl String?
  ) String?
  email String
  token String
  ) String?
  email String
  password String
  token String
  ) String?
  newPassword String
  oldPassword String
  ) String?
  newEmail String
  password String
  redirectUrl String
  ) String?
  token String
  ) String?
  input String
  type String?
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  id String @id
  type String
  ) String?
  input String
  ) String?
  input String
  ) String?
  redirectUrl String
  ) String?
  token String
  ) String?
  input String
  userId String @id
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  addressId String @id
  type String
  userId String @id
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
  ids String @id[]
  ) String?
  image String
  user String @id
  ) String?
  user String @id
  ) String?
  ids String @id[]
  isActive Boolean
  ) String?
  input String
  ) String?
  id String @id
  input String
  ) String?
  id String @id
  ) String?
}

model EmailTemplateUpdate {
  emailTemplate String?
  notificationErrors String[]
}

model NotificationError {
  field String?
  message String
  code String
}

enum NotificationErrorCode {
}

}

model TenantUpdate {
  tenant String?
  tenantErrors String[]
}

model TenantError {
  field String?
  message String
  code String
}

enum TenantErrorCode {
}

}

model DocumentAdd {
  document String?
  instances String[]
  documentErrors String[]
}

model DocumentError {
  field String?
  message String
  code String
}

enum DocumentErrorCode {
}

model DocumentUpdate {
  document String?
  documentErrors String[]
}

}

model DocumentAttach {
  document String?
  instances String[]
  documentErrors String[]
}

model DocumentRemove {
  instances String[]
  documentErrors String[]
}

model NauticalConfigurationUpdate {
  nauticalConfigurationList String[]
  nauticalConfigurationErrors String[]
}

model NauticalConfigurationError {
  field String?
  message String
  code String
}

enum NauticalConfigurationErrorCode {
}

}

model MarketplaceConfigurationUpdate {
  marketplaceConfiguration String?
  marketplaceConfigurationErrors String[]
}

model MarketplaceConfigurationError {
  field String?
  message String
  code String
}

enum MarketplaceConfigurationErrorCode {
}

}

enum AttributeTemplateStrategyEnum {
}

}

model PayoutCreate {
  payoutErrors String[]
  payout String?
}

model PayoutError {
  field String?
  message String
  code String
}

enum PayoutErrorCode {
}

}

model PayoutUpdate {
  payout String?
  payoutErrors String[]
}

}

}

model PayoutDelete {
  payoutErrors String[]
  payout String?
}

model PayoutStatusUpdate {
  payout String?
  payoutErrors String[]
}

}

}

model PayoutDatesUpdate {
  payoutErrors String[]
  payout String?
}

}

model PayoutBulkArchive {
  count Int
  payoutErrors String[]
}

model VendorPayoutCreate {
  vendorPayout String?
  payoutErrors String[]
}

model VendorPayoutStatusUpdate {
  vendorPayout String?
  payoutErrors String[]
}

}

model VendorPayoutsBulkInclude {
  count Int
  payoutErrors String[]
}

model VendorPayoutsBulkExclude {
  count Int
  payoutErrors String[]
}

model VendorPayoutsBulkProcess {
  count Int
  payoutErrors String[]
}

model VendorPayoutNoteAdd {
  vendorPayout String?
  event String?
  payoutErrors String[]
}

}

model VendorPayoutNoteUpdate {
  vendorPayout String?
  event String?
  payoutErrors String[]
}

}

model WishlistCreate {
  wishlistErrors String[]
  wishlist String?
}

model WishlistError {
  field String?
  message String
  code String
}

enum WishlistErrorCode {
}

}

model WishlistCreateForBuyer {
  wishlistErrors String[]
  wishlist String?
}

}

model WishlistUpdate {
  wishlistErrors String[]
  wishlist String?
}

model WishlistDelete {
  wishlistErrors String[]
  wishlist String?
}

model WishlistSetDefault {
  wishlist String?
  wishlistErrors String[]
}

model WishlistItemUpdate {
  wishlistErrors String[]
  wishlistItem String?
}

}

model WishlistAddProduct {
  wishlist String[]
  wishlistErrors String[]
}

model WishlistRemoveProduct {
  wishlist String[]
  wishlistErrors String[]
}

model WishlistAddProductVariant {
  wishlist String[]
  wishlistErrors String[]
}

model WishlistRemoveProductVariant {
  wishlist String[]
  wishlistErrors String[]
}

model MicrositeAddProducts {
  microsite String?
  micrositeErrors String[]
}

model ProductError {
  field String?
  message String
  code String
  attributes String @id[]
}

enum ProductErrorCode {
}

model MicrositeCreate {
  micrositeErrors String[]
  microsite String?
}

}

}

model MicrositeDelete {
  micrositeErrors String[]
  microsite String?
}

model MicrositeReorderProducts {
  microsite String?
  micrositeErrors String[]
}

}

model MicrositeBulkDelete {
  count Int
  micrositeErrors String[]
}

model MicrositeBulkPublish {
  count Int
  micrositeErrors String[]
}

model MicrositeRemoveProducts {
  microsite String?
  micrositeErrors String[]
}

model MicrositeUpdate {
  micrositeErrors String[]
  microsite String?
}

}

model AgreementCreate {
  agreementErrors String[]
  agreement String?
}

model AgreementError {
  field String?
  message String
  code String
}

enum AgreementErrorCode {
}

}

model AgreementDelete {
  agreementErrors String[]
  agreement String?
}

model AgreementBulkDelete {
  count Int
  agreementErrors String[]
}

model AgreementBulkPublish {
  count Int
  agreementErrors String[]
}

model AgreementUpdate {
  agreementErrors String[]
  agreement String?
}

model AgreementFeeCreate {
  agreementErrors String[]
  agreementFees String?
}

}

model AgreementFeeDelete {
  agreementErrors String[]
  agreementFees String?
}

model AgreementCommissionCreate {
  agreementErrors String[]
  agreementCommission String?
}

}

enum AgreementGranularCommissionType {
}

model AgreementCommissionDelete {
  agreementErrors String[]
  agreementCommission String?
}

model SellerAgreementAcknowledge {
  user String?
  agreementErrors String[]
}

}

model SellerAgreementDecline {
  user String?
  agreementErrors String[]
}

}

model SellerAgreementAssign {
  agreementErrors String[]
  sellerAgreement String?
}

}

model SellerAgreementDelete {
  agreementErrors String[]
  agreementSellers String?
}

model SellerWithOwnerCreate {
  seller String?
  sellerErrors String[]
}

model SellerError {
  field String?
  message String
  code String
}

enum SellerErrorCode {
}

}

}

}

model SellerDataCreate {
  ok Boolean?
  seller String?
  sellerErrors String[]
}

}

}

enum SellerStatusEnum {
}

model SellerUserMappingCreate {
  ok Boolean?
  sellerUser String?
  sellerErrors String[]
}

}

model SellerDataUpdate {
  ok Boolean?
  seller String?
  sellerErrors String[]
}

}

model SellerNoteCreate {
  ok Boolean?
  note String?
  sellerErrors String[]
}

}

model SellerLogoUpdate {
  seller String?
  sellerErrors String[]
}

model SellerLogoDelete {
  seller String?
  sellerErrors String[]
}

model SellerBannerUpdate {
  seller String?
  sellerErrors String[]
}

model SellerBannerDelete {
  seller String?
  sellerErrors String[]
}

model SellerAddressCreate {
  seller String?
  sellerErrors String[]
  address String?
}

model SellerAddressUpdate {
  seller String?
  sellerErrors String[]
  address String?
}

model SellerAddressDelete {
  seller String?
  sellerErrors String[]
  address String?
}

model SellerAddressSetDefault {
  seller String?
  sellerErrors String[]
}

enum AddressTypeEnum {
}

model SellerOwnerDelete {
  seller String?
  sellerErrors String[]
}

model SellerShellCreate {
  ok Boolean?
  seller String?
  sellerErrors String[]
}

model SellerSettingsUpdate {
  seller String?
  sellerErrors String[]
}

}

model SellerOnboardingChecklistComplete {
  checklist String?
  checklistErrors String[]
}

model SellerOnboardingChecklistError {
  field String?
  message String
  code String
}

enum SellerOnboardingChecklistErrorCode {
}

model SellerApplicationUpdate {
  seller String?
  sellerErrors String[]
}

}

model DesignerDataCreate {
  ok Boolean?
  designerdata String?
  designerErrors String[]
}

}

model DesignerDataUpdate {
  ok Boolean?
  designerdata String?
  designerErrors String[]
}

model WebhookCreate {
  webhookErrors String[]
  webhook String?
}

model WebhookError {
  field String?
  message String
  code String
}

enum WebhookErrorCode {
}

}

model WebhookDelete {
  webhookErrors String[]
  webhook String?
}

model WebhookUpdate {
  webhookErrors String[]
  webhook String?
}

}

model WarehouseCreate {
  warehouseErrors String[]
  warehouse String?
}

model WarehouseError {
  field String?
  message String
  code String
}

enum WarehouseErrorCode {
}

}

}

model WarehouseUpdate {
  warehouseErrors String[]
  warehouse String?
}

}

model WarehouseDelete {
  warehouseErrors String[]
  warehouse String?
}

model ContentPageDataCreate {
  contentPageData String?
  shopErrors String[]
}

model ShopError {
  field String?
  message String
  code String
}

enum ShopErrorCode {
}

}

model ContentPageDataUpdate {
  contentPageData String?
  shopErrors String[]
}

}

model ContentCreate {
  content String?
  shopErrors String[]
}

}

model ContentSave {
  content String?
  shopErrors String[]
}

}

model ContentDiscard {
  content String?
  shopErrors String[]
}

model ContentPublish {
  content String?
  shopErrors String[]
}

}

model ContentDelete {
  shopErrors String[]
  content String?
}

model ContentDuplicate {
  content String?
  shopErrors String[]
}

}

model MediaCreate {
  media String?
  shopErrors String[]
}

}

model MediaUpdate {
  media String?
  shopErrors String[]
}

}

model MediaBulkDelete {
  count Int
  shopErrors String[]
}

model ShopDomainUpdate {
  shop String?
  shopErrors String[]
}

}

model ShopSettingsUpdate {
  shop String?
  shopErrors String[]
}

}

model ShopFetchTaxRates {
  shop String?
  shopErrors String[]
}

model ShopAddressUpdate {
  shop String?
  shopErrors String[]
}

model CheckoutThemeCreate {
  shop String?
  shopErrors String[]
}

}

model CheckoutThemeUpdate {
  shop String?
  shopErrors String[]
}

}

model CustomDomainCreate {
  domain String?
  shopErrors String[]
}

}

model CustomDomainDelete {
  shopErrors String[]
  domain String?
}

model StorefrontThemeCreate {
  shop String?
  shopErrors String[]
}

}

model StorefrontThemeUpdate {
  shop String?
  shopErrors String[]
}

model SellerOnboardingSettingsCreate {
  shop String?
  shopErrors String[]
}

}

model SellerOnboardingSettingsUpdate {
  shop String?
  shopErrors String[]
}

}

model ShippingPriceCreate {
  shippingZone String?
  shippingErrors String[]
  shippingMethod String?
}

model ShippingError {
  field String?
  message String
  code String
  warehouses String @id[]
}

enum ShippingErrorCode {
}

}

model ShippingPriceDelete {
  shippingMethod String?
  shippingZone String?
  shippingErrors String[]
}

model ShippingPriceBulkDelete {
  count Int
  shippingErrors String[]
}

model ShippingPriceUpdate {
  shippingZone String?
  shippingErrors String[]
  shippingMethod String?
}

model ShippingZoneCreate {
  shippingErrors String[]
  shippingZone String?
}

}

}

model ShippingZoneDelete {
  shippingErrors String[]
  shippingZone String?
}

model ShippingZoneBulkDelete {
  count Int
  shippingErrors String[]
}

model ShippingZoneUpdate {
  shippingErrors String[]
  shippingZone String?
}

}

model RefundCreate {
  refundErrors String[]
  refund String?
}

model RefundError {
  field String?
  message String
  code String
}

enum RefundErrorCode {
}

}

model RefundUpdate {
  refundErrors String[]
  refund String?
}

}

model RefundBulkDelete {
  count Int
  refundErrors String[]
}

model RefundsChangeStatus {
  count Int
  refundErrors String[]
}

model RefundLinesAdd {
  refund String?
  refundErrors String[]
}

}

model RefundLinesUpdate {
  refund String?
  refundErrors String[]
}

}

model RefundLineBulkDelete {
  count Int
  refundErrors String[]
}

model RefundPaymentsAdd {
  refund String?
  refundErrors String[]
}

}

model RefundPaymentsUpdate {
  refund String?
  refundErrors String[]
}

}

model RefundPaymentsDelete {
  count Int
  refundErrors String[]
}

model PriceBookCreate {
  priceBookErrors String[]
  priceBook String?
}

model PriceBookError {
  field String?
  message String
  code String
}

enum PriceBookErrorCode {
}

}

model PriceBookUpdate {
  priceBookErrors String[]
  priceBook String?
}

}

model PriceBookDelete {
  priceBookErrors String[]
  priceBook String?
}

model PriceBookBulkDelete {
  count Int
  priceBookErrors String[]
}

model PriceBookVariantCreate {
  priceBookErrors String[]
  priceBookVariant String?
}

}

enum PriceBookValueTypeEnum {
}

model PriceBookVariantUpdate {
  priceBookErrors String[]
  priceBookVariant String?
}

}

model PriceBookVariantDelete {
  priceBookErrors String[]
  priceBookVariant String?
}

model PriceBookVariantBulkDelete {
  count Int
  priceBookErrors String[]
}

model PriceBookProductCreate {
  priceBookErrors String[]
  priceBookProduct String?
}

}

model PriceBookProductUpdate {
  priceBookErrors String[]
  priceBookProduct String?
}

}

model PriceBookProductDelete {
  priceBookErrors String[]
  priceBookProduct String?
}

model PriceBookProductBulkDelete {
  count Int
  priceBookErrors String[]
}

model PriceBookProductTypeCreate {
  priceBookErrors String[]
  priceBookProductType String?
}

}

model PriceBookProductTypeUpdate {
  priceBookErrors String[]
  priceBookProductType String?
}

}

model PriceBookProductTypeDelete {
  priceBookErrors String[]
  priceBookProductType String?
}

model PriceBookProductTypeBulkDelete {
  count Int
  priceBookErrors String[]
}

model UserAddToPriceBook {
  user String?
  priceBookErrors String[]
}

}

model UserRemoveFromPriceBook {
  user String?
  priceBookErrors String[]
}

model CategoryCreate {
  productErrors String[]
  category String?
}

}

}

model CategoryDelete {
  productErrors String[]
  category String?
}

model CategoryBulkDelete {
  count Int
  productErrors String[]
}

model CategoryUpdate {
  productErrors String[]
  category String?
}

model CollectionAddProducts {
  collection String?
  productErrors String[]
}

model CollectionAddVariants {
  collection String?
  productErrors String[]
}

model CollectionCreate {
  productErrors String[]
  collection String?
}

}

model CollectionDelete {
  productErrors String[]
  collection String?
}

model CollectionReorderProducts {
  collection String?
  productErrors String[]
}

model CollectionBulkDelete {
  count Int
  productErrors String[]
}

model CollectionBulkPublish {
  count Int
  productErrors String[]
}

model CollectionRemoveProducts {
  collection String?
  productErrors String[]
}

model CollectionRemoveVariants {
  collection String?
  productErrors String[]
}

model CollectionUpdate {
  productErrors String[]
  collection String?
}

}

model ProductCreate {
  productErrors String[]
  product String?
}

}

}

}

model ProductDelete {
  productErrors String[]
  product String?
}

model ProductBulkDelete {
  count Int
  productErrors String[]
}

model ProductBulkPublish {
  count Int
  productErrors String[]
}

model ProductBulkCategoryUpdate {
  count Int
  productErrors String[]
}

model ProductUpdate {
  productErrors String[]
  product String?
}

}

model ProductSetAvailabilityForPurchase {
  product String?
  productErrors String[]
}

model ProductImageCreate {
  product String?
  image String?
  productErrors String[]
}

}

model ProductReorderVariants {
  product String?
  productErrors String[]
}

}

model ProductImageDelete {
  product String?
  image String?
  productErrors String[]
}

model ProductImageBulkDelete {
  count Int
  productErrors String[]
}

model ProductImageReorder {
  product String?
  images String[]
  productErrors String[]
}

model ProductImageUpdate {
  product String?
  image String?
  productErrors String[]
}

}

model ProductTypeCreate {
  productErrors String[]
  productType String?
}

}

model ProductTypeDelete {
  productErrors String[]
  productType String?
}

model ProductTypeBulkDelete {
  count Int
  productErrors String[]
}

model ProductTypeUpdate {
  productErrors String[]
  productType String?
}

model ProductTypeReorderAttributes {
  productType String?
  productErrors String[]
}

enum AttributeTypeEnum {
}

model DigitalContentCreate {
  variant String?
  content String?
  productErrors String[]
}

}

model DigitalContentDelete {
  variant String?
  productErrors String[]
}

model DigitalContentUpdate {
  variant String?
  content String?
  productErrors String[]
}

}

model DigitalContentUrlCreate {
  productErrors String[]
  digitalContentUrl String?
}

}

model ProductVariantCreate {
  productErrors String[]
  productVariant String?
}

}

model ProductVariantDelete {
  productErrors String[]
  productVariant String?
}

model ProductVariantBulkCreate {
  count Int
  productVariants String[]
  bulkProductErrors String[]
}

model BulkProductError {
  field String?
  message String
  code String
  attributes String @id[]
  index Int?
  warehouses String @id[]
}

}

model ProductVariantBulkDelete {
  count Int
  productErrors String[]
}

model ProductVariantStocksCreate {
  productVariant String?
  bulkStockErrors String[]
}

model BulkStockError {
  field String?
  message String
  code String
  attributes String @id[]
  index Int?
}

model ProductVariantStocksDelete {
  productVariant String?
  stockErrors String[]
}

model StockError {
  field String?
  message String
  code String
}

enum StockErrorCode {
}

model ProductVariantStocksUpdate {
  productVariant String?
  bulkStockErrors String[]
}

model ProductVariantUpdate {
  productErrors String[]
  productVariant String?
}

}

model ProductVariantSetDefault {
  product String?
  productErrors String[]
}

model ProductVariantImageAssign {
  productVariant String?
  image String?
  productErrors String[]
}

model ProductVariantImageUnassign {
  productVariant String?
  image String?
  productErrors String[]
}

model FeatureCreate {
  feature String?
  productErrors String[]
}

}

model FeatureUpdate {
  feature String?
  productErrors String[]
}

}

model FeatureDelete {
  product String?
  variant String?
  productErrors String[]
}

model ProductTypeFeatureCreate {
  productType String?
  productErrors String[]
}

}

model ProductTypeFeatureUpdate {
  productType String?
  productErrors String[]
}

}

model ProductTypeFeatureDelete {
  productType String?
  productErrors String[]
}

model ProductLocationCreate {
  product String?
  location String?
  productErrors String[]
}

}

model ProductLocationUpdate {
  product String?
  location String?
  productErrors String[]
}

model ProductLocationDelete {
  product String?
  productErrors String[]
}

model ProductSetLocationType {
  product String?
  location String?
  productErrors String[]
}

model PaymentCapture {
  payment String?
  paymentErrors String[]
}

model PaymentError {
  field String?
  message String
  code String
}

enum PaymentErrorCode {
}

model PaymentVoid {
  payment String?
  paymentErrors String[]
}

model PageCreate {
  pageErrors String[]
  page String?
}

model PageError {
  field String?
  message String
  code String
}

enum PageErrorCode {
}

}

model PageDelete {
  pageErrors String[]
  page String?
}

model PageBulkDelete {
  count Int
  pageErrors String[]
}

model PageBulkPublish {
  count Int
  pageErrors String[]
}

model PageUpdate {
  pageErrors String[]
  page String?
}

model DraftOrderComplete {
  order String?
  orderErrors String[]
}

model OrderError {
  field String?
  message String
  code String
  warehouse String @id?
  orderLine String @id?
  variant String @id?
}

enum OrderErrorCode {
}

model NauticalDraftOrderComplete {
  order String?
  sellerOrders String[]
  orderErrors String[]
}

model DraftOrderSetTransactionCurrency {
  order String?
  orderErrors String[]
}

model NauticalDraftOrderSetTransactionCurrency {
  nauticalOrder String?
  orderErrors String[]
}

model DraftOrderCreate {
  orderErrors String[]
  order String?
}

}

}

enum DraftOrderInitialStatus {
}

model NauticalDraftOrderCreate {
  orderErrors String[]
  nauticalOrder String?
}

}

model NauticalHistoricalOrderCreate {
  orderErrors String[]
  nauticalOrder String?
}

}

}

model DraftOrderDelete {
  orderErrors String[]
  order String?
}

model NauticalDraftOrderDelete {
  orderErrors String[]
  nauticalOrder String?
}

model DraftOrderBulkDelete {
  count Int
  orderErrors String[]
}

model NauticalDraftOrderBulkDelete {
  count Int
  orderErrors String[]
}

model DraftOrderLinesBulkDelete {
  count Int
  orderErrors String[]
}

model NauticalDraftOrderLinesBulkDelete {
  count Int
  orderErrors String[]
}

model DraftOrderLinesCreate {
  order String?
  orderLines String[]
  orderErrors String[]
}

model NauticalDraftOrderLinesCreate {
  order String?
  orderLines String[]
  orderErrors String[]
}

model DraftOrderLineDelete {
  order String?
  orderLine String?
  orderErrors String[]
}

model NauticalDraftOrderLineDelete {
  order String?
  orderLine String?
  orderErrors String[]
}

model DraftOrderLineUpdate {
  order String?
  orderErrors String[]
  orderLine String?
}

}

model NauticalDraftOrderLineUpdate {
  order String?
  orderErrors String[]
  nauticalOrderLine String?
}

model DraftOrderUpdate {
  orderErrors String[]
  order String?
}

}

model NauticalDraftOrderUpdate {
  orderErrors String[]
  nauticalOrder String?
}

}

model DraftOrderLinePriceOverride {
  order String?
  orderErrors String[]
  orderLine String?
}

}

model NauticalDraftOrderLinePriceOverride {
  nauticalOrder String?
  orderErrors String[]
  nauticalOrderLine String?
}

model OrderAddNote {
  order String?
  event String?
  orderErrors String[]
}

}

model NauticalOrderAddNote {
  order String?
  event String?
  orderErrors String[]
}

model OrderLineAddNote {
  orderErrors String[]
  orderLine String?
}

}

model NauticalOrderLineAddNote {
  orderErrors String[]
  nauticalOrderLine String?
}

model OrderReturnNotification {
  order String?
  event String?
  orderErrors String[]
}

}

model NauticalOrderRefreshTaxes {
  nauticalOrder String?
  orderErrors String[]
}

model NauticalOrderUpdateApplyVoucherCode {
  nauticalOrder String?
  orderErrors String[]
}

model NauticalOrderUpdateDeleteDiscount {
  nauticalOrder String?
  orderErrors String[]
}

model NauticalOrderReturnNotification {
  order String?
  event String?
  orderErrors String[]
}

model NauticalOrderReturnFromStorefrontNotification {
  order String?
  event String?
  orderErrors String[]
}

model VendorOrderReturnFromStorefrontNotification {
  order String?
  event String[]
  orderErrors String[]
}

model OrderCancel {
  order String?
  orderErrors String[]
}

model NauticalOrderCancel {
  order String?
  orderErrors String[]
}

model NauticalQuoteOrderCancel {
  order String?
  orderErrors String[]
}

model NauticalOrderCapture {
  order String?
  orderErrors String[]
}

model OrderFulfill {
  fulfillments String[]
  order String?
  orderErrors String[]
}

}

}

}

model OrderDeclineFulfillment {
  fulfillments String[]
  order String?
  orderErrors String[]
}

}

}

}

model FulfillmentCancel {
  fulfillment String?
  order String?
  orderErrors String[]
}

}

model FulfillmentReturn {
  fulfillment String?
  order String?
  orderErrors String[]
}

}

model FulfillmentUpdateTracking {
  fulfillment String?
  order String?
  orderErrors String[]
}

}

model FulfillmentReturnStatusBulkUpdate {
  fulfillment String?
  order String?
  orderErrors String[]
}

}

model FulfillmentBulkReturn {
  fulfillments String[]
  orderErrors String[]
}

}

model OrderMarkAsDelivered {
  orderErrors String[]
  order String?
}

model NauticalOrderMarkAsPaid {
  order String?
  orderErrors String[]
}

model OrderUpdate {
  orderErrors String[]
  order String?
}

}

model NauticalOrderUpdate {
  orderErrors String[]
  nauticalOrder String?
}

}

model OrderPayoutStatusUpdate {
  order String?
  orderErrors String[]
}

}

model OrderUpdateShipping {
  order String?
  orderErrors String[]
}

}

model NauticalOrderUpdateShipping {
  order String?
  orderErrors String[]
}

}

model NauticalOrderUpdateMarketplaceShipping {
  order String?
  orderErrors String[]
}

}

model NauticalOrderVoid {
  order String?
  orderErrors String[]
}

model OrderBulkCancel {
  count Int
  orderErrors String[]
}

model NauticalOrderLineBulkCancel {
  count Int
  order String?
}

model NauticalOrderPaymentCreate {
  order String?
  payment String?
  paymentErrors String[]
}

}

model NauticalQuoteOrderSendToCustomer {
  order String?
  orderErrors String[]
}

model OrderFeeCreate {
  orderFee String?
  orderErrors String[]
}

}

model OrderFeeDelete {
  orderFee String?
  orderErrors String[]
}

model NauticalOrderLinesCsvUpload {
  nauticalOrder String?
  csvFile String?
  successfulLines Int?
  failedLines Int?
  orderErrors String[]
}

model ImportFile {
  id String @id
  user String?
  app String?
  status String
  createdAt DateTime
  updatedAt DateTime
  message String?
  url String?
  events String[]
}

model ImportEvent {
  id String @id
  date DateTime
  type String
  user String?
  app String?
  message String
}

enum ImportEventsEnum {
}

model OrderLinesCsvUpload {
  order String?
  csvFile String?
  successfulLines Int?
  failedLines Int?
  orderErrors String[]
}

model MetadataDelete {
  metadataErrors String[]
  item String?
}

model MetadataError {
  field String?
  message String
  code String
}

enum MetadataErrorCode {
}

model PrivateMetadataDelete {
  metadataErrors String[]
  item String?
}

model MetadataUpdate {
  metadataErrors String[]
  item String?
}

model PrivateMetadataUpdate {
  metadataErrors String[]
  item String?
}

model MenuCreate {
  menuErrors String[]
  menu String?
}

model MenuError {
  field String?
  message String
  code String
}

enum MenuErrorCode {
}

}

}

model MenuDelete {
  menuErrors String[]
  menu String?
}

model MenuBulkDelete {
  count Int
  menuErrors String[]
}

model MenuUpdate {
  menuErrors String[]
  menu String?
}

}

model MenuItemCreate {
  menuErrors String[]
  menuItem String?
}

}

model MenuItemDelete {
  menuErrors String[]
  menuItem String?
}

model MenuItemBulkDelete {
  count Int
  menuErrors String[]
}

model MenuItemUpdate {
  menuErrors String[]
  menuItem String?
}

model MenuItemMove {
  menu String?
  menuErrors String[]
}

}

model InvoiceRequest {
  order String?
  nauticalOrder String?
  refund String?
  invoiceErrors String[]
  invoice String?
}

model InvoiceError {
  field String?
  message String
  code String
}

enum InvoiceErrorCode {
}

model InvoiceRequestDelete {
  invoiceErrors String[]
  invoice String?
}

model InvoiceCreate {
  invoiceErrors String[]
  invoice String?
}

}

model InvoiceDelete {
  invoiceErrors String[]
  invoice String?
}

model InvoiceUpdate {
  invoiceErrors String[]
  invoice String?
}

}

model InvoiceSendNotification {
  invoiceErrors String[]
  invoice String?
}

model InvoiceRefresh {
  order String?
  nauticalOrder String?
  invoiceErrors String[]
  invoice String?
}

model InvoiceFinalize {
  invoiceErrors String[]
  invoice String?
}

model InvoiceCancel {
  invoiceErrors String[]
  invoice String?
}

model PluginUpdate {
  plugin String?
  pluginsErrors String[]
}

model PluginError {
  field String?
  message String
  code String
}

enum PluginErrorCode {
}

}

}

model CatalogImport {
  ok Boolean?
  plugin String @id?
  pluginsErrors String[]
}

model CatalogExport {
  ok Boolean?
  plugin String @id?
  pluginsErrors String[]
}

model CustomersExport {
  ok Boolean?
  plugin String @id?
  pluginsErrors String[]
}

model PluginFlowUpdate {
  flow String?
  pluginsErrors String[]
}

}

model PluginFlowDelete {
  pluginsErrors String[]
}

model VendorPayoutOnboardingLinkRequest {
  link String?
  vendor String?
  pluginsErrors String[]
}

model ExchangeRatesRefresh {
  pluginsErrors String[]
}

model CheckoutEventTriggered {
  checkoutEvent String?
  pluginsErrors String[]
}

model JournalEntryCorrect {
  financialErrors String[]
  journalEntry String?
}

model FinancialError {
  field String?
  message String
  code String
}

enum FinancialErrorCode {
}

}

}

model SaleCreate {
  discountErrors String[]
  sale String?
}

model DiscountError {
  field String?
  message String
  code String
}

enum DiscountErrorCode {
}

}

model SaleDelete {
  discountErrors String[]
  sale String?
}

model SaleBulkDelete {
  count Int
  discountErrors String[]
}

model SaleUpdate {
  discountErrors String[]
  sale String?
}

model SaleAddCatalogues {
  sale String?
  discountErrors String[]
}

}

model SaleRemoveCatalogues {
  sale String?
  discountErrors String[]
}

model VoucherCreate {
  discountErrors String[]
  voucher String?
}

}

model VoucherDelete {
  discountErrors String[]
  voucher String?
}

model VoucherBulkDelete {
  count Int
  discountErrors String[]
}

model VoucherUpdate {
  discountErrors String[]
  voucher String?
}

model VoucherAddCatalogues {
  voucher String?
  discountErrors String[]
}

model VoucherRemoveCatalogues {
  voucher String?
  discountErrors String[]
}

model DashboardEmbeddingToken {
  token String?
}

model ProductsExport {
  exportFile String?
  exportErrors String[]
}

model ExportError {
  field String?
  message String
  code String
}

enum ExportErrorCode {
}

}

enum ExportScope {
}

}

enum ProductFieldEnum {
}

enum FileTypesEnum {
}

model ProductsImport {
  importFile String?
  importErrors String[]
}

model ImportError {
  field String?
  message String
  code String
}

enum ImportErrorCode {
}

model CheckoutAddPromoCode {
  checkout String?
  checkoutErrors String[]
}

model CheckoutError {
  field String?
  message String
  code String
  variants String @id[]
}

enum CheckoutErrorCode {
}

model CheckoutBillingAddressUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutComplete {
  order String?
  confirmationNeeded Boolean
  confirmationData Json?
  checkoutErrors String[]
}

model CheckoutConvertToNauticalQuoteOrder {
  order String?
  checkoutErrors String[]
}

model CheckoutCreate {
  created Boolean?
  checkoutErrors String[]
  checkout String?
}

}

}

model CheckoutCustomerAttach {
  checkout String?
  checkoutErrors String[]
}

model CheckoutCustomerDetach {
  checkout String?
  checkoutErrors String[]
}

model CheckoutEmailUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutSetTransactionCurrency {
  checkout String?
  checkoutErrors String[]
}

model CheckoutNoteUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutLineDelete {
  checkout String?
  checkoutErrors String[]
}

model CheckoutLinesAdd {
  checkout String?
  checkoutErrors String[]
}

model CheckoutLinesUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutRemovePromoCode {
  checkout String?
  checkoutErrors String[]
}

model CheckoutPaymentCreate {
  checkout String?
  payment String?
  paymentErrors String[]
}

model CheckoutShippingAddressUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutSellerShippingMethodsUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutMarketplaceShippingMethodUpdate {
  checkout String?
  checkoutErrors String[]
}

model CheckoutSellerShippingMethodsBulkUpdate {
  checkout String?
  checkoutErrors String[]
}

}

model CheckoutSellerShippingMethodsClear {
  checkout String?
  checkoutErrors String[]
}

model CheckoutDelete {
  checkoutErrors String[]
  checkout String?
}

model CheckoutAddPONumbers {
  checkout String?
  checkoutErrors String[]
}

model CheckoutRemovePONumbers {
  checkout String?
  checkoutErrors String[]
}

model CheckoutLineAddNote {
  checkoutErrors String[]
  checkoutLine String?
}

model AttributeCreate {
  attribute String?
  productErrors String[]
}

}

}

model AttributeDelete {
  productErrors String[]
  attribute String?
}

model AttributeBulkDelete {
  count Int
  productErrors String[]
}

model AttributeAssign {
  productType String?
  productErrors String[]
}

}

model AttributeUnassign {
  productType String?
  productErrors String[]
}

model AttributeUpdate {
  attribute String?
  productErrors String[]
}

}

model CustomAttributeAssign {
  customFieldTemplate String?
  attributeErrors String[]
}

model CustomAttributeUnassign {
  customFieldTemplate String?
  attributeErrors String[]
}

model InstanceAttributeUnassign {
  instance String?
  attributeErrors String[]
}

model AttributeError {
  field String?
  message String
  code String
  values String[]
}

model AttributeValueCreate {
  attribute String?
  productErrors String[]
  attributeValue String?
}

model AttributeValueDelete {
  attribute String?
  productErrors String[]
  attributeValue String?
}

model AttributeValueBulkCreate {
  count Int
  attributeValues String[]
  attributeErrors String[]
}

model AttributeValueBulkDelete {
  count Int
  productErrors String[]
}

model AttributeValueUpdate {
  attribute String?
  productErrors String[]
  attributeValue String?
}

model AttributeValuesReorder {
  attribute String?
  productErrors String[]
}

model AppCreate {
  authToken String?
  appErrors String[]
  app String?
}

model AppError {
  field String?
  message String
  code String
  permissions String[]
}

enum AppErrorCode {
}

}

model AppUpdate {
  appErrors String[]
  app String?
}

model AppDelete {
  appErrors String[]
  app String?
}

model AppTokenCreate {
  authToken String?
  appErrors String[]
  appToken String?
}

}

model AppTokenDelete {
  appErrors String[]
  appToken String?
}

model AppTokenVerify {
  valid Boolean
  appErrors String[]
}

model AppInstall {
  appErrors String[]
  appInstallation String?
}

}

model AppRetryInstall {
  appErrors String[]
  appInstallation String?
}

model AppDeleteFailedInstallation {
  appErrors String[]
  appInstallation String?
}

model AppFetchManifest {
  manifest String?
  appErrors String[]
}

model Manifest {
  identifier String
  version String
  name String
  about String?
  permissions String[]
  appUrl String?
  configurationUrl String?
  tokenTargetUrl String?
  dataPrivacy String?
  dataPrivacyUrl String?
  homepageUrl String?
  supportUrl String?
}

model AppActivate {
  appErrors String[]
  app String?
}

model AppDeactivate {
  appErrors String[]
  app String?
}

model CreateCustomerToken {
  nauticalToken String?
  refreshToken String?
  authErrors String[]
}

model AuthError {
  field String?
  message String
  code String
}

enum OauthProviderSourceEnum {
}

model CreateToken {
  token String?
  refreshToken String?
  csrfToken String?
  user String?
  accountErrors String[]
}

model AccountError {
  field String?
  message String
  code String
}

enum AccountErrorCode {
}

model AuthURLGenerate {
  authUrl String?
  accountErrors String[]
}

enum SsoProviderType {
}

model TokenCreateSSO {
  token String?
  refreshToken String?
  csrfToken String?
  user String?
  accountErrors String[]
}

model RefreshToken {
  token String?
  user String?
  accountErrors String[]
}

model VerifyToken {
  user String?
  isValid Boolean
  payload String?
  accountErrors String[]
}

model DeactivateAllUserTokens {
  accountErrors String[]
}

model PasswordRequestReset {
  accountErrors String[]
}

model AccountConfirm {
  user String?
  accountErrors String[]
}

model PasswordSet {
  token String?
  refreshToken String?
  csrfToken String?
  user String?
  accountErrors String[]
}

model PasswordChange {
  user String?
  accountErrors String[]
}

model EmailChangeRequest {
  user String?
  accountErrors String[]
}

model EmailChangeConfirm {
  user String?
  accountErrors String[]
}

model AccountAddressCreate {
  user String?
  accountErrors String[]
  address String?
}

model AccountAddressUpdate {
  user String?
  accountErrors String[]
  address String?
}

model AccountAddressDelete {
  user String?
  accountErrors String[]
  address String?
}

model AccountAddressSetDefault {
  user String?
  accountErrors String[]
}

model AccountRegister {
  requiresConfirmation Boolean?
  accountErrors String[]
  user String?
}

}

model AccountUpdate {
  accountErrors String[]
  user String?
}

}

model AccountRequestDeletion {
  accountErrors String[]
}

model AccountDelete {
  accountErrors String[]
  user String?
}

model AddressCreate {
  user String?
  accountErrors String[]
  address String?
}

model AddressUpdate {
  user String?
  accountErrors String[]
  address String?
}

model AddressDelete {
  user String?
  accountErrors String[]
  address String?
}

model AddressSetDefault {
  user String?
  accountErrors String[]
}

model CustomerCreate {
  accountErrors String[]
  user String?
}

}

model CustomerUpdate {
  accountErrors String[]
  user String?
}

}

model CustomerDelete {
  accountErrors String[]
  user String?
}

model CustomerBulkDelete {
  count Int
  accountErrors String[]
}

model StaffCreate {
  staffErrors String[]
  user String?
}

model StaffError {
  field String?
  message String
  code String
  permissions String[]
  groups String @id[]
  users String @id[]
}

}

model StaffUpdate {
  staffErrors String[]
  user String?
}

}

model StaffDelete {
  staffErrors String[]
  user String?
}

model StaffBulkDelete {
  count Int
  staffErrors String[]
}

model UserAvatarUpdate {
  user String?
  accountErrors String[]
}

model UserAvatarDelete {
  user String?
  accountErrors String[]
}

model UserBulkSetActive {
  count Int
  accountErrors String[]
}

model PermissionGroupCreate {
  permissionGroupErrors String[]
  group String?
}

model PermissionGroupError {
  field String?
  message String
  code String
  permissions String[]
  users String @id[]
}

enum PermissionGroupErrorCode {
}

}

model PermissionGroupUpdate {
  permissionGroupErrors String[]
  group String?
}

}

model PermissionGroupDelete {
  permissionGroupErrors String[]
  group String?
}

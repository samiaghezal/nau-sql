from django.shortcuts import get_object_or_404
from ninja import Router, Query
from ninja.pagination import paginate
from typing import List
from .models import *  # Your Django models
from .schemas import *  # Your Pydantic models


router = Router()


# EmailTemplate endpoints
@router.get('/email_templates', response=List[EmailTemplate])
@paginate
def list_email_templates(request):
    return EmailTemplate.objects.all()


@router.get('/email_templates/{id}', response=EmailTemplate)
def get_email_template(request, id: int):
    return get_object_or_404(EmailTemplate, id=id)


@router.post('/email_templates', response=EmailTemplate)
def create_email_template(request, payload: EmailTemplateCreate):
    data = payload.dict()
    email_template = EmailTemplate.objects.create(**data)
    return email_template


@router.put('/email_templates/{id}', response=EmailTemplate)
def update_email_template(request, id: int, payload: EmailTemplateUpdate):
    email_template = get_object_or_404(EmailTemplate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_template, attr, value)
    email_template.save()
    return email_template


@router.delete('/email_templates/{id}')
def delete_email_template(request, id: int):
    email_template = get_object_or_404(EmailTemplate, id=id)
    email_template.delete()
    return {'success': True}


# EmailTemplatePreview endpoints
@router.get('/email_template_previews', response=List[EmailTemplatePreview])
@paginate
def list_email_template_previews(request):
    return EmailTemplatePreview.objects.all()


@router.get('/email_template_previews/{id}', response=EmailTemplatePreview)
def get_email_template_preview(request, id: int):
    return get_object_or_404(EmailTemplatePreview, id=id)


@router.post('/email_template_previews', response=EmailTemplatePreview)
def create_email_template_preview(request, payload: EmailTemplatePreviewCreate):
    data = payload.dict()
    email_template_preview = EmailTemplatePreview.objects.create(**data)
    return email_template_preview


@router.put('/email_template_previews/{id}', response=EmailTemplatePreview)
def update_email_template_preview(request, id: int, payload: EmailTemplatePreviewUpdate):
    email_template_preview = get_object_or_404(EmailTemplatePreview, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_template_preview, attr, value)
    email_template_preview.save()
    return email_template_preview


@router.delete('/email_template_previews/{id}')
def delete_email_template_preview(request, id: int):
    email_template_preview = get_object_or_404(EmailTemplatePreview, id=id)
    email_template_preview.delete()
    return {'success': True}


# EmailTemplateCountableConnection endpoints
@router.get('/email_template_countable_connections', response=List[EmailTemplateCountableConnection])
@paginate
def list_email_template_countable_connections(request):
    return EmailTemplateCountableConnection.objects.all()


@router.get('/email_template_countable_connections/{id}', response=EmailTemplateCountableConnection)
def get_email_template_countable_connection(request, id: int):
    return get_object_or_404(EmailTemplateCountableConnection, id=id)


@router.post('/email_template_countable_connections', response=EmailTemplateCountableConnection)
def create_email_template_countable_connection(request, payload: EmailTemplateCountableConnectionCreate):
    data = payload.dict()
    email_template_countable_connection = EmailTemplateCountableConnection.objects.create(**data)
    return email_template_countable_connection


@router.put('/email_template_countable_connections/{id}', response=EmailTemplateCountableConnection)
def update_email_template_countable_connection(request, id: int, payload: EmailTemplateCountableConnectionUpdate):
    email_template_countable_connection = get_object_or_404(EmailTemplateCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_template_countable_connection, attr, value)
    email_template_countable_connection.save()
    return email_template_countable_connection


@router.delete('/email_template_countable_connections/{id}')
def delete_email_template_countable_connection(request, id: int):
    email_template_countable_connection = get_object_or_404(EmailTemplateCountableConnection, id=id)
    email_template_countable_connection.delete()
    return {'success': True}


# EmailTemplateCountableEdge endpoints
@router.get('/email_template_countable_edges', response=List[EmailTemplateCountableEdge])
@paginate
def list_email_template_countable_edges(request):
    return EmailTemplateCountableEdge.objects.all()


@router.get('/email_template_countable_edges/{id}', response=EmailTemplateCountableEdge)
def get_email_template_countable_edge(request, id: int):
    return get_object_or_404(EmailTemplateCountableEdge, id=id)


@router.post('/email_template_countable_edges', response=EmailTemplateCountableEdge)
def create_email_template_countable_edge(request, payload: EmailTemplateCountableEdgeCreate):
    data = payload.dict()
    email_template_countable_edge = EmailTemplateCountableEdge.objects.create(**data)
    return email_template_countable_edge


@router.put('/email_template_countable_edges/{id}', response=EmailTemplateCountableEdge)
def update_email_template_countable_edge(request, id: int, payload: EmailTemplateCountableEdgeUpdate):
    email_template_countable_edge = get_object_or_404(EmailTemplateCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_template_countable_edge, attr, value)
    email_template_countable_edge.save()
    return email_template_countable_edge


@router.delete('/email_template_countable_edges/{id}')
def delete_email_template_countable_edge(request, id: int):
    email_template_countable_edge = get_object_or_404(EmailTemplateCountableEdge, id=id)
    email_template_countable_edge.delete()
    return {'success': True}


# WishlistItemCountableConnection endpoints
@router.get('/wishlist_item_countable_connections', response=List[WishlistItemCountableConnection])
@paginate
def list_wishlist_item_countable_connections(request):
    return WishlistItemCountableConnection.objects.all()


@router.get('/wishlist_item_countable_connections/{id}', response=WishlistItemCountableConnection)
def get_wishlist_item_countable_connection(request, id: int):
    return get_object_or_404(WishlistItemCountableConnection, id=id)


@router.post('/wishlist_item_countable_connections', response=WishlistItemCountableConnection)
def create_wishlist_item_countable_connection(request, payload: WishlistItemCountableConnectionCreate):
    data = payload.dict()
    wishlist_item_countable_connection = WishlistItemCountableConnection.objects.create(**data)
    return wishlist_item_countable_connection


@router.put('/wishlist_item_countable_connections/{id}', response=WishlistItemCountableConnection)
def update_wishlist_item_countable_connection(request, id: int, payload: WishlistItemCountableConnectionUpdate):
    wishlist_item_countable_connection = get_object_or_404(WishlistItemCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_item_countable_connection, attr, value)
    wishlist_item_countable_connection.save()
    return wishlist_item_countable_connection


@router.delete('/wishlist_item_countable_connections/{id}')
def delete_wishlist_item_countable_connection(request, id: int):
    wishlist_item_countable_connection = get_object_or_404(WishlistItemCountableConnection, id=id)
    wishlist_item_countable_connection.delete()
    return {'success': True}


# WishlistItemCountableEdge endpoints
@router.get('/wishlist_item_countable_edges', response=List[WishlistItemCountableEdge])
@paginate
def list_wishlist_item_countable_edges(request):
    return WishlistItemCountableEdge.objects.all()


@router.get('/wishlist_item_countable_edges/{id}', response=WishlistItemCountableEdge)
def get_wishlist_item_countable_edge(request, id: int):
    return get_object_or_404(WishlistItemCountableEdge, id=id)


@router.post('/wishlist_item_countable_edges', response=WishlistItemCountableEdge)
def create_wishlist_item_countable_edge(request, payload: WishlistItemCountableEdgeCreate):
    data = payload.dict()
    wishlist_item_countable_edge = WishlistItemCountableEdge.objects.create(**data)
    return wishlist_item_countable_edge


@router.put('/wishlist_item_countable_edges/{id}', response=WishlistItemCountableEdge)
def update_wishlist_item_countable_edge(request, id: int, payload: WishlistItemCountableEdgeUpdate):
    wishlist_item_countable_edge = get_object_or_404(WishlistItemCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_item_countable_edge, attr, value)
    wishlist_item_countable_edge.save()
    return wishlist_item_countable_edge


@router.delete('/wishlist_item_countable_edges/{id}')
def delete_wishlist_item_countable_edge(request, id: int):
    wishlist_item_countable_edge = get_object_or_404(WishlistItemCountableEdge, id=id)
    wishlist_item_countable_edge.delete()
    return {'success': True}


# WishlistItem endpoints
@router.get('/wishlist_items', response=List[WishlistItem])
@paginate
def list_wishlist_items(request):
    return WishlistItem.objects.all()


@router.get('/wishlist_items/{id}', response=WishlistItem)
def get_wishlist_item(request, id: int):
    return get_object_or_404(WishlistItem, id=id)


@router.post('/wishlist_items', response=WishlistItem)
def create_wishlist_item(request, payload: WishlistItemCreate):
    data = payload.dict()
    wishlist_item = WishlistItem.objects.create(**data)
    return wishlist_item


@router.put('/wishlist_items/{id}', response=WishlistItem)
def update_wishlist_item(request, id: int, payload: WishlistItemUpdate):
    wishlist_item = get_object_or_404(WishlistItem, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_item, attr, value)
    wishlist_item.save()
    return wishlist_item


@router.delete('/wishlist_items/{id}')
def delete_wishlist_item(request, id: int):
    wishlist_item = get_object_or_404(WishlistItem, id=id)
    wishlist_item.delete()
    return {'success': True}


# Wishlist endpoints
@router.get('/wishlists', response=List[Wishlist])
@paginate
def list_wishlists(request):
    return Wishlist.objects.all()


@router.get('/wishlists/{id}', response=Wishlist)
def get_wishlist(request, id: int):
    return get_object_or_404(Wishlist, id=id)


@router.post('/wishlists', response=Wishlist)
def create_wishlist(request, payload: WishlistCreate):
    data = payload.dict()
    wishlist = Wishlist.objects.create(**data)
    return wishlist


@router.put('/wishlists/{id}', response=Wishlist)
def update_wishlist(request, id: int, payload: WishlistUpdate):
    wishlist = get_object_or_404(Wishlist, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist, attr, value)
    wishlist.save()
    return wishlist


@router.delete('/wishlists/{id}')
def delete_wishlist(request, id: int):
    wishlist = get_object_or_404(Wishlist, id=id)
    wishlist.delete()
    return {'success': True}


# User endpoints
@router.get('/users', response=List[User])
@paginate
def list_users(request):
    return User.objects.all()


@router.get('/users/{id}', response=User)
def get_user(request, id: int):
    return get_object_or_404(User, id=id)


@router.post('/users', response=User)
def create_user(request, payload: UserCreate):
    data = payload.dict()
    user = User.objects.create(**data)
    return user


@router.put('/users/{id}', response=User)
def update_user(request, id: int, payload: UserUpdate):
    user = get_object_or_404(User, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user, attr, value)
    user.save()
    return user


@router.delete('/users/{id}')
def delete_user(request, id: int):
    user = get_object_or_404(User, id=id)
    user.delete()
    return {'success': True}


# MetadataItem endpoints
@router.get('/metadata_items', response=List[MetadataItem])
@paginate
def list_metadata_items(request):
    return MetadataItem.objects.all()


@router.get('/metadata_items/{id}', response=MetadataItem)
def get_metadata_item(request, id: int):
    return get_object_or_404(MetadataItem, id=id)


@router.post('/metadata_items', response=MetadataItem)
def create_metadata_item(request, payload: MetadataItemCreate):
    data = payload.dict()
    metadata_item = MetadataItem.objects.create(**data)
    return metadata_item


@router.put('/metadata_items/{id}', response=MetadataItem)
def update_metadata_item(request, id: int, payload: MetadataItemUpdate):
    metadata_item = get_object_or_404(MetadataItem, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(metadata_item, attr, value)
    metadata_item.save()
    return metadata_item


@router.delete('/metadata_items/{id}')
def delete_metadata_item(request, id: int):
    metadata_item = get_object_or_404(MetadataItem, id=id)
    metadata_item.delete()
    return {'success': True}


# Address endpoints
@router.get('/addresss', response=List[Address])
@paginate
def list_addresss(request):
    return Address.objects.all()


@router.get('/addresss/{id}', response=Address)
def get_address(request, id: int):
    return get_object_or_404(Address, id=id)


@router.post('/addresss', response=Address)
def create_address(request, payload: AddressCreate):
    data = payload.dict()
    address = Address.objects.create(**data)
    return address


@router.put('/addresss/{id}', response=Address)
def update_address(request, id: int, payload: AddressUpdate):
    address = get_object_or_404(Address, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address, attr, value)
    address.save()
    return address


@router.delete('/addresss/{id}')
def delete_address(request, id: int):
    address = get_object_or_404(Address, id=id)
    address.delete()
    return {'success': True}


# CountryDisplay endpoints
@router.get('/country_displays', response=List[CountryDisplay])
@paginate
def list_country_displays(request):
    return CountryDisplay.objects.all()


@router.get('/country_displays/{id}', response=CountryDisplay)
def get_country_display(request, id: int):
    return get_object_or_404(CountryDisplay, id=id)


@router.post('/country_displays', response=CountryDisplay)
def create_country_display(request, payload: CountryDisplayCreate):
    data = payload.dict()
    country_display = CountryDisplay.objects.create(**data)
    return country_display


@router.put('/country_displays/{id}', response=CountryDisplay)
def update_country_display(request, id: int, payload: CountryDisplayUpdate):
    country_display = get_object_or_404(CountryDisplay, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(country_display, attr, value)
    country_display.save()
    return country_display


@router.delete('/country_displays/{id}')
def delete_country_display(request, id: int):
    country_display = get_object_or_404(CountryDisplay, id=id)
    country_display.delete()
    return {'success': True}


# CountryArea endpoints
@router.get('/country_areas', response=List[CountryArea])
@paginate
def list_country_areas(request):
    return CountryArea.objects.all()


@router.get('/country_areas/{id}', response=CountryArea)
def get_country_area(request, id: int):
    return get_object_or_404(CountryArea, id=id)


@router.post('/country_areas', response=CountryArea)
def create_country_area(request, payload: CountryAreaCreate):
    data = payload.dict()
    country_area = CountryArea.objects.create(**data)
    return country_area


@router.put('/country_areas/{id}', response=CountryArea)
def update_country_area(request, id: int, payload: CountryAreaUpdate):
    country_area = get_object_or_404(CountryArea, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(country_area, attr, value)
    country_area.save()
    return country_area


@router.delete('/country_areas/{id}')
def delete_country_area(request, id: int):
    country_area = get_object_or_404(CountryArea, id=id)
    country_area.delete()
    return {'success': True}


# Checkout endpoints
@router.get('/checkouts', response=List[Checkout])
@paginate
def list_checkouts(request):
    return Checkout.objects.all()


@router.get('/checkouts/{id}', response=Checkout)
def get_checkout(request, id: int):
    return get_object_or_404(Checkout, id=id)


@router.post('/checkouts', response=Checkout)
def create_checkout(request, payload: CheckoutCreate):
    data = payload.dict()
    checkout = Checkout.objects.create(**data)
    return checkout


@router.put('/checkouts/{id}', response=Checkout)
def update_checkout(request, id: int, payload: CheckoutUpdate):
    checkout = get_object_or_404(Checkout, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout, attr, value)
    checkout.save()
    return checkout


@router.delete('/checkouts/{id}')
def delete_checkout(request, id: int):
    checkout = get_object_or_404(Checkout, id=id)
    checkout.delete()
    return {'success': True}


# Money endpoints
@router.get('/moneys', response=List[Money])
@paginate
def list_moneys(request):
    return Money.objects.all()


@router.get('/moneys/{id}', response=Money)
def get_money(request, id: int):
    return get_object_or_404(Money, id=id)


@router.post('/moneys', response=Money)
def create_money(request, payload: MoneyCreate):
    data = payload.dict()
    money = Money.objects.create(**data)
    return money


@router.put('/moneys/{id}', response=Money)
def update_money(request, id: int, payload: MoneyUpdate):
    money = get_object_or_404(Money, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(money, attr, value)
    money.save()
    return money


@router.delete('/moneys/{id}')
def delete_money(request, id: int):
    money = get_object_or_404(Money, id=id)
    money.delete()
    return {'success': True}


# ShippingMethod endpoints
@router.get('/shipping_methods', response=List[ShippingMethod])
@paginate
def list_shipping_methods(request):
    return ShippingMethod.objects.all()


@router.get('/shipping_methods/{id}', response=ShippingMethod)
def get_shipping_method(request, id: int):
    return get_object_or_404(ShippingMethod, id=id)


@router.post('/shipping_methods', response=ShippingMethod)
def create_shipping_method(request, payload: ShippingMethodCreate):
    data = payload.dict()
    shipping_method = ShippingMethod.objects.create(**data)
    return shipping_method


@router.put('/shipping_methods/{id}', response=ShippingMethod)
def update_shipping_method(request, id: int, payload: ShippingMethodUpdate):
    shipping_method = get_object_or_404(ShippingMethod, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_method, attr, value)
    shipping_method.save()
    return shipping_method


@router.delete('/shipping_methods/{id}')
def delete_shipping_method(request, id: int):
    shipping_method = get_object_or_404(ShippingMethod, id=id)
    shipping_method.delete()
    return {'success': True}


# Weight endpoints
@router.get('/weights', response=List[Weight])
@paginate
def list_weights(request):
    return Weight.objects.all()


@router.get('/weights/{id}', response=Weight)
def get_weight(request, id: int):
    return get_object_or_404(Weight, id=id)


@router.post('/weights', response=Weight)
def create_weight(request, payload: WeightCreate):
    data = payload.dict()
    weight = Weight.objects.create(**data)
    return weight


@router.put('/weights/{id}', response=Weight)
def update_weight(request, id: int, payload: WeightUpdate):
    weight = get_object_or_404(Weight, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(weight, attr, value)
    weight.save()
    return weight


@router.delete('/weights/{id}')
def delete_weight(request, id: int):
    weight = get_object_or_404(Weight, id=id)
    weight.delete()
    return {'success': True}


# MultiSellerShippingMethod endpoints
@router.get('/multi_seller_shipping_methods', response=List[MultiSellerShippingMethod])
@paginate
def list_multi_seller_shipping_methods(request):
    return MultiSellerShippingMethod.objects.all()


@router.get('/multi_seller_shipping_methods/{id}', response=MultiSellerShippingMethod)
def get_multi_seller_shipping_method(request, id: int):
    return get_object_or_404(MultiSellerShippingMethod, id=id)


@router.post('/multi_seller_shipping_methods', response=MultiSellerShippingMethod)
def create_multi_seller_shipping_method(request, payload: MultiSellerShippingMethodCreate):
    data = payload.dict()
    multi_seller_shipping_method = MultiSellerShippingMethod.objects.create(**data)
    return multi_seller_shipping_method


@router.put('/multi_seller_shipping_methods/{id}', response=MultiSellerShippingMethod)
def update_multi_seller_shipping_method(request, id: int, payload: MultiSellerShippingMethodUpdate):
    multi_seller_shipping_method = get_object_or_404(MultiSellerShippingMethod, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(multi_seller_shipping_method, attr, value)
    multi_seller_shipping_method.save()
    return multi_seller_shipping_method


@router.delete('/multi_seller_shipping_methods/{id}')
def delete_multi_seller_shipping_method(request, id: int):
    multi_seller_shipping_method = get_object_or_404(MultiSellerShippingMethod, id=id)
    multi_seller_shipping_method.delete()
    return {'success': True}


# SellerVolumeDiscount endpoints
@router.get('/seller_volume_discounts', response=List[SellerVolumeDiscount])
@paginate
def list_seller_volume_discounts(request):
    return SellerVolumeDiscount.objects.all()


@router.get('/seller_volume_discounts/{id}', response=SellerVolumeDiscount)
def get_seller_volume_discount(request, id: int):
    return get_object_or_404(SellerVolumeDiscount, id=id)


@router.post('/seller_volume_discounts', response=SellerVolumeDiscount)
def create_seller_volume_discount(request, payload: SellerVolumeDiscountCreate):
    data = payload.dict()
    seller_volume_discount = SellerVolumeDiscount.objects.create(**data)
    return seller_volume_discount


@router.put('/seller_volume_discounts/{id}', response=SellerVolumeDiscount)
def update_seller_volume_discount(request, id: int, payload: SellerVolumeDiscountUpdate):
    seller_volume_discount = get_object_or_404(SellerVolumeDiscount, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_volume_discount, attr, value)
    seller_volume_discount.save()
    return seller_volume_discount


@router.delete('/seller_volume_discounts/{id}')
def delete_seller_volume_discount(request, id: int):
    seller_volume_discount = get_object_or_404(SellerVolumeDiscount, id=id)
    seller_volume_discount.delete()
    return {'success': True}


# PaymentGateway endpoints
@router.get('/payment_gateways', response=List[PaymentGateway])
@paginate
def list_payment_gateways(request):
    return PaymentGateway.objects.all()


@router.get('/payment_gateways/{id}', response=PaymentGateway)
def get_payment_gateway(request, id: int):
    return get_object_or_404(PaymentGateway, id=id)


@router.post('/payment_gateways', response=PaymentGateway)
def create_payment_gateway(request, payload: PaymentGatewayCreate):
    data = payload.dict()
    payment_gateway = PaymentGateway.objects.create(**data)
    return payment_gateway


@router.put('/payment_gateways/{id}', response=PaymentGateway)
def update_payment_gateway(request, id: int, payload: PaymentGatewayUpdate):
    payment_gateway = get_object_or_404(PaymentGateway, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_gateway, attr, value)
    payment_gateway.save()
    return payment_gateway


@router.delete('/payment_gateways/{id}')
def delete_payment_gateway(request, id: int):
    payment_gateway = get_object_or_404(PaymentGateway, id=id)
    payment_gateway.delete()
    return {'success': True}


# GatewayConfigLine endpoints
@router.get('/gateway_config_lines', response=List[GatewayConfigLine])
@paginate
def list_gateway_config_lines(request):
    return GatewayConfigLine.objects.all()


@router.get('/gateway_config_lines/{id}', response=GatewayConfigLine)
def get_gateway_config_line(request, id: int):
    return get_object_or_404(GatewayConfigLine, id=id)


@router.post('/gateway_config_lines', response=GatewayConfigLine)
def create_gateway_config_line(request, payload: GatewayConfigLineCreate):
    data = payload.dict()
    gateway_config_line = GatewayConfigLine.objects.create(**data)
    return gateway_config_line


@router.put('/gateway_config_lines/{id}', response=GatewayConfigLine)
def update_gateway_config_line(request, id: int, payload: GatewayConfigLineUpdate):
    gateway_config_line = get_object_or_404(GatewayConfigLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(gateway_config_line, attr, value)
    gateway_config_line.save()
    return gateway_config_line


@router.delete('/gateway_config_lines/{id}')
def delete_gateway_config_line(request, id: int):
    gateway_config_line = get_object_or_404(GatewayConfigLine, id=id)
    gateway_config_line.delete()
    return {'success': True}


# CheckoutLine endpoints
@router.get('/checkout_lines', response=List[CheckoutLine])
@paginate
def list_checkout_lines(request):
    return CheckoutLine.objects.all()


@router.get('/checkout_lines/{id}', response=CheckoutLine)
def get_checkout_line(request, id: int):
    return get_object_or_404(CheckoutLine, id=id)


@router.post('/checkout_lines', response=CheckoutLine)
def create_checkout_line(request, payload: CheckoutLineCreate):
    data = payload.dict()
    checkout_line = CheckoutLine.objects.create(**data)
    return checkout_line


@router.put('/checkout_lines/{id}', response=CheckoutLine)
def update_checkout_line(request, id: int, payload: CheckoutLineUpdate):
    checkout_line = get_object_or_404(CheckoutLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_line, attr, value)
    checkout_line.save()
    return checkout_line


@router.delete('/checkout_lines/{id}')
def delete_checkout_line(request, id: int):
    checkout_line = get_object_or_404(CheckoutLine, id=id)
    checkout_line.delete()
    return {'success': True}


# ProductVariant endpoints
@router.get('/product_variants', response=List[ProductVariant])
@paginate
def list_product_variants(request):
    return ProductVariant.objects.all()


@router.get('/product_variants/{id}', response=ProductVariant)
def get_product_variant(request, id: int):
    return get_object_or_404(ProductVariant, id=id)


@router.post('/product_variants', response=ProductVariant)
def create_product_variant(request, payload: ProductVariantCreate):
    data = payload.dict()
    product_variant = ProductVariant.objects.create(**data)
    return product_variant


@router.put('/product_variants/{id}', response=ProductVariant)
def update_product_variant(request, id: int, payload: ProductVariantUpdate):
    product_variant = get_object_or_404(ProductVariant, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant, attr, value)
    product_variant.save()
    return product_variant


@router.delete('/product_variants/{id}')
def delete_product_variant(request, id: int):
    product_variant = get_object_or_404(ProductVariant, id=id)
    product_variant.delete()
    return {'success': True}


# Product endpoints
@router.get('/products', response=List[Product])
@paginate
def list_products(request):
    return Product.objects.all()


@router.get('/products/{id}', response=Product)
def get_product(request, id: int):
    return get_object_or_404(Product, id=id)


@router.post('/products', response=Product)
def create_product(request, payload: ProductCreate):
    data = payload.dict()
    product = Product.objects.create(**data)
    return product


@router.put('/products/{id}', response=Product)
def update_product(request, id: int, payload: ProductUpdate):
    product = get_object_or_404(Product, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product, attr, value)
    product.save()
    return product


@router.delete('/products/{id}')
def delete_product(request, id: int):
    product = get_object_or_404(Product, id=id)
    product.delete()
    return {'success': True}


# Seller endpoints
@router.get('/sellers', response=List[Seller])
@paginate
def list_sellers(request):
    return Seller.objects.all()


@router.get('/sellers/{id}', response=Seller)
def get_seller(request, id: int):
    return get_object_or_404(Seller, id=id)


@router.post('/sellers', response=Seller)
def create_seller(request, payload: SellerCreate):
    data = payload.dict()
    seller = Seller.objects.create(**data)
    return seller


@router.put('/sellers/{id}', response=Seller)
def update_seller(request, id: int, payload: SellerUpdate):
    seller = get_object_or_404(Seller, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller, attr, value)
    seller.save()
    return seller


@router.delete('/sellers/{id}')
def delete_seller(request, id: int):
    seller = get_object_or_404(Seller, id=id)
    seller.delete()
    return {'success': True}


# Image endpoints
@router.get('/images', response=List[Image])
@paginate
def list_images(request):
    return Image.objects.all()


@router.get('/images/{id}', response=Image)
def get_image(request, id: int):
    return get_object_or_404(Image, id=id)


@router.post('/images', response=Image)
def create_image(request, payload: ImageCreate):
    data = payload.dict()
    image = Image.objects.create(**data)
    return image


@router.put('/images/{id}', response=Image)
def update_image(request, id: int, payload: ImageUpdate):
    image = get_object_or_404(Image, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(image, attr, value)
    image.save()
    return image


@router.delete('/images/{id}')
def delete_image(request, id: int):
    image = get_object_or_404(Image, id=id)
    image.delete()
    return {'success': True}


# ProductCountableConnection endpoints
@router.get('/product_countable_connections', response=List[ProductCountableConnection])
@paginate
def list_product_countable_connections(request):
    return ProductCountableConnection.objects.all()


@router.get('/product_countable_connections/{id}', response=ProductCountableConnection)
def get_product_countable_connection(request, id: int):
    return get_object_or_404(ProductCountableConnection, id=id)


@router.post('/product_countable_connections', response=ProductCountableConnection)
def create_product_countable_connection(request, payload: ProductCountableConnectionCreate):
    data = payload.dict()
    product_countable_connection = ProductCountableConnection.objects.create(**data)
    return product_countable_connection


@router.put('/product_countable_connections/{id}', response=ProductCountableConnection)
def update_product_countable_connection(request, id: int, payload: ProductCountableConnectionUpdate):
    product_countable_connection = get_object_or_404(ProductCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_countable_connection, attr, value)
    product_countable_connection.save()
    return product_countable_connection


@router.delete('/product_countable_connections/{id}')
def delete_product_countable_connection(request, id: int):
    product_countable_connection = get_object_or_404(ProductCountableConnection, id=id)
    product_countable_connection.delete()
    return {'success': True}


# ProductCountableEdge endpoints
@router.get('/product_countable_edges', response=List[ProductCountableEdge])
@paginate
def list_product_countable_edges(request):
    return ProductCountableEdge.objects.all()


@router.get('/product_countable_edges/{id}', response=ProductCountableEdge)
def get_product_countable_edge(request, id: int):
    return get_object_or_404(ProductCountableEdge, id=id)


@router.post('/product_countable_edges', response=ProductCountableEdge)
def create_product_countable_edge(request, payload: ProductCountableEdgeCreate):
    data = payload.dict()
    product_countable_edge = ProductCountableEdge.objects.create(**data)
    return product_countable_edge


@router.put('/product_countable_edges/{id}', response=ProductCountableEdge)
def update_product_countable_edge(request, id: int, payload: ProductCountableEdgeUpdate):
    product_countable_edge = get_object_or_404(ProductCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_countable_edge, attr, value)
    product_countable_edge.save()
    return product_countable_edge


@router.delete('/product_countable_edges/{id}')
def delete_product_countable_edge(request, id: int):
    product_countable_edge = get_object_or_404(ProductCountableEdge, id=id)
    product_countable_edge.delete()
    return {'success': True}


# ProductVariantCountableConnection endpoints
@router.get('/product_variant_countable_connections', response=List[ProductVariantCountableConnection])
@paginate
def list_product_variant_countable_connections(request):
    return ProductVariantCountableConnection.objects.all()


@router.get('/product_variant_countable_connections/{id}', response=ProductVariantCountableConnection)
def get_product_variant_countable_connection(request, id: int):
    return get_object_or_404(ProductVariantCountableConnection, id=id)


@router.post('/product_variant_countable_connections', response=ProductVariantCountableConnection)
def create_product_variant_countable_connection(request, payload: ProductVariantCountableConnectionCreate):
    data = payload.dict()
    product_variant_countable_connection = ProductVariantCountableConnection.objects.create(**data)
    return product_variant_countable_connection


@router.put('/product_variant_countable_connections/{id}', response=ProductVariantCountableConnection)
def update_product_variant_countable_connection(request, id: int, payload: ProductVariantCountableConnectionUpdate):
    product_variant_countable_connection = get_object_or_404(ProductVariantCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_countable_connection, attr, value)
    product_variant_countable_connection.save()
    return product_variant_countable_connection


@router.delete('/product_variant_countable_connections/{id}')
def delete_product_variant_countable_connection(request, id: int):
    product_variant_countable_connection = get_object_or_404(ProductVariantCountableConnection, id=id)
    product_variant_countable_connection.delete()
    return {'success': True}


# ProductVariantCountableEdge endpoints
@router.get('/product_variant_countable_edges', response=List[ProductVariantCountableEdge])
@paginate
def list_product_variant_countable_edges(request):
    return ProductVariantCountableEdge.objects.all()


@router.get('/product_variant_countable_edges/{id}', response=ProductVariantCountableEdge)
def get_product_variant_countable_edge(request, id: int):
    return get_object_or_404(ProductVariantCountableEdge, id=id)


@router.post('/product_variant_countable_edges', response=ProductVariantCountableEdge)
def create_product_variant_countable_edge(request, payload: ProductVariantCountableEdgeCreate):
    data = payload.dict()
    product_variant_countable_edge = ProductVariantCountableEdge.objects.create(**data)
    return product_variant_countable_edge


@router.put('/product_variant_countable_edges/{id}', response=ProductVariantCountableEdge)
def update_product_variant_countable_edge(request, id: int, payload: ProductVariantCountableEdgeUpdate):
    product_variant_countable_edge = get_object_or_404(ProductVariantCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_countable_edge, attr, value)
    product_variant_countable_edge.save()
    return product_variant_countable_edge


@router.delete('/product_variant_countable_edges/{id}')
def delete_product_variant_countable_edge(request, id: int):
    product_variant_countable_edge = get_object_or_404(ProductVariantCountableEdge, id=id)
    product_variant_countable_edge.delete()
    return {'success': True}


# SellerUserTypeCountableConnection endpoints
@router.get('/seller_user_type_countable_connections', response=List[SellerUserTypeCountableConnection])
@paginate
def list_seller_user_type_countable_connections(request):
    return SellerUserTypeCountableConnection.objects.all()


@router.get('/seller_user_type_countable_connections/{id}', response=SellerUserTypeCountableConnection)
def get_seller_user_type_countable_connection(request, id: int):
    return get_object_or_404(SellerUserTypeCountableConnection, id=id)


@router.post('/seller_user_type_countable_connections', response=SellerUserTypeCountableConnection)
def create_seller_user_type_countable_connection(request, payload: SellerUserTypeCountableConnectionCreate):
    data = payload.dict()
    seller_user_type_countable_connection = SellerUserTypeCountableConnection.objects.create(**data)
    return seller_user_type_countable_connection


@router.put('/seller_user_type_countable_connections/{id}', response=SellerUserTypeCountableConnection)
def update_seller_user_type_countable_connection(request, id: int, payload: SellerUserTypeCountableConnectionUpdate):
    seller_user_type_countable_connection = get_object_or_404(SellerUserTypeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_user_type_countable_connection, attr, value)
    seller_user_type_countable_connection.save()
    return seller_user_type_countable_connection


@router.delete('/seller_user_type_countable_connections/{id}')
def delete_seller_user_type_countable_connection(request, id: int):
    seller_user_type_countable_connection = get_object_or_404(SellerUserTypeCountableConnection, id=id)
    seller_user_type_countable_connection.delete()
    return {'success': True}


# SellerUserTypeCountableEdge endpoints
@router.get('/seller_user_type_countable_edges', response=List[SellerUserTypeCountableEdge])
@paginate
def list_seller_user_type_countable_edges(request):
    return SellerUserTypeCountableEdge.objects.all()


@router.get('/seller_user_type_countable_edges/{id}', response=SellerUserTypeCountableEdge)
def get_seller_user_type_countable_edge(request, id: int):
    return get_object_or_404(SellerUserTypeCountableEdge, id=id)


@router.post('/seller_user_type_countable_edges', response=SellerUserTypeCountableEdge)
def create_seller_user_type_countable_edge(request, payload: SellerUserTypeCountableEdgeCreate):
    data = payload.dict()
    seller_user_type_countable_edge = SellerUserTypeCountableEdge.objects.create(**data)
    return seller_user_type_countable_edge


@router.put('/seller_user_type_countable_edges/{id}', response=SellerUserTypeCountableEdge)
def update_seller_user_type_countable_edge(request, id: int, payload: SellerUserTypeCountableEdgeUpdate):
    seller_user_type_countable_edge = get_object_or_404(SellerUserTypeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_user_type_countable_edge, attr, value)
    seller_user_type_countable_edge.save()
    return seller_user_type_countable_edge


@router.delete('/seller_user_type_countable_edges/{id}')
def delete_seller_user_type_countable_edge(request, id: int):
    seller_user_type_countable_edge = get_object_or_404(SellerUserTypeCountableEdge, id=id)
    seller_user_type_countable_edge.delete()
    return {'success': True}


# SellerUserType endpoints
@router.get('/seller_user_types', response=List[SellerUserType])
@paginate
def list_seller_user_types(request):
    return SellerUserType.objects.all()


@router.get('/seller_user_types/{id}', response=SellerUserType)
def get_seller_user_type(request, id: int):
    return get_object_or_404(SellerUserType, id=id)


@router.post('/seller_user_types', response=SellerUserType)
def create_seller_user_type(request, payload: SellerUserTypeCreate):
    data = payload.dict()
    seller_user_type = SellerUserType.objects.create(**data)
    return seller_user_type


@router.put('/seller_user_types/{id}', response=SellerUserType)
def update_seller_user_type(request, id: int, payload: SellerUserTypeUpdate):
    seller_user_type = get_object_or_404(SellerUserType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_user_type, attr, value)
    seller_user_type.save()
    return seller_user_type


@router.delete('/seller_user_types/{id}')
def delete_seller_user_type(request, id: int):
    seller_user_type = get_object_or_404(SellerUserType, id=id)
    seller_user_type.delete()
    return {'success': True}


# Tenant endpoints
@router.get('/tenants', response=List[Tenant])
@paginate
def list_tenants(request):
    return Tenant.objects.all()


@router.get('/tenants/{id}', response=Tenant)
def get_tenant(request, id: int):
    return get_object_or_404(Tenant, id=id)


@router.post('/tenants', response=Tenant)
def create_tenant(request, payload: TenantCreate):
    data = payload.dict()
    tenant = Tenant.objects.create(**data)
    return tenant


@router.put('/tenants/{id}', response=Tenant)
def update_tenant(request, id: int, payload: TenantUpdate):
    tenant = get_object_or_404(Tenant, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tenant, attr, value)
    tenant.save()
    return tenant


@router.delete('/tenants/{id}')
def delete_tenant(request, id: int):
    tenant = get_object_or_404(Tenant, id=id)
    tenant.delete()
    return {'success': True}


# SellerEventTypeCountableConnection endpoints
@router.get('/seller_event_type_countable_connections', response=List[SellerEventTypeCountableConnection])
@paginate
def list_seller_event_type_countable_connections(request):
    return SellerEventTypeCountableConnection.objects.all()


@router.get('/seller_event_type_countable_connections/{id}', response=SellerEventTypeCountableConnection)
def get_seller_event_type_countable_connection(request, id: int):
    return get_object_or_404(SellerEventTypeCountableConnection, id=id)


@router.post('/seller_event_type_countable_connections', response=SellerEventTypeCountableConnection)
def create_seller_event_type_countable_connection(request, payload: SellerEventTypeCountableConnectionCreate):
    data = payload.dict()
    seller_event_type_countable_connection = SellerEventTypeCountableConnection.objects.create(**data)
    return seller_event_type_countable_connection


@router.put('/seller_event_type_countable_connections/{id}', response=SellerEventTypeCountableConnection)
def update_seller_event_type_countable_connection(request, id: int, payload: SellerEventTypeCountableConnectionUpdate):
    seller_event_type_countable_connection = get_object_or_404(SellerEventTypeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_event_type_countable_connection, attr, value)
    seller_event_type_countable_connection.save()
    return seller_event_type_countable_connection


@router.delete('/seller_event_type_countable_connections/{id}')
def delete_seller_event_type_countable_connection(request, id: int):
    seller_event_type_countable_connection = get_object_or_404(SellerEventTypeCountableConnection, id=id)
    seller_event_type_countable_connection.delete()
    return {'success': True}


# SellerEventTypeCountableEdge endpoints
@router.get('/seller_event_type_countable_edges', response=List[SellerEventTypeCountableEdge])
@paginate
def list_seller_event_type_countable_edges(request):
    return SellerEventTypeCountableEdge.objects.all()


@router.get('/seller_event_type_countable_edges/{id}', response=SellerEventTypeCountableEdge)
def get_seller_event_type_countable_edge(request, id: int):
    return get_object_or_404(SellerEventTypeCountableEdge, id=id)


@router.post('/seller_event_type_countable_edges', response=SellerEventTypeCountableEdge)
def create_seller_event_type_countable_edge(request, payload: SellerEventTypeCountableEdgeCreate):
    data = payload.dict()
    seller_event_type_countable_edge = SellerEventTypeCountableEdge.objects.create(**data)
    return seller_event_type_countable_edge


@router.put('/seller_event_type_countable_edges/{id}', response=SellerEventTypeCountableEdge)
def update_seller_event_type_countable_edge(request, id: int, payload: SellerEventTypeCountableEdgeUpdate):
    seller_event_type_countable_edge = get_object_or_404(SellerEventTypeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_event_type_countable_edge, attr, value)
    seller_event_type_countable_edge.save()
    return seller_event_type_countable_edge


@router.delete('/seller_event_type_countable_edges/{id}')
def delete_seller_event_type_countable_edge(request, id: int):
    seller_event_type_countable_edge = get_object_or_404(SellerEventTypeCountableEdge, id=id)
    seller_event_type_countable_edge.delete()
    return {'success': True}


# SellerEventType endpoints
@router.get('/seller_event_types', response=List[SellerEventType])
@paginate
def list_seller_event_types(request):
    return SellerEventType.objects.all()


@router.get('/seller_event_types/{id}', response=SellerEventType)
def get_seller_event_type(request, id: int):
    return get_object_or_404(SellerEventType, id=id)


@router.post('/seller_event_types', response=SellerEventType)
def create_seller_event_type(request, payload: SellerEventTypeCreate):
    data = payload.dict()
    seller_event_type = SellerEventType.objects.create(**data)
    return seller_event_type


@router.put('/seller_event_types/{id}', response=SellerEventType)
def update_seller_event_type(request, id: int, payload: SellerEventTypeUpdate):
    seller_event_type = get_object_or_404(SellerEventType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_event_type, attr, value)
    seller_event_type.save()
    return seller_event_type


@router.delete('/seller_event_types/{id}')
def delete_seller_event_type(request, id: int):
    seller_event_type = get_object_or_404(SellerEventType, id=id)
    seller_event_type.delete()
    return {'success': True}


# SellerOnboardingChecklist endpoints
@router.get('/seller_onboarding_checklists', response=List[SellerOnboardingChecklist])
@paginate
def list_seller_onboarding_checklists(request):
    return SellerOnboardingChecklist.objects.all()


@router.get('/seller_onboarding_checklists/{id}', response=SellerOnboardingChecklist)
def get_seller_onboarding_checklist(request, id: int):
    return get_object_or_404(SellerOnboardingChecklist, id=id)


@router.post('/seller_onboarding_checklists', response=SellerOnboardingChecklist)
def create_seller_onboarding_checklist(request, payload: SellerOnboardingChecklistCreate):
    data = payload.dict()
    seller_onboarding_checklist = SellerOnboardingChecklist.objects.create(**data)
    return seller_onboarding_checklist


@router.put('/seller_onboarding_checklists/{id}', response=SellerOnboardingChecklist)
def update_seller_onboarding_checklist(request, id: int, payload: SellerOnboardingChecklistUpdate):
    seller_onboarding_checklist = get_object_or_404(SellerOnboardingChecklist, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_checklist, attr, value)
    seller_onboarding_checklist.save()
    return seller_onboarding_checklist


@router.delete('/seller_onboarding_checklists/{id}')
def delete_seller_onboarding_checklist(request, id: int):
    seller_onboarding_checklist = get_object_or_404(SellerOnboardingChecklist, id=id)
    seller_onboarding_checklist.delete()
    return {'success': True}


# SellerApplication endpoints
@router.get('/seller_applications', response=List[SellerApplication])
@paginate
def list_seller_applications(request):
    return SellerApplication.objects.all()


@router.get('/seller_applications/{id}', response=SellerApplication)
def get_seller_application(request, id: int):
    return get_object_or_404(SellerApplication, id=id)


@router.post('/seller_applications', response=SellerApplication)
def create_seller_application(request, payload: SellerApplicationCreate):
    data = payload.dict()
    seller_application = SellerApplication.objects.create(**data)
    return seller_application


@router.put('/seller_applications/{id}', response=SellerApplication)
def update_seller_application(request, id: int, payload: SellerApplicationUpdate):
    seller_application = get_object_or_404(SellerApplication, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_application, attr, value)
    seller_application.save()
    return seller_application


@router.delete('/seller_applications/{id}')
def delete_seller_application(request, id: int):
    seller_application = get_object_or_404(SellerApplication, id=id)
    seller_application.delete()
    return {'success': True}


# VendorPayoutCountableConnection endpoints
@router.get('/vendor_payout_countable_connections', response=List[VendorPayoutCountableConnection])
@paginate
def list_vendor_payout_countable_connections(request):
    return VendorPayoutCountableConnection.objects.all()


@router.get('/vendor_payout_countable_connections/{id}', response=VendorPayoutCountableConnection)
def get_vendor_payout_countable_connection(request, id: int):
    return get_object_or_404(VendorPayoutCountableConnection, id=id)


@router.post('/vendor_payout_countable_connections', response=VendorPayoutCountableConnection)
def create_vendor_payout_countable_connection(request, payload: VendorPayoutCountableConnectionCreate):
    data = payload.dict()
    vendor_payout_countable_connection = VendorPayoutCountableConnection.objects.create(**data)
    return vendor_payout_countable_connection


@router.put('/vendor_payout_countable_connections/{id}', response=VendorPayoutCountableConnection)
def update_vendor_payout_countable_connection(request, id: int, payload: VendorPayoutCountableConnectionUpdate):
    vendor_payout_countable_connection = get_object_or_404(VendorPayoutCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_countable_connection, attr, value)
    vendor_payout_countable_connection.save()
    return vendor_payout_countable_connection


@router.delete('/vendor_payout_countable_connections/{id}')
def delete_vendor_payout_countable_connection(request, id: int):
    vendor_payout_countable_connection = get_object_or_404(VendorPayoutCountableConnection, id=id)
    vendor_payout_countable_connection.delete()
    return {'success': True}


# VendorPayoutCountableEdge endpoints
@router.get('/vendor_payout_countable_edges', response=List[VendorPayoutCountableEdge])
@paginate
def list_vendor_payout_countable_edges(request):
    return VendorPayoutCountableEdge.objects.all()


@router.get('/vendor_payout_countable_edges/{id}', response=VendorPayoutCountableEdge)
def get_vendor_payout_countable_edge(request, id: int):
    return get_object_or_404(VendorPayoutCountableEdge, id=id)


@router.post('/vendor_payout_countable_edges', response=VendorPayoutCountableEdge)
def create_vendor_payout_countable_edge(request, payload: VendorPayoutCountableEdgeCreate):
    data = payload.dict()
    vendor_payout_countable_edge = VendorPayoutCountableEdge.objects.create(**data)
    return vendor_payout_countable_edge


@router.put('/vendor_payout_countable_edges/{id}', response=VendorPayoutCountableEdge)
def update_vendor_payout_countable_edge(request, id: int, payload: VendorPayoutCountableEdgeUpdate):
    vendor_payout_countable_edge = get_object_or_404(VendorPayoutCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_countable_edge, attr, value)
    vendor_payout_countable_edge.save()
    return vendor_payout_countable_edge


@router.delete('/vendor_payout_countable_edges/{id}')
def delete_vendor_payout_countable_edge(request, id: int):
    vendor_payout_countable_edge = get_object_or_404(VendorPayoutCountableEdge, id=id)
    vendor_payout_countable_edge.delete()
    return {'success': True}


# VendorPayout endpoints
@router.get('/vendor_payouts', response=List[VendorPayout])
@paginate
def list_vendor_payouts(request):
    return VendorPayout.objects.all()


@router.get('/vendor_payouts/{id}', response=VendorPayout)
def get_vendor_payout(request, id: int):
    return get_object_or_404(VendorPayout, id=id)


@router.post('/vendor_payouts', response=VendorPayout)
def create_vendor_payout(request, payload: VendorPayoutCreate):
    data = payload.dict()
    vendor_payout = VendorPayout.objects.create(**data)
    return vendor_payout


@router.put('/vendor_payouts/{id}', response=VendorPayout)
def update_vendor_payout(request, id: int, payload: VendorPayoutUpdate):
    vendor_payout = get_object_or_404(VendorPayout, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout, attr, value)
    vendor_payout.save()
    return vendor_payout


@router.delete('/vendor_payouts/{id}')
def delete_vendor_payout(request, id: int):
    vendor_payout = get_object_or_404(VendorPayout, id=id)
    vendor_payout.delete()
    return {'success': True}


# Payout endpoints
@router.get('/payouts', response=List[Payout])
@paginate
def list_payouts(request):
    return Payout.objects.all()


@router.get('/payouts/{id}', response=Payout)
def get_payout(request, id: int):
    return get_object_or_404(Payout, id=id)


@router.post('/payouts', response=Payout)
def create_payout(request, payload: PayoutCreate):
    data = payload.dict()
    payout = Payout.objects.create(**data)
    return payout


@router.put('/payouts/{id}', response=Payout)
def update_payout(request, id: int, payload: PayoutUpdate):
    payout = get_object_or_404(Payout, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout, attr, value)
    payout.save()
    return payout


@router.delete('/payouts/{id}')
def delete_payout(request, id: int):
    payout = get_object_or_404(Payout, id=id)
    payout.delete()
    return {'success': True}


# VendorPayoutEvent endpoints
@router.get('/vendor_payout_events', response=List[VendorPayoutEvent])
@paginate
def list_vendor_payout_events(request):
    return VendorPayoutEvent.objects.all()


@router.get('/vendor_payout_events/{id}', response=VendorPayoutEvent)
def get_vendor_payout_event(request, id: int):
    return get_object_or_404(VendorPayoutEvent, id=id)


@router.post('/vendor_payout_events', response=VendorPayoutEvent)
def create_vendor_payout_event(request, payload: VendorPayoutEventCreate):
    data = payload.dict()
    vendor_payout_event = VendorPayoutEvent.objects.create(**data)
    return vendor_payout_event


@router.put('/vendor_payout_events/{id}', response=VendorPayoutEvent)
def update_vendor_payout_event(request, id: int, payload: VendorPayoutEventUpdate):
    vendor_payout_event = get_object_or_404(VendorPayoutEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_event, attr, value)
    vendor_payout_event.save()
    return vendor_payout_event


@router.delete('/vendor_payout_events/{id}')
def delete_vendor_payout_event(request, id: int):
    vendor_payout_event = get_object_or_404(VendorPayoutEvent, id=id)
    vendor_payout_event.delete()
    return {'success': True}


# OrderCountableConnection endpoints
@router.get('/order_countable_connections', response=List[OrderCountableConnection])
@paginate
def list_order_countable_connections(request):
    return OrderCountableConnection.objects.all()


@router.get('/order_countable_connections/{id}', response=OrderCountableConnection)
def get_order_countable_connection(request, id: int):
    return get_object_or_404(OrderCountableConnection, id=id)


@router.post('/order_countable_connections', response=OrderCountableConnection)
def create_order_countable_connection(request, payload: OrderCountableConnectionCreate):
    data = payload.dict()
    order_countable_connection = OrderCountableConnection.objects.create(**data)
    return order_countable_connection


@router.put('/order_countable_connections/{id}', response=OrderCountableConnection)
def update_order_countable_connection(request, id: int, payload: OrderCountableConnectionUpdate):
    order_countable_connection = get_object_or_404(OrderCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_countable_connection, attr, value)
    order_countable_connection.save()
    return order_countable_connection


@router.delete('/order_countable_connections/{id}')
def delete_order_countable_connection(request, id: int):
    order_countable_connection = get_object_or_404(OrderCountableConnection, id=id)
    order_countable_connection.delete()
    return {'success': True}


# OrderCountableEdge endpoints
@router.get('/order_countable_edges', response=List[OrderCountableEdge])
@paginate
def list_order_countable_edges(request):
    return OrderCountableEdge.objects.all()


@router.get('/order_countable_edges/{id}', response=OrderCountableEdge)
def get_order_countable_edge(request, id: int):
    return get_object_or_404(OrderCountableEdge, id=id)


@router.post('/order_countable_edges', response=OrderCountableEdge)
def create_order_countable_edge(request, payload: OrderCountableEdgeCreate):
    data = payload.dict()
    order_countable_edge = OrderCountableEdge.objects.create(**data)
    return order_countable_edge


@router.put('/order_countable_edges/{id}', response=OrderCountableEdge)
def update_order_countable_edge(request, id: int, payload: OrderCountableEdgeUpdate):
    order_countable_edge = get_object_or_404(OrderCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_countable_edge, attr, value)
    order_countable_edge.save()
    return order_countable_edge


@router.delete('/order_countable_edges/{id}')
def delete_order_countable_edge(request, id: int):
    order_countable_edge = get_object_or_404(OrderCountableEdge, id=id)
    order_countable_edge.delete()
    return {'success': True}


# Order endpoints
@router.get('/orders', response=List[Order])
@paginate
def list_orders(request):
    return Order.objects.all()


@router.get('/orders/{id}', response=Order)
def get_order(request, id: int):
    return get_object_or_404(Order, id=id)


@router.post('/orders', response=Order)
def create_order(request, payload: OrderCreate):
    data = payload.dict()
    order = Order.objects.create(**data)
    return order


@router.put('/orders/{id}', response=Order)
def update_order(request, id: int, payload: OrderUpdate):
    order = get_object_or_404(Order, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order, attr, value)
    order.save()
    return order


@router.delete('/orders/{id}')
def delete_order(request, id: int):
    order = get_object_or_404(Order, id=id)
    order.delete()
    return {'success': True}


# TaxedMoney endpoints
@router.get('/taxed_moneys', response=List[TaxedMoney])
@paginate
def list_taxed_moneys(request):
    return TaxedMoney.objects.all()


@router.get('/taxed_moneys/{id}', response=TaxedMoney)
def get_taxed_money(request, id: int):
    return get_object_or_404(TaxedMoney, id=id)


@router.post('/taxed_moneys', response=TaxedMoney)
def create_taxed_money(request, payload: TaxedMoneyCreate):
    data = payload.dict()
    taxed_money = TaxedMoney.objects.create(**data)
    return taxed_money


@router.put('/taxed_moneys/{id}', response=TaxedMoney)
def update_taxed_money(request, id: int, payload: TaxedMoneyUpdate):
    taxed_money = get_object_or_404(TaxedMoney, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(taxed_money, attr, value)
    taxed_money.save()
    return taxed_money


@router.delete('/taxed_moneys/{id}')
def delete_taxed_money(request, id: int):
    taxed_money = get_object_or_404(TaxedMoney, id=id)
    taxed_money.delete()
    return {'success': True}


# Voucher endpoints
@router.get('/vouchers', response=List[Voucher])
@paginate
def list_vouchers(request):
    return Voucher.objects.all()


@router.get('/vouchers/{id}', response=Voucher)
def get_voucher(request, id: int):
    return get_object_or_404(Voucher, id=id)


@router.post('/vouchers', response=Voucher)
def create_voucher(request, payload: VoucherCreate):
    data = payload.dict()
    voucher = Voucher.objects.create(**data)
    return voucher


@router.put('/vouchers/{id}', response=Voucher)
def update_voucher(request, id: int, payload: VoucherUpdate):
    voucher = get_object_or_404(Voucher, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher, attr, value)
    voucher.save()
    return voucher


@router.delete('/vouchers/{id}')
def delete_voucher(request, id: int):
    voucher = get_object_or_404(Voucher, id=id)
    voucher.delete()
    return {'success': True}


# CategoryCountableConnection endpoints
@router.get('/category_countable_connections', response=List[CategoryCountableConnection])
@paginate
def list_category_countable_connections(request):
    return CategoryCountableConnection.objects.all()


@router.get('/category_countable_connections/{id}', response=CategoryCountableConnection)
def get_category_countable_connection(request, id: int):
    return get_object_or_404(CategoryCountableConnection, id=id)


@router.post('/category_countable_connections', response=CategoryCountableConnection)
def create_category_countable_connection(request, payload: CategoryCountableConnectionCreate):
    data = payload.dict()
    category_countable_connection = CategoryCountableConnection.objects.create(**data)
    return category_countable_connection


@router.put('/category_countable_connections/{id}', response=CategoryCountableConnection)
def update_category_countable_connection(request, id: int, payload: CategoryCountableConnectionUpdate):
    category_countable_connection = get_object_or_404(CategoryCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_countable_connection, attr, value)
    category_countable_connection.save()
    return category_countable_connection


@router.delete('/category_countable_connections/{id}')
def delete_category_countable_connection(request, id: int):
    category_countable_connection = get_object_or_404(CategoryCountableConnection, id=id)
    category_countable_connection.delete()
    return {'success': True}


# CategoryCountableEdge endpoints
@router.get('/category_countable_edges', response=List[CategoryCountableEdge])
@paginate
def list_category_countable_edges(request):
    return CategoryCountableEdge.objects.all()


@router.get('/category_countable_edges/{id}', response=CategoryCountableEdge)
def get_category_countable_edge(request, id: int):
    return get_object_or_404(CategoryCountableEdge, id=id)


@router.post('/category_countable_edges', response=CategoryCountableEdge)
def create_category_countable_edge(request, payload: CategoryCountableEdgeCreate):
    data = payload.dict()
    category_countable_edge = CategoryCountableEdge.objects.create(**data)
    return category_countable_edge


@router.put('/category_countable_edges/{id}', response=CategoryCountableEdge)
def update_category_countable_edge(request, id: int, payload: CategoryCountableEdgeUpdate):
    category_countable_edge = get_object_or_404(CategoryCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_countable_edge, attr, value)
    category_countable_edge.save()
    return category_countable_edge


@router.delete('/category_countable_edges/{id}')
def delete_category_countable_edge(request, id: int):
    category_countable_edge = get_object_or_404(CategoryCountableEdge, id=id)
    category_countable_edge.delete()
    return {'success': True}


# Category endpoints
@router.get('/categorys', response=List[Category])
@paginate
def list_categorys(request):
    return Category.objects.all()


@router.get('/categorys/{id}', response=Category)
def get_category(request, id: int):
    return get_object_or_404(Category, id=id)


@router.post('/categorys', response=Category)
def create_category(request, payload: CategoryCreate):
    data = payload.dict()
    category = Category.objects.create(**data)
    return category


@router.put('/categorys/{id}', response=Category)
def update_category(request, id: int, payload: CategoryUpdate):
    category = get_object_or_404(Category, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category, attr, value)
    category.save()
    return category


@router.delete('/categorys/{id}')
def delete_category(request, id: int):
    category = get_object_or_404(Category, id=id)
    category.delete()
    return {'success': True}


# SelectedAttribute endpoints
@router.get('/selected_attributes', response=List[SelectedAttribute])
@paginate
def list_selected_attributes(request):
    return SelectedAttribute.objects.all()


@router.get('/selected_attributes/{id}', response=SelectedAttribute)
def get_selected_attribute(request, id: int):
    return get_object_or_404(SelectedAttribute, id=id)


@router.post('/selected_attributes', response=SelectedAttribute)
def create_selected_attribute(request, payload: SelectedAttributeCreate):
    data = payload.dict()
    selected_attribute = SelectedAttribute.objects.create(**data)
    return selected_attribute


@router.put('/selected_attributes/{id}', response=SelectedAttribute)
def update_selected_attribute(request, id: int, payload: SelectedAttributeUpdate):
    selected_attribute = get_object_or_404(SelectedAttribute, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(selected_attribute, attr, value)
    selected_attribute.save()
    return selected_attribute


@router.delete('/selected_attributes/{id}')
def delete_selected_attribute(request, id: int):
    selected_attribute = get_object_or_404(SelectedAttribute, id=id)
    selected_attribute.delete()
    return {'success': True}


# Attribute endpoints
@router.get('/attributes', response=List[Attribute])
@paginate
def list_attributes(request):
    return Attribute.objects.all()


@router.get('/attributes/{id}', response=Attribute)
def get_attribute(request, id: int):
    return get_object_or_404(Attribute, id=id)


@router.post('/attributes', response=Attribute)
def create_attribute(request, payload: AttributeCreate):
    data = payload.dict()
    attribute = Attribute.objects.create(**data)
    return attribute


@router.put('/attributes/{id}', response=Attribute)
def update_attribute(request, id: int, payload: AttributeUpdate):
    attribute = get_object_or_404(Attribute, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute, attr, value)
    attribute.save()
    return attribute


@router.delete('/attributes/{id}')
def delete_attribute(request, id: int):
    attribute = get_object_or_404(Attribute, id=id)
    attribute.delete()
    return {'success': True}


# ProductTypeCountableConnection endpoints
@router.get('/product_type_countable_connections', response=List[ProductTypeCountableConnection])
@paginate
def list_product_type_countable_connections(request):
    return ProductTypeCountableConnection.objects.all()


@router.get('/product_type_countable_connections/{id}', response=ProductTypeCountableConnection)
def get_product_type_countable_connection(request, id: int):
    return get_object_or_404(ProductTypeCountableConnection, id=id)


@router.post('/product_type_countable_connections', response=ProductTypeCountableConnection)
def create_product_type_countable_connection(request, payload: ProductTypeCountableConnectionCreate):
    data = payload.dict()
    product_type_countable_connection = ProductTypeCountableConnection.objects.create(**data)
    return product_type_countable_connection


@router.put('/product_type_countable_connections/{id}', response=ProductTypeCountableConnection)
def update_product_type_countable_connection(request, id: int, payload: ProductTypeCountableConnectionUpdate):
    product_type_countable_connection = get_object_or_404(ProductTypeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_countable_connection, attr, value)
    product_type_countable_connection.save()
    return product_type_countable_connection


@router.delete('/product_type_countable_connections/{id}')
def delete_product_type_countable_connection(request, id: int):
    product_type_countable_connection = get_object_or_404(ProductTypeCountableConnection, id=id)
    product_type_countable_connection.delete()
    return {'success': True}


# ProductTypeCountableEdge endpoints
@router.get('/product_type_countable_edges', response=List[ProductTypeCountableEdge])
@paginate
def list_product_type_countable_edges(request):
    return ProductTypeCountableEdge.objects.all()


@router.get('/product_type_countable_edges/{id}', response=ProductTypeCountableEdge)
def get_product_type_countable_edge(request, id: int):
    return get_object_or_404(ProductTypeCountableEdge, id=id)


@router.post('/product_type_countable_edges', response=ProductTypeCountableEdge)
def create_product_type_countable_edge(request, payload: ProductTypeCountableEdgeCreate):
    data = payload.dict()
    product_type_countable_edge = ProductTypeCountableEdge.objects.create(**data)
    return product_type_countable_edge


@router.put('/product_type_countable_edges/{id}', response=ProductTypeCountableEdge)
def update_product_type_countable_edge(request, id: int, payload: ProductTypeCountableEdgeUpdate):
    product_type_countable_edge = get_object_or_404(ProductTypeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_countable_edge, attr, value)
    product_type_countable_edge.save()
    return product_type_countable_edge


@router.delete('/product_type_countable_edges/{id}')
def delete_product_type_countable_edge(request, id: int):
    product_type_countable_edge = get_object_or_404(ProductTypeCountableEdge, id=id)
    product_type_countable_edge.delete()
    return {'success': True}


# ProductType endpoints
@router.get('/product_types', response=List[ProductType])
@paginate
def list_product_types(request):
    return ProductType.objects.all()


@router.get('/product_types/{id}', response=ProductType)
def get_product_type(request, id: int):
    return get_object_or_404(ProductType, id=id)


@router.post('/product_types', response=ProductType)
def create_product_type(request, payload: ProductTypeCreate):
    data = payload.dict()
    product_type = ProductType.objects.create(**data)
    return product_type


@router.put('/product_types/{id}', response=ProductType)
def update_product_type(request, id: int, payload: ProductTypeUpdate):
    product_type = get_object_or_404(ProductType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type, attr, value)
    product_type.save()
    return product_type


@router.delete('/product_types/{id}')
def delete_product_type(request, id: int):
    product_type = get_object_or_404(ProductType, id=id)
    product_type.delete()
    return {'success': True}


# TaxType endpoints
@router.get('/tax_types', response=List[TaxType])
@paginate
def list_tax_types(request):
    return TaxType.objects.all()


@router.get('/tax_types/{id}', response=TaxType)
def get_tax_type(request, id: int):
    return get_object_or_404(TaxType, id=id)


@router.post('/tax_types', response=TaxType)
def create_tax_type(request, payload: TaxTypeCreate):
    data = payload.dict()
    tax_type = TaxType.objects.create(**data)
    return tax_type


@router.put('/tax_types/{id}', response=TaxType)
def update_tax_type(request, id: int, payload: TaxTypeUpdate):
    tax_type = get_object_or_404(TaxType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tax_type, attr, value)
    tax_type.save()
    return tax_type


@router.delete('/tax_types/{id}')
def delete_tax_type(request, id: int):
    tax_type = get_object_or_404(TaxType, id=id)
    tax_type.delete()
    return {'success': True}


# AttributeCountableConnection endpoints
@router.get('/attribute_countable_connections', response=List[AttributeCountableConnection])
@paginate
def list_attribute_countable_connections(request):
    return AttributeCountableConnection.objects.all()


@router.get('/attribute_countable_connections/{id}', response=AttributeCountableConnection)
def get_attribute_countable_connection(request, id: int):
    return get_object_or_404(AttributeCountableConnection, id=id)


@router.post('/attribute_countable_connections', response=AttributeCountableConnection)
def create_attribute_countable_connection(request, payload: AttributeCountableConnectionCreate):
    data = payload.dict()
    attribute_countable_connection = AttributeCountableConnection.objects.create(**data)
    return attribute_countable_connection


@router.put('/attribute_countable_connections/{id}', response=AttributeCountableConnection)
def update_attribute_countable_connection(request, id: int, payload: AttributeCountableConnectionUpdate):
    attribute_countable_connection = get_object_or_404(AttributeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_countable_connection, attr, value)
    attribute_countable_connection.save()
    return attribute_countable_connection


@router.delete('/attribute_countable_connections/{id}')
def delete_attribute_countable_connection(request, id: int):
    attribute_countable_connection = get_object_or_404(AttributeCountableConnection, id=id)
    attribute_countable_connection.delete()
    return {'success': True}


# AttributeCountableEdge endpoints
@router.get('/attribute_countable_edges', response=List[AttributeCountableEdge])
@paginate
def list_attribute_countable_edges(request):
    return AttributeCountableEdge.objects.all()


@router.get('/attribute_countable_edges/{id}', response=AttributeCountableEdge)
def get_attribute_countable_edge(request, id: int):
    return get_object_or_404(AttributeCountableEdge, id=id)


@router.post('/attribute_countable_edges', response=AttributeCountableEdge)
def create_attribute_countable_edge(request, payload: AttributeCountableEdgeCreate):
    data = payload.dict()
    attribute_countable_edge = AttributeCountableEdge.objects.create(**data)
    return attribute_countable_edge


@router.put('/attribute_countable_edges/{id}', response=AttributeCountableEdge)
def update_attribute_countable_edge(request, id: int, payload: AttributeCountableEdgeUpdate):
    attribute_countable_edge = get_object_or_404(AttributeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_countable_edge, attr, value)
    attribute_countable_edge.save()
    return attribute_countable_edge


@router.delete('/attribute_countable_edges/{id}')
def delete_attribute_countable_edge(request, id: int):
    attribute_countable_edge = get_object_or_404(AttributeCountableEdge, id=id)
    attribute_countable_edge.delete()
    return {'success': True}


# ProductTypeProductFeature endpoints
@router.get('/product_type_product_features', response=List[ProductTypeProductFeature])
@paginate
def list_product_type_product_features(request):
    return ProductTypeProductFeature.objects.all()


@router.get('/product_type_product_features/{id}', response=ProductTypeProductFeature)
def get_product_type_product_feature(request, id: int):
    return get_object_or_404(ProductTypeProductFeature, id=id)


@router.post('/product_type_product_features', response=ProductTypeProductFeature)
def create_product_type_product_feature(request, payload: ProductTypeProductFeatureCreate):
    data = payload.dict()
    product_type_product_feature = ProductTypeProductFeature.objects.create(**data)
    return product_type_product_feature


@router.put('/product_type_product_features/{id}', response=ProductTypeProductFeature)
def update_product_type_product_feature(request, id: int, payload: ProductTypeProductFeatureUpdate):
    product_type_product_feature = get_object_or_404(ProductTypeProductFeature, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_product_feature, attr, value)
    product_type_product_feature.save()
    return product_type_product_feature


@router.delete('/product_type_product_features/{id}')
def delete_product_type_product_feature(request, id: int):
    product_type_product_feature = get_object_or_404(ProductTypeProductFeature, id=id)
    product_type_product_feature.delete()
    return {'success': True}


# ProductFeatureCountableConnection endpoints
@router.get('/product_feature_countable_connections', response=List[ProductFeatureCountableConnection])
@paginate
def list_product_feature_countable_connections(request):
    return ProductFeatureCountableConnection.objects.all()


@router.get('/product_feature_countable_connections/{id}', response=ProductFeatureCountableConnection)
def get_product_feature_countable_connection(request, id: int):
    return get_object_or_404(ProductFeatureCountableConnection, id=id)


@router.post('/product_feature_countable_connections', response=ProductFeatureCountableConnection)
def create_product_feature_countable_connection(request, payload: ProductFeatureCountableConnectionCreate):
    data = payload.dict()
    product_feature_countable_connection = ProductFeatureCountableConnection.objects.create(**data)
    return product_feature_countable_connection


@router.put('/product_feature_countable_connections/{id}', response=ProductFeatureCountableConnection)
def update_product_feature_countable_connection(request, id: int, payload: ProductFeatureCountableConnectionUpdate):
    product_feature_countable_connection = get_object_or_404(ProductFeatureCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_feature_countable_connection, attr, value)
    product_feature_countable_connection.save()
    return product_feature_countable_connection


@router.delete('/product_feature_countable_connections/{id}')
def delete_product_feature_countable_connection(request, id: int):
    product_feature_countable_connection = get_object_or_404(ProductFeatureCountableConnection, id=id)
    product_feature_countable_connection.delete()
    return {'success': True}


# ProductFeatureCountableEdge endpoints
@router.get('/product_feature_countable_edges', response=List[ProductFeatureCountableEdge])
@paginate
def list_product_feature_countable_edges(request):
    return ProductFeatureCountableEdge.objects.all()


@router.get('/product_feature_countable_edges/{id}', response=ProductFeatureCountableEdge)
def get_product_feature_countable_edge(request, id: int):
    return get_object_or_404(ProductFeatureCountableEdge, id=id)


@router.post('/product_feature_countable_edges', response=ProductFeatureCountableEdge)
def create_product_feature_countable_edge(request, payload: ProductFeatureCountableEdgeCreate):
    data = payload.dict()
    product_feature_countable_edge = ProductFeatureCountableEdge.objects.create(**data)
    return product_feature_countable_edge


@router.put('/product_feature_countable_edges/{id}', response=ProductFeatureCountableEdge)
def update_product_feature_countable_edge(request, id: int, payload: ProductFeatureCountableEdgeUpdate):
    product_feature_countable_edge = get_object_or_404(ProductFeatureCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_feature_countable_edge, attr, value)
    product_feature_countable_edge.save()
    return product_feature_countable_edge


@router.delete('/product_feature_countable_edges/{id}')
def delete_product_feature_countable_edge(request, id: int):
    product_feature_countable_edge = get_object_or_404(ProductFeatureCountableEdge, id=id)
    product_feature_countable_edge.delete()
    return {'success': True}


# ProductFeature endpoints
@router.get('/product_features', response=List[ProductFeature])
@paginate
def list_product_features(request):
    return ProductFeature.objects.all()


@router.get('/product_features/{id}', response=ProductFeature)
def get_product_feature(request, id: int):
    return get_object_or_404(ProductFeature, id=id)


@router.post('/product_features', response=ProductFeature)
def create_product_feature(request, payload: ProductFeatureCreate):
    data = payload.dict()
    product_feature = ProductFeature.objects.create(**data)
    return product_feature


@router.put('/product_features/{id}', response=ProductFeature)
def update_product_feature(request, id: int, payload: ProductFeatureUpdate):
    product_feature = get_object_or_404(ProductFeature, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_feature, attr, value)
    product_feature.save()
    return product_feature


@router.delete('/product_features/{id}')
def delete_product_feature(request, id: int):
    product_feature = get_object_or_404(ProductFeature, id=id)
    product_feature.delete()
    return {'success': True}


# App endpoints
@router.get('/apps', response=List[App])
@paginate
def list_apps(request):
    return App.objects.all()


@router.get('/apps/{id}', response=App)
def get_app(request, id: int):
    return get_object_or_404(App, id=id)


@router.post('/apps', response=App)
def create_app(request, payload: AppCreate):
    data = payload.dict()
    app = App.objects.create(**data)
    return app


@router.put('/apps/{id}', response=App)
def update_app(request, id: int, payload: AppUpdate):
    app = get_object_or_404(App, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app, attr, value)
    app.save()
    return app


@router.delete('/apps/{id}')
def delete_app(request, id: int):
    app = get_object_or_404(App, id=id)
    app.delete()
    return {'success': True}


# Permission endpoints
@router.get('/permissions', response=List[Permission])
@paginate
def list_permissions(request):
    return Permission.objects.all()


@router.get('/permissions/{id}', response=Permission)
def get_permission(request, id: int):
    return get_object_or_404(Permission, id=id)


@router.post('/permissions', response=Permission)
def create_permission(request, payload: PermissionCreate):
    data = payload.dict()
    permission = Permission.objects.create(**data)
    return permission


@router.put('/permissions/{id}', response=Permission)
def update_permission(request, id: int, payload: PermissionUpdate):
    permission = get_object_or_404(Permission, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(permission, attr, value)
    permission.save()
    return permission


@router.delete('/permissions/{id}')
def delete_permission(request, id: int):
    permission = get_object_or_404(Permission, id=id)
    permission.delete()
    return {'success': True}


# AppToken endpoints
@router.get('/app_tokens', response=List[AppToken])
@paginate
def list_app_tokens(request):
    return AppToken.objects.all()


@router.get('/app_tokens/{id}', response=AppToken)
def get_app_token(request, id: int):
    return get_object_or_404(AppToken, id=id)


@router.post('/app_tokens', response=AppToken)
def create_app_token(request, payload: AppTokenCreate):
    data = payload.dict()
    app_token = AppToken.objects.create(**data)
    return app_token


@router.put('/app_tokens/{id}', response=AppToken)
def update_app_token(request, id: int, payload: AppTokenUpdate):
    app_token = get_object_or_404(AppToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_token, attr, value)
    app_token.save()
    return app_token


@router.delete('/app_tokens/{id}')
def delete_app_token(request, id: int):
    app_token = get_object_or_404(AppToken, id=id)
    app_token.delete()
    return {'success': True}


# Webhook endpoints
@router.get('/webhooks', response=List[Webhook])
@paginate
def list_webhooks(request):
    return Webhook.objects.all()


@router.get('/webhooks/{id}', response=Webhook)
def get_webhook(request, id: int):
    return get_object_or_404(Webhook, id=id)


@router.post('/webhooks', response=Webhook)
def create_webhook(request, payload: WebhookCreate):
    data = payload.dict()
    webhook = Webhook.objects.create(**data)
    return webhook


@router.put('/webhooks/{id}', response=Webhook)
def update_webhook(request, id: int, payload: WebhookUpdate):
    webhook = get_object_or_404(Webhook, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook, attr, value)
    webhook.save()
    return webhook


@router.delete('/webhooks/{id}')
def delete_webhook(request, id: int):
    webhook = get_object_or_404(Webhook, id=id)
    webhook.delete()
    return {'success': True}


# WebhookEvent endpoints
@router.get('/webhook_events', response=List[WebhookEvent])
@paginate
def list_webhook_events(request):
    return WebhookEvent.objects.all()


@router.get('/webhook_events/{id}', response=WebhookEvent)
def get_webhook_event(request, id: int):
    return get_object_or_404(WebhookEvent, id=id)


@router.post('/webhook_events', response=WebhookEvent)
def create_webhook_event(request, payload: WebhookEventCreate):
    data = payload.dict()
    webhook_event = WebhookEvent.objects.create(**data)
    return webhook_event


@router.put('/webhook_events/{id}', response=WebhookEvent)
def update_webhook_event(request, id: int, payload: WebhookEventUpdate):
    webhook_event = get_object_or_404(WebhookEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_event, attr, value)
    webhook_event.save()
    return webhook_event


@router.delete('/webhook_events/{id}')
def delete_webhook_event(request, id: int):
    webhook_event = get_object_or_404(WebhookEvent, id=id)
    webhook_event.delete()
    return {'success': True}


# ProductTypeVariantFeature endpoints
@router.get('/product_type_variant_features', response=List[ProductTypeVariantFeature])
@paginate
def list_product_type_variant_features(request):
    return ProductTypeVariantFeature.objects.all()


@router.get('/product_type_variant_features/{id}', response=ProductTypeVariantFeature)
def get_product_type_variant_feature(request, id: int):
    return get_object_or_404(ProductTypeVariantFeature, id=id)


@router.post('/product_type_variant_features', response=ProductTypeVariantFeature)
def create_product_type_variant_feature(request, payload: ProductTypeVariantFeatureCreate):
    data = payload.dict()
    product_type_variant_feature = ProductTypeVariantFeature.objects.create(**data)
    return product_type_variant_feature


@router.put('/product_type_variant_features/{id}', response=ProductTypeVariantFeature)
def update_product_type_variant_feature(request, id: int, payload: ProductTypeVariantFeatureUpdate):
    product_type_variant_feature = get_object_or_404(ProductTypeVariantFeature, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_variant_feature, attr, value)
    product_type_variant_feature.save()
    return product_type_variant_feature


@router.delete('/product_type_variant_features/{id}')
def delete_product_type_variant_feature(request, id: int):
    product_type_variant_feature = get_object_or_404(ProductTypeVariantFeature, id=id)
    product_type_variant_feature.delete()
    return {'success': True}


# VariantFeatureCountableConnection endpoints
@router.get('/variant_feature_countable_connections', response=List[VariantFeatureCountableConnection])
@paginate
def list_variant_feature_countable_connections(request):
    return VariantFeatureCountableConnection.objects.all()


@router.get('/variant_feature_countable_connections/{id}', response=VariantFeatureCountableConnection)
def get_variant_feature_countable_connection(request, id: int):
    return get_object_or_404(VariantFeatureCountableConnection, id=id)


@router.post('/variant_feature_countable_connections', response=VariantFeatureCountableConnection)
def create_variant_feature_countable_connection(request, payload: VariantFeatureCountableConnectionCreate):
    data = payload.dict()
    variant_feature_countable_connection = VariantFeatureCountableConnection.objects.create(**data)
    return variant_feature_countable_connection


@router.put('/variant_feature_countable_connections/{id}', response=VariantFeatureCountableConnection)
def update_variant_feature_countable_connection(request, id: int, payload: VariantFeatureCountableConnectionUpdate):
    variant_feature_countable_connection = get_object_or_404(VariantFeatureCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(variant_feature_countable_connection, attr, value)
    variant_feature_countable_connection.save()
    return variant_feature_countable_connection


@router.delete('/variant_feature_countable_connections/{id}')
def delete_variant_feature_countable_connection(request, id: int):
    variant_feature_countable_connection = get_object_or_404(VariantFeatureCountableConnection, id=id)
    variant_feature_countable_connection.delete()
    return {'success': True}


# VariantFeatureCountableEdge endpoints
@router.get('/variant_feature_countable_edges', response=List[VariantFeatureCountableEdge])
@paginate
def list_variant_feature_countable_edges(request):
    return VariantFeatureCountableEdge.objects.all()


@router.get('/variant_feature_countable_edges/{id}', response=VariantFeatureCountableEdge)
def get_variant_feature_countable_edge(request, id: int):
    return get_object_or_404(VariantFeatureCountableEdge, id=id)


@router.post('/variant_feature_countable_edges', response=VariantFeatureCountableEdge)
def create_variant_feature_countable_edge(request, payload: VariantFeatureCountableEdgeCreate):
    data = payload.dict()
    variant_feature_countable_edge = VariantFeatureCountableEdge.objects.create(**data)
    return variant_feature_countable_edge


@router.put('/variant_feature_countable_edges/{id}', response=VariantFeatureCountableEdge)
def update_variant_feature_countable_edge(request, id: int, payload: VariantFeatureCountableEdgeUpdate):
    variant_feature_countable_edge = get_object_or_404(VariantFeatureCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(variant_feature_countable_edge, attr, value)
    variant_feature_countable_edge.save()
    return variant_feature_countable_edge


@router.delete('/variant_feature_countable_edges/{id}')
def delete_variant_feature_countable_edge(request, id: int):
    variant_feature_countable_edge = get_object_or_404(VariantFeatureCountableEdge, id=id)
    variant_feature_countable_edge.delete()
    return {'success': True}


# VariantFeature endpoints
@router.get('/variant_features', response=List[VariantFeature])
@paginate
def list_variant_features(request):
    return VariantFeature.objects.all()


@router.get('/variant_features/{id}', response=VariantFeature)
def get_variant_feature(request, id: int):
    return get_object_or_404(VariantFeature, id=id)


@router.post('/variant_features', response=VariantFeature)
def create_variant_feature(request, payload: VariantFeatureCreate):
    data = payload.dict()
    variant_feature = VariantFeature.objects.create(**data)
    return variant_feature


@router.put('/variant_features/{id}', response=VariantFeature)
def update_variant_feature(request, id: int, payload: VariantFeatureUpdate):
    variant_feature = get_object_or_404(VariantFeature, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(variant_feature, attr, value)
    variant_feature.save()
    return variant_feature


@router.delete('/variant_features/{id}')
def delete_variant_feature(request, id: int):
    variant_feature = get_object_or_404(VariantFeature, id=id)
    variant_feature.delete()
    return {'success': True}


# AttributeValue endpoints
@router.get('/attribute_values', response=List[AttributeValue])
@paginate
def list_attribute_values(request):
    return AttributeValue.objects.all()


@router.get('/attribute_values/{id}', response=AttributeValue)
def get_attribute_value(request, id: int):
    return get_object_or_404(AttributeValue, id=id)


@router.post('/attribute_values', response=AttributeValue)
def create_attribute_value(request, payload: AttributeValueCreate):
    data = payload.dict()
    attribute_value = AttributeValue.objects.create(**data)
    return attribute_value


@router.put('/attribute_values/{id}', response=AttributeValue)
def update_attribute_value(request, id: int, payload: AttributeValueUpdate):
    attribute_value = get_object_or_404(AttributeValue, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value, attr, value)
    attribute_value.save()
    return attribute_value


@router.delete('/attribute_values/{id}')
def delete_attribute_value(request, id: int):
    attribute_value = get_object_or_404(AttributeValue, id=id)
    attribute_value.delete()
    return {'success': True}


# File endpoints
@router.get('/files', response=List[File])
@paginate
def list_files(request):
    return File.objects.all()


@router.get('/files/{id}', response=File)
def get_file(request, id: int):
    return get_object_or_404(File, id=id)


@router.post('/files', response=File)
def create_file(request, payload: FileCreate):
    data = payload.dict()
    file = File.objects.create(**data)
    return file


@router.put('/files/{id}', response=File)
def update_file(request, id: int, payload: FileUpdate):
    file = get_object_or_404(File, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(file, attr, value)
    file.save()
    return file


@router.delete('/files/{id}')
def delete_file(request, id: int):
    file = get_object_or_404(File, id=id)
    file.delete()
    return {'success': True}


# CollectionCountableConnection endpoints
@router.get('/collection_countable_connections', response=List[CollectionCountableConnection])
@paginate
def list_collection_countable_connections(request):
    return CollectionCountableConnection.objects.all()


@router.get('/collection_countable_connections/{id}', response=CollectionCountableConnection)
def get_collection_countable_connection(request, id: int):
    return get_object_or_404(CollectionCountableConnection, id=id)


@router.post('/collection_countable_connections', response=CollectionCountableConnection)
def create_collection_countable_connection(request, payload: CollectionCountableConnectionCreate):
    data = payload.dict()
    collection_countable_connection = CollectionCountableConnection.objects.create(**data)
    return collection_countable_connection


@router.put('/collection_countable_connections/{id}', response=CollectionCountableConnection)
def update_collection_countable_connection(request, id: int, payload: CollectionCountableConnectionUpdate):
    collection_countable_connection = get_object_or_404(CollectionCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_countable_connection, attr, value)
    collection_countable_connection.save()
    return collection_countable_connection


@router.delete('/collection_countable_connections/{id}')
def delete_collection_countable_connection(request, id: int):
    collection_countable_connection = get_object_or_404(CollectionCountableConnection, id=id)
    collection_countable_connection.delete()
    return {'success': True}


# CollectionCountableEdge endpoints
@router.get('/collection_countable_edges', response=List[CollectionCountableEdge])
@paginate
def list_collection_countable_edges(request):
    return CollectionCountableEdge.objects.all()


@router.get('/collection_countable_edges/{id}', response=CollectionCountableEdge)
def get_collection_countable_edge(request, id: int):
    return get_object_or_404(CollectionCountableEdge, id=id)


@router.post('/collection_countable_edges', response=CollectionCountableEdge)
def create_collection_countable_edge(request, payload: CollectionCountableEdgeCreate):
    data = payload.dict()
    collection_countable_edge = CollectionCountableEdge.objects.create(**data)
    return collection_countable_edge


@router.put('/collection_countable_edges/{id}', response=CollectionCountableEdge)
def update_collection_countable_edge(request, id: int, payload: CollectionCountableEdgeUpdate):
    collection_countable_edge = get_object_or_404(CollectionCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_countable_edge, attr, value)
    collection_countable_edge.save()
    return collection_countable_edge


@router.delete('/collection_countable_edges/{id}')
def delete_collection_countable_edge(request, id: int):
    collection_countable_edge = get_object_or_404(CollectionCountableEdge, id=id)
    collection_countable_edge.delete()
    return {'success': True}


# Collection endpoints
@router.get('/collections', response=List[Collection])
@paginate
def list_collections(request):
    return Collection.objects.all()


@router.get('/collections/{id}', response=Collection)
def get_collection(request, id: int):
    return get_object_or_404(Collection, id=id)


@router.post('/collections', response=Collection)
def create_collection(request, payload: CollectionCreate):
    data = payload.dict()
    collection = Collection.objects.create(**data)
    return collection


@router.put('/collections/{id}', response=Collection)
def update_collection(request, id: int, payload: CollectionUpdate):
    collection = get_object_or_404(Collection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection, attr, value)
    collection.save()
    return collection


@router.delete('/collections/{id}')
def delete_collection(request, id: int):
    collection = get_object_or_404(Collection, id=id)
    collection.delete()
    return {'success': True}


# Sale endpoints
@router.get('/sales', response=List[Sale])
@paginate
def list_sales(request):
    return Sale.objects.all()


@router.get('/sales/{id}', response=Sale)
def get_sale(request, id: int):
    return get_object_or_404(Sale, id=id)


@router.post('/sales', response=Sale)
def create_sale(request, payload: SaleCreate):
    data = payload.dict()
    sale = Sale.objects.create(**data)
    return sale


@router.put('/sales/{id}', response=Sale)
def update_sale(request, id: int, payload: SaleUpdate):
    sale = get_object_or_404(Sale, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale, attr, value)
    sale.save()
    return sale


@router.delete('/sales/{id}')
def delete_sale(request, id: int):
    sale = get_object_or_404(Sale, id=id)
    sale.delete()
    return {'success': True}


# Fulfillment endpoints
@router.get('/fulfillments', response=List[Fulfillment])
@paginate
def list_fulfillments(request):
    return Fulfillment.objects.all()


@router.get('/fulfillments/{id}', response=Fulfillment)
def get_fulfillment(request, id: int):
    return get_object_or_404(Fulfillment, id=id)


@router.post('/fulfillments', response=Fulfillment)
def create_fulfillment(request, payload: FulfillmentCreate):
    data = payload.dict()
    fulfillment = Fulfillment.objects.create(**data)
    return fulfillment


@router.put('/fulfillments/{id}', response=Fulfillment)
def update_fulfillment(request, id: int, payload: FulfillmentUpdate):
    fulfillment = get_object_or_404(Fulfillment, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment, attr, value)
    fulfillment.save()
    return fulfillment


@router.delete('/fulfillments/{id}')
def delete_fulfillment(request, id: int):
    fulfillment = get_object_or_404(Fulfillment, id=id)
    fulfillment.delete()
    return {'success': True}


# NauticalOrder endpoints
@router.get('/nautical_orders', response=List[NauticalOrder])
@paginate
def list_nautical_orders(request):
    return NauticalOrder.objects.all()


@router.get('/nautical_orders/{id}', response=NauticalOrder)
def get_nautical_order(request, id: int):
    return get_object_or_404(NauticalOrder, id=id)


@router.post('/nautical_orders', response=NauticalOrder)
def create_nautical_order(request, payload: NauticalOrderCreate):
    data = payload.dict()
    nautical_order = NauticalOrder.objects.create(**data)
    return nautical_order


@router.put('/nautical_orders/{id}', response=NauticalOrder)
def update_nautical_order(request, id: int, payload: NauticalOrderUpdate):
    nautical_order = get_object_or_404(NauticalOrder, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order, attr, value)
    nautical_order.save()
    return nautical_order


@router.delete('/nautical_orders/{id}')
def delete_nautical_order(request, id: int):
    nautical_order = get_object_or_404(NauticalOrder, id=id)
    nautical_order.delete()
    return {'success': True}


# OrderLine endpoints
@router.get('/order_lines', response=List[OrderLine])
@paginate
def list_order_lines(request):
    return OrderLine.objects.all()


@router.get('/order_lines/{id}', response=OrderLine)
def get_order_line(request, id: int):
    return get_object_or_404(OrderLine, id=id)


@router.post('/order_lines', response=OrderLine)
def create_order_line(request, payload: OrderLineCreate):
    data = payload.dict()
    order_line = OrderLine.objects.create(**data)
    return order_line


@router.put('/order_lines/{id}', response=OrderLine)
def update_order_line(request, id: int, payload: OrderLineUpdate):
    order_line = get_object_or_404(OrderLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_line, attr, value)
    order_line.save()
    return order_line


@router.delete('/order_lines/{id}')
def delete_order_line(request, id: int):
    order_line = get_object_or_404(OrderLine, id=id)
    order_line.delete()
    return {'success': True}


# DigitalContentUrl endpoints
@router.get('/digital_content_urls', response=List[DigitalContentUrl])
@paginate
def list_digital_content_urls(request):
    return DigitalContentUrl.objects.all()


@router.get('/digital_content_urls/{id}', response=DigitalContentUrl)
def get_digital_content_url(request, id: int):
    return get_object_or_404(DigitalContentUrl, id=id)


@router.post('/digital_content_urls', response=DigitalContentUrl)
def create_digital_content_url(request, payload: DigitalContentUrlCreate):
    data = payload.dict()
    digital_content_url = DigitalContentUrl.objects.create(**data)
    return digital_content_url


@router.put('/digital_content_urls/{id}', response=DigitalContentUrl)
def update_digital_content_url(request, id: int, payload: DigitalContentUrlUpdate):
    digital_content_url = get_object_or_404(DigitalContentUrl, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_url, attr, value)
    digital_content_url.save()
    return digital_content_url


@router.delete('/digital_content_urls/{id}')
def delete_digital_content_url(request, id: int):
    digital_content_url = get_object_or_404(DigitalContentUrl, id=id)
    digital_content_url.delete()
    return {'success': True}


# DigitalContent endpoints
@router.get('/digital_contents', response=List[DigitalContent])
@paginate
def list_digital_contents(request):
    return DigitalContent.objects.all()


@router.get('/digital_contents/{id}', response=DigitalContent)
def get_digital_content(request, id: int):
    return get_object_or_404(DigitalContent, id=id)


@router.post('/digital_contents', response=DigitalContent)
def create_digital_content(request, payload: DigitalContentCreate):
    data = payload.dict()
    digital_content = DigitalContent.objects.create(**data)
    return digital_content


@router.put('/digital_contents/{id}', response=DigitalContent)
def update_digital_content(request, id: int, payload: DigitalContentUpdate):
    digital_content = get_object_or_404(DigitalContent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content, attr, value)
    digital_content.save()
    return digital_content


@router.delete('/digital_contents/{id}')
def delete_digital_content(request, id: int):
    digital_content = get_object_or_404(DigitalContent, id=id)
    digital_content.delete()
    return {'success': True}


# NauticalOrderLine endpoints
@router.get('/nautical_order_lines', response=List[NauticalOrderLine])
@paginate
def list_nautical_order_lines(request):
    return NauticalOrderLine.objects.all()


@router.get('/nautical_order_lines/{id}', response=NauticalOrderLine)
def get_nautical_order_line(request, id: int):
    return get_object_or_404(NauticalOrderLine, id=id)


@router.post('/nautical_order_lines', response=NauticalOrderLine)
def create_nautical_order_line(request, payload: NauticalOrderLineCreate):
    data = payload.dict()
    nautical_order_line = NauticalOrderLine.objects.create(**data)
    return nautical_order_line


@router.put('/nautical_order_lines/{id}', response=NauticalOrderLine)
def update_nautical_order_line(request, id: int, payload: NauticalOrderLineUpdate):
    nautical_order_line = get_object_or_404(NauticalOrderLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_line, attr, value)
    nautical_order_line.save()
    return nautical_order_line


@router.delete('/nautical_order_lines/{id}')
def delete_nautical_order_line(request, id: int):
    nautical_order_line = get_object_or_404(NauticalOrderLine, id=id)
    nautical_order_line.delete()
    return {'success': True}


# PriceBook endpoints
@router.get('/price_books', response=List[PriceBook])
@paginate
def list_price_books(request):
    return PriceBook.objects.all()


@router.get('/price_books/{id}', response=PriceBook)
def get_price_book(request, id: int):
    return get_object_or_404(PriceBook, id=id)


@router.post('/price_books', response=PriceBook)
def create_price_book(request, payload: PriceBookCreate):
    data = payload.dict()
    price_book = PriceBook.objects.create(**data)
    return price_book


@router.put('/price_books/{id}', response=PriceBook)
def update_price_book(request, id: int, payload: PriceBookUpdate):
    price_book = get_object_or_404(PriceBook, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book, attr, value)
    price_book.save()
    return price_book


@router.delete('/price_books/{id}')
def delete_price_book(request, id: int):
    price_book = get_object_or_404(PriceBook, id=id)
    price_book.delete()
    return {'success': True}


# PriceBookVariant endpoints
@router.get('/price_book_variants', response=List[PriceBookVariant])
@paginate
def list_price_book_variants(request):
    return PriceBookVariant.objects.all()


@router.get('/price_book_variants/{id}', response=PriceBookVariant)
def get_price_book_variant(request, id: int):
    return get_object_or_404(PriceBookVariant, id=id)


@router.post('/price_book_variants', response=PriceBookVariant)
def create_price_book_variant(request, payload: PriceBookVariantCreate):
    data = payload.dict()
    price_book_variant = PriceBookVariant.objects.create(**data)
    return price_book_variant


@router.put('/price_book_variants/{id}', response=PriceBookVariant)
def update_price_book_variant(request, id: int, payload: PriceBookVariantUpdate):
    price_book_variant = get_object_or_404(PriceBookVariant, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant, attr, value)
    price_book_variant.save()
    return price_book_variant


@router.delete('/price_book_variants/{id}')
def delete_price_book_variant(request, id: int):
    price_book_variant = get_object_or_404(PriceBookVariant, id=id)
    price_book_variant.delete()
    return {'success': True}


# PriceBookProduct endpoints
@router.get('/price_book_products', response=List[PriceBookProduct])
@paginate
def list_price_book_products(request):
    return PriceBookProduct.objects.all()


@router.get('/price_book_products/{id}', response=PriceBookProduct)
def get_price_book_product(request, id: int):
    return get_object_or_404(PriceBookProduct, id=id)


@router.post('/price_book_products', response=PriceBookProduct)
def create_price_book_product(request, payload: PriceBookProductCreate):
    data = payload.dict()
    price_book_product = PriceBookProduct.objects.create(**data)
    return price_book_product


@router.put('/price_book_products/{id}', response=PriceBookProduct)
def update_price_book_product(request, id: int, payload: PriceBookProductUpdate):
    price_book_product = get_object_or_404(PriceBookProduct, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product, attr, value)
    price_book_product.save()
    return price_book_product


@router.delete('/price_book_products/{id}')
def delete_price_book_product(request, id: int):
    price_book_product = get_object_or_404(PriceBookProduct, id=id)
    price_book_product.delete()
    return {'success': True}


# PriceBookProductType endpoints
@router.get('/price_book_product_types', response=List[PriceBookProductType])
@paginate
def list_price_book_product_types(request):
    return PriceBookProductType.objects.all()


@router.get('/price_book_product_types/{id}', response=PriceBookProductType)
def get_price_book_product_type(request, id: int):
    return get_object_or_404(PriceBookProductType, id=id)


@router.post('/price_book_product_types', response=PriceBookProductType)
def create_price_book_product_type(request, payload: PriceBookProductTypeCreate):
    data = payload.dict()
    price_book_product_type = PriceBookProductType.objects.create(**data)
    return price_book_product_type


@router.put('/price_book_product_types/{id}', response=PriceBookProductType)
def update_price_book_product_type(request, id: int, payload: PriceBookProductTypeUpdate):
    price_book_product_type = get_object_or_404(PriceBookProductType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type, attr, value)
    price_book_product_type.save()
    return price_book_product_type


@router.delete('/price_book_product_types/{id}')
def delete_price_book_product_type(request, id: int):
    price_book_product_type = get_object_or_404(PriceBookProductType, id=id)
    price_book_product_type.delete()
    return {'success': True}


# Allocation endpoints
@router.get('/allocations', response=List[Allocation])
@paginate
def list_allocations(request):
    return Allocation.objects.all()


@router.get('/allocations/{id}', response=Allocation)
def get_allocation(request, id: int):
    return get_object_or_404(Allocation, id=id)


@router.post('/allocations', response=Allocation)
def create_allocation(request, payload: AllocationCreate):
    data = payload.dict()
    allocation = Allocation.objects.create(**data)
    return allocation


@router.put('/allocations/{id}', response=Allocation)
def update_allocation(request, id: int, payload: AllocationUpdate):
    allocation = get_object_or_404(Allocation, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(allocation, attr, value)
    allocation.save()
    return allocation


@router.delete('/allocations/{id}')
def delete_allocation(request, id: int):
    allocation = get_object_or_404(Allocation, id=id)
    allocation.delete()
    return {'success': True}


# Warehouse endpoints
@router.get('/warehouses', response=List[Warehouse])
@paginate
def list_warehouses(request):
    return Warehouse.objects.all()


@router.get('/warehouses/{id}', response=Warehouse)
def get_warehouse(request, id: int):
    return get_object_or_404(Warehouse, id=id)


@router.post('/warehouses', response=Warehouse)
def create_warehouse(request, payload: WarehouseCreate):
    data = payload.dict()
    warehouse = Warehouse.objects.create(**data)
    return warehouse


@router.put('/warehouses/{id}', response=Warehouse)
def update_warehouse(request, id: int, payload: WarehouseUpdate):
    warehouse = get_object_or_404(Warehouse, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse, attr, value)
    warehouse.save()
    return warehouse


@router.delete('/warehouses/{id}')
def delete_warehouse(request, id: int):
    warehouse = get_object_or_404(Warehouse, id=id)
    warehouse.delete()
    return {'success': True}


# ShippingZoneCountableConnection endpoints
@router.get('/shipping_zone_countable_connections', response=List[ShippingZoneCountableConnection])
@paginate
def list_shipping_zone_countable_connections(request):
    return ShippingZoneCountableConnection.objects.all()


@router.get('/shipping_zone_countable_connections/{id}', response=ShippingZoneCountableConnection)
def get_shipping_zone_countable_connection(request, id: int):
    return get_object_or_404(ShippingZoneCountableConnection, id=id)


@router.post('/shipping_zone_countable_connections', response=ShippingZoneCountableConnection)
def create_shipping_zone_countable_connection(request, payload: ShippingZoneCountableConnectionCreate):
    data = payload.dict()
    shipping_zone_countable_connection = ShippingZoneCountableConnection.objects.create(**data)
    return shipping_zone_countable_connection


@router.put('/shipping_zone_countable_connections/{id}', response=ShippingZoneCountableConnection)
def update_shipping_zone_countable_connection(request, id: int, payload: ShippingZoneCountableConnectionUpdate):
    shipping_zone_countable_connection = get_object_or_404(ShippingZoneCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_countable_connection, attr, value)
    shipping_zone_countable_connection.save()
    return shipping_zone_countable_connection


@router.delete('/shipping_zone_countable_connections/{id}')
def delete_shipping_zone_countable_connection(request, id: int):
    shipping_zone_countable_connection = get_object_or_404(ShippingZoneCountableConnection, id=id)
    shipping_zone_countable_connection.delete()
    return {'success': True}


# ShippingZoneCountableEdge endpoints
@router.get('/shipping_zone_countable_edges', response=List[ShippingZoneCountableEdge])
@paginate
def list_shipping_zone_countable_edges(request):
    return ShippingZoneCountableEdge.objects.all()


@router.get('/shipping_zone_countable_edges/{id}', response=ShippingZoneCountableEdge)
def get_shipping_zone_countable_edge(request, id: int):
    return get_object_or_404(ShippingZoneCountableEdge, id=id)


@router.post('/shipping_zone_countable_edges', response=ShippingZoneCountableEdge)
def create_shipping_zone_countable_edge(request, payload: ShippingZoneCountableEdgeCreate):
    data = payload.dict()
    shipping_zone_countable_edge = ShippingZoneCountableEdge.objects.create(**data)
    return shipping_zone_countable_edge


@router.put('/shipping_zone_countable_edges/{id}', response=ShippingZoneCountableEdge)
def update_shipping_zone_countable_edge(request, id: int, payload: ShippingZoneCountableEdgeUpdate):
    shipping_zone_countable_edge = get_object_or_404(ShippingZoneCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_countable_edge, attr, value)
    shipping_zone_countable_edge.save()
    return shipping_zone_countable_edge


@router.delete('/shipping_zone_countable_edges/{id}')
def delete_shipping_zone_countable_edge(request, id: int):
    shipping_zone_countable_edge = get_object_or_404(ShippingZoneCountableEdge, id=id)
    shipping_zone_countable_edge.delete()
    return {'success': True}


# ShippingZone endpoints
@router.get('/shipping_zones', response=List[ShippingZone])
@paginate
def list_shipping_zones(request):
    return ShippingZone.objects.all()


@router.get('/shipping_zones/{id}', response=ShippingZone)
def get_shipping_zone(request, id: int):
    return get_object_or_404(ShippingZone, id=id)


@router.post('/shipping_zones', response=ShippingZone)
def create_shipping_zone(request, payload: ShippingZoneCreate):
    data = payload.dict()
    shipping_zone = ShippingZone.objects.create(**data)
    return shipping_zone


@router.put('/shipping_zones/{id}', response=ShippingZone)
def update_shipping_zone(request, id: int, payload: ShippingZoneUpdate):
    shipping_zone = get_object_or_404(ShippingZone, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone, attr, value)
    shipping_zone.save()
    return shipping_zone


@router.delete('/shipping_zones/{id}')
def delete_shipping_zone(request, id: int):
    shipping_zone = get_object_or_404(ShippingZone, id=id)
    shipping_zone.delete()
    return {'success': True}


# MoneyRange endpoints
@router.get('/money_ranges', response=List[MoneyRange])
@paginate
def list_money_ranges(request):
    return MoneyRange.objects.all()


@router.get('/money_ranges/{id}', response=MoneyRange)
def get_money_range(request, id: int):
    return get_object_or_404(MoneyRange, id=id)


@router.post('/money_ranges', response=MoneyRange)
def create_money_range(request, payload: MoneyRangeCreate):
    data = payload.dict()
    money_range = MoneyRange.objects.create(**data)
    return money_range


@router.put('/money_ranges/{id}', response=MoneyRange)
def update_money_range(request, id: int, payload: MoneyRangeUpdate):
    money_range = get_object_or_404(MoneyRange, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(money_range, attr, value)
    money_range.save()
    return money_range


@router.delete('/money_ranges/{id}')
def delete_money_range(request, id: int):
    money_range = get_object_or_404(MoneyRange, id=id)
    money_range.delete()
    return {'success': True}


# ShippingZoneCountryArea endpoints
@router.get('/shipping_zone_country_areas', response=List[ShippingZoneCountryArea])
@paginate
def list_shipping_zone_country_areas(request):
    return ShippingZoneCountryArea.objects.all()


@router.get('/shipping_zone_country_areas/{id}', response=ShippingZoneCountryArea)
def get_shipping_zone_country_area(request, id: int):
    return get_object_or_404(ShippingZoneCountryArea, id=id)


@router.post('/shipping_zone_country_areas', response=ShippingZoneCountryArea)
def create_shipping_zone_country_area(request, payload: ShippingZoneCountryAreaCreate):
    data = payload.dict()
    shipping_zone_country_area = ShippingZoneCountryArea.objects.create(**data)
    return shipping_zone_country_area


@router.put('/shipping_zone_country_areas/{id}', response=ShippingZoneCountryArea)
def update_shipping_zone_country_area(request, id: int, payload: ShippingZoneCountryAreaUpdate):
    shipping_zone_country_area = get_object_or_404(ShippingZoneCountryArea, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_country_area, attr, value)
    shipping_zone_country_area.save()
    return shipping_zone_country_area


@router.delete('/shipping_zone_country_areas/{id}')
def delete_shipping_zone_country_area(request, id: int):
    shipping_zone_country_area = get_object_or_404(ShippingZoneCountryArea, id=id)
    shipping_zone_country_area.delete()
    return {'success': True}


# Invoice endpoints
@router.get('/invoices', response=List[Invoice])
@paginate
def list_invoices(request):
    return Invoice.objects.all()


@router.get('/invoices/{id}', response=Invoice)
def get_invoice(request, id: int):
    return get_object_or_404(Invoice, id=id)


@router.post('/invoices', response=Invoice)
def create_invoice(request, payload: InvoiceCreate):
    data = payload.dict()
    invoice = Invoice.objects.create(**data)
    return invoice


@router.put('/invoices/{id}', response=Invoice)
def update_invoice(request, id: int, payload: InvoiceUpdate):
    invoice = get_object_or_404(Invoice, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice, attr, value)
    invoice.save()
    return invoice


@router.delete('/invoices/{id}')
def delete_invoice(request, id: int):
    invoice = get_object_or_404(Invoice, id=id)
    invoice.delete()
    return {'success': True}


# Payment endpoints
@router.get('/payments', response=List[Payment])
@paginate
def list_payments(request):
    return Payment.objects.all()


@router.get('/payments/{id}', response=Payment)
def get_payment(request, id: int):
    return get_object_or_404(Payment, id=id)


@router.post('/payments', response=Payment)
def create_payment(request, payload: PaymentCreate):
    data = payload.dict()
    payment = Payment.objects.create(**data)
    return payment


@router.put('/payments/{id}', response=Payment)
def update_payment(request, id: int, payload: PaymentUpdate):
    payment = get_object_or_404(Payment, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment, attr, value)
    payment.save()
    return payment


@router.delete('/payments/{id}')
def delete_payment(request, id: int):
    payment = get_object_or_404(Payment, id=id)
    payment.delete()
    return {'success': True}


# Transaction endpoints
@router.get('/transactions', response=List[Transaction])
@paginate
def list_transactions(request):
    return Transaction.objects.all()


@router.get('/transactions/{id}', response=Transaction)
def get_transaction(request, id: int):
    return get_object_or_404(Transaction, id=id)


@router.post('/transactions', response=Transaction)
def create_transaction(request, payload: TransactionCreate):
    data = payload.dict()
    transaction = Transaction.objects.create(**data)
    return transaction


@router.put('/transactions/{id}', response=Transaction)
def update_transaction(request, id: int, payload: TransactionUpdate):
    transaction = get_object_or_404(Transaction, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(transaction, attr, value)
    transaction.save()
    return transaction


@router.delete('/transactions/{id}')
def delete_transaction(request, id: int):
    transaction = get_object_or_404(Transaction, id=id)
    transaction.delete()
    return {'success': True}


# CreditCard endpoints
@router.get('/credit_cards', response=List[CreditCard])
@paginate
def list_credit_cards(request):
    return CreditCard.objects.all()


@router.get('/credit_cards/{id}', response=CreditCard)
def get_credit_card(request, id: int):
    return get_object_or_404(CreditCard, id=id)


@router.post('/credit_cards', response=CreditCard)
def create_credit_card(request, payload: CreditCardCreate):
    data = payload.dict()
    credit_card = CreditCard.objects.create(**data)
    return credit_card


@router.put('/credit_cards/{id}', response=CreditCard)
def update_credit_card(request, id: int, payload: CreditCardUpdate):
    credit_card = get_object_or_404(CreditCard, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(credit_card, attr, value)
    credit_card.save()
    return credit_card


@router.delete('/credit_cards/{id}')
def delete_credit_card(request, id: int):
    credit_card = get_object_or_404(CreditCard, id=id)
    credit_card.delete()
    return {'success': True}


# ValidationStatus endpoints
@router.get('/validation_statuss', response=List[ValidationStatus])
@paginate
def list_validation_statuss(request):
    return ValidationStatus.objects.all()


@router.get('/validation_statuss/{id}', response=ValidationStatus)
def get_validation_status(request, id: int):
    return get_object_or_404(ValidationStatus, id=id)


@router.post('/validation_statuss', response=ValidationStatus)
def create_validation_status(request, payload: ValidationStatusCreate):
    data = payload.dict()
    validation_status = ValidationStatus.objects.create(**data)
    return validation_status


@router.put('/validation_statuss/{id}', response=ValidationStatus)
def update_validation_status(request, id: int, payload: ValidationStatusUpdate):
    validation_status = get_object_or_404(ValidationStatus, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(validation_status, attr, value)
    validation_status.save()
    return validation_status


@router.delete('/validation_statuss/{id}')
def delete_validation_status(request, id: int):
    validation_status = get_object_or_404(ValidationStatus, id=id)
    validation_status.delete()
    return {'success': True}


# NauticalOrderEvent endpoints
@router.get('/nautical_order_events', response=List[NauticalOrderEvent])
@paginate
def list_nautical_order_events(request):
    return NauticalOrderEvent.objects.all()


@router.get('/nautical_order_events/{id}', response=NauticalOrderEvent)
def get_nautical_order_event(request, id: int):
    return get_object_or_404(NauticalOrderEvent, id=id)


@router.post('/nautical_order_events', response=NauticalOrderEvent)
def create_nautical_order_event(request, payload: NauticalOrderEventCreate):
    data = payload.dict()
    nautical_order_event = NauticalOrderEvent.objects.create(**data)
    return nautical_order_event


@router.put('/nautical_order_events/{id}', response=NauticalOrderEvent)
def update_nautical_order_event(request, id: int, payload: NauticalOrderEventUpdate):
    nautical_order_event = get_object_or_404(NauticalOrderEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_event, attr, value)
    nautical_order_event.save()
    return nautical_order_event


@router.delete('/nautical_order_events/{id}')
def delete_nautical_order_event(request, id: int):
    nautical_order_event = get_object_or_404(NauticalOrderEvent, id=id)
    nautical_order_event.delete()
    return {'success': True}


# NauticalOrderEventOrderLineObject endpoints
@router.get('/nautical_order_event_order_line_objects', response=List[NauticalOrderEventOrderLineObject])
@paginate
def list_nautical_order_event_order_line_objects(request):
    return NauticalOrderEventOrderLineObject.objects.all()


@router.get('/nautical_order_event_order_line_objects/{id}', response=NauticalOrderEventOrderLineObject)
def get_nautical_order_event_order_line_object(request, id: int):
    return get_object_or_404(NauticalOrderEventOrderLineObject, id=id)


@router.post('/nautical_order_event_order_line_objects', response=NauticalOrderEventOrderLineObject)
def create_nautical_order_event_order_line_object(request, payload: NauticalOrderEventOrderLineObjectCreate):
    data = payload.dict()
    nautical_order_event_order_line_object = NauticalOrderEventOrderLineObject.objects.create(**data)
    return nautical_order_event_order_line_object


@router.put('/nautical_order_event_order_line_objects/{id}', response=NauticalOrderEventOrderLineObject)
def update_nautical_order_event_order_line_object(request, id: int, payload: NauticalOrderEventOrderLineObjectUpdate):
    nautical_order_event_order_line_object = get_object_or_404(NauticalOrderEventOrderLineObject, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_event_order_line_object, attr, value)
    nautical_order_event_order_line_object.save()
    return nautical_order_event_order_line_object


@router.delete('/nautical_order_event_order_line_objects/{id}')
def delete_nautical_order_event_order_line_object(request, id: int):
    nautical_order_event_order_line_object = get_object_or_404(NauticalOrderEventOrderLineObject, id=id)
    nautical_order_event_order_line_object.delete()
    return {'success': True}


# Refund endpoints
@router.get('/refunds', response=List[Refund])
@paginate
def list_refunds(request):
    return Refund.objects.all()


@router.get('/refunds/{id}', response=Refund)
def get_refund(request, id: int):
    return get_object_or_404(Refund, id=id)


@router.post('/refunds', response=Refund)
def create_refund(request, payload: RefundCreate):
    data = payload.dict()
    refund = Refund.objects.create(**data)
    return refund


@router.put('/refunds/{id}', response=Refund)
def update_refund(request, id: int, payload: RefundUpdate):
    refund = get_object_or_404(Refund, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund, attr, value)
    refund.save()
    return refund


@router.delete('/refunds/{id}')
def delete_refund(request, id: int):
    refund = get_object_or_404(Refund, id=id)
    refund.delete()
    return {'success': True}


# RefundLineCountableConnection endpoints
@router.get('/refund_line_countable_connections', response=List[RefundLineCountableConnection])
@paginate
def list_refund_line_countable_connections(request):
    return RefundLineCountableConnection.objects.all()


@router.get('/refund_line_countable_connections/{id}', response=RefundLineCountableConnection)
def get_refund_line_countable_connection(request, id: int):
    return get_object_or_404(RefundLineCountableConnection, id=id)


@router.post('/refund_line_countable_connections', response=RefundLineCountableConnection)
def create_refund_line_countable_connection(request, payload: RefundLineCountableConnectionCreate):
    data = payload.dict()
    refund_line_countable_connection = RefundLineCountableConnection.objects.create(**data)
    return refund_line_countable_connection


@router.put('/refund_line_countable_connections/{id}', response=RefundLineCountableConnection)
def update_refund_line_countable_connection(request, id: int, payload: RefundLineCountableConnectionUpdate):
    refund_line_countable_connection = get_object_or_404(RefundLineCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_line_countable_connection, attr, value)
    refund_line_countable_connection.save()
    return refund_line_countable_connection


@router.delete('/refund_line_countable_connections/{id}')
def delete_refund_line_countable_connection(request, id: int):
    refund_line_countable_connection = get_object_or_404(RefundLineCountableConnection, id=id)
    refund_line_countable_connection.delete()
    return {'success': True}


# RefundLineCountableEdge endpoints
@router.get('/refund_line_countable_edges', response=List[RefundLineCountableEdge])
@paginate
def list_refund_line_countable_edges(request):
    return RefundLineCountableEdge.objects.all()


@router.get('/refund_line_countable_edges/{id}', response=RefundLineCountableEdge)
def get_refund_line_countable_edge(request, id: int):
    return get_object_or_404(RefundLineCountableEdge, id=id)


@router.post('/refund_line_countable_edges', response=RefundLineCountableEdge)
def create_refund_line_countable_edge(request, payload: RefundLineCountableEdgeCreate):
    data = payload.dict()
    refund_line_countable_edge = RefundLineCountableEdge.objects.create(**data)
    return refund_line_countable_edge


@router.put('/refund_line_countable_edges/{id}', response=RefundLineCountableEdge)
def update_refund_line_countable_edge(request, id: int, payload: RefundLineCountableEdgeUpdate):
    refund_line_countable_edge = get_object_or_404(RefundLineCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_line_countable_edge, attr, value)
    refund_line_countable_edge.save()
    return refund_line_countable_edge


@router.delete('/refund_line_countable_edges/{id}')
def delete_refund_line_countable_edge(request, id: int):
    refund_line_countable_edge = get_object_or_404(RefundLineCountableEdge, id=id)
    refund_line_countable_edge.delete()
    return {'success': True}


# RefundLine endpoints
@router.get('/refund_lines', response=List[RefundLine])
@paginate
def list_refund_lines(request):
    return RefundLine.objects.all()


@router.get('/refund_lines/{id}', response=RefundLine)
def get_refund_line(request, id: int):
    return get_object_or_404(RefundLine, id=id)


@router.post('/refund_lines', response=RefundLine)
def create_refund_line(request, payload: RefundLineCreate):
    data = payload.dict()
    refund_line = RefundLine.objects.create(**data)
    return refund_line


@router.put('/refund_lines/{id}', response=RefundLine)
def update_refund_line(request, id: int, payload: RefundLineUpdate):
    refund_line = get_object_or_404(RefundLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_line, attr, value)
    refund_line.save()
    return refund_line


@router.delete('/refund_lines/{id}')
def delete_refund_line(request, id: int):
    refund_line = get_object_or_404(RefundLine, id=id)
    refund_line.delete()
    return {'success': True}


# RefundPaymentCountableConnection endpoints
@router.get('/refund_payment_countable_connections', response=List[RefundPaymentCountableConnection])
@paginate
def list_refund_payment_countable_connections(request):
    return RefundPaymentCountableConnection.objects.all()


@router.get('/refund_payment_countable_connections/{id}', response=RefundPaymentCountableConnection)
def get_refund_payment_countable_connection(request, id: int):
    return get_object_or_404(RefundPaymentCountableConnection, id=id)


@router.post('/refund_payment_countable_connections', response=RefundPaymentCountableConnection)
def create_refund_payment_countable_connection(request, payload: RefundPaymentCountableConnectionCreate):
    data = payload.dict()
    refund_payment_countable_connection = RefundPaymentCountableConnection.objects.create(**data)
    return refund_payment_countable_connection


@router.put('/refund_payment_countable_connections/{id}', response=RefundPaymentCountableConnection)
def update_refund_payment_countable_connection(request, id: int, payload: RefundPaymentCountableConnectionUpdate):
    refund_payment_countable_connection = get_object_or_404(RefundPaymentCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payment_countable_connection, attr, value)
    refund_payment_countable_connection.save()
    return refund_payment_countable_connection


@router.delete('/refund_payment_countable_connections/{id}')
def delete_refund_payment_countable_connection(request, id: int):
    refund_payment_countable_connection = get_object_or_404(RefundPaymentCountableConnection, id=id)
    refund_payment_countable_connection.delete()
    return {'success': True}


# RefundPaymentCountableEdge endpoints
@router.get('/refund_payment_countable_edges', response=List[RefundPaymentCountableEdge])
@paginate
def list_refund_payment_countable_edges(request):
    return RefundPaymentCountableEdge.objects.all()


@router.get('/refund_payment_countable_edges/{id}', response=RefundPaymentCountableEdge)
def get_refund_payment_countable_edge(request, id: int):
    return get_object_or_404(RefundPaymentCountableEdge, id=id)


@router.post('/refund_payment_countable_edges', response=RefundPaymentCountableEdge)
def create_refund_payment_countable_edge(request, payload: RefundPaymentCountableEdgeCreate):
    data = payload.dict()
    refund_payment_countable_edge = RefundPaymentCountableEdge.objects.create(**data)
    return refund_payment_countable_edge


@router.put('/refund_payment_countable_edges/{id}', response=RefundPaymentCountableEdge)
def update_refund_payment_countable_edge(request, id: int, payload: RefundPaymentCountableEdgeUpdate):
    refund_payment_countable_edge = get_object_or_404(RefundPaymentCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payment_countable_edge, attr, value)
    refund_payment_countable_edge.save()
    return refund_payment_countable_edge


@router.delete('/refund_payment_countable_edges/{id}')
def delete_refund_payment_countable_edge(request, id: int):
    refund_payment_countable_edge = get_object_or_404(RefundPaymentCountableEdge, id=id)
    refund_payment_countable_edge.delete()
    return {'success': True}


# RefundPayment endpoints
@router.get('/refund_payments', response=List[RefundPayment])
@paginate
def list_refund_payments(request):
    return RefundPayment.objects.all()


@router.get('/refund_payments/{id}', response=RefundPayment)
def get_refund_payment(request, id: int):
    return get_object_or_404(RefundPayment, id=id)


@router.post('/refund_payments', response=RefundPayment)
def create_refund_payment(request, payload: RefundPaymentCreate):
    data = payload.dict()
    refund_payment = RefundPayment.objects.create(**data)
    return refund_payment


@router.put('/refund_payments/{id}', response=RefundPayment)
def update_refund_payment(request, id: int, payload: RefundPaymentUpdate):
    refund_payment = get_object_or_404(RefundPayment, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payment, attr, value)
    refund_payment.save()
    return refund_payment


@router.delete('/refund_payments/{id}')
def delete_refund_payment(request, id: int):
    refund_payment = get_object_or_404(RefundPayment, id=id)
    refund_payment.delete()
    return {'success': True}


# FulfillmentLine endpoints
@router.get('/fulfillment_lines', response=List[FulfillmentLine])
@paginate
def list_fulfillment_lines(request):
    return FulfillmentLine.objects.all()


@router.get('/fulfillment_lines/{id}', response=FulfillmentLine)
def get_fulfillment_line(request, id: int):
    return get_object_or_404(FulfillmentLine, id=id)


@router.post('/fulfillment_lines', response=FulfillmentLine)
def create_fulfillment_line(request, payload: FulfillmentLineCreate):
    data = payload.dict()
    fulfillment_line = FulfillmentLine.objects.create(**data)
    return fulfillment_line


@router.put('/fulfillment_lines/{id}', response=FulfillmentLine)
def update_fulfillment_line(request, id: int, payload: FulfillmentLineUpdate):
    fulfillment_line = get_object_or_404(FulfillmentLine, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_line, attr, value)
    fulfillment_line.save()
    return fulfillment_line


@router.delete('/fulfillment_lines/{id}')
def delete_fulfillment_line(request, id: int):
    fulfillment_line = get_object_or_404(FulfillmentLine, id=id)
    fulfillment_line.delete()
    return {'success': True}


# OrderFee endpoints
@router.get('/order_fees', response=List[OrderFee])
@paginate
def list_order_fees(request):
    return OrderFee.objects.all()


@router.get('/order_fees/{id}', response=OrderFee)
def get_order_fee(request, id: int):
    return get_object_or_404(OrderFee, id=id)


@router.post('/order_fees', response=OrderFee)
def create_order_fee(request, payload: OrderFeeCreate):
    data = payload.dict()
    order_fee = OrderFee.objects.create(**data)
    return order_fee


@router.put('/order_fees/{id}', response=OrderFee)
def update_order_fee(request, id: int, payload: OrderFeeUpdate):
    order_fee = get_object_or_404(OrderFee, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_fee, attr, value)
    order_fee.save()
    return order_fee


@router.delete('/order_fees/{id}')
def delete_order_fee(request, id: int):
    order_fee = get_object_or_404(OrderFee, id=id)
    order_fee.delete()
    return {'success': True}


# NauticalCurrency endpoints
@router.get('/nautical_currencys', response=List[NauticalCurrency])
@paginate
def list_nautical_currencys(request):
    return NauticalCurrency.objects.all()


@router.get('/nautical_currencys/{id}', response=NauticalCurrency)
def get_nautical_currency(request, id: int):
    return get_object_or_404(NauticalCurrency, id=id)


@router.post('/nautical_currencys', response=NauticalCurrency)
def create_nautical_currency(request, payload: NauticalCurrencyCreate):
    data = payload.dict()
    nautical_currency = NauticalCurrency.objects.create(**data)
    return nautical_currency


@router.put('/nautical_currencys/{id}', response=NauticalCurrency)
def update_nautical_currency(request, id: int, payload: NauticalCurrencyUpdate):
    nautical_currency = get_object_or_404(NauticalCurrency, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_currency, attr, value)
    nautical_currency.save()
    return nautical_currency


@router.delete('/nautical_currencys/{id}')
def delete_nautical_currency(request, id: int):
    nautical_currency = get_object_or_404(NauticalCurrency, id=id)
    nautical_currency.delete()
    return {'success': True}


# OrderEvent endpoints
@router.get('/order_events', response=List[OrderEvent])
@paginate
def list_order_events(request):
    return OrderEvent.objects.all()


@router.get('/order_events/{id}', response=OrderEvent)
def get_order_event(request, id: int):
    return get_object_or_404(OrderEvent, id=id)


@router.post('/order_events', response=OrderEvent)
def create_order_event(request, payload: OrderEventCreate):
    data = payload.dict()
    order_event = OrderEvent.objects.create(**data)
    return order_event


@router.put('/order_events/{id}', response=OrderEvent)
def update_order_event(request, id: int, payload: OrderEventUpdate):
    order_event = get_object_or_404(OrderEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_event, attr, value)
    order_event.save()
    return order_event


@router.delete('/order_events/{id}')
def delete_order_event(request, id: int):
    order_event = get_object_or_404(OrderEvent, id=id)
    order_event.delete()
    return {'success': True}


# OrderEventOrderLineObject endpoints
@router.get('/order_event_order_line_objects', response=List[OrderEventOrderLineObject])
@paginate
def list_order_event_order_line_objects(request):
    return OrderEventOrderLineObject.objects.all()


@router.get('/order_event_order_line_objects/{id}', response=OrderEventOrderLineObject)
def get_order_event_order_line_object(request, id: int):
    return get_object_or_404(OrderEventOrderLineObject, id=id)


@router.post('/order_event_order_line_objects', response=OrderEventOrderLineObject)
def create_order_event_order_line_object(request, payload: OrderEventOrderLineObjectCreate):
    data = payload.dict()
    order_event_order_line_object = OrderEventOrderLineObject.objects.create(**data)
    return order_event_order_line_object


@router.put('/order_event_order_line_objects/{id}', response=OrderEventOrderLineObject)
def update_order_event_order_line_object(request, id: int, payload: OrderEventOrderLineObjectUpdate):
    order_event_order_line_object = get_object_or_404(OrderEventOrderLineObject, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_event_order_line_object, attr, value)
    order_event_order_line_object.save()
    return order_event_order_line_object


@router.delete('/order_event_order_line_objects/{id}')
def delete_order_event_order_line_object(request, id: int):
    order_event_order_line_object = get_object_or_404(OrderEventOrderLineObject, id=id)
    order_event_order_line_object.delete()
    return {'success': True}


# OrderPayoutSummary endpoints
@router.get('/order_payout_summarys', response=List[OrderPayoutSummary])
@paginate
def list_order_payout_summarys(request):
    return OrderPayoutSummary.objects.all()


@router.get('/order_payout_summarys/{id}', response=OrderPayoutSummary)
def get_order_payout_summary(request, id: int):
    return get_object_or_404(OrderPayoutSummary, id=id)


@router.post('/order_payout_summarys', response=OrderPayoutSummary)
def create_order_payout_summary(request, payload: OrderPayoutSummaryCreate):
    data = payload.dict()
    order_payout_summary = OrderPayoutSummary.objects.create(**data)
    return order_payout_summary


@router.put('/order_payout_summarys/{id}', response=OrderPayoutSummary)
def update_order_payout_summary(request, id: int, payload: OrderPayoutSummaryUpdate):
    order_payout_summary = get_object_or_404(OrderPayoutSummary, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_payout_summary, attr, value)
    order_payout_summary.save()
    return order_payout_summary


@router.delete('/order_payout_summarys/{id}')
def delete_order_payout_summary(request, id: int):
    order_payout_summary = get_object_or_404(OrderPayoutSummary, id=id)
    order_payout_summary.delete()
    return {'success': True}


# AgreementSellersCountableConnection endpoints
@router.get('/agreement_sellers_countable_connections', response=List[AgreementSellersCountableConnection])
@paginate
def list_agreement_sellers_countable_connections(request):
    return AgreementSellersCountableConnection.objects.all()


@router.get('/agreement_sellers_countable_connections/{id}', response=AgreementSellersCountableConnection)
def get_agreement_sellers_countable_connection(request, id: int):
    return get_object_or_404(AgreementSellersCountableConnection, id=id)


@router.post('/agreement_sellers_countable_connections', response=AgreementSellersCountableConnection)
def create_agreement_sellers_countable_connection(request, payload: AgreementSellersCountableConnectionCreate):
    data = payload.dict()
    agreement_sellers_countable_connection = AgreementSellersCountableConnection.objects.create(**data)
    return agreement_sellers_countable_connection


@router.put('/agreement_sellers_countable_connections/{id}', response=AgreementSellersCountableConnection)
def update_agreement_sellers_countable_connection(request, id: int, payload: AgreementSellersCountableConnectionUpdate):
    agreement_sellers_countable_connection = get_object_or_404(AgreementSellersCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_sellers_countable_connection, attr, value)
    agreement_sellers_countable_connection.save()
    return agreement_sellers_countable_connection


@router.delete('/agreement_sellers_countable_connections/{id}')
def delete_agreement_sellers_countable_connection(request, id: int):
    agreement_sellers_countable_connection = get_object_or_404(AgreementSellersCountableConnection, id=id)
    agreement_sellers_countable_connection.delete()
    return {'success': True}


# AgreementSellersCountableEdge endpoints
@router.get('/agreement_sellers_countable_edges', response=List[AgreementSellersCountableEdge])
@paginate
def list_agreement_sellers_countable_edges(request):
    return AgreementSellersCountableEdge.objects.all()


@router.get('/agreement_sellers_countable_edges/{id}', response=AgreementSellersCountableEdge)
def get_agreement_sellers_countable_edge(request, id: int):
    return get_object_or_404(AgreementSellersCountableEdge, id=id)


@router.post('/agreement_sellers_countable_edges', response=AgreementSellersCountableEdge)
def create_agreement_sellers_countable_edge(request, payload: AgreementSellersCountableEdgeCreate):
    data = payload.dict()
    agreement_sellers_countable_edge = AgreementSellersCountableEdge.objects.create(**data)
    return agreement_sellers_countable_edge


@router.put('/agreement_sellers_countable_edges/{id}', response=AgreementSellersCountableEdge)
def update_agreement_sellers_countable_edge(request, id: int, payload: AgreementSellersCountableEdgeUpdate):
    agreement_sellers_countable_edge = get_object_or_404(AgreementSellersCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_sellers_countable_edge, attr, value)
    agreement_sellers_countable_edge.save()
    return agreement_sellers_countable_edge


@router.delete('/agreement_sellers_countable_edges/{id}')
def delete_agreement_sellers_countable_edge(request, id: int):
    agreement_sellers_countable_edge = get_object_or_404(AgreementSellersCountableEdge, id=id)
    agreement_sellers_countable_edge.delete()
    return {'success': True}


# AgreementSellers endpoints
@router.get('/agreement_sellerss', response=List[AgreementSellers])
@paginate
def list_agreement_sellerss(request):
    return AgreementSellers.objects.all()


@router.get('/agreement_sellerss/{id}', response=AgreementSellers)
def get_agreement_sellers(request, id: int):
    return get_object_or_404(AgreementSellers, id=id)


@router.post('/agreement_sellerss', response=AgreementSellers)
def create_agreement_sellers(request, payload: AgreementSellersCreate):
    data = payload.dict()
    agreement_sellers = AgreementSellers.objects.create(**data)
    return agreement_sellers


@router.put('/agreement_sellerss/{id}', response=AgreementSellers)
def update_agreement_sellers(request, id: int, payload: AgreementSellersUpdate):
    agreement_sellers = get_object_or_404(AgreementSellers, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_sellers, attr, value)
    agreement_sellers.save()
    return agreement_sellers


@router.delete('/agreement_sellerss/{id}')
def delete_agreement_sellers(request, id: int):
    agreement_sellers = get_object_or_404(AgreementSellers, id=id)
    agreement_sellers.delete()
    return {'success': True}


# Agreement endpoints
@router.get('/agreements', response=List[Agreement])
@paginate
def list_agreements(request):
    return Agreement.objects.all()


@router.get('/agreements/{id}', response=Agreement)
def get_agreement(request, id: int):
    return get_object_or_404(Agreement, id=id)


@router.post('/agreements', response=Agreement)
def create_agreement(request, payload: AgreementCreate):
    data = payload.dict()
    agreement = Agreement.objects.create(**data)
    return agreement


@router.put('/agreements/{id}', response=Agreement)
def update_agreement(request, id: int, payload: AgreementUpdate):
    agreement = get_object_or_404(Agreement, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement, attr, value)
    agreement.save()
    return agreement


@router.delete('/agreements/{id}')
def delete_agreement(request, id: int):
    agreement = get_object_or_404(Agreement, id=id)
    agreement.delete()
    return {'success': True}


# AgreementCommission endpoints
@router.get('/agreement_commissions', response=List[AgreementCommission])
@paginate
def list_agreement_commissions(request):
    return AgreementCommission.objects.all()


@router.get('/agreement_commissions/{id}', response=AgreementCommission)
def get_agreement_commission(request, id: int):
    return get_object_or_404(AgreementCommission, id=id)


@router.post('/agreement_commissions', response=AgreementCommission)
def create_agreement_commission(request, payload: AgreementCommissionCreate):
    data = payload.dict()
    agreement_commission = AgreementCommission.objects.create(**data)
    return agreement_commission


@router.put('/agreement_commissions/{id}', response=AgreementCommission)
def update_agreement_commission(request, id: int, payload: AgreementCommissionUpdate):
    agreement_commission = get_object_or_404(AgreementCommission, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_commission, attr, value)
    agreement_commission.save()
    return agreement_commission


@router.delete('/agreement_commissions/{id}')
def delete_agreement_commission(request, id: int):
    agreement_commission = get_object_or_404(AgreementCommission, id=id)
    agreement_commission.delete()
    return {'success': True}


# AgreementFees endpoints
@router.get('/agreement_feess', response=List[AgreementFees])
@paginate
def list_agreement_feess(request):
    return AgreementFees.objects.all()


@router.get('/agreement_feess/{id}', response=AgreementFees)
def get_agreement_fees(request, id: int):
    return get_object_or_404(AgreementFees, id=id)


@router.post('/agreement_feess', response=AgreementFees)
def create_agreement_fees(request, payload: AgreementFeesCreate):
    data = payload.dict()
    agreement_fees = AgreementFees.objects.create(**data)
    return agreement_fees


@router.put('/agreement_feess/{id}', response=AgreementFees)
def update_agreement_fees(request, id: int, payload: AgreementFeesUpdate):
    agreement_fees = get_object_or_404(AgreementFees, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_fees, attr, value)
    agreement_fees.save()
    return agreement_fees


@router.delete('/agreement_feess/{id}')
def delete_agreement_fees(request, id: int):
    agreement_fees = get_object_or_404(AgreementFees, id=id)
    agreement_fees.delete()
    return {'success': True}


# WarehouseCountableConnection endpoints
@router.get('/warehouse_countable_connections', response=List[WarehouseCountableConnection])
@paginate
def list_warehouse_countable_connections(request):
    return WarehouseCountableConnection.objects.all()


@router.get('/warehouse_countable_connections/{id}', response=WarehouseCountableConnection)
def get_warehouse_countable_connection(request, id: int):
    return get_object_or_404(WarehouseCountableConnection, id=id)


@router.post('/warehouse_countable_connections', response=WarehouseCountableConnection)
def create_warehouse_countable_connection(request, payload: WarehouseCountableConnectionCreate):
    data = payload.dict()
    warehouse_countable_connection = WarehouseCountableConnection.objects.create(**data)
    return warehouse_countable_connection


@router.put('/warehouse_countable_connections/{id}', response=WarehouseCountableConnection)
def update_warehouse_countable_connection(request, id: int, payload: WarehouseCountableConnectionUpdate):
    warehouse_countable_connection = get_object_or_404(WarehouseCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_countable_connection, attr, value)
    warehouse_countable_connection.save()
    return warehouse_countable_connection


@router.delete('/warehouse_countable_connections/{id}')
def delete_warehouse_countable_connection(request, id: int):
    warehouse_countable_connection = get_object_or_404(WarehouseCountableConnection, id=id)
    warehouse_countable_connection.delete()
    return {'success': True}


# WarehouseCountableEdge endpoints
@router.get('/warehouse_countable_edges', response=List[WarehouseCountableEdge])
@paginate
def list_warehouse_countable_edges(request):
    return WarehouseCountableEdge.objects.all()


@router.get('/warehouse_countable_edges/{id}', response=WarehouseCountableEdge)
def get_warehouse_countable_edge(request, id: int):
    return get_object_or_404(WarehouseCountableEdge, id=id)


@router.post('/warehouse_countable_edges', response=WarehouseCountableEdge)
def create_warehouse_countable_edge(request, payload: WarehouseCountableEdgeCreate):
    data = payload.dict()
    warehouse_countable_edge = WarehouseCountableEdge.objects.create(**data)
    return warehouse_countable_edge


@router.put('/warehouse_countable_edges/{id}', response=WarehouseCountableEdge)
def update_warehouse_countable_edge(request, id: int, payload: WarehouseCountableEdgeUpdate):
    warehouse_countable_edge = get_object_or_404(WarehouseCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_countable_edge, attr, value)
    warehouse_countable_edge.save()
    return warehouse_countable_edge


@router.delete('/warehouse_countable_edges/{id}')
def delete_warehouse_countable_edge(request, id: int):
    warehouse_countable_edge = get_object_or_404(WarehouseCountableEdge, id=id)
    warehouse_countable_edge.delete()
    return {'success': True}


# Microsite endpoints
@router.get('/microsites', response=List[Microsite])
@paginate
def list_microsites(request):
    return Microsite.objects.all()


@router.get('/microsites/{id}', response=Microsite)
def get_microsite(request, id: int):
    return get_object_or_404(Microsite, id=id)


@router.post('/microsites', response=Microsite)
def create_microsite(request, payload: MicrositeCreate):
    data = payload.dict()
    microsite = Microsite.objects.create(**data)
    return microsite


@router.put('/microsites/{id}', response=Microsite)
def update_microsite(request, id: int, payload: MicrositeUpdate):
    microsite = get_object_or_404(Microsite, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite, attr, value)
    microsite.save()
    return microsite


@router.delete('/microsites/{id}')
def delete_microsite(request, id: int):
    microsite = get_object_or_404(Microsite, id=id)
    microsite.delete()
    return {'success': True}


# Document endpoints
@router.get('/documents', response=List[Document])
@paginate
def list_documents(request):
    return Document.objects.all()


@router.get('/documents/{id}', response=Document)
def get_document(request, id: int):
    return get_object_or_404(Document, id=id)


@router.post('/documents', response=Document)
def create_document(request, payload: DocumentCreate):
    data = payload.dict()
    document = Document.objects.create(**data)
    return document


@router.put('/documents/{id}', response=Document)
def update_document(request, id: int, payload: DocumentUpdate):
    document = get_object_or_404(Document, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document, attr, value)
    document.save()
    return document


@router.delete('/documents/{id}')
def delete_document(request, id: int):
    document = get_object_or_404(Document, id=id)
    document.delete()
    return {'success': True}


# FileSize endpoints
@router.get('/file_sizes', response=List[FileSize])
@paginate
def list_file_sizes(request):
    return FileSize.objects.all()


@router.get('/file_sizes/{id}', response=FileSize)
def get_file_size(request, id: int):
    return get_object_or_404(FileSize, id=id)


@router.post('/file_sizes', response=FileSize)
def create_file_size(request, payload: FileSizeCreate):
    data = payload.dict()
    file_size = FileSize.objects.create(**data)
    return file_size


@router.put('/file_sizes/{id}', response=FileSize)
def update_file_size(request, id: int, payload: FileSizeUpdate):
    file_size = get_object_or_404(FileSize, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(file_size, attr, value)
    file_size.save()
    return file_size


@router.delete('/file_sizes/{id}')
def delete_file_size(request, id: int):
    file_size = get_object_or_404(FileSize, id=id)
    file_size.delete()
    return {'success': True}


# ProductPricingInfo endpoints
@router.get('/product_pricing_infos', response=List[ProductPricingInfo])
@paginate
def list_product_pricing_infos(request):
    return ProductPricingInfo.objects.all()


@router.get('/product_pricing_infos/{id}', response=ProductPricingInfo)
def get_product_pricing_info(request, id: int):
    return get_object_or_404(ProductPricingInfo, id=id)


@router.post('/product_pricing_infos', response=ProductPricingInfo)
def create_product_pricing_info(request, payload: ProductPricingInfoCreate):
    data = payload.dict()
    product_pricing_info = ProductPricingInfo.objects.create(**data)
    return product_pricing_info


@router.put('/product_pricing_infos/{id}', response=ProductPricingInfo)
def update_product_pricing_info(request, id: int, payload: ProductPricingInfoUpdate):
    product_pricing_info = get_object_or_404(ProductPricingInfo, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_pricing_info, attr, value)
    product_pricing_info.save()
    return product_pricing_info


@router.delete('/product_pricing_infos/{id}')
def delete_product_pricing_info(request, id: int):
    product_pricing_info = get_object_or_404(ProductPricingInfo, id=id)
    product_pricing_info.delete()
    return {'success': True}


# TaxedMoneyRange endpoints
@router.get('/taxed_money_ranges', response=List[TaxedMoneyRange])
@paginate
def list_taxed_money_ranges(request):
    return TaxedMoneyRange.objects.all()


@router.get('/taxed_money_ranges/{id}', response=TaxedMoneyRange)
def get_taxed_money_range(request, id: int):
    return get_object_or_404(TaxedMoneyRange, id=id)


@router.post('/taxed_money_ranges', response=TaxedMoneyRange)
def create_taxed_money_range(request, payload: TaxedMoneyRangeCreate):
    data = payload.dict()
    taxed_money_range = TaxedMoneyRange.objects.create(**data)
    return taxed_money_range


@router.put('/taxed_money_ranges/{id}', response=TaxedMoneyRange)
def update_taxed_money_range(request, id: int, payload: TaxedMoneyRangeUpdate):
    taxed_money_range = get_object_or_404(TaxedMoneyRange, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(taxed_money_range, attr, value)
    taxed_money_range.save()
    return taxed_money_range


@router.delete('/taxed_money_ranges/{id}')
def delete_taxed_money_range(request, id: int):
    taxed_money_range = get_object_or_404(TaxedMoneyRange, id=id)
    taxed_money_range.delete()
    return {'success': True}


# Margin endpoints
@router.get('/margins', response=List[Margin])
@paginate
def list_margins(request):
    return Margin.objects.all()


@router.get('/margins/{id}', response=Margin)
def get_margin(request, id: int):
    return get_object_or_404(Margin, id=id)


@router.post('/margins', response=Margin)
def create_margin(request, payload: MarginCreate):
    data = payload.dict()
    margin = Margin.objects.create(**data)
    return margin


@router.put('/margins/{id}', response=Margin)
def update_margin(request, id: int, payload: MarginUpdate):
    margin = get_object_or_404(Margin, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(margin, attr, value)
    margin.save()
    return margin


@router.delete('/margins/{id}')
def delete_margin(request, id: int):
    margin = get_object_or_404(Margin, id=id)
    margin.delete()
    return {'success': True}


# ProductImage endpoints
@router.get('/product_images', response=List[ProductImage])
@paginate
def list_product_images(request):
    return ProductImage.objects.all()


@router.get('/product_images/{id}', response=ProductImage)
def get_product_image(request, id: int):
    return get_object_or_404(ProductImage, id=id)


@router.post('/product_images', response=ProductImage)
def create_product_image(request, payload: ProductImageCreate):
    data = payload.dict()
    product_image = ProductImage.objects.create(**data)
    return product_image


@router.put('/product_images/{id}', response=ProductImage)
def update_product_image(request, id: int, payload: ProductImageUpdate):
    product_image = get_object_or_404(ProductImage, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image, attr, value)
    product_image.save()
    return product_image


@router.delete('/product_images/{id}')
def delete_product_image(request, id: int):
    product_image = get_object_or_404(ProductImage, id=id)
    product_image.delete()
    return {'success': True}


# ProductImageCountableConnection endpoints
@router.get('/product_image_countable_connections', response=List[ProductImageCountableConnection])
@paginate
def list_product_image_countable_connections(request):
    return ProductImageCountableConnection.objects.all()


@router.get('/product_image_countable_connections/{id}', response=ProductImageCountableConnection)
def get_product_image_countable_connection(request, id: int):
    return get_object_or_404(ProductImageCountableConnection, id=id)


@router.post('/product_image_countable_connections', response=ProductImageCountableConnection)
def create_product_image_countable_connection(request, payload: ProductImageCountableConnectionCreate):
    data = payload.dict()
    product_image_countable_connection = ProductImageCountableConnection.objects.create(**data)
    return product_image_countable_connection


@router.put('/product_image_countable_connections/{id}', response=ProductImageCountableConnection)
def update_product_image_countable_connection(request, id: int, payload: ProductImageCountableConnectionUpdate):
    product_image_countable_connection = get_object_or_404(ProductImageCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_countable_connection, attr, value)
    product_image_countable_connection.save()
    return product_image_countable_connection


@router.delete('/product_image_countable_connections/{id}')
def delete_product_image_countable_connection(request, id: int):
    product_image_countable_connection = get_object_or_404(ProductImageCountableConnection, id=id)
    product_image_countable_connection.delete()
    return {'success': True}


# ProductImageCountableEdge endpoints
@router.get('/product_image_countable_edges', response=List[ProductImageCountableEdge])
@paginate
def list_product_image_countable_edges(request):
    return ProductImageCountableEdge.objects.all()


@router.get('/product_image_countable_edges/{id}', response=ProductImageCountableEdge)
def get_product_image_countable_edge(request, id: int):
    return get_object_or_404(ProductImageCountableEdge, id=id)


@router.post('/product_image_countable_edges', response=ProductImageCountableEdge)
def create_product_image_countable_edge(request, payload: ProductImageCountableEdgeCreate):
    data = payload.dict()
    product_image_countable_edge = ProductImageCountableEdge.objects.create(**data)
    return product_image_countable_edge


@router.put('/product_image_countable_edges/{id}', response=ProductImageCountableEdge)
def update_product_image_countable_edge(request, id: int, payload: ProductImageCountableEdgeUpdate):
    product_image_countable_edge = get_object_or_404(ProductImageCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_countable_edge, attr, value)
    product_image_countable_edge.save()
    return product_image_countable_edge


@router.delete('/product_image_countable_edges/{id}')
def delete_product_image_countable_edge(request, id: int):
    product_image_countable_edge = get_object_or_404(ProductImageCountableEdge, id=id)
    product_image_countable_edge.delete()
    return {'success': True}


# Location endpoints
@router.get('/locations', response=List[Location])
@paginate
def list_locations(request):
    return Location.objects.all()


@router.get('/locations/{id}', response=Location)
def get_location(request, id: int):
    return get_object_or_404(Location, id=id)


@router.post('/locations', response=Location)
def create_location(request, payload: LocationCreate):
    data = payload.dict()
    location = Location.objects.create(**data)
    return location


@router.put('/locations/{id}', response=Location)
def update_location(request, id: int, payload: LocationUpdate):
    location = get_object_or_404(Location, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(location, attr, value)
    location.save()
    return location


@router.delete('/locations/{id}')
def delete_location(request, id: int):
    location = get_object_or_404(Location, id=id)
    location.delete()
    return {'success': True}


# WarehouseStats endpoints
@router.get('/warehouse_statss', response=List[WarehouseStats])
@paginate
def list_warehouse_statss(request):
    return WarehouseStats.objects.all()


@router.get('/warehouse_statss/{id}', response=WarehouseStats)
def get_warehouse_stats(request, id: int):
    return get_object_or_404(WarehouseStats, id=id)


@router.post('/warehouse_statss', response=WarehouseStats)
def create_warehouse_stats(request, payload: WarehouseStatsCreate):
    data = payload.dict()
    warehouse_stats = WarehouseStats.objects.create(**data)
    return warehouse_stats


@router.put('/warehouse_statss/{id}', response=WarehouseStats)
def update_warehouse_stats(request, id: int, payload: WarehouseStatsUpdate):
    warehouse_stats = get_object_or_404(WarehouseStats, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_stats, attr, value)
    warehouse_stats.save()
    return warehouse_stats


@router.delete('/warehouse_statss/{id}')
def delete_warehouse_stats(request, id: int):
    warehouse_stats = get_object_or_404(WarehouseStats, id=id)
    warehouse_stats.delete()
    return {'success': True}


# ProductStatusLog endpoints
@router.get('/product_status_logs', response=List[ProductStatusLog])
@paginate
def list_product_status_logs(request):
    return ProductStatusLog.objects.all()


@router.get('/product_status_logs/{id}', response=ProductStatusLog)
def get_product_status_log(request, id: int):
    return get_object_or_404(ProductStatusLog, id=id)


@router.post('/product_status_logs', response=ProductStatusLog)
def create_product_status_log(request, payload: ProductStatusLogCreate):
    data = payload.dict()
    product_status_log = ProductStatusLog.objects.create(**data)
    return product_status_log


@router.put('/product_status_logs/{id}', response=ProductStatusLog)
def update_product_status_log(request, id: int, payload: ProductStatusLogUpdate):
    product_status_log = get_object_or_404(ProductStatusLog, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_status_log, attr, value)
    product_status_log.save()
    return product_status_log


@router.delete('/product_status_logs/{id}')
def delete_product_status_log(request, id: int):
    product_status_log = get_object_or_404(ProductStatusLog, id=id)
    product_status_log.delete()
    return {'success': True}


# VariantPricingInfo endpoints
@router.get('/variant_pricing_infos', response=List[VariantPricingInfo])
@paginate
def list_variant_pricing_infos(request):
    return VariantPricingInfo.objects.all()


@router.get('/variant_pricing_infos/{id}', response=VariantPricingInfo)
def get_variant_pricing_info(request, id: int):
    return get_object_or_404(VariantPricingInfo, id=id)


@router.post('/variant_pricing_infos', response=VariantPricingInfo)
def create_variant_pricing_info(request, payload: VariantPricingInfoCreate):
    data = payload.dict()
    variant_pricing_info = VariantPricingInfo.objects.create(**data)
    return variant_pricing_info


@router.put('/variant_pricing_infos/{id}', response=VariantPricingInfo)
def update_variant_pricing_info(request, id: int, payload: VariantPricingInfoUpdate):
    variant_pricing_info = get_object_or_404(VariantPricingInfo, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(variant_pricing_info, attr, value)
    variant_pricing_info.save()
    return variant_pricing_info


@router.delete('/variant_pricing_infos/{id}')
def delete_variant_pricing_info(request, id: int):
    variant_pricing_info = get_object_or_404(VariantPricingInfo, id=id)
    variant_pricing_info.delete()
    return {'success': True}


# VariantSize endpoints
@router.get('/variant_sizes', response=List[VariantSize])
@paginate
def list_variant_sizes(request):
    return VariantSize.objects.all()


@router.get('/variant_sizes/{id}', response=VariantSize)
def get_variant_size(request, id: int):
    return get_object_or_404(VariantSize, id=id)


@router.post('/variant_sizes', response=VariantSize)
def create_variant_size(request, payload: VariantSizeCreate):
    data = payload.dict()
    variant_size = VariantSize.objects.create(**data)
    return variant_size


@router.put('/variant_sizes/{id}', response=VariantSize)
def update_variant_size(request, id: int, payload: VariantSizeUpdate):
    variant_size = get_object_or_404(VariantSize, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(variant_size, attr, value)
    variant_size.save()
    return variant_size


@router.delete('/variant_sizes/{id}')
def delete_variant_size(request, id: int):
    variant_size = get_object_or_404(VariantSize, id=id)
    variant_size.delete()
    return {'success': True}


# Stock endpoints
@router.get('/stocks', response=List[Stock])
@paginate
def list_stocks(request):
    return Stock.objects.all()


@router.get('/stocks/{id}', response=Stock)
def get_stock(request, id: int):
    return get_object_or_404(Stock, id=id)


@router.post('/stocks', response=Stock)
def create_stock(request, payload: StockCreate):
    data = payload.dict()
    stock = Stock.objects.create(**data)
    return stock


@router.put('/stocks/{id}', response=Stock)
def update_stock(request, id: int, payload: StockUpdate):
    stock = get_object_or_404(Stock, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(stock, attr, value)
    stock.save()
    return stock


@router.delete('/stocks/{id}')
def delete_stock(request, id: int):
    stock = get_object_or_404(Stock, id=id)
    stock.delete()
    return {'success': True}


# StockEvent endpoints
@router.get('/stock_events', response=List[StockEvent])
@paginate
def list_stock_events(request):
    return StockEvent.objects.all()


@router.get('/stock_events/{id}', response=StockEvent)
def get_stock_event(request, id: int):
    return get_object_or_404(StockEvent, id=id)


@router.post('/stock_events', response=StockEvent)
def create_stock_event(request, payload: StockEventCreate):
    data = payload.dict()
    stock_event = StockEvent.objects.create(**data)
    return stock_event


@router.put('/stock_events/{id}', response=StockEvent)
def update_stock_event(request, id: int, payload: StockEventUpdate):
    stock_event = get_object_or_404(StockEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(stock_event, attr, value)
    stock_event.save()
    return stock_event


@router.delete('/stock_events/{id}')
def delete_stock_event(request, id: int):
    stock_event = get_object_or_404(StockEvent, id=id)
    stock_event.delete()
    return {'success': True}


# SellerType endpoints
@router.get('/seller_types', response=List[SellerType])
@paginate
def list_seller_types(request):
    return SellerType.objects.all()


@router.get('/seller_types/{id}', response=SellerType)
def get_seller_type(request, id: int):
    return get_object_or_404(SellerType, id=id)


@router.post('/seller_types', response=SellerType)
def create_seller_type(request, payload: SellerTypeCreate):
    data = payload.dict()
    seller_type = SellerType.objects.create(**data)
    return seller_type


@router.put('/seller_types/{id}', response=SellerType)
def update_seller_type(request, id: int, payload: SellerTypeUpdate):
    seller_type = get_object_or_404(SellerType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_type, attr, value)
    seller_type.save()
    return seller_type


@router.delete('/seller_types/{id}')
def delete_seller_type(request, id: int):
    seller_type = get_object_or_404(SellerType, id=id)
    seller_type.delete()
    return {'success': True}


# UserType endpoints
@router.get('/user_types', response=List[UserType])
@paginate
def list_user_types(request):
    return UserType.objects.all()


@router.get('/user_types/{id}', response=UserType)
def get_user_type(request, id: int):
    return get_object_or_404(UserType, id=id)


@router.post('/user_types', response=UserType)
def create_user_type(request, payload: UserTypeCreate):
    data = payload.dict()
    user_type = UserType.objects.create(**data)
    return user_type


@router.put('/user_types/{id}', response=UserType)
def update_user_type(request, id: int, payload: UserTypeUpdate):
    user_type = get_object_or_404(UserType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_type, attr, value)
    user_type.save()
    return user_type


@router.delete('/user_types/{id}')
def delete_user_type(request, id: int):
    user_type = get_object_or_404(UserType, id=id)
    user_type.delete()
    return {'success': True}


# AddressType endpoints
@router.get('/address_types', response=List[AddressType])
@paginate
def list_address_types(request):
    return AddressType.objects.all()


@router.get('/address_types/{id}', response=AddressType)
def get_address_type(request, id: int):
    return get_object_or_404(AddressType, id=id)


@router.post('/address_types', response=AddressType)
def create_address_type(request, payload: AddressTypeCreate):
    data = payload.dict()
    address_type = AddressType.objects.create(**data)
    return address_type


@router.put('/address_types/{id}', response=AddressType)
def update_address_type(request, id: int, payload: AddressTypeUpdate):
    address_type = get_object_or_404(AddressType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_type, attr, value)
    address_type.save()
    return address_type


@router.delete('/address_types/{id}')
def delete_address_type(request, id: int):
    address_type = get_object_or_404(AddressType, id=id)
    address_type.delete()
    return {'success': True}


# CheckoutSellerShipping endpoints
@router.get('/checkout_seller_shippings', response=List[CheckoutSellerShipping])
@paginate
def list_checkout_seller_shippings(request):
    return CheckoutSellerShipping.objects.all()


@router.get('/checkout_seller_shippings/{id}', response=CheckoutSellerShipping)
def get_checkout_seller_shipping(request, id: int):
    return get_object_or_404(CheckoutSellerShipping, id=id)


@router.post('/checkout_seller_shippings', response=CheckoutSellerShipping)
def create_checkout_seller_shipping(request, payload: CheckoutSellerShippingCreate):
    data = payload.dict()
    checkout_seller_shipping = CheckoutSellerShipping.objects.create(**data)
    return checkout_seller_shipping


@router.put('/checkout_seller_shippings/{id}', response=CheckoutSellerShipping)
def update_checkout_seller_shipping(request, id: int, payload: CheckoutSellerShippingUpdate):
    checkout_seller_shipping = get_object_or_404(CheckoutSellerShipping, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_seller_shipping, attr, value)
    checkout_seller_shipping.save()
    return checkout_seller_shipping


@router.delete('/checkout_seller_shippings/{id}')
def delete_checkout_seller_shipping(request, id: int):
    checkout_seller_shipping = get_object_or_404(CheckoutSellerShipping, id=id)
    checkout_seller_shipping.delete()
    return {'success': True}


# NauticalOrderCountableConnection endpoints
@router.get('/nautical_order_countable_connections', response=List[NauticalOrderCountableConnection])
@paginate
def list_nautical_order_countable_connections(request):
    return NauticalOrderCountableConnection.objects.all()


@router.get('/nautical_order_countable_connections/{id}', response=NauticalOrderCountableConnection)
def get_nautical_order_countable_connection(request, id: int):
    return get_object_or_404(NauticalOrderCountableConnection, id=id)


@router.post('/nautical_order_countable_connections', response=NauticalOrderCountableConnection)
def create_nautical_order_countable_connection(request, payload: NauticalOrderCountableConnectionCreate):
    data = payload.dict()
    nautical_order_countable_connection = NauticalOrderCountableConnection.objects.create(**data)
    return nautical_order_countable_connection


@router.put('/nautical_order_countable_connections/{id}', response=NauticalOrderCountableConnection)
def update_nautical_order_countable_connection(request, id: int, payload: NauticalOrderCountableConnectionUpdate):
    nautical_order_countable_connection = get_object_or_404(NauticalOrderCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_countable_connection, attr, value)
    nautical_order_countable_connection.save()
    return nautical_order_countable_connection


@router.delete('/nautical_order_countable_connections/{id}')
def delete_nautical_order_countable_connection(request, id: int):
    nautical_order_countable_connection = get_object_or_404(NauticalOrderCountableConnection, id=id)
    nautical_order_countable_connection.delete()
    return {'success': True}


# NauticalOrderCountableEdge endpoints
@router.get('/nautical_order_countable_edges', response=List[NauticalOrderCountableEdge])
@paginate
def list_nautical_order_countable_edges(request):
    return NauticalOrderCountableEdge.objects.all()


@router.get('/nautical_order_countable_edges/{id}', response=NauticalOrderCountableEdge)
def get_nautical_order_countable_edge(request, id: int):
    return get_object_or_404(NauticalOrderCountableEdge, id=id)


@router.post('/nautical_order_countable_edges', response=NauticalOrderCountableEdge)
def create_nautical_order_countable_edge(request, payload: NauticalOrderCountableEdgeCreate):
    data = payload.dict()
    nautical_order_countable_edge = NauticalOrderCountableEdge.objects.create(**data)
    return nautical_order_countable_edge


@router.put('/nautical_order_countable_edges/{id}', response=NauticalOrderCountableEdge)
def update_nautical_order_countable_edge(request, id: int, payload: NauticalOrderCountableEdgeUpdate):
    nautical_order_countable_edge = get_object_or_404(NauticalOrderCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_countable_edge, attr, value)
    nautical_order_countable_edge.save()
    return nautical_order_countable_edge


@router.delete('/nautical_order_countable_edges/{id}')
def delete_nautical_order_countable_edge(request, id: int):
    nautical_order_countable_edge = get_object_or_404(NauticalOrderCountableEdge, id=id)
    nautical_order_countable_edge.delete()
    return {'success': True}


# UserPermission endpoints
@router.get('/user_permissions', response=List[UserPermission])
@paginate
def list_user_permissions(request):
    return UserPermission.objects.all()


@router.get('/user_permissions/{id}', response=UserPermission)
def get_user_permission(request, id: int):
    return get_object_or_404(UserPermission, id=id)


@router.post('/user_permissions', response=UserPermission)
def create_user_permission(request, payload: UserPermissionCreate):
    data = payload.dict()
    user_permission = UserPermission.objects.create(**data)
    return user_permission


@router.put('/user_permissions/{id}', response=UserPermission)
def update_user_permission(request, id: int, payload: UserPermissionUpdate):
    user_permission = get_object_or_404(UserPermission, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_permission, attr, value)
    user_permission.save()
    return user_permission


@router.delete('/user_permissions/{id}')
def delete_user_permission(request, id: int):
    user_permission = get_object_or_404(UserPermission, id=id)
    user_permission.delete()
    return {'success': True}


# Group endpoints
@router.get('/groups', response=List[Group])
@paginate
def list_groups(request):
    return Group.objects.all()


@router.get('/groups/{id}', response=Group)
def get_group(request, id: int):
    return get_object_or_404(Group, id=id)


@router.post('/groups', response=Group)
def create_group(request, payload: GroupCreate):
    data = payload.dict()
    group = Group.objects.create(**data)
    return group


@router.put('/groups/{id}', response=Group)
def update_group(request, id: int, payload: GroupUpdate):
    group = get_object_or_404(Group, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(group, attr, value)
    group.save()
    return group


@router.delete('/groups/{id}')
def delete_group(request, id: int):
    group = get_object_or_404(Group, id=id)
    group.delete()
    return {'success': True}


# CustomerEvent endpoints
@router.get('/customer_events', response=List[CustomerEvent])
@paginate
def list_customer_events(request):
    return CustomerEvent.objects.all()


@router.get('/customer_events/{id}', response=CustomerEvent)
def get_customer_event(request, id: int):
    return get_object_or_404(CustomerEvent, id=id)


@router.post('/customer_events', response=CustomerEvent)
def create_customer_event(request, payload: CustomerEventCreate):
    data = payload.dict()
    customer_event = CustomerEvent.objects.create(**data)
    return customer_event


@router.put('/customer_events/{id}', response=CustomerEvent)
def update_customer_event(request, id: int, payload: CustomerEventUpdate):
    customer_event = get_object_or_404(CustomerEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customer_event, attr, value)
    customer_event.save()
    return customer_event


@router.delete('/customer_events/{id}')
def delete_customer_event(request, id: int):
    customer_event = get_object_or_404(CustomerEvent, id=id)
    customer_event.delete()
    return {'success': True}


# PaymentSource endpoints
@router.get('/payment_sources', response=List[PaymentSource])
@paginate
def list_payment_sources(request):
    return PaymentSource.objects.all()


@router.get('/payment_sources/{id}', response=PaymentSource)
def get_payment_source(request, id: int):
    return get_object_or_404(PaymentSource, id=id)


@router.post('/payment_sources', response=PaymentSource)
def create_payment_source(request, payload: PaymentSourceCreate):
    data = payload.dict()
    payment_source = PaymentSource.objects.create(**data)
    return payment_source


@router.put('/payment_sources/{id}', response=PaymentSource)
def update_payment_source(request, id: int, payload: PaymentSourceUpdate):
    payment_source = get_object_or_404(PaymentSource, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_source, attr, value)
    payment_source.save()
    return payment_source


@router.delete('/payment_sources/{id}')
def delete_payment_source(request, id: int):
    payment_source = get_object_or_404(PaymentSource, id=id)
    payment_source.delete()
    return {'success': True}


# WishlistCountableConnection endpoints
@router.get('/wishlist_countable_connections', response=List[WishlistCountableConnection])
@paginate
def list_wishlist_countable_connections(request):
    return WishlistCountableConnection.objects.all()


@router.get('/wishlist_countable_connections/{id}', response=WishlistCountableConnection)
def get_wishlist_countable_connection(request, id: int):
    return get_object_or_404(WishlistCountableConnection, id=id)


@router.post('/wishlist_countable_connections', response=WishlistCountableConnection)
def create_wishlist_countable_connection(request, payload: WishlistCountableConnectionCreate):
    data = payload.dict()
    wishlist_countable_connection = WishlistCountableConnection.objects.create(**data)
    return wishlist_countable_connection


@router.put('/wishlist_countable_connections/{id}', response=WishlistCountableConnection)
def update_wishlist_countable_connection(request, id: int, payload: WishlistCountableConnectionUpdate):
    wishlist_countable_connection = get_object_or_404(WishlistCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_countable_connection, attr, value)
    wishlist_countable_connection.save()
    return wishlist_countable_connection


@router.delete('/wishlist_countable_connections/{id}')
def delete_wishlist_countable_connection(request, id: int):
    wishlist_countable_connection = get_object_or_404(WishlistCountableConnection, id=id)
    wishlist_countable_connection.delete()
    return {'success': True}


# WishlistCountableEdge endpoints
@router.get('/wishlist_countable_edges', response=List[WishlistCountableEdge])
@paginate
def list_wishlist_countable_edges(request):
    return WishlistCountableEdge.objects.all()


@router.get('/wishlist_countable_edges/{id}', response=WishlistCountableEdge)
def get_wishlist_countable_edge(request, id: int):
    return get_object_or_404(WishlistCountableEdge, id=id)


@router.post('/wishlist_countable_edges', response=WishlistCountableEdge)
def create_wishlist_countable_edge(request, payload: WishlistCountableEdgeCreate):
    data = payload.dict()
    wishlist_countable_edge = WishlistCountableEdge.objects.create(**data)
    return wishlist_countable_edge


@router.put('/wishlist_countable_edges/{id}', response=WishlistCountableEdge)
def update_wishlist_countable_edge(request, id: int, payload: WishlistCountableEdgeUpdate):
    wishlist_countable_edge = get_object_or_404(WishlistCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_countable_edge, attr, value)
    wishlist_countable_edge.save()
    return wishlist_countable_edge


@router.delete('/wishlist_countable_edges/{id}')
def delete_wishlist_countable_edge(request, id: int):
    wishlist_countable_edge = get_object_or_404(WishlistCountableEdge, id=id)
    wishlist_countable_edge.delete()
    return {'success': True}


# WebhookEventLogCountableConnection endpoints
@router.get('/webhook_event_log_countable_connections', response=List[WebhookEventLogCountableConnection])
@paginate
def list_webhook_event_log_countable_connections(request):
    return WebhookEventLogCountableConnection.objects.all()


@router.get('/webhook_event_log_countable_connections/{id}', response=WebhookEventLogCountableConnection)
def get_webhook_event_log_countable_connection(request, id: int):
    return get_object_or_404(WebhookEventLogCountableConnection, id=id)


@router.post('/webhook_event_log_countable_connections', response=WebhookEventLogCountableConnection)
def create_webhook_event_log_countable_connection(request, payload: WebhookEventLogCountableConnectionCreate):
    data = payload.dict()
    webhook_event_log_countable_connection = WebhookEventLogCountableConnection.objects.create(**data)
    return webhook_event_log_countable_connection


@router.put('/webhook_event_log_countable_connections/{id}', response=WebhookEventLogCountableConnection)
def update_webhook_event_log_countable_connection(request, id: int, payload: WebhookEventLogCountableConnectionUpdate):
    webhook_event_log_countable_connection = get_object_or_404(WebhookEventLogCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_event_log_countable_connection, attr, value)
    webhook_event_log_countable_connection.save()
    return webhook_event_log_countable_connection


@router.delete('/webhook_event_log_countable_connections/{id}')
def delete_webhook_event_log_countable_connection(request, id: int):
    webhook_event_log_countable_connection = get_object_or_404(WebhookEventLogCountableConnection, id=id)
    webhook_event_log_countable_connection.delete()
    return {'success': True}


# WebhookEventLogCountableEdge endpoints
@router.get('/webhook_event_log_countable_edges', response=List[WebhookEventLogCountableEdge])
@paginate
def list_webhook_event_log_countable_edges(request):
    return WebhookEventLogCountableEdge.objects.all()


@router.get('/webhook_event_log_countable_edges/{id}', response=WebhookEventLogCountableEdge)
def get_webhook_event_log_countable_edge(request, id: int):
    return get_object_or_404(WebhookEventLogCountableEdge, id=id)


@router.post('/webhook_event_log_countable_edges', response=WebhookEventLogCountableEdge)
def create_webhook_event_log_countable_edge(request, payload: WebhookEventLogCountableEdgeCreate):
    data = payload.dict()
    webhook_event_log_countable_edge = WebhookEventLogCountableEdge.objects.create(**data)
    return webhook_event_log_countable_edge


@router.put('/webhook_event_log_countable_edges/{id}', response=WebhookEventLogCountableEdge)
def update_webhook_event_log_countable_edge(request, id: int, payload: WebhookEventLogCountableEdgeUpdate):
    webhook_event_log_countable_edge = get_object_or_404(WebhookEventLogCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_event_log_countable_edge, attr, value)
    webhook_event_log_countable_edge.save()
    return webhook_event_log_countable_edge


@router.delete('/webhook_event_log_countable_edges/{id}')
def delete_webhook_event_log_countable_edge(request, id: int):
    webhook_event_log_countable_edge = get_object_or_404(WebhookEventLogCountableEdge, id=id)
    webhook_event_log_countable_edge.delete()
    return {'success': True}


# WebhookEventLog endpoints
@router.get('/webhook_event_logs', response=List[WebhookEventLog])
@paginate
def list_webhook_event_logs(request):
    return WebhookEventLog.objects.all()


@router.get('/webhook_event_logs/{id}', response=WebhookEventLog)
def get_webhook_event_log(request, id: int):
    return get_object_or_404(WebhookEventLog, id=id)


@router.post('/webhook_event_logs', response=WebhookEventLog)
def create_webhook_event_log(request, payload: WebhookEventLogCreate):
    data = payload.dict()
    webhook_event_log = WebhookEventLog.objects.create(**data)
    return webhook_event_log


@router.put('/webhook_event_logs/{id}', response=WebhookEventLog)
def update_webhook_event_log(request, id: int, payload: WebhookEventLogUpdate):
    webhook_event_log = get_object_or_404(WebhookEventLog, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_event_log, attr, value)
    webhook_event_log.save()
    return webhook_event_log


@router.delete('/webhook_event_logs/{id}')
def delete_webhook_event_log(request, id: int):
    webhook_event_log = get_object_or_404(WebhookEventLog, id=id)
    webhook_event_log.delete()
    return {'success': True}


# WebhookJobCountableConnection endpoints
@router.get('/webhook_job_countable_connections', response=List[WebhookJobCountableConnection])
@paginate
def list_webhook_job_countable_connections(request):
    return WebhookJobCountableConnection.objects.all()


@router.get('/webhook_job_countable_connections/{id}', response=WebhookJobCountableConnection)
def get_webhook_job_countable_connection(request, id: int):
    return get_object_or_404(WebhookJobCountableConnection, id=id)


@router.post('/webhook_job_countable_connections', response=WebhookJobCountableConnection)
def create_webhook_job_countable_connection(request, payload: WebhookJobCountableConnectionCreate):
    data = payload.dict()
    webhook_job_countable_connection = WebhookJobCountableConnection.objects.create(**data)
    return webhook_job_countable_connection


@router.put('/webhook_job_countable_connections/{id}', response=WebhookJobCountableConnection)
def update_webhook_job_countable_connection(request, id: int, payload: WebhookJobCountableConnectionUpdate):
    webhook_job_countable_connection = get_object_or_404(WebhookJobCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_job_countable_connection, attr, value)
    webhook_job_countable_connection.save()
    return webhook_job_countable_connection


@router.delete('/webhook_job_countable_connections/{id}')
def delete_webhook_job_countable_connection(request, id: int):
    webhook_job_countable_connection = get_object_or_404(WebhookJobCountableConnection, id=id)
    webhook_job_countable_connection.delete()
    return {'success': True}


# WebhookJobCountableEdge endpoints
@router.get('/webhook_job_countable_edges', response=List[WebhookJobCountableEdge])
@paginate
def list_webhook_job_countable_edges(request):
    return WebhookJobCountableEdge.objects.all()


@router.get('/webhook_job_countable_edges/{id}', response=WebhookJobCountableEdge)
def get_webhook_job_countable_edge(request, id: int):
    return get_object_or_404(WebhookJobCountableEdge, id=id)


@router.post('/webhook_job_countable_edges', response=WebhookJobCountableEdge)
def create_webhook_job_countable_edge(request, payload: WebhookJobCountableEdgeCreate):
    data = payload.dict()
    webhook_job_countable_edge = WebhookJobCountableEdge.objects.create(**data)
    return webhook_job_countable_edge


@router.put('/webhook_job_countable_edges/{id}', response=WebhookJobCountableEdge)
def update_webhook_job_countable_edge(request, id: int, payload: WebhookJobCountableEdgeUpdate):
    webhook_job_countable_edge = get_object_or_404(WebhookJobCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_job_countable_edge, attr, value)
    webhook_job_countable_edge.save()
    return webhook_job_countable_edge


@router.delete('/webhook_job_countable_edges/{id}')
def delete_webhook_job_countable_edge(request, id: int):
    webhook_job_countable_edge = get_object_or_404(WebhookJobCountableEdge, id=id)
    webhook_job_countable_edge.delete()
    return {'success': True}


# WebhookJob endpoints
@router.get('/webhook_jobs', response=List[WebhookJob])
@paginate
def list_webhook_jobs(request):
    return WebhookJob.objects.all()


@router.get('/webhook_jobs/{id}', response=WebhookJob)
def get_webhook_job(request, id: int):
    return get_object_or_404(WebhookJob, id=id)


@router.post('/webhook_jobs', response=WebhookJob)
def create_webhook_job(request, payload: WebhookJobCreate):
    data = payload.dict()
    webhook_job = WebhookJob.objects.create(**data)
    return webhook_job


@router.put('/webhook_jobs/{id}', response=WebhookJob)
def update_webhook_job(request, id: int, payload: WebhookJobUpdate):
    webhook_job = get_object_or_404(WebhookJob, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_job, attr, value)
    webhook_job.save()
    return webhook_job


@router.delete('/webhook_jobs/{id}')
def delete_webhook_job(request, id: int):
    webhook_job = get_object_or_404(WebhookJob, id=id)
    webhook_job.delete()
    return {'success': True}


# StockCountableConnection endpoints
@router.get('/stock_countable_connections', response=List[StockCountableConnection])
@paginate
def list_stock_countable_connections(request):
    return StockCountableConnection.objects.all()


@router.get('/stock_countable_connections/{id}', response=StockCountableConnection)
def get_stock_countable_connection(request, id: int):
    return get_object_or_404(StockCountableConnection, id=id)


@router.post('/stock_countable_connections', response=StockCountableConnection)
def create_stock_countable_connection(request, payload: StockCountableConnectionCreate):
    data = payload.dict()
    stock_countable_connection = StockCountableConnection.objects.create(**data)
    return stock_countable_connection


@router.put('/stock_countable_connections/{id}', response=StockCountableConnection)
def update_stock_countable_connection(request, id: int, payload: StockCountableConnectionUpdate):
    stock_countable_connection = get_object_or_404(StockCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(stock_countable_connection, attr, value)
    stock_countable_connection.save()
    return stock_countable_connection


@router.delete('/stock_countable_connections/{id}')
def delete_stock_countable_connection(request, id: int):
    stock_countable_connection = get_object_or_404(StockCountableConnection, id=id)
    stock_countable_connection.delete()
    return {'success': True}


# StockCountableEdge endpoints
@router.get('/stock_countable_edges', response=List[StockCountableEdge])
@paginate
def list_stock_countable_edges(request):
    return StockCountableEdge.objects.all()


@router.get('/stock_countable_edges/{id}', response=StockCountableEdge)
def get_stock_countable_edge(request, id: int):
    return get_object_or_404(StockCountableEdge, id=id)


@router.post('/stock_countable_edges', response=StockCountableEdge)
def create_stock_countable_edge(request, payload: StockCountableEdgeCreate):
    data = payload.dict()
    stock_countable_edge = StockCountableEdge.objects.create(**data)
    return stock_countable_edge


@router.put('/stock_countable_edges/{id}', response=StockCountableEdge)
def update_stock_countable_edge(request, id: int, payload: StockCountableEdgeUpdate):
    stock_countable_edge = get_object_or_404(StockCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(stock_countable_edge, attr, value)
    stock_countable_edge.save()
    return stock_countable_edge


@router.delete('/stock_countable_edges/{id}')
def delete_stock_countable_edge(request, id: int):
    stock_countable_edge = get_object_or_404(StockCountableEdge, id=id)
    stock_countable_edge.delete()
    return {'success': True}


# Content endpoints
@router.get('/contents', response=List[Content])
@paginate
def list_contents(request):
    return Content.objects.all()


@router.get('/contents/{id}', response=Content)
def get_content(request, id: int):
    return get_object_or_404(Content, id=id)


@router.post('/contents', response=Content)
def create_content(request, payload: ContentCreate):
    data = payload.dict()
    content = Content.objects.create(**data)
    return content


@router.put('/contents/{id}', response=Content)
def update_content(request, id: int, payload: ContentUpdate):
    content = get_object_or_404(Content, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content, attr, value)
    content.save()
    return content


@router.delete('/contents/{id}')
def delete_content(request, id: int):
    content = get_object_or_404(Content, id=id)
    content.delete()
    return {'success': True}


# ContentPageData endpoints
@router.get('/content_page_datas', response=List[ContentPageData])
@paginate
def list_content_page_datas(request):
    return ContentPageData.objects.all()


@router.get('/content_page_datas/{id}', response=ContentPageData)
def get_content_page_data(request, id: int):
    return get_object_or_404(ContentPageData, id=id)


@router.post('/content_page_datas', response=ContentPageData)
def create_content_page_data(request, payload: ContentPageDataCreate):
    data = payload.dict()
    content_page_data = ContentPageData.objects.create(**data)
    return content_page_data


@router.put('/content_page_datas/{id}', response=ContentPageData)
def update_content_page_data(request, id: int, payload: ContentPageDataUpdate):
    content_page_data = get_object_or_404(ContentPageData, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_page_data, attr, value)
    content_page_data.save()
    return content_page_data


@router.delete('/content_page_datas/{id}')
def delete_content_page_data(request, id: int):
    content_page_data = get_object_or_404(ContentPageData, id=id)
    content_page_data.delete()
    return {'success': True}


# ContentCountableConnection endpoints
@router.get('/content_countable_connections', response=List[ContentCountableConnection])
@paginate
def list_content_countable_connections(request):
    return ContentCountableConnection.objects.all()


@router.get('/content_countable_connections/{id}', response=ContentCountableConnection)
def get_content_countable_connection(request, id: int):
    return get_object_or_404(ContentCountableConnection, id=id)


@router.post('/content_countable_connections', response=ContentCountableConnection)
def create_content_countable_connection(request, payload: ContentCountableConnectionCreate):
    data = payload.dict()
    content_countable_connection = ContentCountableConnection.objects.create(**data)
    return content_countable_connection


@router.put('/content_countable_connections/{id}', response=ContentCountableConnection)
def update_content_countable_connection(request, id: int, payload: ContentCountableConnectionUpdate):
    content_countable_connection = get_object_or_404(ContentCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_countable_connection, attr, value)
    content_countable_connection.save()
    return content_countable_connection


@router.delete('/content_countable_connections/{id}')
def delete_content_countable_connection(request, id: int):
    content_countable_connection = get_object_or_404(ContentCountableConnection, id=id)
    content_countable_connection.delete()
    return {'success': True}


# ContentCountableEdge endpoints
@router.get('/content_countable_edges', response=List[ContentCountableEdge])
@paginate
def list_content_countable_edges(request):
    return ContentCountableEdge.objects.all()


@router.get('/content_countable_edges/{id}', response=ContentCountableEdge)
def get_content_countable_edge(request, id: int):
    return get_object_or_404(ContentCountableEdge, id=id)


@router.post('/content_countable_edges', response=ContentCountableEdge)
def create_content_countable_edge(request, payload: ContentCountableEdgeCreate):
    data = payload.dict()
    content_countable_edge = ContentCountableEdge.objects.create(**data)
    return content_countable_edge


@router.put('/content_countable_edges/{id}', response=ContentCountableEdge)
def update_content_countable_edge(request, id: int, payload: ContentCountableEdgeUpdate):
    content_countable_edge = get_object_or_404(ContentCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_countable_edge, attr, value)
    content_countable_edge.save()
    return content_countable_edge


@router.delete('/content_countable_edges/{id}')
def delete_content_countable_edge(request, id: int):
    content_countable_edge = get_object_or_404(ContentCountableEdge, id=id)
    content_countable_edge.delete()
    return {'success': True}


# Media endpoints
@router.get('/medias', response=List[Media])
@paginate
def list_medias(request):
    return Media.objects.all()


@router.get('/medias/{id}', response=Media)
def get_media(request, id: int):
    return get_object_or_404(Media, id=id)


@router.post('/medias', response=Media)
def create_media(request, payload: MediaCreate):
    data = payload.dict()
    media = Media.objects.create(**data)
    return media


@router.put('/medias/{id}', response=Media)
def update_media(request, id: int, payload: MediaUpdate):
    media = get_object_or_404(Media, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media, attr, value)
    media.save()
    return media


@router.delete('/medias/{id}')
def delete_media(request, id: int):
    media = get_object_or_404(Media, id=id)
    media.delete()
    return {'success': True}


# MediaCountableConnection endpoints
@router.get('/media_countable_connections', response=List[MediaCountableConnection])
@paginate
def list_media_countable_connections(request):
    return MediaCountableConnection.objects.all()


@router.get('/media_countable_connections/{id}', response=MediaCountableConnection)
def get_media_countable_connection(request, id: int):
    return get_object_or_404(MediaCountableConnection, id=id)


@router.post('/media_countable_connections', response=MediaCountableConnection)
def create_media_countable_connection(request, payload: MediaCountableConnectionCreate):
    data = payload.dict()
    media_countable_connection = MediaCountableConnection.objects.create(**data)
    return media_countable_connection


@router.put('/media_countable_connections/{id}', response=MediaCountableConnection)
def update_media_countable_connection(request, id: int, payload: MediaCountableConnectionUpdate):
    media_countable_connection = get_object_or_404(MediaCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media_countable_connection, attr, value)
    media_countable_connection.save()
    return media_countable_connection


@router.delete('/media_countable_connections/{id}')
def delete_media_countable_connection(request, id: int):
    media_countable_connection = get_object_or_404(MediaCountableConnection, id=id)
    media_countable_connection.delete()
    return {'success': True}


# MediaCountableEdge endpoints
@router.get('/media_countable_edges', response=List[MediaCountableEdge])
@paginate
def list_media_countable_edges(request):
    return MediaCountableEdge.objects.all()


@router.get('/media_countable_edges/{id}', response=MediaCountableEdge)
def get_media_countable_edge(request, id: int):
    return get_object_or_404(MediaCountableEdge, id=id)


@router.post('/media_countable_edges', response=MediaCountableEdge)
def create_media_countable_edge(request, payload: MediaCountableEdgeCreate):
    data = payload.dict()
    media_countable_edge = MediaCountableEdge.objects.create(**data)
    return media_countable_edge


@router.put('/media_countable_edges/{id}', response=MediaCountableEdge)
def update_media_countable_edge(request, id: int, payload: MediaCountableEdgeUpdate):
    media_countable_edge = get_object_or_404(MediaCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media_countable_edge, attr, value)
    media_countable_edge.save()
    return media_countable_edge


@router.delete('/media_countable_edges/{id}')
def delete_media_countable_edge(request, id: int):
    media_countable_edge = get_object_or_404(MediaCountableEdge, id=id)
    media_countable_edge.delete()
    return {'success': True}


# TenantCountableConnection endpoints
@router.get('/tenant_countable_connections', response=List[TenantCountableConnection])
@paginate
def list_tenant_countable_connections(request):
    return TenantCountableConnection.objects.all()


@router.get('/tenant_countable_connections/{id}', response=TenantCountableConnection)
def get_tenant_countable_connection(request, id: int):
    return get_object_or_404(TenantCountableConnection, id=id)


@router.post('/tenant_countable_connections', response=TenantCountableConnection)
def create_tenant_countable_connection(request, payload: TenantCountableConnectionCreate):
    data = payload.dict()
    tenant_countable_connection = TenantCountableConnection.objects.create(**data)
    return tenant_countable_connection


@router.put('/tenant_countable_connections/{id}', response=TenantCountableConnection)
def update_tenant_countable_connection(request, id: int, payload: TenantCountableConnectionUpdate):
    tenant_countable_connection = get_object_or_404(TenantCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tenant_countable_connection, attr, value)
    tenant_countable_connection.save()
    return tenant_countable_connection


@router.delete('/tenant_countable_connections/{id}')
def delete_tenant_countable_connection(request, id: int):
    tenant_countable_connection = get_object_or_404(TenantCountableConnection, id=id)
    tenant_countable_connection.delete()
    return {'success': True}


# TenantCountableEdge endpoints
@router.get('/tenant_countable_edges', response=List[TenantCountableEdge])
@paginate
def list_tenant_countable_edges(request):
    return TenantCountableEdge.objects.all()


@router.get('/tenant_countable_edges/{id}', response=TenantCountableEdge)
def get_tenant_countable_edge(request, id: int):
    return get_object_or_404(TenantCountableEdge, id=id)


@router.post('/tenant_countable_edges', response=TenantCountableEdge)
def create_tenant_countable_edge(request, payload: TenantCountableEdgeCreate):
    data = payload.dict()
    tenant_countable_edge = TenantCountableEdge.objects.create(**data)
    return tenant_countable_edge


@router.put('/tenant_countable_edges/{id}', response=TenantCountableEdge)
def update_tenant_countable_edge(request, id: int, payload: TenantCountableEdgeUpdate):
    tenant_countable_edge = get_object_or_404(TenantCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tenant_countable_edge, attr, value)
    tenant_countable_edge.save()
    return tenant_countable_edge


@router.delete('/tenant_countable_edges/{id}')
def delete_tenant_countable_edge(request, id: int):
    tenant_countable_edge = get_object_or_404(TenantCountableEdge, id=id)
    tenant_countable_edge.delete()
    return {'success': True}


# Shop endpoints
@router.get('/shops', response=List[Shop])
@paginate
def list_shops(request):
    return Shop.objects.all()


@router.get('/shops/{id}', response=Shop)
def get_shop(request, id: int):
    return get_object_or_404(Shop, id=id)


@router.post('/shops', response=Shop)
def create_shop(request, payload: ShopCreate):
    data = payload.dict()
    shop = Shop.objects.create(**data)
    return shop


@router.put('/shops/{id}', response=Shop)
def update_shop(request, id: int, payload: ShopUpdate):
    shop = get_object_or_404(Shop, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop, attr, value)
    shop.save()
    return shop


@router.delete('/shops/{id}')
def delete_shop(request, id: int):
    shop = get_object_or_404(Shop, id=id)
    shop.delete()
    return {'success': True}


# Geolocalization endpoints
@router.get('/geolocalizations', response=List[Geolocalization])
@paginate
def list_geolocalizations(request):
    return Geolocalization.objects.all()


@router.get('/geolocalizations/{id}', response=Geolocalization)
def get_geolocalization(request, id: int):
    return get_object_or_404(Geolocalization, id=id)


@router.post('/geolocalizations', response=Geolocalization)
def create_geolocalization(request, payload: GeolocalizationCreate):
    data = payload.dict()
    geolocalization = Geolocalization.objects.create(**data)
    return geolocalization


@router.put('/geolocalizations/{id}', response=Geolocalization)
def update_geolocalization(request, id: int, payload: GeolocalizationUpdate):
    geolocalization = get_object_or_404(Geolocalization, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(geolocalization, attr, value)
    geolocalization.save()
    return geolocalization


@router.delete('/geolocalizations/{id}')
def delete_geolocalization(request, id: int):
    geolocalization = get_object_or_404(Geolocalization, id=id)
    geolocalization.delete()
    return {'success': True}


# Domain endpoints
@router.get('/domains', response=List[Domain])
@paginate
def list_domains(request):
    return Domain.objects.all()


@router.get('/domains/{id}', response=Domain)
def get_domain(request, id: int):
    return get_object_or_404(Domain, id=id)


@router.post('/domains', response=Domain)
def create_domain(request, payload: DomainCreate):
    data = payload.dict()
    domain = Domain.objects.create(**data)
    return domain


@router.put('/domains/{id}', response=Domain)
def update_domain(request, id: int, payload: DomainUpdate):
    domain = get_object_or_404(Domain, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(domain, attr, value)
    domain.save()
    return domain


@router.delete('/domains/{id}')
def delete_domain(request, id: int):
    domain = get_object_or_404(Domain, id=id)
    domain.delete()
    return {'success': True}


# Plugin endpoints
@router.get('/plugins', response=List[Plugin])
@paginate
def list_plugins(request):
    return Plugin.objects.all()


@router.get('/plugins/{id}', response=Plugin)
def get_plugin(request, id: int):
    return get_object_or_404(Plugin, id=id)


@router.post('/plugins', response=Plugin)
def create_plugin(request, payload: PluginCreate):
    data = payload.dict()
    plugin = Plugin.objects.create(**data)
    return plugin


@router.put('/plugins/{id}', response=Plugin)
def update_plugin(request, id: int, payload: PluginUpdate):
    plugin = get_object_or_404(Plugin, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin, attr, value)
    plugin.save()
    return plugin


@router.delete('/plugins/{id}')
def delete_plugin(request, id: int):
    plugin = get_object_or_404(Plugin, id=id)
    plugin.delete()
    return {'success': True}


# ConfigurationItem endpoints
@router.get('/configuration_items', response=List[ConfigurationItem])
@paginate
def list_configuration_items(request):
    return ConfigurationItem.objects.all()


@router.get('/configuration_items/{id}', response=ConfigurationItem)
def get_configuration_item(request, id: int):
    return get_object_or_404(ConfigurationItem, id=id)


@router.post('/configuration_items', response=ConfigurationItem)
def create_configuration_item(request, payload: ConfigurationItemCreate):
    data = payload.dict()
    configuration_item = ConfigurationItem.objects.create(**data)
    return configuration_item


@router.put('/configuration_items/{id}', response=ConfigurationItem)
def update_configuration_item(request, id: int, payload: ConfigurationItemUpdate):
    configuration_item = get_object_or_404(ConfigurationItem, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(configuration_item, attr, value)
    configuration_item.save()
    return configuration_item


@router.delete('/configuration_items/{id}')
def delete_configuration_item(request, id: int):
    configuration_item = get_object_or_404(ConfigurationItem, id=id)
    configuration_item.delete()
    return {'success': True}


# CheckoutTheme endpoints
@router.get('/checkout_themes', response=List[CheckoutTheme])
@paginate
def list_checkout_themes(request):
    return CheckoutTheme.objects.all()


@router.get('/checkout_themes/{id}', response=CheckoutTheme)
def get_checkout_theme(request, id: int):
    return get_object_or_404(CheckoutTheme, id=id)


@router.post('/checkout_themes', response=CheckoutTheme)
def create_checkout_theme(request, payload: CheckoutThemeCreate):
    data = payload.dict()
    checkout_theme = CheckoutTheme.objects.create(**data)
    return checkout_theme


@router.put('/checkout_themes/{id}', response=CheckoutTheme)
def update_checkout_theme(request, id: int, payload: CheckoutThemeUpdate):
    checkout_theme = get_object_or_404(CheckoutTheme, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_theme, attr, value)
    checkout_theme.save()
    return checkout_theme


@router.delete('/checkout_themes/{id}')
def delete_checkout_theme(request, id: int):
    checkout_theme = get_object_or_404(CheckoutTheme, id=id)
    checkout_theme.delete()
    return {'success': True}


# StorefrontTheme endpoints
@router.get('/storefront_themes', response=List[StorefrontTheme])
@paginate
def list_storefront_themes(request):
    return StorefrontTheme.objects.all()


@router.get('/storefront_themes/{id}', response=StorefrontTheme)
def get_storefront_theme(request, id: int):
    return get_object_or_404(StorefrontTheme, id=id)


@router.post('/storefront_themes', response=StorefrontTheme)
def create_storefront_theme(request, payload: StorefrontThemeCreate):
    data = payload.dict()
    storefront_theme = StorefrontTheme.objects.create(**data)
    return storefront_theme


@router.put('/storefront_themes/{id}', response=StorefrontTheme)
def update_storefront_theme(request, id: int, payload: StorefrontThemeUpdate):
    storefront_theme = get_object_or_404(StorefrontTheme, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(storefront_theme, attr, value)
    storefront_theme.save()
    return storefront_theme


@router.delete('/storefront_themes/{id}')
def delete_storefront_theme(request, id: int):
    storefront_theme = get_object_or_404(StorefrontTheme, id=id)
    storefront_theme.delete()
    return {'success': True}


# Font endpoints
@router.get('/fonts', response=List[Font])
@paginate
def list_fonts(request):
    return Font.objects.all()


@router.get('/fonts/{id}', response=Font)
def get_font(request, id: int):
    return get_object_or_404(Font, id=id)


@router.post('/fonts', response=Font)
def create_font(request, payload: FontCreate):
    data = payload.dict()
    font = Font.objects.create(**data)
    return font


@router.put('/fonts/{id}', response=Font)
def update_font(request, id: int, payload: FontUpdate):
    font = get_object_or_404(Font, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(font, attr, value)
    font.save()
    return font


@router.delete('/fonts/{id}')
def delete_font(request, id: int):
    font = get_object_or_404(Font, id=id)
    font.delete()
    return {'success': True}


# SellerOnboardingSettings endpoints
@router.get('/seller_onboarding_settingss', response=List[SellerOnboardingSettings])
@paginate
def list_seller_onboarding_settingss(request):
    return SellerOnboardingSettings.objects.all()


@router.get('/seller_onboarding_settingss/{id}', response=SellerOnboardingSettings)
def get_seller_onboarding_settings(request, id: int):
    return get_object_or_404(SellerOnboardingSettings, id=id)


@router.post('/seller_onboarding_settingss', response=SellerOnboardingSettings)
def create_seller_onboarding_settings(request, payload: SellerOnboardingSettingsCreate):
    data = payload.dict()
    seller_onboarding_settings = SellerOnboardingSettings.objects.create(**data)
    return seller_onboarding_settings


@router.put('/seller_onboarding_settingss/{id}', response=SellerOnboardingSettings)
def update_seller_onboarding_settings(request, id: int, payload: SellerOnboardingSettingsUpdate):
    seller_onboarding_settings = get_object_or_404(SellerOnboardingSettings, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_settings, attr, value)
    seller_onboarding_settings.save()
    return seller_onboarding_settings


@router.delete('/seller_onboarding_settingss/{id}')
def delete_seller_onboarding_settings(request, id: int):
    seller_onboarding_settings = get_object_or_404(SellerOnboardingSettings, id=id)
    seller_onboarding_settings.delete()
    return {'success': True}


# CustomDomain endpoints
@router.get('/custom_domains', response=List[CustomDomain])
@paginate
def list_custom_domains(request):
    return CustomDomain.objects.all()


@router.get('/custom_domains/{id}', response=CustomDomain)
def get_custom_domain(request, id: int):
    return get_object_or_404(CustomDomain, id=id)


@router.post('/custom_domains', response=CustomDomain)
def create_custom_domain(request, payload: CustomDomainCreate):
    data = payload.dict()
    custom_domain = CustomDomain.objects.create(**data)
    return custom_domain


@router.put('/custom_domains/{id}', response=CustomDomain)
def update_custom_domain(request, id: int, payload: CustomDomainUpdate):
    custom_domain = get_object_or_404(CustomDomain, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_domain, attr, value)
    custom_domain.save()
    return custom_domain


@router.delete('/custom_domains/{id}')
def delete_custom_domain(request, id: int):
    custom_domain = get_object_or_404(CustomDomain, id=id)
    custom_domain.delete()
    return {'success': True}


# PublicSeller endpoints
@router.get('/public_sellers', response=List[PublicSeller])
@paginate
def list_public_sellers(request):
    return PublicSeller.objects.all()


@router.get('/public_sellers/{id}', response=PublicSeller)
def get_public_seller(request, id: int):
    return get_object_or_404(PublicSeller, id=id)


@router.post('/public_sellers', response=PublicSeller)
def create_public_seller(request, payload: PublicSellerCreate):
    data = payload.dict()
    public_seller = PublicSeller.objects.create(**data)
    return public_seller


@router.put('/public_sellers/{id}', response=PublicSeller)
def update_public_seller(request, id: int, payload: PublicSellerUpdate):
    public_seller = get_object_or_404(PublicSeller, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(public_seller, attr, value)
    public_seller.save()
    return public_seller


@router.delete('/public_sellers/{id}')
def delete_public_seller(request, id: int):
    public_seller = get_object_or_404(PublicSeller, id=id)
    public_seller.delete()
    return {'success': True}


# SellerCountableConnection endpoints
@router.get('/seller_countable_connections', response=List[SellerCountableConnection])
@paginate
def list_seller_countable_connections(request):
    return SellerCountableConnection.objects.all()


@router.get('/seller_countable_connections/{id}', response=SellerCountableConnection)
def get_seller_countable_connection(request, id: int):
    return get_object_or_404(SellerCountableConnection, id=id)


@router.post('/seller_countable_connections', response=SellerCountableConnection)
def create_seller_countable_connection(request, payload: SellerCountableConnectionCreate):
    data = payload.dict()
    seller_countable_connection = SellerCountableConnection.objects.create(**data)
    return seller_countable_connection


@router.put('/seller_countable_connections/{id}', response=SellerCountableConnection)
def update_seller_countable_connection(request, id: int, payload: SellerCountableConnectionUpdate):
    seller_countable_connection = get_object_or_404(SellerCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_countable_connection, attr, value)
    seller_countable_connection.save()
    return seller_countable_connection


@router.delete('/seller_countable_connections/{id}')
def delete_seller_countable_connection(request, id: int):
    seller_countable_connection = get_object_or_404(SellerCountableConnection, id=id)
    seller_countable_connection.delete()
    return {'success': True}


# SellerCountableEdge endpoints
@router.get('/seller_countable_edges', response=List[SellerCountableEdge])
@paginate
def list_seller_countable_edges(request):
    return SellerCountableEdge.objects.all()


@router.get('/seller_countable_edges/{id}', response=SellerCountableEdge)
def get_seller_countable_edge(request, id: int):
    return get_object_or_404(SellerCountableEdge, id=id)


@router.post('/seller_countable_edges', response=SellerCountableEdge)
def create_seller_countable_edge(request, payload: SellerCountableEdgeCreate):
    data = payload.dict()
    seller_countable_edge = SellerCountableEdge.objects.create(**data)
    return seller_countable_edge


@router.put('/seller_countable_edges/{id}', response=SellerCountableEdge)
def update_seller_countable_edge(request, id: int, payload: SellerCountableEdgeUpdate):
    seller_countable_edge = get_object_or_404(SellerCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_countable_edge, attr, value)
    seller_countable_edge.save()
    return seller_countable_edge


@router.delete('/seller_countable_edges/{id}')
def delete_seller_countable_edge(request, id: int):
    seller_countable_edge = get_object_or_404(SellerCountableEdge, id=id)
    seller_countable_edge.delete()
    return {'success': True}


# UserCountableConnection endpoints
@router.get('/user_countable_connections', response=List[UserCountableConnection])
@paginate
def list_user_countable_connections(request):
    return UserCountableConnection.objects.all()


@router.get('/user_countable_connections/{id}', response=UserCountableConnection)
def get_user_countable_connection(request, id: int):
    return get_object_or_404(UserCountableConnection, id=id)


@router.post('/user_countable_connections', response=UserCountableConnection)
def create_user_countable_connection(request, payload: UserCountableConnectionCreate):
    data = payload.dict()
    user_countable_connection = UserCountableConnection.objects.create(**data)
    return user_countable_connection


@router.put('/user_countable_connections/{id}', response=UserCountableConnection)
def update_user_countable_connection(request, id: int, payload: UserCountableConnectionUpdate):
    user_countable_connection = get_object_or_404(UserCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_countable_connection, attr, value)
    user_countable_connection.save()
    return user_countable_connection


@router.delete('/user_countable_connections/{id}')
def delete_user_countable_connection(request, id: int):
    user_countable_connection = get_object_or_404(UserCountableConnection, id=id)
    user_countable_connection.delete()
    return {'success': True}


# UserCountableEdge endpoints
@router.get('/user_countable_edges', response=List[UserCountableEdge])
@paginate
def list_user_countable_edges(request):
    return UserCountableEdge.objects.all()


@router.get('/user_countable_edges/{id}', response=UserCountableEdge)
def get_user_countable_edge(request, id: int):
    return get_object_or_404(UserCountableEdge, id=id)


@router.post('/user_countable_edges', response=UserCountableEdge)
def create_user_countable_edge(request, payload: UserCountableEdgeCreate):
    data = payload.dict()
    user_countable_edge = UserCountableEdge.objects.create(**data)
    return user_countable_edge


@router.put('/user_countable_edges/{id}', response=UserCountableEdge)
def update_user_countable_edge(request, id: int, payload: UserCountableEdgeUpdate):
    user_countable_edge = get_object_or_404(UserCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_countable_edge, attr, value)
    user_countable_edge.save()
    return user_countable_edge


@router.delete('/user_countable_edges/{id}')
def delete_user_countable_edge(request, id: int):
    user_countable_edge = get_object_or_404(UserCountableEdge, id=id)
    user_countable_edge.delete()
    return {'success': True}


# AgreementCountableConnection endpoints
@router.get('/agreement_countable_connections', response=List[AgreementCountableConnection])
@paginate
def list_agreement_countable_connections(request):
    return AgreementCountableConnection.objects.all()


@router.get('/agreement_countable_connections/{id}', response=AgreementCountableConnection)
def get_agreement_countable_connection(request, id: int):
    return get_object_or_404(AgreementCountableConnection, id=id)


@router.post('/agreement_countable_connections', response=AgreementCountableConnection)
def create_agreement_countable_connection(request, payload: AgreementCountableConnectionCreate):
    data = payload.dict()
    agreement_countable_connection = AgreementCountableConnection.objects.create(**data)
    return agreement_countable_connection


@router.put('/agreement_countable_connections/{id}', response=AgreementCountableConnection)
def update_agreement_countable_connection(request, id: int, payload: AgreementCountableConnectionUpdate):
    agreement_countable_connection = get_object_or_404(AgreementCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_countable_connection, attr, value)
    agreement_countable_connection.save()
    return agreement_countable_connection


@router.delete('/agreement_countable_connections/{id}')
def delete_agreement_countable_connection(request, id: int):
    agreement_countable_connection = get_object_or_404(AgreementCountableConnection, id=id)
    agreement_countable_connection.delete()
    return {'success': True}


# AgreementCountableEdge endpoints
@router.get('/agreement_countable_edges', response=List[AgreementCountableEdge])
@paginate
def list_agreement_countable_edges(request):
    return AgreementCountableEdge.objects.all()


@router.get('/agreement_countable_edges/{id}', response=AgreementCountableEdge)
def get_agreement_countable_edge(request, id: int):
    return get_object_or_404(AgreementCountableEdge, id=id)


@router.post('/agreement_countable_edges', response=AgreementCountableEdge)
def create_agreement_countable_edge(request, payload: AgreementCountableEdgeCreate):
    data = payload.dict()
    agreement_countable_edge = AgreementCountableEdge.objects.create(**data)
    return agreement_countable_edge


@router.put('/agreement_countable_edges/{id}', response=AgreementCountableEdge)
def update_agreement_countable_edge(request, id: int, payload: AgreementCountableEdgeUpdate):
    agreement_countable_edge = get_object_or_404(AgreementCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_countable_edge, attr, value)
    agreement_countable_edge.save()
    return agreement_countable_edge


@router.delete('/agreement_countable_edges/{id}')
def delete_agreement_countable_edge(request, id: int):
    agreement_countable_edge = get_object_or_404(AgreementCountableEdge, id=id)
    agreement_countable_edge.delete()
    return {'success': True}


# SellerCards endpoints
@router.get('/seller_cardss', response=List[SellerCards])
@paginate
def list_seller_cardss(request):
    return SellerCards.objects.all()


@router.get('/seller_cardss/{id}', response=SellerCards)
def get_seller_cards(request, id: int):
    return get_object_or_404(SellerCards, id=id)


@router.post('/seller_cardss', response=SellerCards)
def create_seller_cards(request, payload: SellerCardsCreate):
    data = payload.dict()
    seller_cards = SellerCards.objects.create(**data)
    return seller_cards


@router.put('/seller_cardss/{id}', response=SellerCards)
def update_seller_cards(request, id: int, payload: SellerCardsUpdate):
    seller_cards = get_object_or_404(SellerCards, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_cards, attr, value)
    seller_cards.save()
    return seller_cards


@router.delete('/seller_cardss/{id}')
def delete_seller_cards(request, id: int):
    seller_cards = get_object_or_404(SellerCards, id=id)
    seller_cards.delete()
    return {'success': True}


# SellerDetailCards endpoints
@router.get('/seller_detail_cardss', response=List[SellerDetailCards])
@paginate
def list_seller_detail_cardss(request):
    return SellerDetailCards.objects.all()


@router.get('/seller_detail_cardss/{id}', response=SellerDetailCards)
def get_seller_detail_cards(request, id: int):
    return get_object_or_404(SellerDetailCards, id=id)


@router.post('/seller_detail_cardss', response=SellerDetailCards)
def create_seller_detail_cards(request, payload: SellerDetailCardsCreate):
    data = payload.dict()
    seller_detail_cards = SellerDetailCards.objects.create(**data)
    return seller_detail_cards


@router.put('/seller_detail_cardss/{id}', response=SellerDetailCards)
def update_seller_detail_cards(request, id: int, payload: SellerDetailCardsUpdate):
    seller_detail_cards = get_object_or_404(SellerDetailCards, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_detail_cards, attr, value)
    seller_detail_cards.save()
    return seller_detail_cards


@router.delete('/seller_detail_cardss/{id}')
def delete_seller_detail_cards(request, id: int):
    seller_detail_cards = get_object_or_404(SellerDetailCards, id=id)
    seller_detail_cards.delete()
    return {'success': True}


# RefundCountableConnection endpoints
@router.get('/refund_countable_connections', response=List[RefundCountableConnection])
@paginate
def list_refund_countable_connections(request):
    return RefundCountableConnection.objects.all()


@router.get('/refund_countable_connections/{id}', response=RefundCountableConnection)
def get_refund_countable_connection(request, id: int):
    return get_object_or_404(RefundCountableConnection, id=id)


@router.post('/refund_countable_connections', response=RefundCountableConnection)
def create_refund_countable_connection(request, payload: RefundCountableConnectionCreate):
    data = payload.dict()
    refund_countable_connection = RefundCountableConnection.objects.create(**data)
    return refund_countable_connection


@router.put('/refund_countable_connections/{id}', response=RefundCountableConnection)
def update_refund_countable_connection(request, id: int, payload: RefundCountableConnectionUpdate):
    refund_countable_connection = get_object_or_404(RefundCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_countable_connection, attr, value)
    refund_countable_connection.save()
    return refund_countable_connection


@router.delete('/refund_countable_connections/{id}')
def delete_refund_countable_connection(request, id: int):
    refund_countable_connection = get_object_or_404(RefundCountableConnection, id=id)
    refund_countable_connection.delete()
    return {'success': True}


# RefundCountableEdge endpoints
@router.get('/refund_countable_edges', response=List[RefundCountableEdge])
@paginate
def list_refund_countable_edges(request):
    return RefundCountableEdge.objects.all()


@router.get('/refund_countable_edges/{id}', response=RefundCountableEdge)
def get_refund_countable_edge(request, id: int):
    return get_object_or_404(RefundCountableEdge, id=id)


@router.post('/refund_countable_edges', response=RefundCountableEdge)
def create_refund_countable_edge(request, payload: RefundCountableEdgeCreate):
    data = payload.dict()
    refund_countable_edge = RefundCountableEdge.objects.create(**data)
    return refund_countable_edge


@router.put('/refund_countable_edges/{id}', response=RefundCountableEdge)
def update_refund_countable_edge(request, id: int, payload: RefundCountableEdgeUpdate):
    refund_countable_edge = get_object_or_404(RefundCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_countable_edge, attr, value)
    refund_countable_edge.save()
    return refund_countable_edge


@router.delete('/refund_countable_edges/{id}')
def delete_refund_countable_edge(request, id: int):
    refund_countable_edge = get_object_or_404(RefundCountableEdge, id=id)
    refund_countable_edge.delete()
    return {'success': True}


# DigitalContentCountableConnection endpoints
@router.get('/digital_content_countable_connections', response=List[DigitalContentCountableConnection])
@paginate
def list_digital_content_countable_connections(request):
    return DigitalContentCountableConnection.objects.all()


@router.get('/digital_content_countable_connections/{id}', response=DigitalContentCountableConnection)
def get_digital_content_countable_connection(request, id: int):
    return get_object_or_404(DigitalContentCountableConnection, id=id)


@router.post('/digital_content_countable_connections', response=DigitalContentCountableConnection)
def create_digital_content_countable_connection(request, payload: DigitalContentCountableConnectionCreate):
    data = payload.dict()
    digital_content_countable_connection = DigitalContentCountableConnection.objects.create(**data)
    return digital_content_countable_connection


@router.put('/digital_content_countable_connections/{id}', response=DigitalContentCountableConnection)
def update_digital_content_countable_connection(request, id: int, payload: DigitalContentCountableConnectionUpdate):
    digital_content_countable_connection = get_object_or_404(DigitalContentCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_countable_connection, attr, value)
    digital_content_countable_connection.save()
    return digital_content_countable_connection


@router.delete('/digital_content_countable_connections/{id}')
def delete_digital_content_countable_connection(request, id: int):
    digital_content_countable_connection = get_object_or_404(DigitalContentCountableConnection, id=id)
    digital_content_countable_connection.delete()
    return {'success': True}


# DigitalContentCountableEdge endpoints
@router.get('/digital_content_countable_edges', response=List[DigitalContentCountableEdge])
@paginate
def list_digital_content_countable_edges(request):
    return DigitalContentCountableEdge.objects.all()


@router.get('/digital_content_countable_edges/{id}', response=DigitalContentCountableEdge)
def get_digital_content_countable_edge(request, id: int):
    return get_object_or_404(DigitalContentCountableEdge, id=id)


@router.post('/digital_content_countable_edges', response=DigitalContentCountableEdge)
def create_digital_content_countable_edge(request, payload: DigitalContentCountableEdgeCreate):
    data = payload.dict()
    digital_content_countable_edge = DigitalContentCountableEdge.objects.create(**data)
    return digital_content_countable_edge


@router.put('/digital_content_countable_edges/{id}', response=DigitalContentCountableEdge)
def update_digital_content_countable_edge(request, id: int, payload: DigitalContentCountableEdgeUpdate):
    digital_content_countable_edge = get_object_or_404(DigitalContentCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_countable_edge, attr, value)
    digital_content_countable_edge.save()
    return digital_content_countable_edge


@router.delete('/digital_content_countable_edges/{id}')
def delete_digital_content_countable_edge(request, id: int):
    digital_content_countable_edge = get_object_or_404(DigitalContentCountableEdge, id=id)
    digital_content_countable_edge.delete()
    return {'success': True}


# PriceBookCountableConnection endpoints
@router.get('/price_book_countable_connections', response=List[PriceBookCountableConnection])
@paginate
def list_price_book_countable_connections(request):
    return PriceBookCountableConnection.objects.all()


@router.get('/price_book_countable_connections/{id}', response=PriceBookCountableConnection)
def get_price_book_countable_connection(request, id: int):
    return get_object_or_404(PriceBookCountableConnection, id=id)


@router.post('/price_book_countable_connections', response=PriceBookCountableConnection)
def create_price_book_countable_connection(request, payload: PriceBookCountableConnectionCreate):
    data = payload.dict()
    price_book_countable_connection = PriceBookCountableConnection.objects.create(**data)
    return price_book_countable_connection


@router.put('/price_book_countable_connections/{id}', response=PriceBookCountableConnection)
def update_price_book_countable_connection(request, id: int, payload: PriceBookCountableConnectionUpdate):
    price_book_countable_connection = get_object_or_404(PriceBookCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_countable_connection, attr, value)
    price_book_countable_connection.save()
    return price_book_countable_connection


@router.delete('/price_book_countable_connections/{id}')
def delete_price_book_countable_connection(request, id: int):
    price_book_countable_connection = get_object_or_404(PriceBookCountableConnection, id=id)
    price_book_countable_connection.delete()
    return {'success': True}


# PriceBookCountableEdge endpoints
@router.get('/price_book_countable_edges', response=List[PriceBookCountableEdge])
@paginate
def list_price_book_countable_edges(request):
    return PriceBookCountableEdge.objects.all()


@router.get('/price_book_countable_edges/{id}', response=PriceBookCountableEdge)
def get_price_book_countable_edge(request, id: int):
    return get_object_or_404(PriceBookCountableEdge, id=id)


@router.post('/price_book_countable_edges', response=PriceBookCountableEdge)
def create_price_book_countable_edge(request, payload: PriceBookCountableEdgeCreate):
    data = payload.dict()
    price_book_countable_edge = PriceBookCountableEdge.objects.create(**data)
    return price_book_countable_edge


@router.put('/price_book_countable_edges/{id}', response=PriceBookCountableEdge)
def update_price_book_countable_edge(request, id: int, payload: PriceBookCountableEdgeUpdate):
    price_book_countable_edge = get_object_or_404(PriceBookCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_countable_edge, attr, value)
    price_book_countable_edge.save()
    return price_book_countable_edge


@router.delete('/price_book_countable_edges/{id}')
def delete_price_book_countable_edge(request, id: int):
    price_book_countable_edge = get_object_or_404(PriceBookCountableEdge, id=id)
    price_book_countable_edge.delete()
    return {'success': True}


# PriceBookVariantCountableConnection endpoints
@router.get('/price_book_variant_countable_connections', response=List[PriceBookVariantCountableConnection])
@paginate
def list_price_book_variant_countable_connections(request):
    return PriceBookVariantCountableConnection.objects.all()


@router.get('/price_book_variant_countable_connections/{id}', response=PriceBookVariantCountableConnection)
def get_price_book_variant_countable_connection(request, id: int):
    return get_object_or_404(PriceBookVariantCountableConnection, id=id)


@router.post('/price_book_variant_countable_connections', response=PriceBookVariantCountableConnection)
def create_price_book_variant_countable_connection(request, payload: PriceBookVariantCountableConnectionCreate):
    data = payload.dict()
    price_book_variant_countable_connection = PriceBookVariantCountableConnection.objects.create(**data)
    return price_book_variant_countable_connection


@router.put('/price_book_variant_countable_connections/{id}', response=PriceBookVariantCountableConnection)
def update_price_book_variant_countable_connection(request, id: int, payload: PriceBookVariantCountableConnectionUpdate):
    price_book_variant_countable_connection = get_object_or_404(PriceBookVariantCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_countable_connection, attr, value)
    price_book_variant_countable_connection.save()
    return price_book_variant_countable_connection


@router.delete('/price_book_variant_countable_connections/{id}')
def delete_price_book_variant_countable_connection(request, id: int):
    price_book_variant_countable_connection = get_object_or_404(PriceBookVariantCountableConnection, id=id)
    price_book_variant_countable_connection.delete()
    return {'success': True}


# PriceBookVariantCountableEdge endpoints
@router.get('/price_book_variant_countable_edges', response=List[PriceBookVariantCountableEdge])
@paginate
def list_price_book_variant_countable_edges(request):
    return PriceBookVariantCountableEdge.objects.all()


@router.get('/price_book_variant_countable_edges/{id}', response=PriceBookVariantCountableEdge)
def get_price_book_variant_countable_edge(request, id: int):
    return get_object_or_404(PriceBookVariantCountableEdge, id=id)


@router.post('/price_book_variant_countable_edges', response=PriceBookVariantCountableEdge)
def create_price_book_variant_countable_edge(request, payload: PriceBookVariantCountableEdgeCreate):
    data = payload.dict()
    price_book_variant_countable_edge = PriceBookVariantCountableEdge.objects.create(**data)
    return price_book_variant_countable_edge


@router.put('/price_book_variant_countable_edges/{id}', response=PriceBookVariantCountableEdge)
def update_price_book_variant_countable_edge(request, id: int, payload: PriceBookVariantCountableEdgeUpdate):
    price_book_variant_countable_edge = get_object_or_404(PriceBookVariantCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_countable_edge, attr, value)
    price_book_variant_countable_edge.save()
    return price_book_variant_countable_edge


@router.delete('/price_book_variant_countable_edges/{id}')
def delete_price_book_variant_countable_edge(request, id: int):
    price_book_variant_countable_edge = get_object_or_404(PriceBookVariantCountableEdge, id=id)
    price_book_variant_countable_edge.delete()
    return {'success': True}


# PriceBookProductCountableConnection endpoints
@router.get('/price_book_product_countable_connections', response=List[PriceBookProductCountableConnection])
@paginate
def list_price_book_product_countable_connections(request):
    return PriceBookProductCountableConnection.objects.all()


@router.get('/price_book_product_countable_connections/{id}', response=PriceBookProductCountableConnection)
def get_price_book_product_countable_connection(request, id: int):
    return get_object_or_404(PriceBookProductCountableConnection, id=id)


@router.post('/price_book_product_countable_connections', response=PriceBookProductCountableConnection)
def create_price_book_product_countable_connection(request, payload: PriceBookProductCountableConnectionCreate):
    data = payload.dict()
    price_book_product_countable_connection = PriceBookProductCountableConnection.objects.create(**data)
    return price_book_product_countable_connection


@router.put('/price_book_product_countable_connections/{id}', response=PriceBookProductCountableConnection)
def update_price_book_product_countable_connection(request, id: int, payload: PriceBookProductCountableConnectionUpdate):
    price_book_product_countable_connection = get_object_or_404(PriceBookProductCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_countable_connection, attr, value)
    price_book_product_countable_connection.save()
    return price_book_product_countable_connection


@router.delete('/price_book_product_countable_connections/{id}')
def delete_price_book_product_countable_connection(request, id: int):
    price_book_product_countable_connection = get_object_or_404(PriceBookProductCountableConnection, id=id)
    price_book_product_countable_connection.delete()
    return {'success': True}


# PriceBookProductCountableEdge endpoints
@router.get('/price_book_product_countable_edges', response=List[PriceBookProductCountableEdge])
@paginate
def list_price_book_product_countable_edges(request):
    return PriceBookProductCountableEdge.objects.all()


@router.get('/price_book_product_countable_edges/{id}', response=PriceBookProductCountableEdge)
def get_price_book_product_countable_edge(request, id: int):
    return get_object_or_404(PriceBookProductCountableEdge, id=id)


@router.post('/price_book_product_countable_edges', response=PriceBookProductCountableEdge)
def create_price_book_product_countable_edge(request, payload: PriceBookProductCountableEdgeCreate):
    data = payload.dict()
    price_book_product_countable_edge = PriceBookProductCountableEdge.objects.create(**data)
    return price_book_product_countable_edge


@router.put('/price_book_product_countable_edges/{id}', response=PriceBookProductCountableEdge)
def update_price_book_product_countable_edge(request, id: int, payload: PriceBookProductCountableEdgeUpdate):
    price_book_product_countable_edge = get_object_or_404(PriceBookProductCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_countable_edge, attr, value)
    price_book_product_countable_edge.save()
    return price_book_product_countable_edge


@router.delete('/price_book_product_countable_edges/{id}')
def delete_price_book_product_countable_edge(request, id: int):
    price_book_product_countable_edge = get_object_or_404(PriceBookProductCountableEdge, id=id)
    price_book_product_countable_edge.delete()
    return {'success': True}


# PriceBookProductTypeCountableConnection endpoints
@router.get('/price_book_product_type_countable_connections', response=List[PriceBookProductTypeCountableConnection])
@paginate
def list_price_book_product_type_countable_connections(request):
    return PriceBookProductTypeCountableConnection.objects.all()


@router.get('/price_book_product_type_countable_connections/{id}', response=PriceBookProductTypeCountableConnection)
def get_price_book_product_type_countable_connection(request, id: int):
    return get_object_or_404(PriceBookProductTypeCountableConnection, id=id)


@router.post('/price_book_product_type_countable_connections', response=PriceBookProductTypeCountableConnection)
def create_price_book_product_type_countable_connection(request, payload: PriceBookProductTypeCountableConnectionCreate):
    data = payload.dict()
    price_book_product_type_countable_connection = PriceBookProductTypeCountableConnection.objects.create(**data)
    return price_book_product_type_countable_connection


@router.put('/price_book_product_type_countable_connections/{id}', response=PriceBookProductTypeCountableConnection)
def update_price_book_product_type_countable_connection(request, id: int, payload: PriceBookProductTypeCountableConnectionUpdate):
    price_book_product_type_countable_connection = get_object_or_404(PriceBookProductTypeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_countable_connection, attr, value)
    price_book_product_type_countable_connection.save()
    return price_book_product_type_countable_connection


@router.delete('/price_book_product_type_countable_connections/{id}')
def delete_price_book_product_type_countable_connection(request, id: int):
    price_book_product_type_countable_connection = get_object_or_404(PriceBookProductTypeCountableConnection, id=id)
    price_book_product_type_countable_connection.delete()
    return {'success': True}


# PriceBookProductTypeCountableEdge endpoints
@router.get('/price_book_product_type_countable_edges', response=List[PriceBookProductTypeCountableEdge])
@paginate
def list_price_book_product_type_countable_edges(request):
    return PriceBookProductTypeCountableEdge.objects.all()


@router.get('/price_book_product_type_countable_edges/{id}', response=PriceBookProductTypeCountableEdge)
def get_price_book_product_type_countable_edge(request, id: int):
    return get_object_or_404(PriceBookProductTypeCountableEdge, id=id)


@router.post('/price_book_product_type_countable_edges', response=PriceBookProductTypeCountableEdge)
def create_price_book_product_type_countable_edge(request, payload: PriceBookProductTypeCountableEdgeCreate):
    data = payload.dict()
    price_book_product_type_countable_edge = PriceBookProductTypeCountableEdge.objects.create(**data)
    return price_book_product_type_countable_edge


@router.put('/price_book_product_type_countable_edges/{id}', response=PriceBookProductTypeCountableEdge)
def update_price_book_product_type_countable_edge(request, id: int, payload: PriceBookProductTypeCountableEdgeUpdate):
    price_book_product_type_countable_edge = get_object_or_404(PriceBookProductTypeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_countable_edge, attr, value)
    price_book_product_type_countable_edge.save()
    return price_book_product_type_countable_edge


@router.delete('/price_book_product_type_countable_edges/{id}')
def delete_price_book_product_type_countable_edge(request, id: int):
    price_book_product_type_countable_edge = get_object_or_404(PriceBookProductTypeCountableEdge, id=id)
    price_book_product_type_countable_edge.delete()
    return {'success': True}


# PriceBookVariantHistoryCountableConnection endpoints
@router.get('/price_book_variant_history_countable_connections', response=List[PriceBookVariantHistoryCountableConnection])
@paginate
def list_price_book_variant_history_countable_connections(request):
    return PriceBookVariantHistoryCountableConnection.objects.all()


@router.get('/price_book_variant_history_countable_connections/{id}', response=PriceBookVariantHistoryCountableConnection)
def get_price_book_variant_history_countable_connection(request, id: int):
    return get_object_or_404(PriceBookVariantHistoryCountableConnection, id=id)


@router.post('/price_book_variant_history_countable_connections', response=PriceBookVariantHistoryCountableConnection)
def create_price_book_variant_history_countable_connection(request, payload: PriceBookVariantHistoryCountableConnectionCreate):
    data = payload.dict()
    price_book_variant_history_countable_connection = PriceBookVariantHistoryCountableConnection.objects.create(**data)
    return price_book_variant_history_countable_connection


@router.put('/price_book_variant_history_countable_connections/{id}', response=PriceBookVariantHistoryCountableConnection)
def update_price_book_variant_history_countable_connection(request, id: int, payload: PriceBookVariantHistoryCountableConnectionUpdate):
    price_book_variant_history_countable_connection = get_object_or_404(PriceBookVariantHistoryCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_history_countable_connection, attr, value)
    price_book_variant_history_countable_connection.save()
    return price_book_variant_history_countable_connection


@router.delete('/price_book_variant_history_countable_connections/{id}')
def delete_price_book_variant_history_countable_connection(request, id: int):
    price_book_variant_history_countable_connection = get_object_or_404(PriceBookVariantHistoryCountableConnection, id=id)
    price_book_variant_history_countable_connection.delete()
    return {'success': True}


# PriceBookVariantHistoryCountableEdge endpoints
@router.get('/price_book_variant_history_countable_edges', response=List[PriceBookVariantHistoryCountableEdge])
@paginate
def list_price_book_variant_history_countable_edges(request):
    return PriceBookVariantHistoryCountableEdge.objects.all()


@router.get('/price_book_variant_history_countable_edges/{id}', response=PriceBookVariantHistoryCountableEdge)
def get_price_book_variant_history_countable_edge(request, id: int):
    return get_object_or_404(PriceBookVariantHistoryCountableEdge, id=id)


@router.post('/price_book_variant_history_countable_edges', response=PriceBookVariantHistoryCountableEdge)
def create_price_book_variant_history_countable_edge(request, payload: PriceBookVariantHistoryCountableEdgeCreate):
    data = payload.dict()
    price_book_variant_history_countable_edge = PriceBookVariantHistoryCountableEdge.objects.create(**data)
    return price_book_variant_history_countable_edge


@router.put('/price_book_variant_history_countable_edges/{id}', response=PriceBookVariantHistoryCountableEdge)
def update_price_book_variant_history_countable_edge(request, id: int, payload: PriceBookVariantHistoryCountableEdgeUpdate):
    price_book_variant_history_countable_edge = get_object_or_404(PriceBookVariantHistoryCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_history_countable_edge, attr, value)
    price_book_variant_history_countable_edge.save()
    return price_book_variant_history_countable_edge


@router.delete('/price_book_variant_history_countable_edges/{id}')
def delete_price_book_variant_history_countable_edge(request, id: int):
    price_book_variant_history_countable_edge = get_object_or_404(PriceBookVariantHistoryCountableEdge, id=id)
    price_book_variant_history_countable_edge.delete()
    return {'success': True}


# PriceBookVariantHistory endpoints
@router.get('/price_book_variant_historys', response=List[PriceBookVariantHistory])
@paginate
def list_price_book_variant_historys(request):
    return PriceBookVariantHistory.objects.all()


@router.get('/price_book_variant_historys/{id}', response=PriceBookVariantHistory)
def get_price_book_variant_history(request, id: int):
    return get_object_or_404(PriceBookVariantHistory, id=id)


@router.post('/price_book_variant_historys', response=PriceBookVariantHistory)
def create_price_book_variant_history(request, payload: PriceBookVariantHistoryCreate):
    data = payload.dict()
    price_book_variant_history = PriceBookVariantHistory.objects.create(**data)
    return price_book_variant_history


@router.put('/price_book_variant_historys/{id}', response=PriceBookVariantHistory)
def update_price_book_variant_history(request, id: int, payload: PriceBookVariantHistoryUpdate):
    price_book_variant_history = get_object_or_404(PriceBookVariantHistory, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_history, attr, value)
    price_book_variant_history.save()
    return price_book_variant_history


@router.delete('/price_book_variant_historys/{id}')
def delete_price_book_variant_history(request, id: int):
    price_book_variant_history = get_object_or_404(PriceBookVariantHistory, id=id)
    price_book_variant_history.delete()
    return {'success': True}


# PriceBookProductHistoryCountableConnection endpoints
@router.get('/price_book_product_history_countable_connections', response=List[PriceBookProductHistoryCountableConnection])
@paginate
def list_price_book_product_history_countable_connections(request):
    return PriceBookProductHistoryCountableConnection.objects.all()


@router.get('/price_book_product_history_countable_connections/{id}', response=PriceBookProductHistoryCountableConnection)
def get_price_book_product_history_countable_connection(request, id: int):
    return get_object_or_404(PriceBookProductHistoryCountableConnection, id=id)


@router.post('/price_book_product_history_countable_connections', response=PriceBookProductHistoryCountableConnection)
def create_price_book_product_history_countable_connection(request, payload: PriceBookProductHistoryCountableConnectionCreate):
    data = payload.dict()
    price_book_product_history_countable_connection = PriceBookProductHistoryCountableConnection.objects.create(**data)
    return price_book_product_history_countable_connection


@router.put('/price_book_product_history_countable_connections/{id}', response=PriceBookProductHistoryCountableConnection)
def update_price_book_product_history_countable_connection(request, id: int, payload: PriceBookProductHistoryCountableConnectionUpdate):
    price_book_product_history_countable_connection = get_object_or_404(PriceBookProductHistoryCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_history_countable_connection, attr, value)
    price_book_product_history_countable_connection.save()
    return price_book_product_history_countable_connection


@router.delete('/price_book_product_history_countable_connections/{id}')
def delete_price_book_product_history_countable_connection(request, id: int):
    price_book_product_history_countable_connection = get_object_or_404(PriceBookProductHistoryCountableConnection, id=id)
    price_book_product_history_countable_connection.delete()
    return {'success': True}


# PriceBookProductHistoryCountableEdge endpoints
@router.get('/price_book_product_history_countable_edges', response=List[PriceBookProductHistoryCountableEdge])
@paginate
def list_price_book_product_history_countable_edges(request):
    return PriceBookProductHistoryCountableEdge.objects.all()


@router.get('/price_book_product_history_countable_edges/{id}', response=PriceBookProductHistoryCountableEdge)
def get_price_book_product_history_countable_edge(request, id: int):
    return get_object_or_404(PriceBookProductHistoryCountableEdge, id=id)


@router.post('/price_book_product_history_countable_edges', response=PriceBookProductHistoryCountableEdge)
def create_price_book_product_history_countable_edge(request, payload: PriceBookProductHistoryCountableEdgeCreate):
    data = payload.dict()
    price_book_product_history_countable_edge = PriceBookProductHistoryCountableEdge.objects.create(**data)
    return price_book_product_history_countable_edge


@router.put('/price_book_product_history_countable_edges/{id}', response=PriceBookProductHistoryCountableEdge)
def update_price_book_product_history_countable_edge(request, id: int, payload: PriceBookProductHistoryCountableEdgeUpdate):
    price_book_product_history_countable_edge = get_object_or_404(PriceBookProductHistoryCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_history_countable_edge, attr, value)
    price_book_product_history_countable_edge.save()
    return price_book_product_history_countable_edge


@router.delete('/price_book_product_history_countable_edges/{id}')
def delete_price_book_product_history_countable_edge(request, id: int):
    price_book_product_history_countable_edge = get_object_or_404(PriceBookProductHistoryCountableEdge, id=id)
    price_book_product_history_countable_edge.delete()
    return {'success': True}


# PriceBookProductHistory endpoints
@router.get('/price_book_product_historys', response=List[PriceBookProductHistory])
@paginate
def list_price_book_product_historys(request):
    return PriceBookProductHistory.objects.all()


@router.get('/price_book_product_historys/{id}', response=PriceBookProductHistory)
def get_price_book_product_history(request, id: int):
    return get_object_or_404(PriceBookProductHistory, id=id)


@router.post('/price_book_product_historys', response=PriceBookProductHistory)
def create_price_book_product_history(request, payload: PriceBookProductHistoryCreate):
    data = payload.dict()
    price_book_product_history = PriceBookProductHistory.objects.create(**data)
    return price_book_product_history


@router.put('/price_book_product_historys/{id}', response=PriceBookProductHistory)
def update_price_book_product_history(request, id: int, payload: PriceBookProductHistoryUpdate):
    price_book_product_history = get_object_or_404(PriceBookProductHistory, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_history, attr, value)
    price_book_product_history.save()
    return price_book_product_history


@router.delete('/price_book_product_historys/{id}')
def delete_price_book_product_history(request, id: int):
    price_book_product_history = get_object_or_404(PriceBookProductHistory, id=id)
    price_book_product_history.delete()
    return {'success': True}


# PriceBookProductTypeHistoryCountableConnection endpoints
@router.get('/price_book_product_type_history_countable_connections', response=List[PriceBookProductTypeHistoryCountableConnection])
@paginate
def list_price_book_product_type_history_countable_connections(request):
    return PriceBookProductTypeHistoryCountableConnection.objects.all()


@router.get('/price_book_product_type_history_countable_connections/{id}', response=PriceBookProductTypeHistoryCountableConnection)
def get_price_book_product_type_history_countable_connection(request, id: int):
    return get_object_or_404(PriceBookProductTypeHistoryCountableConnection, id=id)


@router.post('/price_book_product_type_history_countable_connections', response=PriceBookProductTypeHistoryCountableConnection)
def create_price_book_product_type_history_countable_connection(request, payload: PriceBookProductTypeHistoryCountableConnectionCreate):
    data = payload.dict()
    price_book_product_type_history_countable_connection = PriceBookProductTypeHistoryCountableConnection.objects.create(**data)
    return price_book_product_type_history_countable_connection


@router.put('/price_book_product_type_history_countable_connections/{id}', response=PriceBookProductTypeHistoryCountableConnection)
def update_price_book_product_type_history_countable_connection(request, id: int, payload: PriceBookProductTypeHistoryCountableConnectionUpdate):
    price_book_product_type_history_countable_connection = get_object_or_404(PriceBookProductTypeHistoryCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_history_countable_connection, attr, value)
    price_book_product_type_history_countable_connection.save()
    return price_book_product_type_history_countable_connection


@router.delete('/price_book_product_type_history_countable_connections/{id}')
def delete_price_book_product_type_history_countable_connection(request, id: int):
    price_book_product_type_history_countable_connection = get_object_or_404(PriceBookProductTypeHistoryCountableConnection, id=id)
    price_book_product_type_history_countable_connection.delete()
    return {'success': True}


# PriceBookProductTypeHistoryCountableEdge endpoints
@router.get('/price_book_product_type_history_countable_edges', response=List[PriceBookProductTypeHistoryCountableEdge])
@paginate
def list_price_book_product_type_history_countable_edges(request):
    return PriceBookProductTypeHistoryCountableEdge.objects.all()


@router.get('/price_book_product_type_history_countable_edges/{id}', response=PriceBookProductTypeHistoryCountableEdge)
def get_price_book_product_type_history_countable_edge(request, id: int):
    return get_object_or_404(PriceBookProductTypeHistoryCountableEdge, id=id)


@router.post('/price_book_product_type_history_countable_edges', response=PriceBookProductTypeHistoryCountableEdge)
def create_price_book_product_type_history_countable_edge(request, payload: PriceBookProductTypeHistoryCountableEdgeCreate):
    data = payload.dict()
    price_book_product_type_history_countable_edge = PriceBookProductTypeHistoryCountableEdge.objects.create(**data)
    return price_book_product_type_history_countable_edge


@router.put('/price_book_product_type_history_countable_edges/{id}', response=PriceBookProductTypeHistoryCountableEdge)
def update_price_book_product_type_history_countable_edge(request, id: int, payload: PriceBookProductTypeHistoryCountableEdgeUpdate):
    price_book_product_type_history_countable_edge = get_object_or_404(PriceBookProductTypeHistoryCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_history_countable_edge, attr, value)
    price_book_product_type_history_countable_edge.save()
    return price_book_product_type_history_countable_edge


@router.delete('/price_book_product_type_history_countable_edges/{id}')
def delete_price_book_product_type_history_countable_edge(request, id: int):
    price_book_product_type_history_countable_edge = get_object_or_404(PriceBookProductTypeHistoryCountableEdge, id=id)
    price_book_product_type_history_countable_edge.delete()
    return {'success': True}


# PriceBookProductTypeHistory endpoints
@router.get('/price_book_product_type_historys', response=List[PriceBookProductTypeHistory])
@paginate
def list_price_book_product_type_historys(request):
    return PriceBookProductTypeHistory.objects.all()


@router.get('/price_book_product_type_historys/{id}', response=PriceBookProductTypeHistory)
def get_price_book_product_type_history(request, id: int):
    return get_object_or_404(PriceBookProductTypeHistory, id=id)


@router.post('/price_book_product_type_historys', response=PriceBookProductTypeHistory)
def create_price_book_product_type_history(request, payload: PriceBookProductTypeHistoryCreate):
    data = payload.dict()
    price_book_product_type_history = PriceBookProductTypeHistory.objects.create(**data)
    return price_book_product_type_history


@router.put('/price_book_product_type_historys/{id}', response=PriceBookProductTypeHistory)
def update_price_book_product_type_history(request, id: int, payload: PriceBookProductTypeHistoryUpdate):
    price_book_product_type_history = get_object_or_404(PriceBookProductTypeHistory, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_history, attr, value)
    price_book_product_type_history.save()
    return price_book_product_type_history


@router.delete('/price_book_product_type_historys/{id}')
def delete_price_book_product_type_history(request, id: int):
    price_book_product_type_history = get_object_or_404(PriceBookProductTypeHistory, id=id)
    price_book_product_type_history.delete()
    return {'success': True}


# PluginCountableConnection endpoints
@router.get('/plugin_countable_connections', response=List[PluginCountableConnection])
@paginate
def list_plugin_countable_connections(request):
    return PluginCountableConnection.objects.all()


@router.get('/plugin_countable_connections/{id}', response=PluginCountableConnection)
def get_plugin_countable_connection(request, id: int):
    return get_object_or_404(PluginCountableConnection, id=id)


@router.post('/plugin_countable_connections', response=PluginCountableConnection)
def create_plugin_countable_connection(request, payload: PluginCountableConnectionCreate):
    data = payload.dict()
    plugin_countable_connection = PluginCountableConnection.objects.create(**data)
    return plugin_countable_connection


@router.put('/plugin_countable_connections/{id}', response=PluginCountableConnection)
def update_plugin_countable_connection(request, id: int, payload: PluginCountableConnectionUpdate):
    plugin_countable_connection = get_object_or_404(PluginCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_countable_connection, attr, value)
    plugin_countable_connection.save()
    return plugin_countable_connection


@router.delete('/plugin_countable_connections/{id}')
def delete_plugin_countable_connection(request, id: int):
    plugin_countable_connection = get_object_or_404(PluginCountableConnection, id=id)
    plugin_countable_connection.delete()
    return {'success': True}


# PluginCountableEdge endpoints
@router.get('/plugin_countable_edges', response=List[PluginCountableEdge])
@paginate
def list_plugin_countable_edges(request):
    return PluginCountableEdge.objects.all()


@router.get('/plugin_countable_edges/{id}', response=PluginCountableEdge)
def get_plugin_countable_edge(request, id: int):
    return get_object_or_404(PluginCountableEdge, id=id)


@router.post('/plugin_countable_edges', response=PluginCountableEdge)
def create_plugin_countable_edge(request, payload: PluginCountableEdgeCreate):
    data = payload.dict()
    plugin_countable_edge = PluginCountableEdge.objects.create(**data)
    return plugin_countable_edge


@router.put('/plugin_countable_edges/{id}', response=PluginCountableEdge)
def update_plugin_countable_edge(request, id: int, payload: PluginCountableEdgeUpdate):
    plugin_countable_edge = get_object_or_404(PluginCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_countable_edge, attr, value)
    plugin_countable_edge.save()
    return plugin_countable_edge


@router.delete('/plugin_countable_edges/{id}')
def delete_plugin_countable_edge(request, id: int):
    plugin_countable_edge = get_object_or_404(PluginCountableEdge, id=id)
    plugin_countable_edge.delete()
    return {'success': True}


# TaxCertificate endpoints
@router.get('/tax_certificates', response=List[TaxCertificate])
@paginate
def list_tax_certificates(request):
    return TaxCertificate.objects.all()


@router.get('/tax_certificates/{id}', response=TaxCertificate)
def get_tax_certificate(request, id: int):
    return get_object_or_404(TaxCertificate, id=id)


@router.post('/tax_certificates', response=TaxCertificate)
def create_tax_certificate(request, payload: TaxCertificateCreate):
    data = payload.dict()
    tax_certificate = TaxCertificate.objects.create(**data)
    return tax_certificate


@router.put('/tax_certificates/{id}', response=TaxCertificate)
def update_tax_certificate(request, id: int, payload: TaxCertificateUpdate):
    tax_certificate = get_object_or_404(TaxCertificate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tax_certificate, attr, value)
    tax_certificate.save()
    return tax_certificate


@router.delete('/tax_certificates/{id}')
def delete_tax_certificate(request, id: int):
    tax_certificate = get_object_or_404(TaxCertificate, id=id)
    tax_certificate.delete()
    return {'success': True}


# CatalogImportProcess endpoints
@router.get('/catalog_import_processs', response=List[CatalogImportProcess])
@paginate
def list_catalog_import_processs(request):
    return CatalogImportProcess.objects.all()


@router.get('/catalog_import_processs/{id}', response=CatalogImportProcess)
def get_catalog_import_process(request, id: int):
    return get_object_or_404(CatalogImportProcess, id=id)


@router.post('/catalog_import_processs', response=CatalogImportProcess)
def create_catalog_import_process(request, payload: CatalogImportProcessCreate):
    data = payload.dict()
    catalog_import_process = CatalogImportProcess.objects.create(**data)
    return catalog_import_process


@router.put('/catalog_import_processs/{id}', response=CatalogImportProcess)
def update_catalog_import_process(request, id: int, payload: CatalogImportProcessUpdate):
    catalog_import_process = get_object_or_404(CatalogImportProcess, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process, attr, value)
    catalog_import_process.save()
    return catalog_import_process


@router.delete('/catalog_import_processs/{id}')
def delete_catalog_import_process(request, id: int):
    catalog_import_process = get_object_or_404(CatalogImportProcess, id=id)
    catalog_import_process.delete()
    return {'success': True}


# CatalogImportProcessLogRecordCountableConnection endpoints
@router.get('/catalog_import_process_log_record_countable_connections', response=List[CatalogImportProcessLogRecordCountableConnection])
@paginate
def list_catalog_import_process_log_record_countable_connections(request):
    return CatalogImportProcessLogRecordCountableConnection.objects.all()


@router.get('/catalog_import_process_log_record_countable_connections/{id}', response=CatalogImportProcessLogRecordCountableConnection)
def get_catalog_import_process_log_record_countable_connection(request, id: int):
    return get_object_or_404(CatalogImportProcessLogRecordCountableConnection, id=id)


@router.post('/catalog_import_process_log_record_countable_connections', response=CatalogImportProcessLogRecordCountableConnection)
def create_catalog_import_process_log_record_countable_connection(request, payload: CatalogImportProcessLogRecordCountableConnectionCreate):
    data = payload.dict()
    catalog_import_process_log_record_countable_connection = CatalogImportProcessLogRecordCountableConnection.objects.create(**data)
    return catalog_import_process_log_record_countable_connection


@router.put('/catalog_import_process_log_record_countable_connections/{id}', response=CatalogImportProcessLogRecordCountableConnection)
def update_catalog_import_process_log_record_countable_connection(request, id: int, payload: CatalogImportProcessLogRecordCountableConnectionUpdate):
    catalog_import_process_log_record_countable_connection = get_object_or_404(CatalogImportProcessLogRecordCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process_log_record_countable_connection, attr, value)
    catalog_import_process_log_record_countable_connection.save()
    return catalog_import_process_log_record_countable_connection


@router.delete('/catalog_import_process_log_record_countable_connections/{id}')
def delete_catalog_import_process_log_record_countable_connection(request, id: int):
    catalog_import_process_log_record_countable_connection = get_object_or_404(CatalogImportProcessLogRecordCountableConnection, id=id)
    catalog_import_process_log_record_countable_connection.delete()
    return {'success': True}


# CatalogImportProcessLogRecordCountableEdge endpoints
@router.get('/catalog_import_process_log_record_countable_edges', response=List[CatalogImportProcessLogRecordCountableEdge])
@paginate
def list_catalog_import_process_log_record_countable_edges(request):
    return CatalogImportProcessLogRecordCountableEdge.objects.all()


@router.get('/catalog_import_process_log_record_countable_edges/{id}', response=CatalogImportProcessLogRecordCountableEdge)
def get_catalog_import_process_log_record_countable_edge(request, id: int):
    return get_object_or_404(CatalogImportProcessLogRecordCountableEdge, id=id)


@router.post('/catalog_import_process_log_record_countable_edges', response=CatalogImportProcessLogRecordCountableEdge)
def create_catalog_import_process_log_record_countable_edge(request, payload: CatalogImportProcessLogRecordCountableEdgeCreate):
    data = payload.dict()
    catalog_import_process_log_record_countable_edge = CatalogImportProcessLogRecordCountableEdge.objects.create(**data)
    return catalog_import_process_log_record_countable_edge


@router.put('/catalog_import_process_log_record_countable_edges/{id}', response=CatalogImportProcessLogRecordCountableEdge)
def update_catalog_import_process_log_record_countable_edge(request, id: int, payload: CatalogImportProcessLogRecordCountableEdgeUpdate):
    catalog_import_process_log_record_countable_edge = get_object_or_404(CatalogImportProcessLogRecordCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process_log_record_countable_edge, attr, value)
    catalog_import_process_log_record_countable_edge.save()
    return catalog_import_process_log_record_countable_edge


@router.delete('/catalog_import_process_log_record_countable_edges/{id}')
def delete_catalog_import_process_log_record_countable_edge(request, id: int):
    catalog_import_process_log_record_countable_edge = get_object_or_404(CatalogImportProcessLogRecordCountableEdge, id=id)
    catalog_import_process_log_record_countable_edge.delete()
    return {'success': True}


# CatalogImportProcessLogRecord endpoints
@router.get('/catalog_import_process_log_records', response=List[CatalogImportProcessLogRecord])
@paginate
def list_catalog_import_process_log_records(request):
    return CatalogImportProcessLogRecord.objects.all()


@router.get('/catalog_import_process_log_records/{id}', response=CatalogImportProcessLogRecord)
def get_catalog_import_process_log_record(request, id: int):
    return get_object_or_404(CatalogImportProcessLogRecord, id=id)


@router.post('/catalog_import_process_log_records', response=CatalogImportProcessLogRecord)
def create_catalog_import_process_log_record(request, payload: CatalogImportProcessLogRecordCreate):
    data = payload.dict()
    catalog_import_process_log_record = CatalogImportProcessLogRecord.objects.create(**data)
    return catalog_import_process_log_record


@router.put('/catalog_import_process_log_records/{id}', response=CatalogImportProcessLogRecord)
def update_catalog_import_process_log_record(request, id: int, payload: CatalogImportProcessLogRecordUpdate):
    catalog_import_process_log_record = get_object_or_404(CatalogImportProcessLogRecord, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process_log_record, attr, value)
    catalog_import_process_log_record.save()
    return catalog_import_process_log_record


@router.delete('/catalog_import_process_log_records/{id}')
def delete_catalog_import_process_log_record(request, id: int):
    catalog_import_process_log_record = get_object_or_404(CatalogImportProcessLogRecord, id=id)
    catalog_import_process_log_record.delete()
    return {'success': True}


# CatalogImportProcessCountableConnection endpoints
@router.get('/catalog_import_process_countable_connections', response=List[CatalogImportProcessCountableConnection])
@paginate
def list_catalog_import_process_countable_connections(request):
    return CatalogImportProcessCountableConnection.objects.all()


@router.get('/catalog_import_process_countable_connections/{id}', response=CatalogImportProcessCountableConnection)
def get_catalog_import_process_countable_connection(request, id: int):
    return get_object_or_404(CatalogImportProcessCountableConnection, id=id)


@router.post('/catalog_import_process_countable_connections', response=CatalogImportProcessCountableConnection)
def create_catalog_import_process_countable_connection(request, payload: CatalogImportProcessCountableConnectionCreate):
    data = payload.dict()
    catalog_import_process_countable_connection = CatalogImportProcessCountableConnection.objects.create(**data)
    return catalog_import_process_countable_connection


@router.put('/catalog_import_process_countable_connections/{id}', response=CatalogImportProcessCountableConnection)
def update_catalog_import_process_countable_connection(request, id: int, payload: CatalogImportProcessCountableConnectionUpdate):
    catalog_import_process_countable_connection = get_object_or_404(CatalogImportProcessCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process_countable_connection, attr, value)
    catalog_import_process_countable_connection.save()
    return catalog_import_process_countable_connection


@router.delete('/catalog_import_process_countable_connections/{id}')
def delete_catalog_import_process_countable_connection(request, id: int):
    catalog_import_process_countable_connection = get_object_or_404(CatalogImportProcessCountableConnection, id=id)
    catalog_import_process_countable_connection.delete()
    return {'success': True}


# CatalogImportProcessCountableEdge endpoints
@router.get('/catalog_import_process_countable_edges', response=List[CatalogImportProcessCountableEdge])
@paginate
def list_catalog_import_process_countable_edges(request):
    return CatalogImportProcessCountableEdge.objects.all()


@router.get('/catalog_import_process_countable_edges/{id}', response=CatalogImportProcessCountableEdge)
def get_catalog_import_process_countable_edge(request, id: int):
    return get_object_or_404(CatalogImportProcessCountableEdge, id=id)


@router.post('/catalog_import_process_countable_edges', response=CatalogImportProcessCountableEdge)
def create_catalog_import_process_countable_edge(request, payload: CatalogImportProcessCountableEdgeCreate):
    data = payload.dict()
    catalog_import_process_countable_edge = CatalogImportProcessCountableEdge.objects.create(**data)
    return catalog_import_process_countable_edge


@router.put('/catalog_import_process_countable_edges/{id}', response=CatalogImportProcessCountableEdge)
def update_catalog_import_process_countable_edge(request, id: int, payload: CatalogImportProcessCountableEdgeUpdate):
    catalog_import_process_countable_edge = get_object_or_404(CatalogImportProcessCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import_process_countable_edge, attr, value)
    catalog_import_process_countable_edge.save()
    return catalog_import_process_countable_edge


@router.delete('/catalog_import_process_countable_edges/{id}')
def delete_catalog_import_process_countable_edge(request, id: int):
    catalog_import_process_countable_edge = get_object_or_404(CatalogImportProcessCountableEdge, id=id)
    catalog_import_process_countable_edge.delete()
    return {'success': True}


# TaxExemptCode endpoints
@router.get('/tax_exempt_codes', response=List[TaxExemptCode])
@paginate
def list_tax_exempt_codes(request):
    return TaxExemptCode.objects.all()


@router.get('/tax_exempt_codes/{id}', response=TaxExemptCode)
def get_tax_exempt_code(request, id: int):
    return get_object_or_404(TaxExemptCode, id=id)


@router.post('/tax_exempt_codes', response=TaxExemptCode)
def create_tax_exempt_code(request, payload: TaxExemptCodeCreate):
    data = payload.dict()
    tax_exempt_code = TaxExemptCode.objects.create(**data)
    return tax_exempt_code


@router.put('/tax_exempt_codes/{id}', response=TaxExemptCode)
def update_tax_exempt_code(request, id: int, payload: TaxExemptCodeUpdate):
    tax_exempt_code = get_object_or_404(TaxExemptCode, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tax_exempt_code, attr, value)
    tax_exempt_code.save()
    return tax_exempt_code


@router.delete('/tax_exempt_codes/{id}')
def delete_tax_exempt_code(request, id: int):
    tax_exempt_code = get_object_or_404(TaxExemptCode, id=id)
    tax_exempt_code.delete()
    return {'success': True}


# TypeformForms endpoints
@router.get('/typeform_formss', response=List[TypeformForms])
@paginate
def list_typeform_formss(request):
    return TypeformForms.objects.all()


@router.get('/typeform_formss/{id}', response=TypeformForms)
def get_typeform_forms(request, id: int):
    return get_object_or_404(TypeformForms, id=id)


@router.post('/typeform_formss', response=TypeformForms)
def create_typeform_forms(request, payload: TypeformFormsCreate):
    data = payload.dict()
    typeform_forms = TypeformForms.objects.create(**data)
    return typeform_forms


@router.put('/typeform_formss/{id}', response=TypeformForms)
def update_typeform_forms(request, id: int, payload: TypeformFormsUpdate):
    typeform_forms = get_object_or_404(TypeformForms, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_forms, attr, value)
    typeform_forms.save()
    return typeform_forms


@router.delete('/typeform_formss/{id}')
def delete_typeform_forms(request, id: int):
    typeform_forms = get_object_or_404(TypeformForms, id=id)
    typeform_forms.delete()
    return {'success': True}


# TypeformFormsItem endpoints
@router.get('/typeform_forms_items', response=List[TypeformFormsItem])
@paginate
def list_typeform_forms_items(request):
    return TypeformFormsItem.objects.all()


@router.get('/typeform_forms_items/{id}', response=TypeformFormsItem)
def get_typeform_forms_item(request, id: int):
    return get_object_or_404(TypeformFormsItem, id=id)


@router.post('/typeform_forms_items', response=TypeformFormsItem)
def create_typeform_forms_item(request, payload: TypeformFormsItemCreate):
    data = payload.dict()
    typeform_forms_item = TypeformFormsItem.objects.create(**data)
    return typeform_forms_item


@router.put('/typeform_forms_items/{id}', response=TypeformFormsItem)
def update_typeform_forms_item(request, id: int, payload: TypeformFormsItemUpdate):
    typeform_forms_item = get_object_or_404(TypeformFormsItem, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_forms_item, attr, value)
    typeform_forms_item.save()
    return typeform_forms_item


@router.delete('/typeform_forms_items/{id}')
def delete_typeform_forms_item(request, id: int):
    typeform_forms_item = get_object_or_404(TypeformFormsItem, id=id)
    typeform_forms_item.delete()
    return {'success': True}


# TypeformFormsItemLink endpoints
@router.get('/typeform_forms_item_links', response=List[TypeformFormsItemLink])
@paginate
def list_typeform_forms_item_links(request):
    return TypeformFormsItemLink.objects.all()


@router.get('/typeform_forms_item_links/{id}', response=TypeformFormsItemLink)
def get_typeform_forms_item_link(request, id: int):
    return get_object_or_404(TypeformFormsItemLink, id=id)


@router.post('/typeform_forms_item_links', response=TypeformFormsItemLink)
def create_typeform_forms_item_link(request, payload: TypeformFormsItemLinkCreate):
    data = payload.dict()
    typeform_forms_item_link = TypeformFormsItemLink.objects.create(**data)
    return typeform_forms_item_link


@router.put('/typeform_forms_item_links/{id}', response=TypeformFormsItemLink)
def update_typeform_forms_item_link(request, id: int, payload: TypeformFormsItemLinkUpdate):
    typeform_forms_item_link = get_object_or_404(TypeformFormsItemLink, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_forms_item_link, attr, value)
    typeform_forms_item_link.save()
    return typeform_forms_item_link


@router.delete('/typeform_forms_item_links/{id}')
def delete_typeform_forms_item_link(request, id: int):
    typeform_forms_item_link = get_object_or_404(TypeformFormsItemLink, id=id)
    typeform_forms_item_link.delete()
    return {'success': True}


# TypeformFormsItemSelf endpoints
@router.get('/typeform_forms_item_selfs', response=List[TypeformFormsItemSelf])
@paginate
def list_typeform_forms_item_selfs(request):
    return TypeformFormsItemSelf.objects.all()


@router.get('/typeform_forms_item_selfs/{id}', response=TypeformFormsItemSelf)
def get_typeform_forms_item_self(request, id: int):
    return get_object_or_404(TypeformFormsItemSelf, id=id)


@router.post('/typeform_forms_item_selfs', response=TypeformFormsItemSelf)
def create_typeform_forms_item_self(request, payload: TypeformFormsItemSelfCreate):
    data = payload.dict()
    typeform_forms_item_self = TypeformFormsItemSelf.objects.create(**data)
    return typeform_forms_item_self


@router.put('/typeform_forms_item_selfs/{id}', response=TypeformFormsItemSelf)
def update_typeform_forms_item_self(request, id: int, payload: TypeformFormsItemSelfUpdate):
    typeform_forms_item_self = get_object_or_404(TypeformFormsItemSelf, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_forms_item_self, attr, value)
    typeform_forms_item_self.save()
    return typeform_forms_item_self


@router.delete('/typeform_forms_item_selfs/{id}')
def delete_typeform_forms_item_self(request, id: int):
    typeform_forms_item_self = get_object_or_404(TypeformFormsItemSelf, id=id)
    typeform_forms_item_self.delete()
    return {'success': True}


# TypeformForm endpoints
@router.get('/typeform_forms', response=List[TypeformForm])
@paginate
def list_typeform_forms(request):
    return TypeformForm.objects.all()


@router.get('/typeform_forms/{id}', response=TypeformForm)
def get_typeform_form(request, id: int):
    return get_object_or_404(TypeformForm, id=id)


@router.post('/typeform_forms', response=TypeformForm)
def create_typeform_form(request, payload: TypeformFormCreate):
    data = payload.dict()
    typeform_form = TypeformForm.objects.create(**data)
    return typeform_form


@router.put('/typeform_forms/{id}', response=TypeformForm)
def update_typeform_form(request, id: int, payload: TypeformFormUpdate):
    typeform_form = get_object_or_404(TypeformForm, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form, attr, value)
    typeform_form.save()
    return typeform_form


@router.delete('/typeform_forms/{id}')
def delete_typeform_form(request, id: int):
    typeform_form = get_object_or_404(TypeformForm, id=id)
    typeform_form.delete()
    return {'success': True}


# TypeformFormFields endpoints
@router.get('/typeform_form_fieldss', response=List[TypeformFormFields])
@paginate
def list_typeform_form_fieldss(request):
    return TypeformFormFields.objects.all()


@router.get('/typeform_form_fieldss/{id}', response=TypeformFormFields)
def get_typeform_form_fields(request, id: int):
    return get_object_or_404(TypeformFormFields, id=id)


@router.post('/typeform_form_fieldss', response=TypeformFormFields)
def create_typeform_form_fields(request, payload: TypeformFormFieldsCreate):
    data = payload.dict()
    typeform_form_fields = TypeformFormFields.objects.create(**data)
    return typeform_form_fields


@router.put('/typeform_form_fieldss/{id}', response=TypeformFormFields)
def update_typeform_form_fields(request, id: int, payload: TypeformFormFieldsUpdate):
    typeform_form_fields = get_object_or_404(TypeformFormFields, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form_fields, attr, value)
    typeform_form_fields.save()
    return typeform_form_fields


@router.delete('/typeform_form_fieldss/{id}')
def delete_typeform_form_fields(request, id: int):
    typeform_form_fields = get_object_or_404(TypeformFormFields, id=id)
    typeform_form_fields.delete()
    return {'success': True}


# TypeformFormAttachment endpoints
@router.get('/typeform_form_attachments', response=List[TypeformFormAttachment])
@paginate
def list_typeform_form_attachments(request):
    return TypeformFormAttachment.objects.all()


@router.get('/typeform_form_attachments/{id}', response=TypeformFormAttachment)
def get_typeform_form_attachment(request, id: int):
    return get_object_or_404(TypeformFormAttachment, id=id)


@router.post('/typeform_form_attachments', response=TypeformFormAttachment)
def create_typeform_form_attachment(request, payload: TypeformFormAttachmentCreate):
    data = payload.dict()
    typeform_form_attachment = TypeformFormAttachment.objects.create(**data)
    return typeform_form_attachment


@router.put('/typeform_form_attachments/{id}', response=TypeformFormAttachment)
def update_typeform_form_attachment(request, id: int, payload: TypeformFormAttachmentUpdate):
    typeform_form_attachment = get_object_or_404(TypeformFormAttachment, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form_attachment, attr, value)
    typeform_form_attachment.save()
    return typeform_form_attachment


@router.delete('/typeform_form_attachments/{id}')
def delete_typeform_form_attachment(request, id: int):
    typeform_form_attachment = get_object_or_404(TypeformFormAttachment, id=id)
    typeform_form_attachment.delete()
    return {'success': True}


# TypeformFormProperties endpoints
@router.get('/typeform_form_propertiess', response=List[TypeformFormProperties])
@paginate
def list_typeform_form_propertiess(request):
    return TypeformFormProperties.objects.all()


@router.get('/typeform_form_propertiess/{id}', response=TypeformFormProperties)
def get_typeform_form_properties(request, id: int):
    return get_object_or_404(TypeformFormProperties, id=id)


@router.post('/typeform_form_propertiess', response=TypeformFormProperties)
def create_typeform_form_properties(request, payload: TypeformFormPropertiesCreate):
    data = payload.dict()
    typeform_form_properties = TypeformFormProperties.objects.create(**data)
    return typeform_form_properties


@router.put('/typeform_form_propertiess/{id}', response=TypeformFormProperties)
def update_typeform_form_properties(request, id: int, payload: TypeformFormPropertiesUpdate):
    typeform_form_properties = get_object_or_404(TypeformFormProperties, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form_properties, attr, value)
    typeform_form_properties.save()
    return typeform_form_properties


@router.delete('/typeform_form_propertiess/{id}')
def delete_typeform_form_properties(request, id: int):
    typeform_form_properties = get_object_or_404(TypeformFormProperties, id=id)
    typeform_form_properties.delete()
    return {'success': True}


# TypeformGroupProperties endpoints
@router.get('/typeform_group_propertiess', response=List[TypeformGroupProperties])
@paginate
def list_typeform_group_propertiess(request):
    return TypeformGroupProperties.objects.all()


@router.get('/typeform_group_propertiess/{id}', response=TypeformGroupProperties)
def get_typeform_group_properties(request, id: int):
    return get_object_or_404(TypeformGroupProperties, id=id)


@router.post('/typeform_group_propertiess', response=TypeformGroupProperties)
def create_typeform_group_properties(request, payload: TypeformGroupPropertiesCreate):
    data = payload.dict()
    typeform_group_properties = TypeformGroupProperties.objects.create(**data)
    return typeform_group_properties


@router.put('/typeform_group_propertiess/{id}', response=TypeformGroupProperties)
def update_typeform_group_properties(request, id: int, payload: TypeformGroupPropertiesUpdate):
    typeform_group_properties = get_object_or_404(TypeformGroupProperties, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_group_properties, attr, value)
    typeform_group_properties.save()
    return typeform_group_properties


@router.delete('/typeform_group_propertiess/{id}')
def delete_typeform_group_properties(request, id: int):
    typeform_group_properties = get_object_or_404(TypeformGroupProperties, id=id)
    typeform_group_properties.delete()
    return {'success': True}


# TypeformFormLayout endpoints
@router.get('/typeform_form_layouts', response=List[TypeformFormLayout])
@paginate
def list_typeform_form_layouts(request):
    return TypeformFormLayout.objects.all()


@router.get('/typeform_form_layouts/{id}', response=TypeformFormLayout)
def get_typeform_form_layout(request, id: int):
    return get_object_or_404(TypeformFormLayout, id=id)


@router.post('/typeform_form_layouts', response=TypeformFormLayout)
def create_typeform_form_layout(request, payload: TypeformFormLayoutCreate):
    data = payload.dict()
    typeform_form_layout = TypeformFormLayout.objects.create(**data)
    return typeform_form_layout


@router.put('/typeform_form_layouts/{id}', response=TypeformFormLayout)
def update_typeform_form_layout(request, id: int, payload: TypeformFormLayoutUpdate):
    typeform_form_layout = get_object_or_404(TypeformFormLayout, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form_layout, attr, value)
    typeform_form_layout.save()
    return typeform_form_layout


@router.delete('/typeform_form_layouts/{id}')
def delete_typeform_form_layout(request, id: int):
    typeform_form_layout = get_object_or_404(TypeformFormLayout, id=id)
    typeform_form_layout.delete()
    return {'success': True}


# TypeformFormOption endpoints
@router.get('/typeform_form_options', response=List[TypeformFormOption])
@paginate
def list_typeform_form_options(request):
    return TypeformFormOption.objects.all()


@router.get('/typeform_form_options/{id}', response=TypeformFormOption)
def get_typeform_form_option(request, id: int):
    return get_object_or_404(TypeformFormOption, id=id)


@router.post('/typeform_form_options', response=TypeformFormOption)
def create_typeform_form_option(request, payload: TypeformFormOptionCreate):
    data = payload.dict()
    typeform_form_option = TypeformFormOption.objects.create(**data)
    return typeform_form_option


@router.put('/typeform_form_options/{id}', response=TypeformFormOption)
def update_typeform_form_option(request, id: int, payload: TypeformFormOptionUpdate):
    typeform_form_option = get_object_or_404(TypeformFormOption, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(typeform_form_option, attr, value)
    typeform_form_option.save()
    return typeform_form_option


@router.delete('/typeform_form_options/{id}')
def delete_typeform_form_option(request, id: int):
    typeform_form_option = get_object_or_404(TypeformFormOption, id=id)
    typeform_form_option.delete()
    return {'success': True}


# Flow endpoints
@router.get('/flows', response=List[Flow])
@paginate
def list_flows(request):
    return Flow.objects.all()


@router.get('/flows/{id}', response=Flow)
def get_flow(request, id: int):
    return get_object_or_404(Flow, id=id)


@router.post('/flows', response=Flow)
def create_flow(request, payload: FlowCreate):
    data = payload.dict()
    flow = Flow.objects.create(**data)
    return flow


@router.put('/flows/{id}', response=Flow)
def update_flow(request, id: int, payload: FlowUpdate):
    flow = get_object_or_404(Flow, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(flow, attr, value)
    flow.save()
    return flow


@router.delete('/flows/{id}')
def delete_flow(request, id: int):
    flow = get_object_or_404(Flow, id=id)
    flow.delete()
    return {'success': True}


# AvalaraRequestLogCountableConnection endpoints
@router.get('/avalara_request_log_countable_connections', response=List[AvalaraRequestLogCountableConnection])
@paginate
def list_avalara_request_log_countable_connections(request):
    return AvalaraRequestLogCountableConnection.objects.all()


@router.get('/avalara_request_log_countable_connections/{id}', response=AvalaraRequestLogCountableConnection)
def get_avalara_request_log_countable_connection(request, id: int):
    return get_object_or_404(AvalaraRequestLogCountableConnection, id=id)


@router.post('/avalara_request_log_countable_connections', response=AvalaraRequestLogCountableConnection)
def create_avalara_request_log_countable_connection(request, payload: AvalaraRequestLogCountableConnectionCreate):
    data = payload.dict()
    avalara_request_log_countable_connection = AvalaraRequestLogCountableConnection.objects.create(**data)
    return avalara_request_log_countable_connection


@router.put('/avalara_request_log_countable_connections/{id}', response=AvalaraRequestLogCountableConnection)
def update_avalara_request_log_countable_connection(request, id: int, payload: AvalaraRequestLogCountableConnectionUpdate):
    avalara_request_log_countable_connection = get_object_or_404(AvalaraRequestLogCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(avalara_request_log_countable_connection, attr, value)
    avalara_request_log_countable_connection.save()
    return avalara_request_log_countable_connection


@router.delete('/avalara_request_log_countable_connections/{id}')
def delete_avalara_request_log_countable_connection(request, id: int):
    avalara_request_log_countable_connection = get_object_or_404(AvalaraRequestLogCountableConnection, id=id)
    avalara_request_log_countable_connection.delete()
    return {'success': True}


# AvalaraRequestLogCountableEdge endpoints
@router.get('/avalara_request_log_countable_edges', response=List[AvalaraRequestLogCountableEdge])
@paginate
def list_avalara_request_log_countable_edges(request):
    return AvalaraRequestLogCountableEdge.objects.all()


@router.get('/avalara_request_log_countable_edges/{id}', response=AvalaraRequestLogCountableEdge)
def get_avalara_request_log_countable_edge(request, id: int):
    return get_object_or_404(AvalaraRequestLogCountableEdge, id=id)


@router.post('/avalara_request_log_countable_edges', response=AvalaraRequestLogCountableEdge)
def create_avalara_request_log_countable_edge(request, payload: AvalaraRequestLogCountableEdgeCreate):
    data = payload.dict()
    avalara_request_log_countable_edge = AvalaraRequestLogCountableEdge.objects.create(**data)
    return avalara_request_log_countable_edge


@router.put('/avalara_request_log_countable_edges/{id}', response=AvalaraRequestLogCountableEdge)
def update_avalara_request_log_countable_edge(request, id: int, payload: AvalaraRequestLogCountableEdgeUpdate):
    avalara_request_log_countable_edge = get_object_or_404(AvalaraRequestLogCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(avalara_request_log_countable_edge, attr, value)
    avalara_request_log_countable_edge.save()
    return avalara_request_log_countable_edge


@router.delete('/avalara_request_log_countable_edges/{id}')
def delete_avalara_request_log_countable_edge(request, id: int):
    avalara_request_log_countable_edge = get_object_or_404(AvalaraRequestLogCountableEdge, id=id)
    avalara_request_log_countable_edge.delete()
    return {'success': True}


# AvalaraRequestLog endpoints
@router.get('/avalara_request_logs', response=List[AvalaraRequestLog])
@paginate
def list_avalara_request_logs(request):
    return AvalaraRequestLog.objects.all()


@router.get('/avalara_request_logs/{id}', response=AvalaraRequestLog)
def get_avalara_request_log(request, id: int):
    return get_object_or_404(AvalaraRequestLog, id=id)


@router.post('/avalara_request_logs', response=AvalaraRequestLog)
def create_avalara_request_log(request, payload: AvalaraRequestLogCreate):
    data = payload.dict()
    avalara_request_log = AvalaraRequestLog.objects.create(**data)
    return avalara_request_log


@router.put('/avalara_request_logs/{id}', response=AvalaraRequestLog)
def update_avalara_request_log(request, id: int, payload: AvalaraRequestLogUpdate):
    avalara_request_log = get_object_or_404(AvalaraRequestLog, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(avalara_request_log, attr, value)
    avalara_request_log.save()
    return avalara_request_log


@router.delete('/avalara_request_logs/{id}')
def delete_avalara_request_log(request, id: int):
    avalara_request_log = get_object_or_404(AvalaraRequestLog, id=id)
    avalara_request_log.delete()
    return {'success': True}


# CheckoutEventCountableConnection endpoints
@router.get('/checkout_event_countable_connections', response=List[CheckoutEventCountableConnection])
@paginate
def list_checkout_event_countable_connections(request):
    return CheckoutEventCountableConnection.objects.all()


@router.get('/checkout_event_countable_connections/{id}', response=CheckoutEventCountableConnection)
def get_checkout_event_countable_connection(request, id: int):
    return get_object_or_404(CheckoutEventCountableConnection, id=id)


@router.post('/checkout_event_countable_connections', response=CheckoutEventCountableConnection)
def create_checkout_event_countable_connection(request, payload: CheckoutEventCountableConnectionCreate):
    data = payload.dict()
    checkout_event_countable_connection = CheckoutEventCountableConnection.objects.create(**data)
    return checkout_event_countable_connection


@router.put('/checkout_event_countable_connections/{id}', response=CheckoutEventCountableConnection)
def update_checkout_event_countable_connection(request, id: int, payload: CheckoutEventCountableConnectionUpdate):
    checkout_event_countable_connection = get_object_or_404(CheckoutEventCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_event_countable_connection, attr, value)
    checkout_event_countable_connection.save()
    return checkout_event_countable_connection


@router.delete('/checkout_event_countable_connections/{id}')
def delete_checkout_event_countable_connection(request, id: int):
    checkout_event_countable_connection = get_object_or_404(CheckoutEventCountableConnection, id=id)
    checkout_event_countable_connection.delete()
    return {'success': True}


# CheckoutEventCountableEdge endpoints
@router.get('/checkout_event_countable_edges', response=List[CheckoutEventCountableEdge])
@paginate
def list_checkout_event_countable_edges(request):
    return CheckoutEventCountableEdge.objects.all()


@router.get('/checkout_event_countable_edges/{id}', response=CheckoutEventCountableEdge)
def get_checkout_event_countable_edge(request, id: int):
    return get_object_or_404(CheckoutEventCountableEdge, id=id)


@router.post('/checkout_event_countable_edges', response=CheckoutEventCountableEdge)
def create_checkout_event_countable_edge(request, payload: CheckoutEventCountableEdgeCreate):
    data = payload.dict()
    checkout_event_countable_edge = CheckoutEventCountableEdge.objects.create(**data)
    return checkout_event_countable_edge


@router.put('/checkout_event_countable_edges/{id}', response=CheckoutEventCountableEdge)
def update_checkout_event_countable_edge(request, id: int, payload: CheckoutEventCountableEdgeUpdate):
    checkout_event_countable_edge = get_object_or_404(CheckoutEventCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_event_countable_edge, attr, value)
    checkout_event_countable_edge.save()
    return checkout_event_countable_edge


@router.delete('/checkout_event_countable_edges/{id}')
def delete_checkout_event_countable_edge(request, id: int):
    checkout_event_countable_edge = get_object_or_404(CheckoutEventCountableEdge, id=id)
    checkout_event_countable_edge.delete()
    return {'success': True}


# CheckoutEvent endpoints
@router.get('/checkout_events', response=List[CheckoutEvent])
@paginate
def list_checkout_events(request):
    return CheckoutEvent.objects.all()


@router.get('/checkout_events/{id}', response=CheckoutEvent)
def get_checkout_event(request, id: int):
    return get_object_or_404(CheckoutEvent, id=id)


@router.post('/checkout_events', response=CheckoutEvent)
def create_checkout_event(request, payload: CheckoutEventCreate):
    data = payload.dict()
    checkout_event = CheckoutEvent.objects.create(**data)
    return checkout_event


@router.put('/checkout_events/{id}', response=CheckoutEvent)
def update_checkout_event(request, id: int, payload: CheckoutEventUpdate):
    checkout_event = get_object_or_404(CheckoutEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_event, attr, value)
    checkout_event.save()
    return checkout_event


@router.delete('/checkout_events/{id}')
def delete_checkout_event(request, id: int):
    checkout_event = get_object_or_404(CheckoutEvent, id=id)
    checkout_event.delete()
    return {'success': True}


# PayoutCountableConnection endpoints
@router.get('/payout_countable_connections', response=List[PayoutCountableConnection])
@paginate
def list_payout_countable_connections(request):
    return PayoutCountableConnection.objects.all()


@router.get('/payout_countable_connections/{id}', response=PayoutCountableConnection)
def get_payout_countable_connection(request, id: int):
    return get_object_or_404(PayoutCountableConnection, id=id)


@router.post('/payout_countable_connections', response=PayoutCountableConnection)
def create_payout_countable_connection(request, payload: PayoutCountableConnectionCreate):
    data = payload.dict()
    payout_countable_connection = PayoutCountableConnection.objects.create(**data)
    return payout_countable_connection


@router.put('/payout_countable_connections/{id}', response=PayoutCountableConnection)
def update_payout_countable_connection(request, id: int, payload: PayoutCountableConnectionUpdate):
    payout_countable_connection = get_object_or_404(PayoutCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_countable_connection, attr, value)
    payout_countable_connection.save()
    return payout_countable_connection


@router.delete('/payout_countable_connections/{id}')
def delete_payout_countable_connection(request, id: int):
    payout_countable_connection = get_object_or_404(PayoutCountableConnection, id=id)
    payout_countable_connection.delete()
    return {'success': True}


# PayoutCountableEdge endpoints
@router.get('/payout_countable_edges', response=List[PayoutCountableEdge])
@paginate
def list_payout_countable_edges(request):
    return PayoutCountableEdge.objects.all()


@router.get('/payout_countable_edges/{id}', response=PayoutCountableEdge)
def get_payout_countable_edge(request, id: int):
    return get_object_or_404(PayoutCountableEdge, id=id)


@router.post('/payout_countable_edges', response=PayoutCountableEdge)
def create_payout_countable_edge(request, payload: PayoutCountableEdgeCreate):
    data = payload.dict()
    payout_countable_edge = PayoutCountableEdge.objects.create(**data)
    return payout_countable_edge


@router.put('/payout_countable_edges/{id}', response=PayoutCountableEdge)
def update_payout_countable_edge(request, id: int, payload: PayoutCountableEdgeUpdate):
    payout_countable_edge = get_object_or_404(PayoutCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_countable_edge, attr, value)
    payout_countable_edge.save()
    return payout_countable_edge


@router.delete('/payout_countable_edges/{id}')
def delete_payout_countable_edge(request, id: int):
    payout_countable_edge = get_object_or_404(PayoutCountableEdge, id=id)
    payout_countable_edge.delete()
    return {'success': True}


# VendorPayoutReport endpoints
@router.get('/vendor_payout_reports', response=List[VendorPayoutReport])
@paginate
def list_vendor_payout_reports(request):
    return VendorPayoutReport.objects.all()


@router.get('/vendor_payout_reports/{id}', response=VendorPayoutReport)
def get_vendor_payout_report(request, id: int):
    return get_object_or_404(VendorPayoutReport, id=id)


@router.post('/vendor_payout_reports', response=VendorPayoutReport)
def create_vendor_payout_report(request, payload: VendorPayoutReportCreate):
    data = payload.dict()
    vendor_payout_report = VendorPayoutReport.objects.create(**data)
    return vendor_payout_report


@router.put('/vendor_payout_reports/{id}', response=VendorPayoutReport)
def update_vendor_payout_report(request, id: int, payload: VendorPayoutReportUpdate):
    vendor_payout_report = get_object_or_404(VendorPayoutReport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_report, attr, value)
    vendor_payout_report.save()
    return vendor_payout_report


@router.delete('/vendor_payout_reports/{id}')
def delete_vendor_payout_report(request, id: int):
    vendor_payout_report = get_object_or_404(VendorPayoutReport, id=id)
    vendor_payout_report.delete()
    return {'success': True}


# VendorPayoutReportSubset endpoints
@router.get('/vendor_payout_report_subsets', response=List[VendorPayoutReportSubset])
@paginate
def list_vendor_payout_report_subsets(request):
    return VendorPayoutReportSubset.objects.all()


@router.get('/vendor_payout_report_subsets/{id}', response=VendorPayoutReportSubset)
def get_vendor_payout_report_subset(request, id: int):
    return get_object_or_404(VendorPayoutReportSubset, id=id)


@router.post('/vendor_payout_report_subsets', response=VendorPayoutReportSubset)
def create_vendor_payout_report_subset(request, payload: VendorPayoutReportSubsetCreate):
    data = payload.dict()
    vendor_payout_report_subset = VendorPayoutReportSubset.objects.create(**data)
    return vendor_payout_report_subset


@router.put('/vendor_payout_report_subsets/{id}', response=VendorPayoutReportSubset)
def update_vendor_payout_report_subset(request, id: int, payload: VendorPayoutReportSubsetUpdate):
    vendor_payout_report_subset = get_object_or_404(VendorPayoutReportSubset, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_report_subset, attr, value)
    vendor_payout_report_subset.save()
    return vendor_payout_report_subset


@router.delete('/vendor_payout_report_subsets/{id}')
def delete_vendor_payout_report_subset(request, id: int):
    vendor_payout_report_subset = get_object_or_404(VendorPayoutReportSubset, id=id)
    vendor_payout_report_subset.delete()
    return {'success': True}


# ColumnObjectType endpoints
@router.get('/column_object_types', response=List[ColumnObjectType])
@paginate
def list_column_object_types(request):
    return ColumnObjectType.objects.all()


@router.get('/column_object_types/{id}', response=ColumnObjectType)
def get_column_object_type(request, id: int):
    return get_object_or_404(ColumnObjectType, id=id)


@router.post('/column_object_types', response=ColumnObjectType)
def create_column_object_type(request, payload: ColumnObjectTypeCreate):
    data = payload.dict()
    column_object_type = ColumnObjectType.objects.create(**data)
    return column_object_type


@router.put('/column_object_types/{id}', response=ColumnObjectType)
def update_column_object_type(request, id: int, payload: ColumnObjectTypeUpdate):
    column_object_type = get_object_or_404(ColumnObjectType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(column_object_type, attr, value)
    column_object_type.save()
    return column_object_type


@router.delete('/column_object_types/{id}')
def delete_column_object_type(request, id: int):
    column_object_type = get_object_or_404(ColumnObjectType, id=id)
    column_object_type.delete()
    return {'success': True}


# FilterObjectType endpoints
@router.get('/filter_object_types', response=List[FilterObjectType])
@paginate
def list_filter_object_types(request):
    return FilterObjectType.objects.all()


@router.get('/filter_object_types/{id}', response=FilterObjectType)
def get_filter_object_type(request, id: int):
    return get_object_or_404(FilterObjectType, id=id)


@router.post('/filter_object_types', response=FilterObjectType)
def create_filter_object_type(request, payload: FilterObjectTypeCreate):
    data = payload.dict()
    filter_object_type = FilterObjectType.objects.create(**data)
    return filter_object_type


@router.put('/filter_object_types/{id}', response=FilterObjectType)
def update_filter_object_type(request, id: int, payload: FilterObjectTypeUpdate):
    filter_object_type = get_object_or_404(FilterObjectType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(filter_object_type, attr, value)
    filter_object_type.save()
    return filter_object_type


@router.delete('/filter_object_types/{id}')
def delete_filter_object_type(request, id: int):
    filter_object_type = get_object_or_404(FilterObjectType, id=id)
    filter_object_type.delete()
    return {'success': True}


# OrderVendorSummaryType endpoints
@router.get('/order_vendor_summary_types', response=List[OrderVendorSummaryType])
@paginate
def list_order_vendor_summary_types(request):
    return OrderVendorSummaryType.objects.all()


@router.get('/order_vendor_summary_types/{id}', response=OrderVendorSummaryType)
def get_order_vendor_summary_type(request, id: int):
    return get_object_or_404(OrderVendorSummaryType, id=id)


@router.post('/order_vendor_summary_types', response=OrderVendorSummaryType)
def create_order_vendor_summary_type(request, payload: OrderVendorSummaryTypeCreate):
    data = payload.dict()
    order_vendor_summary_type = OrderVendorSummaryType.objects.create(**data)
    return order_vendor_summary_type


@router.put('/order_vendor_summary_types/{id}', response=OrderVendorSummaryType)
def update_order_vendor_summary_type(request, id: int, payload: OrderVendorSummaryTypeUpdate):
    order_vendor_summary_type = get_object_or_404(OrderVendorSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_vendor_summary_type, attr, value)
    order_vendor_summary_type.save()
    return order_vendor_summary_type


@router.delete('/order_vendor_summary_types/{id}')
def delete_order_vendor_summary_type(request, id: int):
    order_vendor_summary_type = get_object_or_404(OrderVendorSummaryType, id=id)
    order_vendor_summary_type.delete()
    return {'success': True}


# OrderVendorReportType endpoints
@router.get('/order_vendor_report_types', response=List[OrderVendorReportType])
@paginate
def list_order_vendor_report_types(request):
    return OrderVendorReportType.objects.all()


@router.get('/order_vendor_report_types/{id}', response=OrderVendorReportType)
def get_order_vendor_report_type(request, id: int):
    return get_object_or_404(OrderVendorReportType, id=id)


@router.post('/order_vendor_report_types', response=OrderVendorReportType)
def create_order_vendor_report_type(request, payload: OrderVendorReportTypeCreate):
    data = payload.dict()
    order_vendor_report_type = OrderVendorReportType.objects.create(**data)
    return order_vendor_report_type


@router.put('/order_vendor_report_types/{id}', response=OrderVendorReportType)
def update_order_vendor_report_type(request, id: int, payload: OrderVendorReportTypeUpdate):
    order_vendor_report_type = get_object_or_404(OrderVendorReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_vendor_report_type, attr, value)
    order_vendor_report_type.save()
    return order_vendor_report_type


@router.delete('/order_vendor_report_types/{id}')
def delete_order_vendor_report_type(request, id: int):
    order_vendor_report_type = get_object_or_404(OrderVendorReportType, id=id)
    order_vendor_report_type.delete()
    return {'success': True}


# SingleVendorPayoutReport endpoints
@router.get('/single_vendor_payout_reports', response=List[SingleVendorPayoutReport])
@paginate
def list_single_vendor_payout_reports(request):
    return SingleVendorPayoutReport.objects.all()


@router.get('/single_vendor_payout_reports/{id}', response=SingleVendorPayoutReport)
def get_single_vendor_payout_report(request, id: int):
    return get_object_or_404(SingleVendorPayoutReport, id=id)


@router.post('/single_vendor_payout_reports', response=SingleVendorPayoutReport)
def create_single_vendor_payout_report(request, payload: SingleVendorPayoutReportCreate):
    data = payload.dict()
    single_vendor_payout_report = SingleVendorPayoutReport.objects.create(**data)
    return single_vendor_payout_report


@router.put('/single_vendor_payout_reports/{id}', response=SingleVendorPayoutReport)
def update_single_vendor_payout_report(request, id: int, payload: SingleVendorPayoutReportUpdate):
    single_vendor_payout_report = get_object_or_404(SingleVendorPayoutReport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(single_vendor_payout_report, attr, value)
    single_vendor_payout_report.save()
    return single_vendor_payout_report


@router.delete('/single_vendor_payout_reports/{id}')
def delete_single_vendor_payout_report(request, id: int):
    single_vendor_payout_report = get_object_or_404(SingleVendorPayoutReport, id=id)
    single_vendor_payout_report.delete()
    return {'success': True}


# SingleVendorReportType endpoints
@router.get('/single_vendor_report_types', response=List[SingleVendorReportType])
@paginate
def list_single_vendor_report_types(request):
    return SingleVendorReportType.objects.all()


@router.get('/single_vendor_report_types/{id}', response=SingleVendorReportType)
def get_single_vendor_report_type(request, id: int):
    return get_object_or_404(SingleVendorReportType, id=id)


@router.post('/single_vendor_report_types', response=SingleVendorReportType)
def create_single_vendor_report_type(request, payload: SingleVendorReportTypeCreate):
    data = payload.dict()
    single_vendor_report_type = SingleVendorReportType.objects.create(**data)
    return single_vendor_report_type


@router.put('/single_vendor_report_types/{id}', response=SingleVendorReportType)
def update_single_vendor_report_type(request, id: int, payload: SingleVendorReportTypeUpdate):
    single_vendor_report_type = get_object_or_404(SingleVendorReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(single_vendor_report_type, attr, value)
    single_vendor_report_type.save()
    return single_vendor_report_type


@router.delete('/single_vendor_report_types/{id}')
def delete_single_vendor_report_type(request, id: int):
    single_vendor_report_type = get_object_or_404(SingleVendorReportType, id=id)
    single_vendor_report_type.delete()
    return {'success': True}


# SingleVendorSummaryType endpoints
@router.get('/single_vendor_summary_types', response=List[SingleVendorSummaryType])
@paginate
def list_single_vendor_summary_types(request):
    return SingleVendorSummaryType.objects.all()


@router.get('/single_vendor_summary_types/{id}', response=SingleVendorSummaryType)
def get_single_vendor_summary_type(request, id: int):
    return get_object_or_404(SingleVendorSummaryType, id=id)


@router.post('/single_vendor_summary_types', response=SingleVendorSummaryType)
def create_single_vendor_summary_type(request, payload: SingleVendorSummaryTypeCreate):
    data = payload.dict()
    single_vendor_summary_type = SingleVendorSummaryType.objects.create(**data)
    return single_vendor_summary_type


@router.put('/single_vendor_summary_types/{id}', response=SingleVendorSummaryType)
def update_single_vendor_summary_type(request, id: int, payload: SingleVendorSummaryTypeUpdate):
    single_vendor_summary_type = get_object_or_404(SingleVendorSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(single_vendor_summary_type, attr, value)
    single_vendor_summary_type.save()
    return single_vendor_summary_type


@router.delete('/single_vendor_summary_types/{id}')
def delete_single_vendor_summary_type(request, id: int):
    single_vendor_summary_type = get_object_or_404(SingleVendorSummaryType, id=id)
    single_vendor_summary_type.delete()
    return {'success': True}


# PaymentCountableConnection endpoints
@router.get('/payment_countable_connections', response=List[PaymentCountableConnection])
@paginate
def list_payment_countable_connections(request):
    return PaymentCountableConnection.objects.all()


@router.get('/payment_countable_connections/{id}', response=PaymentCountableConnection)
def get_payment_countable_connection(request, id: int):
    return get_object_or_404(PaymentCountableConnection, id=id)


@router.post('/payment_countable_connections', response=PaymentCountableConnection)
def create_payment_countable_connection(request, payload: PaymentCountableConnectionCreate):
    data = payload.dict()
    payment_countable_connection = PaymentCountableConnection.objects.create(**data)
    return payment_countable_connection


@router.put('/payment_countable_connections/{id}', response=PaymentCountableConnection)
def update_payment_countable_connection(request, id: int, payload: PaymentCountableConnectionUpdate):
    payment_countable_connection = get_object_or_404(PaymentCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_countable_connection, attr, value)
    payment_countable_connection.save()
    return payment_countable_connection


@router.delete('/payment_countable_connections/{id}')
def delete_payment_countable_connection(request, id: int):
    payment_countable_connection = get_object_or_404(PaymentCountableConnection, id=id)
    payment_countable_connection.delete()
    return {'success': True}


# PaymentCountableEdge endpoints
@router.get('/payment_countable_edges', response=List[PaymentCountableEdge])
@paginate
def list_payment_countable_edges(request):
    return PaymentCountableEdge.objects.all()


@router.get('/payment_countable_edges/{id}', response=PaymentCountableEdge)
def get_payment_countable_edge(request, id: int):
    return get_object_or_404(PaymentCountableEdge, id=id)


@router.post('/payment_countable_edges', response=PaymentCountableEdge)
def create_payment_countable_edge(request, payload: PaymentCountableEdgeCreate):
    data = payload.dict()
    payment_countable_edge = PaymentCountableEdge.objects.create(**data)
    return payment_countable_edge


@router.put('/payment_countable_edges/{id}', response=PaymentCountableEdge)
def update_payment_countable_edge(request, id: int, payload: PaymentCountableEdgeUpdate):
    payment_countable_edge = get_object_or_404(PaymentCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_countable_edge, attr, value)
    payment_countable_edge.save()
    return payment_countable_edge


@router.delete('/payment_countable_edges/{id}')
def delete_payment_countable_edge(request, id: int):
    payment_countable_edge = get_object_or_404(PaymentCountableEdge, id=id)
    payment_countable_edge.delete()
    return {'success': True}


# Page endpoints
@router.get('/pages', response=List[Page])
@paginate
def list_pages(request):
    return Page.objects.all()


@router.get('/pages/{id}', response=Page)
def get_page(request, id: int):
    return get_object_or_404(Page, id=id)


@router.post('/pages', response=Page)
def create_page(request, payload: PageCreate):
    data = payload.dict()
    page = Page.objects.create(**data)
    return page


@router.put('/pages/{id}', response=Page)
def update_page(request, id: int, payload: PageUpdate):
    page = get_object_or_404(Page, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page, attr, value)
    page.save()
    return page


@router.delete('/pages/{id}')
def delete_page(request, id: int):
    page = get_object_or_404(Page, id=id)
    page.delete()
    return {'success': True}


# PageCountableConnection endpoints
@router.get('/page_countable_connections', response=List[PageCountableConnection])
@paginate
def list_page_countable_connections(request):
    return PageCountableConnection.objects.all()


@router.get('/page_countable_connections/{id}', response=PageCountableConnection)
def get_page_countable_connection(request, id: int):
    return get_object_or_404(PageCountableConnection, id=id)


@router.post('/page_countable_connections', response=PageCountableConnection)
def create_page_countable_connection(request, payload: PageCountableConnectionCreate):
    data = payload.dict()
    page_countable_connection = PageCountableConnection.objects.create(**data)
    return page_countable_connection


@router.put('/page_countable_connections/{id}', response=PageCountableConnection)
def update_page_countable_connection(request, id: int, payload: PageCountableConnectionUpdate):
    page_countable_connection = get_object_or_404(PageCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_countable_connection, attr, value)
    page_countable_connection.save()
    return page_countable_connection


@router.delete('/page_countable_connections/{id}')
def delete_page_countable_connection(request, id: int):
    page_countable_connection = get_object_or_404(PageCountableConnection, id=id)
    page_countable_connection.delete()
    return {'success': True}


# PageCountableEdge endpoints
@router.get('/page_countable_edges', response=List[PageCountableEdge])
@paginate
def list_page_countable_edges(request):
    return PageCountableEdge.objects.all()


@router.get('/page_countable_edges/{id}', response=PageCountableEdge)
def get_page_countable_edge(request, id: int):
    return get_object_or_404(PageCountableEdge, id=id)


@router.post('/page_countable_edges', response=PageCountableEdge)
def create_page_countable_edge(request, payload: PageCountableEdgeCreate):
    data = payload.dict()
    page_countable_edge = PageCountableEdge.objects.create(**data)
    return page_countable_edge


@router.put('/page_countable_edges/{id}', response=PageCountableEdge)
def update_page_countable_edge(request, id: int, payload: PageCountableEdgeUpdate):
    page_countable_edge = get_object_or_404(PageCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_countable_edge, attr, value)
    page_countable_edge.save()
    return page_countable_edge


@router.delete('/page_countable_edges/{id}')
def delete_page_countable_edge(request, id: int):
    page_countable_edge = get_object_or_404(PageCountableEdge, id=id)
    page_countable_edge.delete()
    return {'success': True}


# OrderEventCountableConnection endpoints
@router.get('/order_event_countable_connections', response=List[OrderEventCountableConnection])
@paginate
def list_order_event_countable_connections(request):
    return OrderEventCountableConnection.objects.all()


@router.get('/order_event_countable_connections/{id}', response=OrderEventCountableConnection)
def get_order_event_countable_connection(request, id: int):
    return get_object_or_404(OrderEventCountableConnection, id=id)


@router.post('/order_event_countable_connections', response=OrderEventCountableConnection)
def create_order_event_countable_connection(request, payload: OrderEventCountableConnectionCreate):
    data = payload.dict()
    order_event_countable_connection = OrderEventCountableConnection.objects.create(**data)
    return order_event_countable_connection


@router.put('/order_event_countable_connections/{id}', response=OrderEventCountableConnection)
def update_order_event_countable_connection(request, id: int, payload: OrderEventCountableConnectionUpdate):
    order_event_countable_connection = get_object_or_404(OrderEventCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_event_countable_connection, attr, value)
    order_event_countable_connection.save()
    return order_event_countable_connection


@router.delete('/order_event_countable_connections/{id}')
def delete_order_event_countable_connection(request, id: int):
    order_event_countable_connection = get_object_or_404(OrderEventCountableConnection, id=id)
    order_event_countable_connection.delete()
    return {'success': True}


# OrderEventCountableEdge endpoints
@router.get('/order_event_countable_edges', response=List[OrderEventCountableEdge])
@paginate
def list_order_event_countable_edges(request):
    return OrderEventCountableEdge.objects.all()


@router.get('/order_event_countable_edges/{id}', response=OrderEventCountableEdge)
def get_order_event_countable_edge(request, id: int):
    return get_object_or_404(OrderEventCountableEdge, id=id)


@router.post('/order_event_countable_edges', response=OrderEventCountableEdge)
def create_order_event_countable_edge(request, payload: OrderEventCountableEdgeCreate):
    data = payload.dict()
    order_event_countable_edge = OrderEventCountableEdge.objects.create(**data)
    return order_event_countable_edge


@router.put('/order_event_countable_edges/{id}', response=OrderEventCountableEdge)
def update_order_event_countable_edge(request, id: int, payload: OrderEventCountableEdgeUpdate):
    order_event_countable_edge = get_object_or_404(OrderEventCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_event_countable_edge, attr, value)
    order_event_countable_edge.save()
    return order_event_countable_edge


@router.delete('/order_event_countable_edges/{id}')
def delete_order_event_countable_edge(request, id: int):
    order_event_countable_edge = get_object_or_404(OrderEventCountableEdge, id=id)
    order_event_countable_edge.delete()
    return {'success': True}


# NauticalOrderEventCountableConnection endpoints
@router.get('/nautical_order_event_countable_connections', response=List[NauticalOrderEventCountableConnection])
@paginate
def list_nautical_order_event_countable_connections(request):
    return NauticalOrderEventCountableConnection.objects.all()


@router.get('/nautical_order_event_countable_connections/{id}', response=NauticalOrderEventCountableConnection)
def get_nautical_order_event_countable_connection(request, id: int):
    return get_object_or_404(NauticalOrderEventCountableConnection, id=id)


@router.post('/nautical_order_event_countable_connections', response=NauticalOrderEventCountableConnection)
def create_nautical_order_event_countable_connection(request, payload: NauticalOrderEventCountableConnectionCreate):
    data = payload.dict()
    nautical_order_event_countable_connection = NauticalOrderEventCountableConnection.objects.create(**data)
    return nautical_order_event_countable_connection


@router.put('/nautical_order_event_countable_connections/{id}', response=NauticalOrderEventCountableConnection)
def update_nautical_order_event_countable_connection(request, id: int, payload: NauticalOrderEventCountableConnectionUpdate):
    nautical_order_event_countable_connection = get_object_or_404(NauticalOrderEventCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_event_countable_connection, attr, value)
    nautical_order_event_countable_connection.save()
    return nautical_order_event_countable_connection


@router.delete('/nautical_order_event_countable_connections/{id}')
def delete_nautical_order_event_countable_connection(request, id: int):
    nautical_order_event_countable_connection = get_object_or_404(NauticalOrderEventCountableConnection, id=id)
    nautical_order_event_countable_connection.delete()
    return {'success': True}


# NauticalOrderEventCountableEdge endpoints
@router.get('/nautical_order_event_countable_edges', response=List[NauticalOrderEventCountableEdge])
@paginate
def list_nautical_order_event_countable_edges(request):
    return NauticalOrderEventCountableEdge.objects.all()


@router.get('/nautical_order_event_countable_edges/{id}', response=NauticalOrderEventCountableEdge)
def get_nautical_order_event_countable_edge(request, id: int):
    return get_object_or_404(NauticalOrderEventCountableEdge, id=id)


@router.post('/nautical_order_event_countable_edges', response=NauticalOrderEventCountableEdge)
def create_nautical_order_event_countable_edge(request, payload: NauticalOrderEventCountableEdgeCreate):
    data = payload.dict()
    nautical_order_event_countable_edge = NauticalOrderEventCountableEdge.objects.create(**data)
    return nautical_order_event_countable_edge


@router.put('/nautical_order_event_countable_edges/{id}', response=NauticalOrderEventCountableEdge)
def update_nautical_order_event_countable_edge(request, id: int, payload: NauticalOrderEventCountableEdgeUpdate):
    nautical_order_event_countable_edge = get_object_or_404(NauticalOrderEventCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_event_countable_edge, attr, value)
    nautical_order_event_countable_edge.save()
    return nautical_order_event_countable_edge


@router.delete('/nautical_order_event_countable_edges/{id}')
def delete_nautical_order_event_countable_edge(request, id: int):
    nautical_order_event_countable_edge = get_object_or_404(NauticalOrderEventCountableEdge, id=id)
    nautical_order_event_countable_edge.delete()
    return {'success': True}


# FulfillmentCountableConnection endpoints
@router.get('/fulfillment_countable_connections', response=List[FulfillmentCountableConnection])
@paginate
def list_fulfillment_countable_connections(request):
    return FulfillmentCountableConnection.objects.all()


@router.get('/fulfillment_countable_connections/{id}', response=FulfillmentCountableConnection)
def get_fulfillment_countable_connection(request, id: int):
    return get_object_or_404(FulfillmentCountableConnection, id=id)


@router.post('/fulfillment_countable_connections', response=FulfillmentCountableConnection)
def create_fulfillment_countable_connection(request, payload: FulfillmentCountableConnectionCreate):
    data = payload.dict()
    fulfillment_countable_connection = FulfillmentCountableConnection.objects.create(**data)
    return fulfillment_countable_connection


@router.put('/fulfillment_countable_connections/{id}', response=FulfillmentCountableConnection)
def update_fulfillment_countable_connection(request, id: int, payload: FulfillmentCountableConnectionUpdate):
    fulfillment_countable_connection = get_object_or_404(FulfillmentCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_countable_connection, attr, value)
    fulfillment_countable_connection.save()
    return fulfillment_countable_connection


@router.delete('/fulfillment_countable_connections/{id}')
def delete_fulfillment_countable_connection(request, id: int):
    fulfillment_countable_connection = get_object_or_404(FulfillmentCountableConnection, id=id)
    fulfillment_countable_connection.delete()
    return {'success': True}


# FulfillmentCountableEdge endpoints
@router.get('/fulfillment_countable_edges', response=List[FulfillmentCountableEdge])
@paginate
def list_fulfillment_countable_edges(request):
    return FulfillmentCountableEdge.objects.all()


@router.get('/fulfillment_countable_edges/{id}', response=FulfillmentCountableEdge)
def get_fulfillment_countable_edge(request, id: int):
    return get_object_or_404(FulfillmentCountableEdge, id=id)


@router.post('/fulfillment_countable_edges', response=FulfillmentCountableEdge)
def create_fulfillment_countable_edge(request, payload: FulfillmentCountableEdgeCreate):
    data = payload.dict()
    fulfillment_countable_edge = FulfillmentCountableEdge.objects.create(**data)
    return fulfillment_countable_edge


@router.put('/fulfillment_countable_edges/{id}', response=FulfillmentCountableEdge)
def update_fulfillment_countable_edge(request, id: int, payload: FulfillmentCountableEdgeUpdate):
    fulfillment_countable_edge = get_object_or_404(FulfillmentCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_countable_edge, attr, value)
    fulfillment_countable_edge.save()
    return fulfillment_countable_edge


@router.delete('/fulfillment_countable_edges/{id}')
def delete_fulfillment_countable_edge(request, id: int):
    fulfillment_countable_edge = get_object_or_404(FulfillmentCountableEdge, id=id)
    fulfillment_countable_edge.delete()
    return {'success': True}


# OptimizedHome endpoints
@router.get('/optimized_homes', response=List[OptimizedHome])
@paginate
def list_optimized_homes(request):
    return OptimizedHome.objects.all()


@router.get('/optimized_homes/{id}', response=OptimizedHome)
def get_optimized_home(request, id: int):
    return get_object_or_404(OptimizedHome, id=id)


@router.post('/optimized_homes', response=OptimizedHome)
def create_optimized_home(request, payload: OptimizedHomeCreate):
    data = payload.dict()
    optimized_home = OptimizedHome.objects.create(**data)
    return optimized_home


@router.put('/optimized_homes/{id}', response=OptimizedHome)
def update_optimized_home(request, id: int, payload: OptimizedHomeUpdate):
    optimized_home = get_object_or_404(OptimizedHome, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(optimized_home, attr, value)
    optimized_home.save()
    return optimized_home


@router.delete('/optimized_homes/{id}')
def delete_optimized_home(request, id: int):
    optimized_home = get_object_or_404(OptimizedHome, id=id)
    optimized_home.delete()
    return {'success': True}


# NauticalConfiguration endpoints
@router.get('/nautical_configurations', response=List[NauticalConfiguration])
@paginate
def list_nautical_configurations(request):
    return NauticalConfiguration.objects.all()


@router.get('/nautical_configurations/{id}', response=NauticalConfiguration)
def get_nautical_configuration(request, id: int):
    return get_object_or_404(NauticalConfiguration, id=id)


@router.post('/nautical_configurations', response=NauticalConfiguration)
def create_nautical_configuration(request, payload: NauticalConfigurationCreate):
    data = payload.dict()
    nautical_configuration = NauticalConfiguration.objects.create(**data)
    return nautical_configuration


@router.put('/nautical_configurations/{id}', response=NauticalConfiguration)
def update_nautical_configuration(request, id: int, payload: NauticalConfigurationUpdate):
    nautical_configuration = get_object_or_404(NauticalConfiguration, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_configuration, attr, value)
    nautical_configuration.save()
    return nautical_configuration


@router.delete('/nautical_configurations/{id}')
def delete_nautical_configuration(request, id: int):
    nautical_configuration = get_object_or_404(NauticalConfiguration, id=id)
    nautical_configuration.delete()
    return {'success': True}


# MicrositeCountableConnection endpoints
@router.get('/microsite_countable_connections', response=List[MicrositeCountableConnection])
@paginate
def list_microsite_countable_connections(request):
    return MicrositeCountableConnection.objects.all()


@router.get('/microsite_countable_connections/{id}', response=MicrositeCountableConnection)
def get_microsite_countable_connection(request, id: int):
    return get_object_or_404(MicrositeCountableConnection, id=id)


@router.post('/microsite_countable_connections', response=MicrositeCountableConnection)
def create_microsite_countable_connection(request, payload: MicrositeCountableConnectionCreate):
    data = payload.dict()
    microsite_countable_connection = MicrositeCountableConnection.objects.create(**data)
    return microsite_countable_connection


@router.put('/microsite_countable_connections/{id}', response=MicrositeCountableConnection)
def update_microsite_countable_connection(request, id: int, payload: MicrositeCountableConnectionUpdate):
    microsite_countable_connection = get_object_or_404(MicrositeCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_countable_connection, attr, value)
    microsite_countable_connection.save()
    return microsite_countable_connection


@router.delete('/microsite_countable_connections/{id}')
def delete_microsite_countable_connection(request, id: int):
    microsite_countable_connection = get_object_or_404(MicrositeCountableConnection, id=id)
    microsite_countable_connection.delete()
    return {'success': True}


# MicrositeCountableEdge endpoints
@router.get('/microsite_countable_edges', response=List[MicrositeCountableEdge])
@paginate
def list_microsite_countable_edges(request):
    return MicrositeCountableEdge.objects.all()


@router.get('/microsite_countable_edges/{id}', response=MicrositeCountableEdge)
def get_microsite_countable_edge(request, id: int):
    return get_object_or_404(MicrositeCountableEdge, id=id)


@router.post('/microsite_countable_edges', response=MicrositeCountableEdge)
def create_microsite_countable_edge(request, payload: MicrositeCountableEdgeCreate):
    data = payload.dict()
    microsite_countable_edge = MicrositeCountableEdge.objects.create(**data)
    return microsite_countable_edge


@router.put('/microsite_countable_edges/{id}', response=MicrositeCountableEdge)
def update_microsite_countable_edge(request, id: int, payload: MicrositeCountableEdgeUpdate):
    microsite_countable_edge = get_object_or_404(MicrositeCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_countable_edge, attr, value)
    microsite_countable_edge.save()
    return microsite_countable_edge


@router.delete('/microsite_countable_edges/{id}')
def delete_microsite_countable_edge(request, id: int):
    microsite_countable_edge = get_object_or_404(MicrositeCountableEdge, id=id)
    microsite_countable_edge.delete()
    return {'success': True}


# Menu endpoints
@router.get('/menus', response=List[Menu])
@paginate
def list_menus(request):
    return Menu.objects.all()


@router.get('/menus/{id}', response=Menu)
def get_menu(request, id: int):
    return get_object_or_404(Menu, id=id)


@router.post('/menus', response=Menu)
def create_menu(request, payload: MenuCreate):
    data = payload.dict()
    menu = Menu.objects.create(**data)
    return menu


@router.put('/menus/{id}', response=Menu)
def update_menu(request, id: int, payload: MenuUpdate):
    menu = get_object_or_404(Menu, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu, attr, value)
    menu.save()
    return menu


@router.delete('/menus/{id}')
def delete_menu(request, id: int):
    menu = get_object_or_404(Menu, id=id)
    menu.delete()
    return {'success': True}


# MenuItem endpoints
@router.get('/menu_items', response=List[MenuItem])
@paginate
def list_menu_items(request):
    return MenuItem.objects.all()


@router.get('/menu_items/{id}', response=MenuItem)
def get_menu_item(request, id: int):
    return get_object_or_404(MenuItem, id=id)


@router.post('/menu_items', response=MenuItem)
def create_menu_item(request, payload: MenuItemCreate):
    data = payload.dict()
    menu_item = MenuItem.objects.create(**data)
    return menu_item


@router.put('/menu_items/{id}', response=MenuItem)
def update_menu_item(request, id: int, payload: MenuItemUpdate):
    menu_item = get_object_or_404(MenuItem, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item, attr, value)
    menu_item.save()
    return menu_item


@router.delete('/menu_items/{id}')
def delete_menu_item(request, id: int):
    menu_item = get_object_or_404(MenuItem, id=id)
    menu_item.delete()
    return {'success': True}


# MenuCountableConnection endpoints
@router.get('/menu_countable_connections', response=List[MenuCountableConnection])
@paginate
def list_menu_countable_connections(request):
    return MenuCountableConnection.objects.all()


@router.get('/menu_countable_connections/{id}', response=MenuCountableConnection)
def get_menu_countable_connection(request, id: int):
    return get_object_or_404(MenuCountableConnection, id=id)


@router.post('/menu_countable_connections', response=MenuCountableConnection)
def create_menu_countable_connection(request, payload: MenuCountableConnectionCreate):
    data = payload.dict()
    menu_countable_connection = MenuCountableConnection.objects.create(**data)
    return menu_countable_connection


@router.put('/menu_countable_connections/{id}', response=MenuCountableConnection)
def update_menu_countable_connection(request, id: int, payload: MenuCountableConnectionUpdate):
    menu_countable_connection = get_object_or_404(MenuCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_countable_connection, attr, value)
    menu_countable_connection.save()
    return menu_countable_connection


@router.delete('/menu_countable_connections/{id}')
def delete_menu_countable_connection(request, id: int):
    menu_countable_connection = get_object_or_404(MenuCountableConnection, id=id)
    menu_countable_connection.delete()
    return {'success': True}


# MenuCountableEdge endpoints
@router.get('/menu_countable_edges', response=List[MenuCountableEdge])
@paginate
def list_menu_countable_edges(request):
    return MenuCountableEdge.objects.all()


@router.get('/menu_countable_edges/{id}', response=MenuCountableEdge)
def get_menu_countable_edge(request, id: int):
    return get_object_or_404(MenuCountableEdge, id=id)


@router.post('/menu_countable_edges', response=MenuCountableEdge)
def create_menu_countable_edge(request, payload: MenuCountableEdgeCreate):
    data = payload.dict()
    menu_countable_edge = MenuCountableEdge.objects.create(**data)
    return menu_countable_edge


@router.put('/menu_countable_edges/{id}', response=MenuCountableEdge)
def update_menu_countable_edge(request, id: int, payload: MenuCountableEdgeUpdate):
    menu_countable_edge = get_object_or_404(MenuCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_countable_edge, attr, value)
    menu_countable_edge.save()
    return menu_countable_edge


@router.delete('/menu_countable_edges/{id}')
def delete_menu_countable_edge(request, id: int):
    menu_countable_edge = get_object_or_404(MenuCountableEdge, id=id)
    menu_countable_edge.delete()
    return {'success': True}


# MenuItemCountableConnection endpoints
@router.get('/menu_item_countable_connections', response=List[MenuItemCountableConnection])
@paginate
def list_menu_item_countable_connections(request):
    return MenuItemCountableConnection.objects.all()


@router.get('/menu_item_countable_connections/{id}', response=MenuItemCountableConnection)
def get_menu_item_countable_connection(request, id: int):
    return get_object_or_404(MenuItemCountableConnection, id=id)


@router.post('/menu_item_countable_connections', response=MenuItemCountableConnection)
def create_menu_item_countable_connection(request, payload: MenuItemCountableConnectionCreate):
    data = payload.dict()
    menu_item_countable_connection = MenuItemCountableConnection.objects.create(**data)
    return menu_item_countable_connection


@router.put('/menu_item_countable_connections/{id}', response=MenuItemCountableConnection)
def update_menu_item_countable_connection(request, id: int, payload: MenuItemCountableConnectionUpdate):
    menu_item_countable_connection = get_object_or_404(MenuItemCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_countable_connection, attr, value)
    menu_item_countable_connection.save()
    return menu_item_countable_connection


@router.delete('/menu_item_countable_connections/{id}')
def delete_menu_item_countable_connection(request, id: int):
    menu_item_countable_connection = get_object_or_404(MenuItemCountableConnection, id=id)
    menu_item_countable_connection.delete()
    return {'success': True}


# MenuItemCountableEdge endpoints
@router.get('/menu_item_countable_edges', response=List[MenuItemCountableEdge])
@paginate
def list_menu_item_countable_edges(request):
    return MenuItemCountableEdge.objects.all()


@router.get('/menu_item_countable_edges/{id}', response=MenuItemCountableEdge)
def get_menu_item_countable_edge(request, id: int):
    return get_object_or_404(MenuItemCountableEdge, id=id)


@router.post('/menu_item_countable_edges', response=MenuItemCountableEdge)
def create_menu_item_countable_edge(request, payload: MenuItemCountableEdgeCreate):
    data = payload.dict()
    menu_item_countable_edge = MenuItemCountableEdge.objects.create(**data)
    return menu_item_countable_edge


@router.put('/menu_item_countable_edges/{id}', response=MenuItemCountableEdge)
def update_menu_item_countable_edge(request, id: int, payload: MenuItemCountableEdgeUpdate):
    menu_item_countable_edge = get_object_or_404(MenuItemCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_countable_edge, attr, value)
    menu_item_countable_edge.save()
    return menu_item_countable_edge


@router.delete('/menu_item_countable_edges/{id}')
def delete_menu_item_countable_edge(request, id: int):
    menu_item_countable_edge = get_object_or_404(MenuItemCountableEdge, id=id)
    menu_item_countable_edge.delete()
    return {'success': True}


# MarketplaceConfiguration endpoints
@router.get('/marketplace_configurations', response=List[MarketplaceConfiguration])
@paginate
def list_marketplace_configurations(request):
    return MarketplaceConfiguration.objects.all()


@router.get('/marketplace_configurations/{id}', response=MarketplaceConfiguration)
def get_marketplace_configuration(request, id: int):
    return get_object_or_404(MarketplaceConfiguration, id=id)


@router.post('/marketplace_configurations', response=MarketplaceConfiguration)
def create_marketplace_configuration(request, payload: MarketplaceConfigurationCreate):
    data = payload.dict()
    marketplace_configuration = MarketplaceConfiguration.objects.create(**data)
    return marketplace_configuration


@router.put('/marketplace_configurations/{id}', response=MarketplaceConfiguration)
def update_marketplace_configuration(request, id: int, payload: MarketplaceConfigurationUpdate):
    marketplace_configuration = get_object_or_404(MarketplaceConfiguration, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(marketplace_configuration, attr, value)
    marketplace_configuration.save()
    return marketplace_configuration


@router.delete('/marketplace_configurations/{id}')
def delete_marketplace_configuration(request, id: int):
    marketplace_configuration = get_object_or_404(MarketplaceConfiguration, id=id)
    marketplace_configuration.delete()
    return {'success': True}


# DefaultSellerChecklist endpoints
@router.get('/default_seller_checklists', response=List[DefaultSellerChecklist])
@paginate
def list_default_seller_checklists(request):
    return DefaultSellerChecklist.objects.all()


@router.get('/default_seller_checklists/{id}', response=DefaultSellerChecklist)
def get_default_seller_checklist(request, id: int):
    return get_object_or_404(DefaultSellerChecklist, id=id)


@router.post('/default_seller_checklists', response=DefaultSellerChecklist)
def create_default_seller_checklist(request, payload: DefaultSellerChecklistCreate):
    data = payload.dict()
    default_seller_checklist = DefaultSellerChecklist.objects.create(**data)
    return default_seller_checklist


@router.put('/default_seller_checklists/{id}', response=DefaultSellerChecklist)
def update_default_seller_checklist(request, id: int, payload: DefaultSellerChecklistUpdate):
    default_seller_checklist = get_object_or_404(DefaultSellerChecklist, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(default_seller_checklist, attr, value)
    default_seller_checklist.save()
    return default_seller_checklist


@router.delete('/default_seller_checklists/{id}')
def delete_default_seller_checklist(request, id: int):
    default_seller_checklist = get_object_or_404(DefaultSellerChecklist, id=id)
    default_seller_checklist.delete()
    return {'success': True}


# EmailEventCountableConnection endpoints
@router.get('/email_event_countable_connections', response=List[EmailEventCountableConnection])
@paginate
def list_email_event_countable_connections(request):
    return EmailEventCountableConnection.objects.all()


@router.get('/email_event_countable_connections/{id}', response=EmailEventCountableConnection)
def get_email_event_countable_connection(request, id: int):
    return get_object_or_404(EmailEventCountableConnection, id=id)


@router.post('/email_event_countable_connections', response=EmailEventCountableConnection)
def create_email_event_countable_connection(request, payload: EmailEventCountableConnectionCreate):
    data = payload.dict()
    email_event_countable_connection = EmailEventCountableConnection.objects.create(**data)
    return email_event_countable_connection


@router.put('/email_event_countable_connections/{id}', response=EmailEventCountableConnection)
def update_email_event_countable_connection(request, id: int, payload: EmailEventCountableConnectionUpdate):
    email_event_countable_connection = get_object_or_404(EmailEventCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_event_countable_connection, attr, value)
    email_event_countable_connection.save()
    return email_event_countable_connection


@router.delete('/email_event_countable_connections/{id}')
def delete_email_event_countable_connection(request, id: int):
    email_event_countable_connection = get_object_or_404(EmailEventCountableConnection, id=id)
    email_event_countable_connection.delete()
    return {'success': True}


# EmailEventCountableEdge endpoints
@router.get('/email_event_countable_edges', response=List[EmailEventCountableEdge])
@paginate
def list_email_event_countable_edges(request):
    return EmailEventCountableEdge.objects.all()


@router.get('/email_event_countable_edges/{id}', response=EmailEventCountableEdge)
def get_email_event_countable_edge(request, id: int):
    return get_object_or_404(EmailEventCountableEdge, id=id)


@router.post('/email_event_countable_edges', response=EmailEventCountableEdge)
def create_email_event_countable_edge(request, payload: EmailEventCountableEdgeCreate):
    data = payload.dict()
    email_event_countable_edge = EmailEventCountableEdge.objects.create(**data)
    return email_event_countable_edge


@router.put('/email_event_countable_edges/{id}', response=EmailEventCountableEdge)
def update_email_event_countable_edge(request, id: int, payload: EmailEventCountableEdgeUpdate):
    email_event_countable_edge = get_object_or_404(EmailEventCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_event_countable_edge, attr, value)
    email_event_countable_edge.save()
    return email_event_countable_edge


@router.delete('/email_event_countable_edges/{id}')
def delete_email_event_countable_edge(request, id: int):
    email_event_countable_edge = get_object_or_404(EmailEventCountableEdge, id=id)
    email_event_countable_edge.delete()
    return {'success': True}


# EmailEvent endpoints
@router.get('/email_events', response=List[EmailEvent])
@paginate
def list_email_events(request):
    return EmailEvent.objects.all()


@router.get('/email_events/{id}', response=EmailEvent)
def get_email_event(request, id: int):
    return get_object_or_404(EmailEvent, id=id)


@router.post('/email_events', response=EmailEvent)
def create_email_event(request, payload: EmailEventCreate):
    data = payload.dict()
    email_event = EmailEvent.objects.create(**data)
    return email_event


@router.put('/email_events/{id}', response=EmailEvent)
def update_email_event(request, id: int, payload: EmailEventUpdate):
    email_event = get_object_or_404(EmailEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_event, attr, value)
    email_event.save()
    return email_event


@router.delete('/email_events/{id}')
def delete_email_event(request, id: int):
    email_event = get_object_or_404(EmailEvent, id=id)
    email_event.delete()
    return {'success': True}


# LocationSuggestion endpoints
@router.get('/location_suggestions', response=List[LocationSuggestion])
@paginate
def list_location_suggestions(request):
    return LocationSuggestion.objects.all()


@router.get('/location_suggestions/{id}', response=LocationSuggestion)
def get_location_suggestion(request, id: int):
    return get_object_or_404(LocationSuggestion, id=id)


@router.post('/location_suggestions', response=LocationSuggestion)
def create_location_suggestion(request, payload: LocationSuggestionCreate):
    data = payload.dict()
    location_suggestion = LocationSuggestion.objects.create(**data)
    return location_suggestion


@router.put('/location_suggestions/{id}', response=LocationSuggestion)
def update_location_suggestion(request, id: int, payload: LocationSuggestionUpdate):
    location_suggestion = get_object_or_404(LocationSuggestion, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(location_suggestion, attr, value)
    location_suggestion.save()
    return location_suggestion


@router.delete('/location_suggestions/{id}')
def delete_location_suggestion(request, id: int):
    location_suggestion = get_object_or_404(LocationSuggestion, id=id)
    location_suggestion.delete()
    return {'success': True}


# Coordinates endpoints
@router.get('/coordinatess', response=List[Coordinates])
@paginate
def list_coordinatess(request):
    return Coordinates.objects.all()


@router.get('/coordinatess/{id}', response=Coordinates)
def get_coordinates(request, id: int):
    return get_object_or_404(Coordinates, id=id)


@router.post('/coordinatess', response=Coordinates)
def create_coordinates(request, payload: CoordinatesCreate):
    data = payload.dict()
    coordinates = Coordinates.objects.create(**data)
    return coordinates


@router.put('/coordinatess/{id}', response=Coordinates)
def update_coordinates(request, id: int, payload: CoordinatesUpdate):
    coordinates = get_object_or_404(Coordinates, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(coordinates, attr, value)
    coordinates.save()
    return coordinates


@router.delete('/coordinatess/{id}')
def delete_coordinates(request, id: int):
    coordinates = get_object_or_404(Coordinates, id=id)
    coordinates.delete()
    return {'success': True}


# InReportOrderCustomerSummaryType endpoints
@router.get('/in_report_order_customer_summary_types', response=List[InReportOrderCustomerSummaryType])
@paginate
def list_in_report_order_customer_summary_types(request):
    return InReportOrderCustomerSummaryType.objects.all()


@router.get('/in_report_order_customer_summary_types/{id}', response=InReportOrderCustomerSummaryType)
def get_in_report_order_customer_summary_type(request, id: int):
    return get_object_or_404(InReportOrderCustomerSummaryType, id=id)


@router.post('/in_report_order_customer_summary_types', response=InReportOrderCustomerSummaryType)
def create_in_report_order_customer_summary_type(request, payload: InReportOrderCustomerSummaryTypeCreate):
    data = payload.dict()
    in_report_order_customer_summary_type = InReportOrderCustomerSummaryType.objects.create(**data)
    return in_report_order_customer_summary_type


@router.put('/in_report_order_customer_summary_types/{id}', response=InReportOrderCustomerSummaryType)
def update_in_report_order_customer_summary_type(request, id: int, payload: InReportOrderCustomerSummaryTypeUpdate):
    in_report_order_customer_summary_type = get_object_or_404(InReportOrderCustomerSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_order_customer_summary_type, attr, value)
    in_report_order_customer_summary_type.save()
    return in_report_order_customer_summary_type


@router.delete('/in_report_order_customer_summary_types/{id}')
def delete_in_report_order_customer_summary_type(request, id: int):
    in_report_order_customer_summary_type = get_object_or_404(InReportOrderCustomerSummaryType, id=id)
    in_report_order_customer_summary_type.delete()
    return {'success': True}


# OrderSellerSummaryType endpoints
@router.get('/order_seller_summary_types', response=List[OrderSellerSummaryType])
@paginate
def list_order_seller_summary_types(request):
    return OrderSellerSummaryType.objects.all()


@router.get('/order_seller_summary_types/{id}', response=OrderSellerSummaryType)
def get_order_seller_summary_type(request, id: int):
    return get_object_or_404(OrderSellerSummaryType, id=id)


@router.post('/order_seller_summary_types', response=OrderSellerSummaryType)
def create_order_seller_summary_type(request, payload: OrderSellerSummaryTypeCreate):
    data = payload.dict()
    order_seller_summary_type = OrderSellerSummaryType.objects.create(**data)
    return order_seller_summary_type


@router.put('/order_seller_summary_types/{id}', response=OrderSellerSummaryType)
def update_order_seller_summary_type(request, id: int, payload: OrderSellerSummaryTypeUpdate):
    order_seller_summary_type = get_object_or_404(OrderSellerSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_seller_summary_type, attr, value)
    order_seller_summary_type.save()
    return order_seller_summary_type


@router.delete('/order_seller_summary_types/{id}')
def delete_order_seller_summary_type(request, id: int):
    order_seller_summary_type = get_object_or_404(OrderSellerSummaryType, id=id)
    order_seller_summary_type.delete()
    return {'success': True}


# OrderCustomerReportType endpoints
@router.get('/order_customer_report_types', response=List[OrderCustomerReportType])
@paginate
def list_order_customer_report_types(request):
    return OrderCustomerReportType.objects.all()


@router.get('/order_customer_report_types/{id}', response=OrderCustomerReportType)
def get_order_customer_report_type(request, id: int):
    return get_object_or_404(OrderCustomerReportType, id=id)


@router.post('/order_customer_report_types', response=OrderCustomerReportType)
def create_order_customer_report_type(request, payload: OrderCustomerReportTypeCreate):
    data = payload.dict()
    order_customer_report_type = OrderCustomerReportType.objects.create(**data)
    return order_customer_report_type


@router.put('/order_customer_report_types/{id}', response=OrderCustomerReportType)
def update_order_customer_report_type(request, id: int, payload: OrderCustomerReportTypeUpdate):
    order_customer_report_type = get_object_or_404(OrderCustomerReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_customer_report_type, attr, value)
    order_customer_report_type.save()
    return order_customer_report_type


@router.delete('/order_customer_report_types/{id}')
def delete_order_customer_report_type(request, id: int):
    order_customer_report_type = get_object_or_404(OrderCustomerReportType, id=id)
    order_customer_report_type.delete()
    return {'success': True}


# InReportOrderSellerSummaryType endpoints
@router.get('/in_report_order_seller_summary_types', response=List[InReportOrderSellerSummaryType])
@paginate
def list_in_report_order_seller_summary_types(request):
    return InReportOrderSellerSummaryType.objects.all()


@router.get('/in_report_order_seller_summary_types/{id}', response=InReportOrderSellerSummaryType)
def get_in_report_order_seller_summary_type(request, id: int):
    return get_object_or_404(InReportOrderSellerSummaryType, id=id)


@router.post('/in_report_order_seller_summary_types', response=InReportOrderSellerSummaryType)
def create_in_report_order_seller_summary_type(request, payload: InReportOrderSellerSummaryTypeCreate):
    data = payload.dict()
    in_report_order_seller_summary_type = InReportOrderSellerSummaryType.objects.create(**data)
    return in_report_order_seller_summary_type


@router.put('/in_report_order_seller_summary_types/{id}', response=InReportOrderSellerSummaryType)
def update_in_report_order_seller_summary_type(request, id: int, payload: InReportOrderSellerSummaryTypeUpdate):
    in_report_order_seller_summary_type = get_object_or_404(InReportOrderSellerSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_order_seller_summary_type, attr, value)
    in_report_order_seller_summary_type.save()
    return in_report_order_seller_summary_type


@router.delete('/in_report_order_seller_summary_types/{id}')
def delete_in_report_order_seller_summary_type(request, id: int):
    in_report_order_seller_summary_type = get_object_or_404(InReportOrderSellerSummaryType, id=id)
    in_report_order_seller_summary_type.delete()
    return {'success': True}


# OrderSellerReportType endpoints
@router.get('/order_seller_report_types', response=List[OrderSellerReportType])
@paginate
def list_order_seller_report_types(request):
    return OrderSellerReportType.objects.all()


@router.get('/order_seller_report_types/{id}', response=OrderSellerReportType)
def get_order_seller_report_type(request, id: int):
    return get_object_or_404(OrderSellerReportType, id=id)


@router.post('/order_seller_report_types', response=OrderSellerReportType)
def create_order_seller_report_type(request, payload: OrderSellerReportTypeCreate):
    data = payload.dict()
    order_seller_report_type = OrderSellerReportType.objects.create(**data)
    return order_seller_report_type


@router.put('/order_seller_report_types/{id}', response=OrderSellerReportType)
def update_order_seller_report_type(request, id: int, payload: OrderSellerReportTypeUpdate):
    order_seller_report_type = get_object_or_404(OrderSellerReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_seller_report_type, attr, value)
    order_seller_report_type.save()
    return order_seller_report_type


@router.delete('/order_seller_report_types/{id}')
def delete_order_seller_report_type(request, id: int):
    order_seller_report_type = get_object_or_404(OrderSellerReportType, id=id)
    order_seller_report_type.delete()
    return {'success': True}


# InReportOrderMarketplaceSummaryType endpoints
@router.get('/in_report_order_marketplace_summary_types', response=List[InReportOrderMarketplaceSummaryType])
@paginate
def list_in_report_order_marketplace_summary_types(request):
    return InReportOrderMarketplaceSummaryType.objects.all()


@router.get('/in_report_order_marketplace_summary_types/{id}', response=InReportOrderMarketplaceSummaryType)
def get_in_report_order_marketplace_summary_type(request, id: int):
    return get_object_or_404(InReportOrderMarketplaceSummaryType, id=id)


@router.post('/in_report_order_marketplace_summary_types', response=InReportOrderMarketplaceSummaryType)
def create_in_report_order_marketplace_summary_type(request, payload: InReportOrderMarketplaceSummaryTypeCreate):
    data = payload.dict()
    in_report_order_marketplace_summary_type = InReportOrderMarketplaceSummaryType.objects.create(**data)
    return in_report_order_marketplace_summary_type


@router.put('/in_report_order_marketplace_summary_types/{id}', response=InReportOrderMarketplaceSummaryType)
def update_in_report_order_marketplace_summary_type(request, id: int, payload: InReportOrderMarketplaceSummaryTypeUpdate):
    in_report_order_marketplace_summary_type = get_object_or_404(InReportOrderMarketplaceSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_order_marketplace_summary_type, attr, value)
    in_report_order_marketplace_summary_type.save()
    return in_report_order_marketplace_summary_type


@router.delete('/in_report_order_marketplace_summary_types/{id}')
def delete_in_report_order_marketplace_summary_type(request, id: int):
    in_report_order_marketplace_summary_type = get_object_or_404(InReportOrderMarketplaceSummaryType, id=id)
    in_report_order_marketplace_summary_type.delete()
    return {'success': True}


# OrderMarketplaceReportType endpoints
@router.get('/order_marketplace_report_types', response=List[OrderMarketplaceReportType])
@paginate
def list_order_marketplace_report_types(request):
    return OrderMarketplaceReportType.objects.all()


@router.get('/order_marketplace_report_types/{id}', response=OrderMarketplaceReportType)
def get_order_marketplace_report_type(request, id: int):
    return get_object_or_404(OrderMarketplaceReportType, id=id)


@router.post('/order_marketplace_report_types', response=OrderMarketplaceReportType)
def create_order_marketplace_report_type(request, payload: OrderMarketplaceReportTypeCreate):
    data = payload.dict()
    order_marketplace_report_type = OrderMarketplaceReportType.objects.create(**data)
    return order_marketplace_report_type


@router.put('/order_marketplace_report_types/{id}', response=OrderMarketplaceReportType)
def update_order_marketplace_report_type(request, id: int, payload: OrderMarketplaceReportTypeUpdate):
    order_marketplace_report_type = get_object_or_404(OrderMarketplaceReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_marketplace_report_type, attr, value)
    order_marketplace_report_type.save()
    return order_marketplace_report_type


@router.delete('/order_marketplace_report_types/{id}')
def delete_order_marketplace_report_type(request, id: int):
    order_marketplace_report_type = get_object_or_404(OrderMarketplaceReportType, id=id)
    order_marketplace_report_type.delete()
    return {'success': True}


# InReportMarketplacePayoutsSummaryType endpoints
@router.get('/in_report_marketplace_payouts_summary_types', response=List[InReportMarketplacePayoutsSummaryType])
@paginate
def list_in_report_marketplace_payouts_summary_types(request):
    return InReportMarketplacePayoutsSummaryType.objects.all()


@router.get('/in_report_marketplace_payouts_summary_types/{id}', response=InReportMarketplacePayoutsSummaryType)
def get_in_report_marketplace_payouts_summary_type(request, id: int):
    return get_object_or_404(InReportMarketplacePayoutsSummaryType, id=id)


@router.post('/in_report_marketplace_payouts_summary_types', response=InReportMarketplacePayoutsSummaryType)
def create_in_report_marketplace_payouts_summary_type(request, payload: InReportMarketplacePayoutsSummaryTypeCreate):
    data = payload.dict()
    in_report_marketplace_payouts_summary_type = InReportMarketplacePayoutsSummaryType.objects.create(**data)
    return in_report_marketplace_payouts_summary_type


@router.put('/in_report_marketplace_payouts_summary_types/{id}', response=InReportMarketplacePayoutsSummaryType)
def update_in_report_marketplace_payouts_summary_type(request, id: int, payload: InReportMarketplacePayoutsSummaryTypeUpdate):
    in_report_marketplace_payouts_summary_type = get_object_or_404(InReportMarketplacePayoutsSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_marketplace_payouts_summary_type, attr, value)
    in_report_marketplace_payouts_summary_type.save()
    return in_report_marketplace_payouts_summary_type


@router.delete('/in_report_marketplace_payouts_summary_types/{id}')
def delete_in_report_marketplace_payouts_summary_type(request, id: int):
    in_report_marketplace_payouts_summary_type = get_object_or_404(InReportMarketplacePayoutsSummaryType, id=id)
    in_report_marketplace_payouts_summary_type.delete()
    return {'success': True}


# InReportMarketplaceTaxSummaryType endpoints
@router.get('/in_report_marketplace_tax_summary_types', response=List[InReportMarketplaceTaxSummaryType])
@paginate
def list_in_report_marketplace_tax_summary_types(request):
    return InReportMarketplaceTaxSummaryType.objects.all()


@router.get('/in_report_marketplace_tax_summary_types/{id}', response=InReportMarketplaceTaxSummaryType)
def get_in_report_marketplace_tax_summary_type(request, id: int):
    return get_object_or_404(InReportMarketplaceTaxSummaryType, id=id)


@router.post('/in_report_marketplace_tax_summary_types', response=InReportMarketplaceTaxSummaryType)
def create_in_report_marketplace_tax_summary_type(request, payload: InReportMarketplaceTaxSummaryTypeCreate):
    data = payload.dict()
    in_report_marketplace_tax_summary_type = InReportMarketplaceTaxSummaryType.objects.create(**data)
    return in_report_marketplace_tax_summary_type


@router.put('/in_report_marketplace_tax_summary_types/{id}', response=InReportMarketplaceTaxSummaryType)
def update_in_report_marketplace_tax_summary_type(request, id: int, payload: InReportMarketplaceTaxSummaryTypeUpdate):
    in_report_marketplace_tax_summary_type = get_object_or_404(InReportMarketplaceTaxSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_marketplace_tax_summary_type, attr, value)
    in_report_marketplace_tax_summary_type.save()
    return in_report_marketplace_tax_summary_type


@router.delete('/in_report_marketplace_tax_summary_types/{id}')
def delete_in_report_marketplace_tax_summary_type(request, id: int):
    in_report_marketplace_tax_summary_type = get_object_or_404(InReportMarketplaceTaxSummaryType, id=id)
    in_report_marketplace_tax_summary_type.delete()
    return {'success': True}


# AbstractOrderSellerReportType endpoints
@router.get('/abstract_order_seller_report_types', response=List[AbstractOrderSellerReportType])
@paginate
def list_abstract_order_seller_report_types(request):
    return AbstractOrderSellerReportType.objects.all()


@router.get('/abstract_order_seller_report_types/{id}', response=AbstractOrderSellerReportType)
def get_abstract_order_seller_report_type(request, id: int):
    return get_object_or_404(AbstractOrderSellerReportType, id=id)


@router.post('/abstract_order_seller_report_types', response=AbstractOrderSellerReportType)
def create_abstract_order_seller_report_type(request, payload: AbstractOrderSellerReportTypeCreate):
    data = payload.dict()
    abstract_order_seller_report_type = AbstractOrderSellerReportType.objects.create(**data)
    return abstract_order_seller_report_type


@router.put('/abstract_order_seller_report_types/{id}', response=AbstractOrderSellerReportType)
def update_abstract_order_seller_report_type(request, id: int, payload: AbstractOrderSellerReportTypeUpdate):
    abstract_order_seller_report_type = get_object_or_404(AbstractOrderSellerReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(abstract_order_seller_report_type, attr, value)
    abstract_order_seller_report_type.save()
    return abstract_order_seller_report_type


@router.delete('/abstract_order_seller_report_types/{id}')
def delete_abstract_order_seller_report_type(request, id: int):
    abstract_order_seller_report_type = get_object_or_404(AbstractOrderSellerReportType, id=id)
    abstract_order_seller_report_type.delete()
    return {'success': True}


# MarketplaceTaxReportType endpoints
@router.get('/marketplace_tax_report_types', response=List[MarketplaceTaxReportType])
@paginate
def list_marketplace_tax_report_types(request):
    return MarketplaceTaxReportType.objects.all()


@router.get('/marketplace_tax_report_types/{id}', response=MarketplaceTaxReportType)
def get_marketplace_tax_report_type(request, id: int):
    return get_object_or_404(MarketplaceTaxReportType, id=id)


@router.post('/marketplace_tax_report_types', response=MarketplaceTaxReportType)
def create_marketplace_tax_report_type(request, payload: MarketplaceTaxReportTypeCreate):
    data = payload.dict()
    marketplace_tax_report_type = MarketplaceTaxReportType.objects.create(**data)
    return marketplace_tax_report_type


@router.put('/marketplace_tax_report_types/{id}', response=MarketplaceTaxReportType)
def update_marketplace_tax_report_type(request, id: int, payload: MarketplaceTaxReportTypeUpdate):
    marketplace_tax_report_type = get_object_or_404(MarketplaceTaxReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(marketplace_tax_report_type, attr, value)
    marketplace_tax_report_type.save()
    return marketplace_tax_report_type


@router.delete('/marketplace_tax_report_types/{id}')
def delete_marketplace_tax_report_type(request, id: int):
    marketplace_tax_report_type = get_object_or_404(MarketplaceTaxReportType, id=id)
    marketplace_tax_report_type.delete()
    return {'success': True}


# InReportMarketplaceTaxesByCountryType endpoints
@router.get('/in_report_marketplace_taxes_by_country_types', response=List[InReportMarketplaceTaxesByCountryType])
@paginate
def list_in_report_marketplace_taxes_by_country_types(request):
    return InReportMarketplaceTaxesByCountryType.objects.all()


@router.get('/in_report_marketplace_taxes_by_country_types/{id}', response=InReportMarketplaceTaxesByCountryType)
def get_in_report_marketplace_taxes_by_country_type(request, id: int):
    return get_object_or_404(InReportMarketplaceTaxesByCountryType, id=id)


@router.post('/in_report_marketplace_taxes_by_country_types', response=InReportMarketplaceTaxesByCountryType)
def create_in_report_marketplace_taxes_by_country_type(request, payload: InReportMarketplaceTaxesByCountryTypeCreate):
    data = payload.dict()
    in_report_marketplace_taxes_by_country_type = InReportMarketplaceTaxesByCountryType.objects.create(**data)
    return in_report_marketplace_taxes_by_country_type


@router.put('/in_report_marketplace_taxes_by_country_types/{id}', response=InReportMarketplaceTaxesByCountryType)
def update_in_report_marketplace_taxes_by_country_type(request, id: int, payload: InReportMarketplaceTaxesByCountryTypeUpdate):
    in_report_marketplace_taxes_by_country_type = get_object_or_404(InReportMarketplaceTaxesByCountryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_marketplace_taxes_by_country_type, attr, value)
    in_report_marketplace_taxes_by_country_type.save()
    return in_report_marketplace_taxes_by_country_type


@router.delete('/in_report_marketplace_taxes_by_country_types/{id}')
def delete_in_report_marketplace_taxes_by_country_type(request, id: int):
    in_report_marketplace_taxes_by_country_type = get_object_or_404(InReportMarketplaceTaxesByCountryType, id=id)
    in_report_marketplace_taxes_by_country_type.delete()
    return {'success': True}


# MarketplaceTaxReportByLocaleType endpoints
@router.get('/marketplace_tax_report_by_locale_types', response=List[MarketplaceTaxReportByLocaleType])
@paginate
def list_marketplace_tax_report_by_locale_types(request):
    return MarketplaceTaxReportByLocaleType.objects.all()


@router.get('/marketplace_tax_report_by_locale_types/{id}', response=MarketplaceTaxReportByLocaleType)
def get_marketplace_tax_report_by_locale_type(request, id: int):
    return get_object_or_404(MarketplaceTaxReportByLocaleType, id=id)


@router.post('/marketplace_tax_report_by_locale_types', response=MarketplaceTaxReportByLocaleType)
def create_marketplace_tax_report_by_locale_type(request, payload: MarketplaceTaxReportByLocaleTypeCreate):
    data = payload.dict()
    marketplace_tax_report_by_locale_type = MarketplaceTaxReportByLocaleType.objects.create(**data)
    return marketplace_tax_report_by_locale_type


@router.put('/marketplace_tax_report_by_locale_types/{id}', response=MarketplaceTaxReportByLocaleType)
def update_marketplace_tax_report_by_locale_type(request, id: int, payload: MarketplaceTaxReportByLocaleTypeUpdate):
    marketplace_tax_report_by_locale_type = get_object_or_404(MarketplaceTaxReportByLocaleType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(marketplace_tax_report_by_locale_type, attr, value)
    marketplace_tax_report_by_locale_type.save()
    return marketplace_tax_report_by_locale_type


@router.delete('/marketplace_tax_report_by_locale_types/{id}')
def delete_marketplace_tax_report_by_locale_type(request, id: int):
    marketplace_tax_report_by_locale_type = get_object_or_404(MarketplaceTaxReportByLocaleType, id=id)
    marketplace_tax_report_by_locale_type.delete()
    return {'success': True}


# CountryState endpoints
@router.get('/country_states', response=List[CountryState])
@paginate
def list_country_states(request):
    return CountryState.objects.all()


@router.get('/country_states/{id}', response=CountryState)
def get_country_state(request, id: int):
    return get_object_or_404(CountryState, id=id)


@router.post('/country_states', response=CountryState)
def create_country_state(request, payload: CountryStateCreate):
    data = payload.dict()
    country_state = CountryState.objects.create(**data)
    return country_state


@router.put('/country_states/{id}', response=CountryState)
def update_country_state(request, id: int, payload: CountryStateUpdate):
    country_state = get_object_or_404(CountryState, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(country_state, attr, value)
    country_state.save()
    return country_state


@router.delete('/country_states/{id}')
def delete_country_state(request, id: int):
    country_state = get_object_or_404(CountryState, id=id)
    country_state.delete()
    return {'success': True}


# InReportTopPerformingProductsType endpoints
@router.get('/in_report_top_performing_products_types', response=List[InReportTopPerformingProductsType])
@paginate
def list_in_report_top_performing_products_types(request):
    return InReportTopPerformingProductsType.objects.all()


@router.get('/in_report_top_performing_products_types/{id}', response=InReportTopPerformingProductsType)
def get_in_report_top_performing_products_type(request, id: int):
    return get_object_or_404(InReportTopPerformingProductsType, id=id)


@router.post('/in_report_top_performing_products_types', response=InReportTopPerformingProductsType)
def create_in_report_top_performing_products_type(request, payload: InReportTopPerformingProductsTypeCreate):
    data = payload.dict()
    in_report_top_performing_products_type = InReportTopPerformingProductsType.objects.create(**data)
    return in_report_top_performing_products_type


@router.put('/in_report_top_performing_products_types/{id}', response=InReportTopPerformingProductsType)
def update_in_report_top_performing_products_type(request, id: int, payload: InReportTopPerformingProductsTypeUpdate):
    in_report_top_performing_products_type = get_object_or_404(InReportTopPerformingProductsType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_top_performing_products_type, attr, value)
    in_report_top_performing_products_type.save()
    return in_report_top_performing_products_type


@router.delete('/in_report_top_performing_products_types/{id}')
def delete_in_report_top_performing_products_type(request, id: int):
    in_report_top_performing_products_type = get_object_or_404(InReportTopPerformingProductsType, id=id)
    in_report_top_performing_products_type.delete()
    return {'success': True}


# AbstractProductVariantType endpoints
@router.get('/abstract_product_variant_types', response=List[AbstractProductVariantType])
@paginate
def list_abstract_product_variant_types(request):
    return AbstractProductVariantType.objects.all()


@router.get('/abstract_product_variant_types/{id}', response=AbstractProductVariantType)
def get_abstract_product_variant_type(request, id: int):
    return get_object_or_404(AbstractProductVariantType, id=id)


@router.post('/abstract_product_variant_types', response=AbstractProductVariantType)
def create_abstract_product_variant_type(request, payload: AbstractProductVariantTypeCreate):
    data = payload.dict()
    abstract_product_variant_type = AbstractProductVariantType.objects.create(**data)
    return abstract_product_variant_type


@router.put('/abstract_product_variant_types/{id}', response=AbstractProductVariantType)
def update_abstract_product_variant_type(request, id: int, payload: AbstractProductVariantTypeUpdate):
    abstract_product_variant_type = get_object_or_404(AbstractProductVariantType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(abstract_product_variant_type, attr, value)
    abstract_product_variant_type.save()
    return abstract_product_variant_type


@router.delete('/abstract_product_variant_types/{id}')
def delete_abstract_product_variant_type(request, id: int):
    abstract_product_variant_type = get_object_or_404(AbstractProductVariantType, id=id)
    abstract_product_variant_type.delete()
    return {'success': True}


# ProductVariantReportType endpoints
@router.get('/product_variant_report_types', response=List[ProductVariantReportType])
@paginate
def list_product_variant_report_types(request):
    return ProductVariantReportType.objects.all()


@router.get('/product_variant_report_types/{id}', response=ProductVariantReportType)
def get_product_variant_report_type(request, id: int):
    return get_object_or_404(ProductVariantReportType, id=id)


@router.post('/product_variant_report_types', response=ProductVariantReportType)
def create_product_variant_report_type(request, payload: ProductVariantReportTypeCreate):
    data = payload.dict()
    product_variant_report_type = ProductVariantReportType.objects.create(**data)
    return product_variant_report_type


@router.put('/product_variant_report_types/{id}', response=ProductVariantReportType)
def update_product_variant_report_type(request, id: int, payload: ProductVariantReportTypeUpdate):
    product_variant_report_type = get_object_or_404(ProductVariantReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_report_type, attr, value)
    product_variant_report_type.save()
    return product_variant_report_type


@router.delete('/product_variant_report_types/{id}')
def delete_product_variant_report_type(request, id: int):
    product_variant_report_type = get_object_or_404(ProductVariantReportType, id=id)
    product_variant_report_type.delete()
    return {'success': True}


# InReportTopPerformingCategoriesType endpoints
@router.get('/in_report_top_performing_categories_types', response=List[InReportTopPerformingCategoriesType])
@paginate
def list_in_report_top_performing_categories_types(request):
    return InReportTopPerformingCategoriesType.objects.all()


@router.get('/in_report_top_performing_categories_types/{id}', response=InReportTopPerformingCategoriesType)
def get_in_report_top_performing_categories_type(request, id: int):
    return get_object_or_404(InReportTopPerformingCategoriesType, id=id)


@router.post('/in_report_top_performing_categories_types', response=InReportTopPerformingCategoriesType)
def create_in_report_top_performing_categories_type(request, payload: InReportTopPerformingCategoriesTypeCreate):
    data = payload.dict()
    in_report_top_performing_categories_type = InReportTopPerformingCategoriesType.objects.create(**data)
    return in_report_top_performing_categories_type


@router.put('/in_report_top_performing_categories_types/{id}', response=InReportTopPerformingCategoriesType)
def update_in_report_top_performing_categories_type(request, id: int, payload: InReportTopPerformingCategoriesTypeUpdate):
    in_report_top_performing_categories_type = get_object_or_404(InReportTopPerformingCategoriesType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_top_performing_categories_type, attr, value)
    in_report_top_performing_categories_type.save()
    return in_report_top_performing_categories_type


@router.delete('/in_report_top_performing_categories_types/{id}')
def delete_in_report_top_performing_categories_type(request, id: int):
    in_report_top_performing_categories_type = get_object_or_404(InReportTopPerformingCategoriesType, id=id)
    in_report_top_performing_categories_type.delete()
    return {'success': True}


# ProductCategoryReportType endpoints
@router.get('/product_category_report_types', response=List[ProductCategoryReportType])
@paginate
def list_product_category_report_types(request):
    return ProductCategoryReportType.objects.all()


@router.get('/product_category_report_types/{id}', response=ProductCategoryReportType)
def get_product_category_report_type(request, id: int):
    return get_object_or_404(ProductCategoryReportType, id=id)


@router.post('/product_category_report_types', response=ProductCategoryReportType)
def create_product_category_report_type(request, payload: ProductCategoryReportTypeCreate):
    data = payload.dict()
    product_category_report_type = ProductCategoryReportType.objects.create(**data)
    return product_category_report_type


@router.put('/product_category_report_types/{id}', response=ProductCategoryReportType)
def update_product_category_report_type(request, id: int, payload: ProductCategoryReportTypeUpdate):
    product_category_report_type = get_object_or_404(ProductCategoryReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_category_report_type, attr, value)
    product_category_report_type.save()
    return product_category_report_type


@router.delete('/product_category_report_types/{id}')
def delete_product_category_report_type(request, id: int):
    product_category_report_type = get_object_or_404(ProductCategoryReportType, id=id)
    product_category_report_type.delete()
    return {'success': True}


# InReportMarketplacePaymentsSummaryType endpoints
@router.get('/in_report_marketplace_payments_summary_types', response=List[InReportMarketplacePaymentsSummaryType])
@paginate
def list_in_report_marketplace_payments_summary_types(request):
    return InReportMarketplacePaymentsSummaryType.objects.all()


@router.get('/in_report_marketplace_payments_summary_types/{id}', response=InReportMarketplacePaymentsSummaryType)
def get_in_report_marketplace_payments_summary_type(request, id: int):
    return get_object_or_404(InReportMarketplacePaymentsSummaryType, id=id)


@router.post('/in_report_marketplace_payments_summary_types', response=InReportMarketplacePaymentsSummaryType)
def create_in_report_marketplace_payments_summary_type(request, payload: InReportMarketplacePaymentsSummaryTypeCreate):
    data = payload.dict()
    in_report_marketplace_payments_summary_type = InReportMarketplacePaymentsSummaryType.objects.create(**data)
    return in_report_marketplace_payments_summary_type


@router.put('/in_report_marketplace_payments_summary_types/{id}', response=InReportMarketplacePaymentsSummaryType)
def update_in_report_marketplace_payments_summary_type(request, id: int, payload: InReportMarketplacePaymentsSummaryTypeUpdate):
    in_report_marketplace_payments_summary_type = get_object_or_404(InReportMarketplacePaymentsSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(in_report_marketplace_payments_summary_type, attr, value)
    in_report_marketplace_payments_summary_type.save()
    return in_report_marketplace_payments_summary_type


@router.delete('/in_report_marketplace_payments_summary_types/{id}')
def delete_in_report_marketplace_payments_summary_type(request, id: int):
    in_report_marketplace_payments_summary_type = get_object_or_404(InReportMarketplacePaymentsSummaryType, id=id)
    in_report_marketplace_payments_summary_type.delete()
    return {'success': True}


# AbstractPaymentsType endpoints
@router.get('/abstract_payments_types', response=List[AbstractPaymentsType])
@paginate
def list_abstract_payments_types(request):
    return AbstractPaymentsType.objects.all()


@router.get('/abstract_payments_types/{id}', response=AbstractPaymentsType)
def get_abstract_payments_type(request, id: int):
    return get_object_or_404(AbstractPaymentsType, id=id)


@router.post('/abstract_payments_types', response=AbstractPaymentsType)
def create_abstract_payments_type(request, payload: AbstractPaymentsTypeCreate):
    data = payload.dict()
    abstract_payments_type = AbstractPaymentsType.objects.create(**data)
    return abstract_payments_type


@router.put('/abstract_payments_types/{id}', response=AbstractPaymentsType)
def update_abstract_payments_type(request, id: int, payload: AbstractPaymentsTypeUpdate):
    abstract_payments_type = get_object_or_404(AbstractPaymentsType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(abstract_payments_type, attr, value)
    abstract_payments_type.save()
    return abstract_payments_type


@router.delete('/abstract_payments_types/{id}')
def delete_abstract_payments_type(request, id: int):
    abstract_payments_type = get_object_or_404(AbstractPaymentsType, id=id)
    abstract_payments_type.delete()
    return {'success': True}


# PaymentsDayReportType endpoints
@router.get('/payments_day_report_types', response=List[PaymentsDayReportType])
@paginate
def list_payments_day_report_types(request):
    return PaymentsDayReportType.objects.all()


@router.get('/payments_day_report_types/{id}', response=PaymentsDayReportType)
def get_payments_day_report_type(request, id: int):
    return get_object_or_404(PaymentsDayReportType, id=id)


@router.post('/payments_day_report_types', response=PaymentsDayReportType)
def create_payments_day_report_type(request, payload: PaymentsDayReportTypeCreate):
    data = payload.dict()
    payments_day_report_type = PaymentsDayReportType.objects.create(**data)
    return payments_day_report_type


@router.put('/payments_day_report_types/{id}', response=PaymentsDayReportType)
def update_payments_day_report_type(request, id: int, payload: PaymentsDayReportTypeUpdate):
    payments_day_report_type = get_object_or_404(PaymentsDayReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payments_day_report_type, attr, value)
    payments_day_report_type.save()
    return payments_day_report_type


@router.delete('/payments_day_report_types/{id}')
def delete_payments_day_report_type(request, id: int):
    payments_day_report_type = get_object_or_404(PaymentsDayReportType, id=id)
    payments_day_report_type.delete()
    return {'success': True}


# DashboardOrdersSummaryType endpoints
@router.get('/dashboard_orders_summary_types', response=List[DashboardOrdersSummaryType])
@paginate
def list_dashboard_orders_summary_types(request):
    return DashboardOrdersSummaryType.objects.all()


@router.get('/dashboard_orders_summary_types/{id}', response=DashboardOrdersSummaryType)
def get_dashboard_orders_summary_type(request, id: int):
    return get_object_or_404(DashboardOrdersSummaryType, id=id)


@router.post('/dashboard_orders_summary_types', response=DashboardOrdersSummaryType)
def create_dashboard_orders_summary_type(request, payload: DashboardOrdersSummaryTypeCreate):
    data = payload.dict()
    dashboard_orders_summary_type = DashboardOrdersSummaryType.objects.create(**data)
    return dashboard_orders_summary_type


@router.put('/dashboard_orders_summary_types/{id}', response=DashboardOrdersSummaryType)
def update_dashboard_orders_summary_type(request, id: int, payload: DashboardOrdersSummaryTypeUpdate):
    dashboard_orders_summary_type = get_object_or_404(DashboardOrdersSummaryType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(dashboard_orders_summary_type, attr, value)
    dashboard_orders_summary_type.save()
    return dashboard_orders_summary_type


@router.delete('/dashboard_orders_summary_types/{id}')
def delete_dashboard_orders_summary_type(request, id: int):
    dashboard_orders_summary_type = get_object_or_404(DashboardOrdersSummaryType, id=id)
    dashboard_orders_summary_type.delete()
    return {'success': True}


# OrderSummaryDeltaDataType endpoints
@router.get('/order_summary_delta_data_types', response=List[OrderSummaryDeltaDataType])
@paginate
def list_order_summary_delta_data_types(request):
    return OrderSummaryDeltaDataType.objects.all()


@router.get('/order_summary_delta_data_types/{id}', response=OrderSummaryDeltaDataType)
def get_order_summary_delta_data_type(request, id: int):
    return get_object_or_404(OrderSummaryDeltaDataType, id=id)


@router.post('/order_summary_delta_data_types', response=OrderSummaryDeltaDataType)
def create_order_summary_delta_data_type(request, payload: OrderSummaryDeltaDataTypeCreate):
    data = payload.dict()
    order_summary_delta_data_type = OrderSummaryDeltaDataType.objects.create(**data)
    return order_summary_delta_data_type


@router.put('/order_summary_delta_data_types/{id}', response=OrderSummaryDeltaDataType)
def update_order_summary_delta_data_type(request, id: int, payload: OrderSummaryDeltaDataTypeUpdate):
    order_summary_delta_data_type = get_object_or_404(OrderSummaryDeltaDataType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_summary_delta_data_type, attr, value)
    order_summary_delta_data_type.save()
    return order_summary_delta_data_type


@router.delete('/order_summary_delta_data_types/{id}')
def delete_order_summary_delta_data_type(request, id: int):
    order_summary_delta_data_type = get_object_or_404(OrderSummaryDeltaDataType, id=id)
    order_summary_delta_data_type.delete()
    return {'success': True}


# AbstractPercentReportType endpoints
@router.get('/abstract_percent_report_types', response=List[AbstractPercentReportType])
@paginate
def list_abstract_percent_report_types(request):
    return AbstractPercentReportType.objects.all()


@router.get('/abstract_percent_report_types/{id}', response=AbstractPercentReportType)
def get_abstract_percent_report_type(request, id: int):
    return get_object_or_404(AbstractPercentReportType, id=id)


@router.post('/abstract_percent_report_types', response=AbstractPercentReportType)
def create_abstract_percent_report_type(request, payload: AbstractPercentReportTypeCreate):
    data = payload.dict()
    abstract_percent_report_type = AbstractPercentReportType.objects.create(**data)
    return abstract_percent_report_type


@router.put('/abstract_percent_report_types/{id}', response=AbstractPercentReportType)
def update_abstract_percent_report_type(request, id: int, payload: AbstractPercentReportTypeUpdate):
    abstract_percent_report_type = get_object_or_404(AbstractPercentReportType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(abstract_percent_report_type, attr, value)
    abstract_percent_report_type.save()
    return abstract_percent_report_type


@router.delete('/abstract_percent_report_types/{id}')
def delete_abstract_percent_report_type(request, id: int):
    abstract_percent_report_type = get_object_or_404(AbstractPercentReportType, id=id)
    abstract_percent_report_type.delete()
    return {'success': True}


# DashboardTopSellerPerformanceType endpoints
@router.get('/dashboard_top_seller_performance_types', response=List[DashboardTopSellerPerformanceType])
@paginate
def list_dashboard_top_seller_performance_types(request):
    return DashboardTopSellerPerformanceType.objects.all()


@router.get('/dashboard_top_seller_performance_types/{id}', response=DashboardTopSellerPerformanceType)
def get_dashboard_top_seller_performance_type(request, id: int):
    return get_object_or_404(DashboardTopSellerPerformanceType, id=id)


@router.post('/dashboard_top_seller_performance_types', response=DashboardTopSellerPerformanceType)
def create_dashboard_top_seller_performance_type(request, payload: DashboardTopSellerPerformanceTypeCreate):
    data = payload.dict()
    dashboard_top_seller_performance_type = DashboardTopSellerPerformanceType.objects.create(**data)
    return dashboard_top_seller_performance_type


@router.put('/dashboard_top_seller_performance_types/{id}', response=DashboardTopSellerPerformanceType)
def update_dashboard_top_seller_performance_type(request, id: int, payload: DashboardTopSellerPerformanceTypeUpdate):
    dashboard_top_seller_performance_type = get_object_or_404(DashboardTopSellerPerformanceType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(dashboard_top_seller_performance_type, attr, value)
    dashboard_top_seller_performance_type.save()
    return dashboard_top_seller_performance_type


@router.delete('/dashboard_top_seller_performance_types/{id}')
def delete_dashboard_top_seller_performance_type(request, id: int):
    dashboard_top_seller_performance_type = get_object_or_404(DashboardTopSellerPerformanceType, id=id)
    dashboard_top_seller_performance_type.delete()
    return {'success': True}


# DashboardSellerOrderPerformanceType endpoints
@router.get('/dashboard_seller_order_performance_types', response=List[DashboardSellerOrderPerformanceType])
@paginate
def list_dashboard_seller_order_performance_types(request):
    return DashboardSellerOrderPerformanceType.objects.all()


@router.get('/dashboard_seller_order_performance_types/{id}', response=DashboardSellerOrderPerformanceType)
def get_dashboard_seller_order_performance_type(request, id: int):
    return get_object_or_404(DashboardSellerOrderPerformanceType, id=id)


@router.post('/dashboard_seller_order_performance_types', response=DashboardSellerOrderPerformanceType)
def create_dashboard_seller_order_performance_type(request, payload: DashboardSellerOrderPerformanceTypeCreate):
    data = payload.dict()
    dashboard_seller_order_performance_type = DashboardSellerOrderPerformanceType.objects.create(**data)
    return dashboard_seller_order_performance_type


@router.put('/dashboard_seller_order_performance_types/{id}', response=DashboardSellerOrderPerformanceType)
def update_dashboard_seller_order_performance_type(request, id: int, payload: DashboardSellerOrderPerformanceTypeUpdate):
    dashboard_seller_order_performance_type = get_object_or_404(DashboardSellerOrderPerformanceType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(dashboard_seller_order_performance_type, attr, value)
    dashboard_seller_order_performance_type.save()
    return dashboard_seller_order_performance_type


@router.delete('/dashboard_seller_order_performance_types/{id}')
def delete_dashboard_seller_order_performance_type(request, id: int):
    dashboard_seller_order_performance_type = get_object_or_404(DashboardSellerOrderPerformanceType, id=id)
    dashboard_seller_order_performance_type.delete()
    return {'success': True}


# DashboardGraphType endpoints
@router.get('/dashboard_graph_types', response=List[DashboardGraphType])
@paginate
def list_dashboard_graph_types(request):
    return DashboardGraphType.objects.all()


@router.get('/dashboard_graph_types/{id}', response=DashboardGraphType)
def get_dashboard_graph_type(request, id: int):
    return get_object_or_404(DashboardGraphType, id=id)


@router.post('/dashboard_graph_types', response=DashboardGraphType)
def create_dashboard_graph_type(request, payload: DashboardGraphTypeCreate):
    data = payload.dict()
    dashboard_graph_type = DashboardGraphType.objects.create(**data)
    return dashboard_graph_type


@router.put('/dashboard_graph_types/{id}', response=DashboardGraphType)
def update_dashboard_graph_type(request, id: int, payload: DashboardGraphTypeUpdate):
    dashboard_graph_type = get_object_or_404(DashboardGraphType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(dashboard_graph_type, attr, value)
    dashboard_graph_type.save()
    return dashboard_graph_type


@router.delete('/dashboard_graph_types/{id}')
def delete_dashboard_graph_type(request, id: int):
    dashboard_graph_type = get_object_or_404(DashboardGraphType, id=id)
    dashboard_graph_type.delete()
    return {'success': True}


# GraphDataType endpoints
@router.get('/graph_data_types', response=List[GraphDataType])
@paginate
def list_graph_data_types(request):
    return GraphDataType.objects.all()


@router.get('/graph_data_types/{id}', response=GraphDataType)
def get_graph_data_type(request, id: int):
    return get_object_or_404(GraphDataType, id=id)


@router.post('/graph_data_types', response=GraphDataType)
def create_graph_data_type(request, payload: GraphDataTypeCreate):
    data = payload.dict()
    graph_data_type = GraphDataType.objects.create(**data)
    return graph_data_type


@router.put('/graph_data_types/{id}', response=GraphDataType)
def update_graph_data_type(request, id: int, payload: GraphDataTypeUpdate):
    graph_data_type = get_object_or_404(GraphDataType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(graph_data_type, attr, value)
    graph_data_type.save()
    return graph_data_type


@router.delete('/graph_data_types/{id}')
def delete_graph_data_type(request, id: int):
    graph_data_type = get_object_or_404(GraphDataType, id=id)
    graph_data_type.delete()
    return {'success': True}


# FontCountableConnection endpoints
@router.get('/font_countable_connections', response=List[FontCountableConnection])
@paginate
def list_font_countable_connections(request):
    return FontCountableConnection.objects.all()


@router.get('/font_countable_connections/{id}', response=FontCountableConnection)
def get_font_countable_connection(request, id: int):
    return get_object_or_404(FontCountableConnection, id=id)


@router.post('/font_countable_connections', response=FontCountableConnection)
def create_font_countable_connection(request, payload: FontCountableConnectionCreate):
    data = payload.dict()
    font_countable_connection = FontCountableConnection.objects.create(**data)
    return font_countable_connection


@router.put('/font_countable_connections/{id}', response=FontCountableConnection)
def update_font_countable_connection(request, id: int, payload: FontCountableConnectionUpdate):
    font_countable_connection = get_object_or_404(FontCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(font_countable_connection, attr, value)
    font_countable_connection.save()
    return font_countable_connection


@router.delete('/font_countable_connections/{id}')
def delete_font_countable_connection(request, id: int):
    font_countable_connection = get_object_or_404(FontCountableConnection, id=id)
    font_countable_connection.delete()
    return {'success': True}


# FontCountableEdge endpoints
@router.get('/font_countable_edges', response=List[FontCountableEdge])
@paginate
def list_font_countable_edges(request):
    return FontCountableEdge.objects.all()


@router.get('/font_countable_edges/{id}', response=FontCountableEdge)
def get_font_countable_edge(request, id: int):
    return get_object_or_404(FontCountableEdge, id=id)


@router.post('/font_countable_edges', response=FontCountableEdge)
def create_font_countable_edge(request, payload: FontCountableEdgeCreate):
    data = payload.dict()
    font_countable_edge = FontCountableEdge.objects.create(**data)
    return font_countable_edge


@router.put('/font_countable_edges/{id}', response=FontCountableEdge)
def update_font_countable_edge(request, id: int, payload: FontCountableEdgeUpdate):
    font_countable_edge = get_object_or_404(FontCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(font_countable_edge, attr, value)
    font_countable_edge.save()
    return font_countable_edge


@router.delete('/font_countable_edges/{id}')
def delete_font_countable_edge(request, id: int):
    font_countable_edge = get_object_or_404(FontCountableEdge, id=id)
    font_countable_edge.delete()
    return {'success': True}


# JournalEntryCountableConnection endpoints
@router.get('/journal_entry_countable_connections', response=List[JournalEntryCountableConnection])
@paginate
def list_journal_entry_countable_connections(request):
    return JournalEntryCountableConnection.objects.all()


@router.get('/journal_entry_countable_connections/{id}', response=JournalEntryCountableConnection)
def get_journal_entry_countable_connection(request, id: int):
    return get_object_or_404(JournalEntryCountableConnection, id=id)


@router.post('/journal_entry_countable_connections', response=JournalEntryCountableConnection)
def create_journal_entry_countable_connection(request, payload: JournalEntryCountableConnectionCreate):
    data = payload.dict()
    journal_entry_countable_connection = JournalEntryCountableConnection.objects.create(**data)
    return journal_entry_countable_connection


@router.put('/journal_entry_countable_connections/{id}', response=JournalEntryCountableConnection)
def update_journal_entry_countable_connection(request, id: int, payload: JournalEntryCountableConnectionUpdate):
    journal_entry_countable_connection = get_object_or_404(JournalEntryCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(journal_entry_countable_connection, attr, value)
    journal_entry_countable_connection.save()
    return journal_entry_countable_connection


@router.delete('/journal_entry_countable_connections/{id}')
def delete_journal_entry_countable_connection(request, id: int):
    journal_entry_countable_connection = get_object_or_404(JournalEntryCountableConnection, id=id)
    journal_entry_countable_connection.delete()
    return {'success': True}


# JournalEntryCountableEdge endpoints
@router.get('/journal_entry_countable_edges', response=List[JournalEntryCountableEdge])
@paginate
def list_journal_entry_countable_edges(request):
    return JournalEntryCountableEdge.objects.all()


@router.get('/journal_entry_countable_edges/{id}', response=JournalEntryCountableEdge)
def get_journal_entry_countable_edge(request, id: int):
    return get_object_or_404(JournalEntryCountableEdge, id=id)


@router.post('/journal_entry_countable_edges', response=JournalEntryCountableEdge)
def create_journal_entry_countable_edge(request, payload: JournalEntryCountableEdgeCreate):
    data = payload.dict()
    journal_entry_countable_edge = JournalEntryCountableEdge.objects.create(**data)
    return journal_entry_countable_edge


@router.put('/journal_entry_countable_edges/{id}', response=JournalEntryCountableEdge)
def update_journal_entry_countable_edge(request, id: int, payload: JournalEntryCountableEdgeUpdate):
    journal_entry_countable_edge = get_object_or_404(JournalEntryCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(journal_entry_countable_edge, attr, value)
    journal_entry_countable_edge.save()
    return journal_entry_countable_edge


@router.delete('/journal_entry_countable_edges/{id}')
def delete_journal_entry_countable_edge(request, id: int):
    journal_entry_countable_edge = get_object_or_404(JournalEntryCountableEdge, id=id)
    journal_entry_countable_edge.delete()
    return {'success': True}


# JournalEntry endpoints
@router.get('/journal_entrys', response=List[JournalEntry])
@paginate
def list_journal_entrys(request):
    return JournalEntry.objects.all()


@router.get('/journal_entrys/{id}', response=JournalEntry)
def get_journal_entry(request, id: int):
    return get_object_or_404(JournalEntry, id=id)


@router.post('/journal_entrys', response=JournalEntry)
def create_journal_entry(request, payload: JournalEntryCreate):
    data = payload.dict()
    journal_entry = JournalEntry.objects.create(**data)
    return journal_entry


@router.put('/journal_entrys/{id}', response=JournalEntry)
def update_journal_entry(request, id: int, payload: JournalEntryUpdate):
    journal_entry = get_object_or_404(JournalEntry, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(journal_entry, attr, value)
    journal_entry.save()
    return journal_entry


@router.delete('/journal_entrys/{id}')
def delete_journal_entry(request, id: int):
    journal_entry = get_object_or_404(JournalEntry, id=id)
    journal_entry.delete()
    return {'success': True}


# LedgerEntry endpoints
@router.get('/ledger_entrys', response=List[LedgerEntry])
@paginate
def list_ledger_entrys(request):
    return LedgerEntry.objects.all()


@router.get('/ledger_entrys/{id}', response=LedgerEntry)
def get_ledger_entry(request, id: int):
    return get_object_or_404(LedgerEntry, id=id)


@router.post('/ledger_entrys', response=LedgerEntry)
def create_ledger_entry(request, payload: LedgerEntryCreate):
    data = payload.dict()
    ledger_entry = LedgerEntry.objects.create(**data)
    return ledger_entry


@router.put('/ledger_entrys/{id}', response=LedgerEntry)
def update_ledger_entry(request, id: int, payload: LedgerEntryUpdate):
    ledger_entry = get_object_or_404(LedgerEntry, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(ledger_entry, attr, value)
    ledger_entry.save()
    return ledger_entry


@router.delete('/ledger_entrys/{id}')
def delete_ledger_entry(request, id: int):
    ledger_entry = get_object_or_404(LedgerEntry, id=id)
    ledger_entry.delete()
    return {'success': True}


# Ledger endpoints
@router.get('/ledgers', response=List[Ledger])
@paginate
def list_ledgers(request):
    return Ledger.objects.all()


@router.get('/ledgers/{id}', response=Ledger)
def get_ledger(request, id: int):
    return get_object_or_404(Ledger, id=id)


@router.post('/ledgers', response=Ledger)
def create_ledger(request, payload: LedgerCreate):
    data = payload.dict()
    ledger = Ledger.objects.create(**data)
    return ledger


@router.put('/ledgers/{id}', response=Ledger)
def update_ledger(request, id: int, payload: LedgerUpdate):
    ledger = get_object_or_404(Ledger, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(ledger, attr, value)
    ledger.save()
    return ledger


@router.delete('/ledgers/{id}')
def delete_ledger(request, id: int):
    ledger = get_object_or_404(Ledger, id=id)
    ledger.delete()
    return {'success': True}


# LedgerCountableConnection endpoints
@router.get('/ledger_countable_connections', response=List[LedgerCountableConnection])
@paginate
def list_ledger_countable_connections(request):
    return LedgerCountableConnection.objects.all()


@router.get('/ledger_countable_connections/{id}', response=LedgerCountableConnection)
def get_ledger_countable_connection(request, id: int):
    return get_object_or_404(LedgerCountableConnection, id=id)


@router.post('/ledger_countable_connections', response=LedgerCountableConnection)
def create_ledger_countable_connection(request, payload: LedgerCountableConnectionCreate):
    data = payload.dict()
    ledger_countable_connection = LedgerCountableConnection.objects.create(**data)
    return ledger_countable_connection


@router.put('/ledger_countable_connections/{id}', response=LedgerCountableConnection)
def update_ledger_countable_connection(request, id: int, payload: LedgerCountableConnectionUpdate):
    ledger_countable_connection = get_object_or_404(LedgerCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(ledger_countable_connection, attr, value)
    ledger_countable_connection.save()
    return ledger_countable_connection


@router.delete('/ledger_countable_connections/{id}')
def delete_ledger_countable_connection(request, id: int):
    ledger_countable_connection = get_object_or_404(LedgerCountableConnection, id=id)
    ledger_countable_connection.delete()
    return {'success': True}


# LedgerCountableEdge endpoints
@router.get('/ledger_countable_edges', response=List[LedgerCountableEdge])
@paginate
def list_ledger_countable_edges(request):
    return LedgerCountableEdge.objects.all()


@router.get('/ledger_countable_edges/{id}', response=LedgerCountableEdge)
def get_ledger_countable_edge(request, id: int):
    return get_object_or_404(LedgerCountableEdge, id=id)


@router.post('/ledger_countable_edges', response=LedgerCountableEdge)
def create_ledger_countable_edge(request, payload: LedgerCountableEdgeCreate):
    data = payload.dict()
    ledger_countable_edge = LedgerCountableEdge.objects.create(**data)
    return ledger_countable_edge


@router.put('/ledger_countable_edges/{id}', response=LedgerCountableEdge)
def update_ledger_countable_edge(request, id: int, payload: LedgerCountableEdgeUpdate):
    ledger_countable_edge = get_object_or_404(LedgerCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(ledger_countable_edge, attr, value)
    ledger_countable_edge.save()
    return ledger_countable_edge


@router.delete('/ledger_countable_edges/{id}')
def delete_ledger_countable_edge(request, id: int):
    ledger_countable_edge = get_object_or_404(LedgerCountableEdge, id=id)
    ledger_countable_edge.delete()
    return {'success': True}


# SaleCountableConnection endpoints
@router.get('/sale_countable_connections', response=List[SaleCountableConnection])
@paginate
def list_sale_countable_connections(request):
    return SaleCountableConnection.objects.all()


@router.get('/sale_countable_connections/{id}', response=SaleCountableConnection)
def get_sale_countable_connection(request, id: int):
    return get_object_or_404(SaleCountableConnection, id=id)


@router.post('/sale_countable_connections', response=SaleCountableConnection)
def create_sale_countable_connection(request, payload: SaleCountableConnectionCreate):
    data = payload.dict()
    sale_countable_connection = SaleCountableConnection.objects.create(**data)
    return sale_countable_connection


@router.put('/sale_countable_connections/{id}', response=SaleCountableConnection)
def update_sale_countable_connection(request, id: int, payload: SaleCountableConnectionUpdate):
    sale_countable_connection = get_object_or_404(SaleCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_countable_connection, attr, value)
    sale_countable_connection.save()
    return sale_countable_connection


@router.delete('/sale_countable_connections/{id}')
def delete_sale_countable_connection(request, id: int):
    sale_countable_connection = get_object_or_404(SaleCountableConnection, id=id)
    sale_countable_connection.delete()
    return {'success': True}


# SaleCountableEdge endpoints
@router.get('/sale_countable_edges', response=List[SaleCountableEdge])
@paginate
def list_sale_countable_edges(request):
    return SaleCountableEdge.objects.all()


@router.get('/sale_countable_edges/{id}', response=SaleCountableEdge)
def get_sale_countable_edge(request, id: int):
    return get_object_or_404(SaleCountableEdge, id=id)


@router.post('/sale_countable_edges', response=SaleCountableEdge)
def create_sale_countable_edge(request, payload: SaleCountableEdgeCreate):
    data = payload.dict()
    sale_countable_edge = SaleCountableEdge.objects.create(**data)
    return sale_countable_edge


@router.put('/sale_countable_edges/{id}', response=SaleCountableEdge)
def update_sale_countable_edge(request, id: int, payload: SaleCountableEdgeUpdate):
    sale_countable_edge = get_object_or_404(SaleCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_countable_edge, attr, value)
    sale_countable_edge.save()
    return sale_countable_edge


@router.delete('/sale_countable_edges/{id}')
def delete_sale_countable_edge(request, id: int):
    sale_countable_edge = get_object_or_404(SaleCountableEdge, id=id)
    sale_countable_edge.delete()
    return {'success': True}


# VoucherCountableConnection endpoints
@router.get('/voucher_countable_connections', response=List[VoucherCountableConnection])
@paginate
def list_voucher_countable_connections(request):
    return VoucherCountableConnection.objects.all()


@router.get('/voucher_countable_connections/{id}', response=VoucherCountableConnection)
def get_voucher_countable_connection(request, id: int):
    return get_object_or_404(VoucherCountableConnection, id=id)


@router.post('/voucher_countable_connections', response=VoucherCountableConnection)
def create_voucher_countable_connection(request, payload: VoucherCountableConnectionCreate):
    data = payload.dict()
    voucher_countable_connection = VoucherCountableConnection.objects.create(**data)
    return voucher_countable_connection


@router.put('/voucher_countable_connections/{id}', response=VoucherCountableConnection)
def update_voucher_countable_connection(request, id: int, payload: VoucherCountableConnectionUpdate):
    voucher_countable_connection = get_object_or_404(VoucherCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_countable_connection, attr, value)
    voucher_countable_connection.save()
    return voucher_countable_connection


@router.delete('/voucher_countable_connections/{id}')
def delete_voucher_countable_connection(request, id: int):
    voucher_countable_connection = get_object_or_404(VoucherCountableConnection, id=id)
    voucher_countable_connection.delete()
    return {'success': True}


# VoucherCountableEdge endpoints
@router.get('/voucher_countable_edges', response=List[VoucherCountableEdge])
@paginate
def list_voucher_countable_edges(request):
    return VoucherCountableEdge.objects.all()


@router.get('/voucher_countable_edges/{id}', response=VoucherCountableEdge)
def get_voucher_countable_edge(request, id: int):
    return get_object_or_404(VoucherCountableEdge, id=id)


@router.post('/voucher_countable_edges', response=VoucherCountableEdge)
def create_voucher_countable_edge(request, payload: VoucherCountableEdgeCreate):
    data = payload.dict()
    voucher_countable_edge = VoucherCountableEdge.objects.create(**data)
    return voucher_countable_edge


@router.put('/voucher_countable_edges/{id}', response=VoucherCountableEdge)
def update_voucher_countable_edge(request, id: int, payload: VoucherCountableEdgeUpdate):
    voucher_countable_edge = get_object_or_404(VoucherCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_countable_edge, attr, value)
    voucher_countable_edge.save()
    return voucher_countable_edge


@router.delete('/voucher_countable_edges/{id}')
def delete_voucher_countable_edge(request, id: int):
    voucher_countable_edge = get_object_or_404(VoucherCountableEdge, id=id)
    voucher_countable_edge.delete()
    return {'success': True}


# DesignerDataType endpoints
@router.get('/designer_data_types', response=List[DesignerDataType])
@paginate
def list_designer_data_types(request):
    return DesignerDataType.objects.all()


@router.get('/designer_data_types/{id}', response=DesignerDataType)
def get_designer_data_type(request, id: int):
    return get_object_or_404(DesignerDataType, id=id)


@router.post('/designer_data_types', response=DesignerDataType)
def create_designer_data_type(request, payload: DesignerDataTypeCreate):
    data = payload.dict()
    designer_data_type = DesignerDataType.objects.create(**data)
    return designer_data_type


@router.put('/designer_data_types/{id}', response=DesignerDataType)
def update_designer_data_type(request, id: int, payload: DesignerDataTypeUpdate):
    designer_data_type = get_object_or_404(DesignerDataType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(designer_data_type, attr, value)
    designer_data_type.save()
    return designer_data_type


@router.delete('/designer_data_types/{id}')
def delete_designer_data_type(request, id: int):
    designer_data_type = get_object_or_404(DesignerDataType, id=id)
    designer_data_type.delete()
    return {'success': True}


# ExportFile endpoints
@router.get('/export_files', response=List[ExportFile])
@paginate
def list_export_files(request):
    return ExportFile.objects.all()


@router.get('/export_files/{id}', response=ExportFile)
def get_export_file(request, id: int):
    return get_object_or_404(ExportFile, id=id)


@router.post('/export_files', response=ExportFile)
def create_export_file(request, payload: ExportFileCreate):
    data = payload.dict()
    export_file = ExportFile.objects.create(**data)
    return export_file


@router.put('/export_files/{id}', response=ExportFile)
def update_export_file(request, id: int, payload: ExportFileUpdate):
    export_file = get_object_or_404(ExportFile, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(export_file, attr, value)
    export_file.save()
    return export_file


@router.delete('/export_files/{id}')
def delete_export_file(request, id: int):
    export_file = get_object_or_404(ExportFile, id=id)
    export_file.delete()
    return {'success': True}


# ExportEvent endpoints
@router.get('/export_events', response=List[ExportEvent])
@paginate
def list_export_events(request):
    return ExportEvent.objects.all()


@router.get('/export_events/{id}', response=ExportEvent)
def get_export_event(request, id: int):
    return get_object_or_404(ExportEvent, id=id)


@router.post('/export_events', response=ExportEvent)
def create_export_event(request, payload: ExportEventCreate):
    data = payload.dict()
    export_event = ExportEvent.objects.create(**data)
    return export_event


@router.put('/export_events/{id}', response=ExportEvent)
def update_export_event(request, id: int, payload: ExportEventUpdate):
    export_event = get_object_or_404(ExportEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(export_event, attr, value)
    export_event.save()
    return export_event


@router.delete('/export_events/{id}')
def delete_export_event(request, id: int):
    export_event = get_object_or_404(ExportEvent, id=id)
    export_event.delete()
    return {'success': True}


# ExportFileCountableConnection endpoints
@router.get('/export_file_countable_connections', response=List[ExportFileCountableConnection])
@paginate
def list_export_file_countable_connections(request):
    return ExportFileCountableConnection.objects.all()


@router.get('/export_file_countable_connections/{id}', response=ExportFileCountableConnection)
def get_export_file_countable_connection(request, id: int):
    return get_object_or_404(ExportFileCountableConnection, id=id)


@router.post('/export_file_countable_connections', response=ExportFileCountableConnection)
def create_export_file_countable_connection(request, payload: ExportFileCountableConnectionCreate):
    data = payload.dict()
    export_file_countable_connection = ExportFileCountableConnection.objects.create(**data)
    return export_file_countable_connection


@router.put('/export_file_countable_connections/{id}', response=ExportFileCountableConnection)
def update_export_file_countable_connection(request, id: int, payload: ExportFileCountableConnectionUpdate):
    export_file_countable_connection = get_object_or_404(ExportFileCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(export_file_countable_connection, attr, value)
    export_file_countable_connection.save()
    return export_file_countable_connection


@router.delete('/export_file_countable_connections/{id}')
def delete_export_file_countable_connection(request, id: int):
    export_file_countable_connection = get_object_or_404(ExportFileCountableConnection, id=id)
    export_file_countable_connection.delete()
    return {'success': True}


# ExportFileCountableEdge endpoints
@router.get('/export_file_countable_edges', response=List[ExportFileCountableEdge])
@paginate
def list_export_file_countable_edges(request):
    return ExportFileCountableEdge.objects.all()


@router.get('/export_file_countable_edges/{id}', response=ExportFileCountableEdge)
def get_export_file_countable_edge(request, id: int):
    return get_object_or_404(ExportFileCountableEdge, id=id)


@router.post('/export_file_countable_edges', response=ExportFileCountableEdge)
def create_export_file_countable_edge(request, payload: ExportFileCountableEdgeCreate):
    data = payload.dict()
    export_file_countable_edge = ExportFileCountableEdge.objects.create(**data)
    return export_file_countable_edge


@router.put('/export_file_countable_edges/{id}', response=ExportFileCountableEdge)
def update_export_file_countable_edge(request, id: int, payload: ExportFileCountableEdgeUpdate):
    export_file_countable_edge = get_object_or_404(ExportFileCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(export_file_countable_edge, attr, value)
    export_file_countable_edge.save()
    return export_file_countable_edge


@router.delete('/export_file_countable_edges/{id}')
def delete_export_file_countable_edge(request, id: int):
    export_file_countable_edge = get_object_or_404(ExportFileCountableEdge, id=id)
    export_file_countable_edge.delete()
    return {'success': True}


# CheckoutCountableConnection endpoints
@router.get('/checkout_countable_connections', response=List[CheckoutCountableConnection])
@paginate
def list_checkout_countable_connections(request):
    return CheckoutCountableConnection.objects.all()


@router.get('/checkout_countable_connections/{id}', response=CheckoutCountableConnection)
def get_checkout_countable_connection(request, id: int):
    return get_object_or_404(CheckoutCountableConnection, id=id)


@router.post('/checkout_countable_connections', response=CheckoutCountableConnection)
def create_checkout_countable_connection(request, payload: CheckoutCountableConnectionCreate):
    data = payload.dict()
    checkout_countable_connection = CheckoutCountableConnection.objects.create(**data)
    return checkout_countable_connection


@router.put('/checkout_countable_connections/{id}', response=CheckoutCountableConnection)
def update_checkout_countable_connection(request, id: int, payload: CheckoutCountableConnectionUpdate):
    checkout_countable_connection = get_object_or_404(CheckoutCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_countable_connection, attr, value)
    checkout_countable_connection.save()
    return checkout_countable_connection


@router.delete('/checkout_countable_connections/{id}')
def delete_checkout_countable_connection(request, id: int):
    checkout_countable_connection = get_object_or_404(CheckoutCountableConnection, id=id)
    checkout_countable_connection.delete()
    return {'success': True}


# CheckoutCountableEdge endpoints
@router.get('/checkout_countable_edges', response=List[CheckoutCountableEdge])
@paginate
def list_checkout_countable_edges(request):
    return CheckoutCountableEdge.objects.all()


@router.get('/checkout_countable_edges/{id}', response=CheckoutCountableEdge)
def get_checkout_countable_edge(request, id: int):
    return get_object_or_404(CheckoutCountableEdge, id=id)


@router.post('/checkout_countable_edges', response=CheckoutCountableEdge)
def create_checkout_countable_edge(request, payload: CheckoutCountableEdgeCreate):
    data = payload.dict()
    checkout_countable_edge = CheckoutCountableEdge.objects.create(**data)
    return checkout_countable_edge


@router.put('/checkout_countable_edges/{id}', response=CheckoutCountableEdge)
def update_checkout_countable_edge(request, id: int, payload: CheckoutCountableEdgeUpdate):
    checkout_countable_edge = get_object_or_404(CheckoutCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_countable_edge, attr, value)
    checkout_countable_edge.save()
    return checkout_countable_edge


@router.delete('/checkout_countable_edges/{id}')
def delete_checkout_countable_edge(request, id: int):
    checkout_countable_edge = get_object_or_404(CheckoutCountableEdge, id=id)
    checkout_countable_edge.delete()
    return {'success': True}


# CheckoutLineCountableConnection endpoints
@router.get('/checkout_line_countable_connections', response=List[CheckoutLineCountableConnection])
@paginate
def list_checkout_line_countable_connections(request):
    return CheckoutLineCountableConnection.objects.all()


@router.get('/checkout_line_countable_connections/{id}', response=CheckoutLineCountableConnection)
def get_checkout_line_countable_connection(request, id: int):
    return get_object_or_404(CheckoutLineCountableConnection, id=id)


@router.post('/checkout_line_countable_connections', response=CheckoutLineCountableConnection)
def create_checkout_line_countable_connection(request, payload: CheckoutLineCountableConnectionCreate):
    data = payload.dict()
    checkout_line_countable_connection = CheckoutLineCountableConnection.objects.create(**data)
    return checkout_line_countable_connection


@router.put('/checkout_line_countable_connections/{id}', response=CheckoutLineCountableConnection)
def update_checkout_line_countable_connection(request, id: int, payload: CheckoutLineCountableConnectionUpdate):
    checkout_line_countable_connection = get_object_or_404(CheckoutLineCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_line_countable_connection, attr, value)
    checkout_line_countable_connection.save()
    return checkout_line_countable_connection


@router.delete('/checkout_line_countable_connections/{id}')
def delete_checkout_line_countable_connection(request, id: int):
    checkout_line_countable_connection = get_object_or_404(CheckoutLineCountableConnection, id=id)
    checkout_line_countable_connection.delete()
    return {'success': True}


# CheckoutLineCountableEdge endpoints
@router.get('/checkout_line_countable_edges', response=List[CheckoutLineCountableEdge])
@paginate
def list_checkout_line_countable_edges(request):
    return CheckoutLineCountableEdge.objects.all()


@router.get('/checkout_line_countable_edges/{id}', response=CheckoutLineCountableEdge)
def get_checkout_line_countable_edge(request, id: int):
    return get_object_or_404(CheckoutLineCountableEdge, id=id)


@router.post('/checkout_line_countable_edges', response=CheckoutLineCountableEdge)
def create_checkout_line_countable_edge(request, payload: CheckoutLineCountableEdgeCreate):
    data = payload.dict()
    checkout_line_countable_edge = CheckoutLineCountableEdge.objects.create(**data)
    return checkout_line_countable_edge


@router.put('/checkout_line_countable_edges/{id}', response=CheckoutLineCountableEdge)
def update_checkout_line_countable_edge(request, id: int, payload: CheckoutLineCountableEdgeUpdate):
    checkout_line_countable_edge = get_object_or_404(CheckoutLineCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_line_countable_edge, attr, value)
    checkout_line_countable_edge.save()
    return checkout_line_countable_edge


@router.delete('/checkout_line_countable_edges/{id}')
def delete_checkout_line_countable_edge(request, id: int):
    checkout_line_countable_edge = get_object_or_404(CheckoutLineCountableEdge, id=id)
    checkout_line_countable_edge.delete()
    return {'success': True}


# CustomFieldTemplate endpoints
@router.get('/custom_field_templates', response=List[CustomFieldTemplate])
@paginate
def list_custom_field_templates(request):
    return CustomFieldTemplate.objects.all()


@router.get('/custom_field_templates/{id}', response=CustomFieldTemplate)
def get_custom_field_template(request, id: int):
    return get_object_or_404(CustomFieldTemplate, id=id)


@router.post('/custom_field_templates', response=CustomFieldTemplate)
def create_custom_field_template(request, payload: CustomFieldTemplateCreate):
    data = payload.dict()
    custom_field_template = CustomFieldTemplate.objects.create(**data)
    return custom_field_template


@router.put('/custom_field_templates/{id}', response=CustomFieldTemplate)
def update_custom_field_template(request, id: int, payload: CustomFieldTemplateUpdate):
    custom_field_template = get_object_or_404(CustomFieldTemplate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_field_template, attr, value)
    custom_field_template.save()
    return custom_field_template


@router.delete('/custom_field_templates/{id}')
def delete_custom_field_template(request, id: int):
    custom_field_template = get_object_or_404(CustomFieldTemplate, id=id)
    custom_field_template.delete()
    return {'success': True}


# AppInstallation endpoints
@router.get('/app_installations', response=List[AppInstallation])
@paginate
def list_app_installations(request):
    return AppInstallation.objects.all()


@router.get('/app_installations/{id}', response=AppInstallation)
def get_app_installation(request, id: int):
    return get_object_or_404(AppInstallation, id=id)


@router.post('/app_installations', response=AppInstallation)
def create_app_installation(request, payload: AppInstallationCreate):
    data = payload.dict()
    app_installation = AppInstallation.objects.create(**data)
    return app_installation


@router.put('/app_installations/{id}', response=AppInstallation)
def update_app_installation(request, id: int, payload: AppInstallationUpdate):
    app_installation = get_object_or_404(AppInstallation, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_installation, attr, value)
    app_installation.save()
    return app_installation


@router.delete('/app_installations/{id}')
def delete_app_installation(request, id: int):
    app_installation = get_object_or_404(AppInstallation, id=id)
    app_installation.delete()
    return {'success': True}


# AppCountableConnection endpoints
@router.get('/app_countable_connections', response=List[AppCountableConnection])
@paginate
def list_app_countable_connections(request):
    return AppCountableConnection.objects.all()


@router.get('/app_countable_connections/{id}', response=AppCountableConnection)
def get_app_countable_connection(request, id: int):
    return get_object_or_404(AppCountableConnection, id=id)


@router.post('/app_countable_connections', response=AppCountableConnection)
def create_app_countable_connection(request, payload: AppCountableConnectionCreate):
    data = payload.dict()
    app_countable_connection = AppCountableConnection.objects.create(**data)
    return app_countable_connection


@router.put('/app_countable_connections/{id}', response=AppCountableConnection)
def update_app_countable_connection(request, id: int, payload: AppCountableConnectionUpdate):
    app_countable_connection = get_object_or_404(AppCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_countable_connection, attr, value)
    app_countable_connection.save()
    return app_countable_connection


@router.delete('/app_countable_connections/{id}')
def delete_app_countable_connection(request, id: int):
    app_countable_connection = get_object_or_404(AppCountableConnection, id=id)
    app_countable_connection.delete()
    return {'success': True}


# AppCountableEdge endpoints
@router.get('/app_countable_edges', response=List[AppCountableEdge])
@paginate
def list_app_countable_edges(request):
    return AppCountableEdge.objects.all()


@router.get('/app_countable_edges/{id}', response=AppCountableEdge)
def get_app_countable_edge(request, id: int):
    return get_object_or_404(AppCountableEdge, id=id)


@router.post('/app_countable_edges', response=AppCountableEdge)
def create_app_countable_edge(request, payload: AppCountableEdgeCreate):
    data = payload.dict()
    app_countable_edge = AppCountableEdge.objects.create(**data)
    return app_countable_edge


@router.put('/app_countable_edges/{id}', response=AppCountableEdge)
def update_app_countable_edge(request, id: int, payload: AppCountableEdgeUpdate):
    app_countable_edge = get_object_or_404(AppCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_countable_edge, attr, value)
    app_countable_edge.save()
    return app_countable_edge


@router.delete('/app_countable_edges/{id}')
def delete_app_countable_edge(request, id: int):
    app_countable_edge = get_object_or_404(AppCountableEdge, id=id)
    app_countable_edge.delete()
    return {'success': True}


# AddressValidationData endpoints
@router.get('/address_validation_datas', response=List[AddressValidationData])
@paginate
def list_address_validation_datas(request):
    return AddressValidationData.objects.all()


@router.get('/address_validation_datas/{id}', response=AddressValidationData)
def get_address_validation_data(request, id: int):
    return get_object_or_404(AddressValidationData, id=id)


@router.post('/address_validation_datas', response=AddressValidationData)
def create_address_validation_data(request, payload: AddressValidationDataCreate):
    data = payload.dict()
    address_validation_data = AddressValidationData.objects.create(**data)
    return address_validation_data


@router.put('/address_validation_datas/{id}', response=AddressValidationData)
def update_address_validation_data(request, id: int, payload: AddressValidationDataUpdate):
    address_validation_data = get_object_or_404(AddressValidationData, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_validation_data, attr, value)
    address_validation_data.save()
    return address_validation_data


@router.delete('/address_validation_datas/{id}')
def delete_address_validation_data(request, id: int):
    address_validation_data = get_object_or_404(AddressValidationData, id=id)
    address_validation_data.delete()
    return {'success': True}


# ChoiceValue endpoints
@router.get('/choice_values', response=List[ChoiceValue])
@paginate
def list_choice_values(request):
    return ChoiceValue.objects.all()


@router.get('/choice_values/{id}', response=ChoiceValue)
def get_choice_value(request, id: int):
    return get_object_or_404(ChoiceValue, id=id)


@router.post('/choice_values', response=ChoiceValue)
def create_choice_value(request, payload: ChoiceValueCreate):
    data = payload.dict()
    choice_value = ChoiceValue.objects.create(**data)
    return choice_value


@router.put('/choice_values/{id}', response=ChoiceValue)
def update_choice_value(request, id: int, payload: ChoiceValueUpdate):
    choice_value = get_object_or_404(ChoiceValue, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(choice_value, attr, value)
    choice_value.save()
    return choice_value


@router.delete('/choice_values/{id}')
def delete_choice_value(request, id: int):
    choice_value = get_object_or_404(ChoiceValue, id=id)
    choice_value.delete()
    return {'success': True}


# GroupCountableConnection endpoints
@router.get('/group_countable_connections', response=List[GroupCountableConnection])
@paginate
def list_group_countable_connections(request):
    return GroupCountableConnection.objects.all()


@router.get('/group_countable_connections/{id}', response=GroupCountableConnection)
def get_group_countable_connection(request, id: int):
    return get_object_or_404(GroupCountableConnection, id=id)


@router.post('/group_countable_connections', response=GroupCountableConnection)
def create_group_countable_connection(request, payload: GroupCountableConnectionCreate):
    data = payload.dict()
    group_countable_connection = GroupCountableConnection.objects.create(**data)
    return group_countable_connection


@router.put('/group_countable_connections/{id}', response=GroupCountableConnection)
def update_group_countable_connection(request, id: int, payload: GroupCountableConnectionUpdate):
    group_countable_connection = get_object_or_404(GroupCountableConnection, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(group_countable_connection, attr, value)
    group_countable_connection.save()
    return group_countable_connection


@router.delete('/group_countable_connections/{id}')
def delete_group_countable_connection(request, id: int):
    group_countable_connection = get_object_or_404(GroupCountableConnection, id=id)
    group_countable_connection.delete()
    return {'success': True}


# GroupCountableEdge endpoints
@router.get('/group_countable_edges', response=List[GroupCountableEdge])
@paginate
def list_group_countable_edges(request):
    return GroupCountableEdge.objects.all()


@router.get('/group_countable_edges/{id}', response=GroupCountableEdge)
def get_group_countable_edge(request, id: int):
    return get_object_or_404(GroupCountableEdge, id=id)


@router.post('/group_countable_edges', response=GroupCountableEdge)
def create_group_countable_edge(request, payload: GroupCountableEdgeCreate):
    data = payload.dict()
    group_countable_edge = GroupCountableEdge.objects.create(**data)
    return group_countable_edge


@router.put('/group_countable_edges/{id}', response=GroupCountableEdge)
def update_group_countable_edge(request, id: int, payload: GroupCountableEdgeUpdate):
    group_countable_edge = get_object_or_404(GroupCountableEdge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(group_countable_edge, attr, value)
    group_countable_edge.save()
    return group_countable_edge


@router.delete('/group_countable_edges/{id}')
def delete_group_countable_edge(request, id: int):
    group_countable_edge = get_object_or_404(GroupCountableEdge, id=id)
    group_countable_edge.delete()
    return {'success': True}


# EmailTemplateUpdate endpoints
@router.get('/email_template_updates', response=List[EmailTemplateUpdate])
@paginate
def list_email_template_updates(request):
    return EmailTemplateUpdate.objects.all()


@router.get('/email_template_updates/{id}', response=EmailTemplateUpdate)
def get_email_template_update(request, id: int):
    return get_object_or_404(EmailTemplateUpdate, id=id)


@router.post('/email_template_updates', response=EmailTemplateUpdate)
def create_email_template_update(request, payload: EmailTemplateUpdateCreate):
    data = payload.dict()
    email_template_update = EmailTemplateUpdate.objects.create(**data)
    return email_template_update


@router.put('/email_template_updates/{id}', response=EmailTemplateUpdate)
def update_email_template_update(request, id: int, payload: EmailTemplateUpdateUpdate):
    email_template_update = get_object_or_404(EmailTemplateUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_template_update, attr, value)
    email_template_update.save()
    return email_template_update


@router.delete('/email_template_updates/{id}')
def delete_email_template_update(request, id: int):
    email_template_update = get_object_or_404(EmailTemplateUpdate, id=id)
    email_template_update.delete()
    return {'success': True}


# NotificationError endpoints
@router.get('/notification_errors', response=List[NotificationError])
@paginate
def list_notification_errors(request):
    return NotificationError.objects.all()


@router.get('/notification_errors/{id}', response=NotificationError)
def get_notification_error(request, id: int):
    return get_object_or_404(NotificationError, id=id)


@router.post('/notification_errors', response=NotificationError)
def create_notification_error(request, payload: NotificationErrorCreate):
    data = payload.dict()
    notification_error = NotificationError.objects.create(**data)
    return notification_error


@router.put('/notification_errors/{id}', response=NotificationError)
def update_notification_error(request, id: int, payload: NotificationErrorUpdate):
    notification_error = get_object_or_404(NotificationError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(notification_error, attr, value)
    notification_error.save()
    return notification_error


@router.delete('/notification_errors/{id}')
def delete_notification_error(request, id: int):
    notification_error = get_object_or_404(NotificationError, id=id)
    notification_error.delete()
    return {'success': True}


# TenantUpdate endpoints
@router.get('/tenant_updates', response=List[TenantUpdate])
@paginate
def list_tenant_updates(request):
    return TenantUpdate.objects.all()


@router.get('/tenant_updates/{id}', response=TenantUpdate)
def get_tenant_update(request, id: int):
    return get_object_or_404(TenantUpdate, id=id)


@router.post('/tenant_updates', response=TenantUpdate)
def create_tenant_update(request, payload: TenantUpdateCreate):
    data = payload.dict()
    tenant_update = TenantUpdate.objects.create(**data)
    return tenant_update


@router.put('/tenant_updates/{id}', response=TenantUpdate)
def update_tenant_update(request, id: int, payload: TenantUpdateUpdate):
    tenant_update = get_object_or_404(TenantUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tenant_update, attr, value)
    tenant_update.save()
    return tenant_update


@router.delete('/tenant_updates/{id}')
def delete_tenant_update(request, id: int):
    tenant_update = get_object_or_404(TenantUpdate, id=id)
    tenant_update.delete()
    return {'success': True}


# TenantError endpoints
@router.get('/tenant_errors', response=List[TenantError])
@paginate
def list_tenant_errors(request):
    return TenantError.objects.all()


@router.get('/tenant_errors/{id}', response=TenantError)
def get_tenant_error(request, id: int):
    return get_object_or_404(TenantError, id=id)


@router.post('/tenant_errors', response=TenantError)
def create_tenant_error(request, payload: TenantErrorCreate):
    data = payload.dict()
    tenant_error = TenantError.objects.create(**data)
    return tenant_error


@router.put('/tenant_errors/{id}', response=TenantError)
def update_tenant_error(request, id: int, payload: TenantErrorUpdate):
    tenant_error = get_object_or_404(TenantError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(tenant_error, attr, value)
    tenant_error.save()
    return tenant_error


@router.delete('/tenant_errors/{id}')
def delete_tenant_error(request, id: int):
    tenant_error = get_object_or_404(TenantError, id=id)
    tenant_error.delete()
    return {'success': True}


# DocumentAdd endpoints
@router.get('/document_adds', response=List[DocumentAdd])
@paginate
def list_document_adds(request):
    return DocumentAdd.objects.all()


@router.get('/document_adds/{id}', response=DocumentAdd)
def get_document_add(request, id: int):
    return get_object_or_404(DocumentAdd, id=id)


@router.post('/document_adds', response=DocumentAdd)
def create_document_add(request, payload: DocumentAddCreate):
    data = payload.dict()
    document_add = DocumentAdd.objects.create(**data)
    return document_add


@router.put('/document_adds/{id}', response=DocumentAdd)
def update_document_add(request, id: int, payload: DocumentAddUpdate):
    document_add = get_object_or_404(DocumentAdd, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document_add, attr, value)
    document_add.save()
    return document_add


@router.delete('/document_adds/{id}')
def delete_document_add(request, id: int):
    document_add = get_object_or_404(DocumentAdd, id=id)
    document_add.delete()
    return {'success': True}


# DocumentError endpoints
@router.get('/document_errors', response=List[DocumentError])
@paginate
def list_document_errors(request):
    return DocumentError.objects.all()


@router.get('/document_errors/{id}', response=DocumentError)
def get_document_error(request, id: int):
    return get_object_or_404(DocumentError, id=id)


@router.post('/document_errors', response=DocumentError)
def create_document_error(request, payload: DocumentErrorCreate):
    data = payload.dict()
    document_error = DocumentError.objects.create(**data)
    return document_error


@router.put('/document_errors/{id}', response=DocumentError)
def update_document_error(request, id: int, payload: DocumentErrorUpdate):
    document_error = get_object_or_404(DocumentError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document_error, attr, value)
    document_error.save()
    return document_error


@router.delete('/document_errors/{id}')
def delete_document_error(request, id: int):
    document_error = get_object_or_404(DocumentError, id=id)
    document_error.delete()
    return {'success': True}


# DocumentUpdate endpoints
@router.get('/document_updates', response=List[DocumentUpdate])
@paginate
def list_document_updates(request):
    return DocumentUpdate.objects.all()


@router.get('/document_updates/{id}', response=DocumentUpdate)
def get_document_update(request, id: int):
    return get_object_or_404(DocumentUpdate, id=id)


@router.post('/document_updates', response=DocumentUpdate)
def create_document_update(request, payload: DocumentUpdateCreate):
    data = payload.dict()
    document_update = DocumentUpdate.objects.create(**data)
    return document_update


@router.put('/document_updates/{id}', response=DocumentUpdate)
def update_document_update(request, id: int, payload: DocumentUpdateUpdate):
    document_update = get_object_or_404(DocumentUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document_update, attr, value)
    document_update.save()
    return document_update


@router.delete('/document_updates/{id}')
def delete_document_update(request, id: int):
    document_update = get_object_or_404(DocumentUpdate, id=id)
    document_update.delete()
    return {'success': True}


# DocumentAttach endpoints
@router.get('/document_attachs', response=List[DocumentAttach])
@paginate
def list_document_attachs(request):
    return DocumentAttach.objects.all()


@router.get('/document_attachs/{id}', response=DocumentAttach)
def get_document_attach(request, id: int):
    return get_object_or_404(DocumentAttach, id=id)


@router.post('/document_attachs', response=DocumentAttach)
def create_document_attach(request, payload: DocumentAttachCreate):
    data = payload.dict()
    document_attach = DocumentAttach.objects.create(**data)
    return document_attach


@router.put('/document_attachs/{id}', response=DocumentAttach)
def update_document_attach(request, id: int, payload: DocumentAttachUpdate):
    document_attach = get_object_or_404(DocumentAttach, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document_attach, attr, value)
    document_attach.save()
    return document_attach


@router.delete('/document_attachs/{id}')
def delete_document_attach(request, id: int):
    document_attach = get_object_or_404(DocumentAttach, id=id)
    document_attach.delete()
    return {'success': True}


# DocumentRemove endpoints
@router.get('/document_removes', response=List[DocumentRemove])
@paginate
def list_document_removes(request):
    return DocumentRemove.objects.all()


@router.get('/document_removes/{id}', response=DocumentRemove)
def get_document_remove(request, id: int):
    return get_object_or_404(DocumentRemove, id=id)


@router.post('/document_removes', response=DocumentRemove)
def create_document_remove(request, payload: DocumentRemoveCreate):
    data = payload.dict()
    document_remove = DocumentRemove.objects.create(**data)
    return document_remove


@router.put('/document_removes/{id}', response=DocumentRemove)
def update_document_remove(request, id: int, payload: DocumentRemoveUpdate):
    document_remove = get_object_or_404(DocumentRemove, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(document_remove, attr, value)
    document_remove.save()
    return document_remove


@router.delete('/document_removes/{id}')
def delete_document_remove(request, id: int):
    document_remove = get_object_or_404(DocumentRemove, id=id)
    document_remove.delete()
    return {'success': True}


# NauticalConfigurationUpdate endpoints
@router.get('/nautical_configuration_updates', response=List[NauticalConfigurationUpdate])
@paginate
def list_nautical_configuration_updates(request):
    return NauticalConfigurationUpdate.objects.all()


@router.get('/nautical_configuration_updates/{id}', response=NauticalConfigurationUpdate)
def get_nautical_configuration_update(request, id: int):
    return get_object_or_404(NauticalConfigurationUpdate, id=id)


@router.post('/nautical_configuration_updates', response=NauticalConfigurationUpdate)
def create_nautical_configuration_update(request, payload: NauticalConfigurationUpdateCreate):
    data = payload.dict()
    nautical_configuration_update = NauticalConfigurationUpdate.objects.create(**data)
    return nautical_configuration_update


@router.put('/nautical_configuration_updates/{id}', response=NauticalConfigurationUpdate)
def update_nautical_configuration_update(request, id: int, payload: NauticalConfigurationUpdateUpdate):
    nautical_configuration_update = get_object_or_404(NauticalConfigurationUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_configuration_update, attr, value)
    nautical_configuration_update.save()
    return nautical_configuration_update


@router.delete('/nautical_configuration_updates/{id}')
def delete_nautical_configuration_update(request, id: int):
    nautical_configuration_update = get_object_or_404(NauticalConfigurationUpdate, id=id)
    nautical_configuration_update.delete()
    return {'success': True}


# NauticalConfigurationError endpoints
@router.get('/nautical_configuration_errors', response=List[NauticalConfigurationError])
@paginate
def list_nautical_configuration_errors(request):
    return NauticalConfigurationError.objects.all()


@router.get('/nautical_configuration_errors/{id}', response=NauticalConfigurationError)
def get_nautical_configuration_error(request, id: int):
    return get_object_or_404(NauticalConfigurationError, id=id)


@router.post('/nautical_configuration_errors', response=NauticalConfigurationError)
def create_nautical_configuration_error(request, payload: NauticalConfigurationErrorCreate):
    data = payload.dict()
    nautical_configuration_error = NauticalConfigurationError.objects.create(**data)
    return nautical_configuration_error


@router.put('/nautical_configuration_errors/{id}', response=NauticalConfigurationError)
def update_nautical_configuration_error(request, id: int, payload: NauticalConfigurationErrorUpdate):
    nautical_configuration_error = get_object_or_404(NauticalConfigurationError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_configuration_error, attr, value)
    nautical_configuration_error.save()
    return nautical_configuration_error


@router.delete('/nautical_configuration_errors/{id}')
def delete_nautical_configuration_error(request, id: int):
    nautical_configuration_error = get_object_or_404(NauticalConfigurationError, id=id)
    nautical_configuration_error.delete()
    return {'success': True}


# MarketplaceConfigurationUpdate endpoints
@router.get('/marketplace_configuration_updates', response=List[MarketplaceConfigurationUpdate])
@paginate
def list_marketplace_configuration_updates(request):
    return MarketplaceConfigurationUpdate.objects.all()


@router.get('/marketplace_configuration_updates/{id}', response=MarketplaceConfigurationUpdate)
def get_marketplace_configuration_update(request, id: int):
    return get_object_or_404(MarketplaceConfigurationUpdate, id=id)


@router.post('/marketplace_configuration_updates', response=MarketplaceConfigurationUpdate)
def create_marketplace_configuration_update(request, payload: MarketplaceConfigurationUpdateCreate):
    data = payload.dict()
    marketplace_configuration_update = MarketplaceConfigurationUpdate.objects.create(**data)
    return marketplace_configuration_update


@router.put('/marketplace_configuration_updates/{id}', response=MarketplaceConfigurationUpdate)
def update_marketplace_configuration_update(request, id: int, payload: MarketplaceConfigurationUpdateUpdate):
    marketplace_configuration_update = get_object_or_404(MarketplaceConfigurationUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(marketplace_configuration_update, attr, value)
    marketplace_configuration_update.save()
    return marketplace_configuration_update


@router.delete('/marketplace_configuration_updates/{id}')
def delete_marketplace_configuration_update(request, id: int):
    marketplace_configuration_update = get_object_or_404(MarketplaceConfigurationUpdate, id=id)
    marketplace_configuration_update.delete()
    return {'success': True}


# MarketplaceConfigurationError endpoints
@router.get('/marketplace_configuration_errors', response=List[MarketplaceConfigurationError])
@paginate
def list_marketplace_configuration_errors(request):
    return MarketplaceConfigurationError.objects.all()


@router.get('/marketplace_configuration_errors/{id}', response=MarketplaceConfigurationError)
def get_marketplace_configuration_error(request, id: int):
    return get_object_or_404(MarketplaceConfigurationError, id=id)


@router.post('/marketplace_configuration_errors', response=MarketplaceConfigurationError)
def create_marketplace_configuration_error(request, payload: MarketplaceConfigurationErrorCreate):
    data = payload.dict()
    marketplace_configuration_error = MarketplaceConfigurationError.objects.create(**data)
    return marketplace_configuration_error


@router.put('/marketplace_configuration_errors/{id}', response=MarketplaceConfigurationError)
def update_marketplace_configuration_error(request, id: int, payload: MarketplaceConfigurationErrorUpdate):
    marketplace_configuration_error = get_object_or_404(MarketplaceConfigurationError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(marketplace_configuration_error, attr, value)
    marketplace_configuration_error.save()
    return marketplace_configuration_error


@router.delete('/marketplace_configuration_errors/{id}')
def delete_marketplace_configuration_error(request, id: int):
    marketplace_configuration_error = get_object_or_404(MarketplaceConfigurationError, id=id)
    marketplace_configuration_error.delete()
    return {'success': True}


# PayoutCreate endpoints
@router.get('/payout_creates', response=List[PayoutCreate])
@paginate
def list_payout_creates(request):
    return PayoutCreate.objects.all()


@router.get('/payout_creates/{id}', response=PayoutCreate)
def get_payout_create(request, id: int):
    return get_object_or_404(PayoutCreate, id=id)


@router.post('/payout_creates', response=PayoutCreate)
def create_payout_create(request, payload: PayoutCreateCreate):
    data = payload.dict()
    payout_create = PayoutCreate.objects.create(**data)
    return payout_create


@router.put('/payout_creates/{id}', response=PayoutCreate)
def update_payout_create(request, id: int, payload: PayoutCreateUpdate):
    payout_create = get_object_or_404(PayoutCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_create, attr, value)
    payout_create.save()
    return payout_create


@router.delete('/payout_creates/{id}')
def delete_payout_create(request, id: int):
    payout_create = get_object_or_404(PayoutCreate, id=id)
    payout_create.delete()
    return {'success': True}


# PayoutError endpoints
@router.get('/payout_errors', response=List[PayoutError])
@paginate
def list_payout_errors(request):
    return PayoutError.objects.all()


@router.get('/payout_errors/{id}', response=PayoutError)
def get_payout_error(request, id: int):
    return get_object_or_404(PayoutError, id=id)


@router.post('/payout_errors', response=PayoutError)
def create_payout_error(request, payload: PayoutErrorCreate):
    data = payload.dict()
    payout_error = PayoutError.objects.create(**data)
    return payout_error


@router.put('/payout_errors/{id}', response=PayoutError)
def update_payout_error(request, id: int, payload: PayoutErrorUpdate):
    payout_error = get_object_or_404(PayoutError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_error, attr, value)
    payout_error.save()
    return payout_error


@router.delete('/payout_errors/{id}')
def delete_payout_error(request, id: int):
    payout_error = get_object_or_404(PayoutError, id=id)
    payout_error.delete()
    return {'success': True}


# PayoutUpdate endpoints
@router.get('/payout_updates', response=List[PayoutUpdate])
@paginate
def list_payout_updates(request):
    return PayoutUpdate.objects.all()


@router.get('/payout_updates/{id}', response=PayoutUpdate)
def get_payout_update(request, id: int):
    return get_object_or_404(PayoutUpdate, id=id)


@router.post('/payout_updates', response=PayoutUpdate)
def create_payout_update(request, payload: PayoutUpdateCreate):
    data = payload.dict()
    payout_update = PayoutUpdate.objects.create(**data)
    return payout_update


@router.put('/payout_updates/{id}', response=PayoutUpdate)
def update_payout_update(request, id: int, payload: PayoutUpdateUpdate):
    payout_update = get_object_or_404(PayoutUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_update, attr, value)
    payout_update.save()
    return payout_update


@router.delete('/payout_updates/{id}')
def delete_payout_update(request, id: int):
    payout_update = get_object_or_404(PayoutUpdate, id=id)
    payout_update.delete()
    return {'success': True}


# PayoutDelete endpoints
@router.get('/payout_deletes', response=List[PayoutDelete])
@paginate
def list_payout_deletes(request):
    return PayoutDelete.objects.all()


@router.get('/payout_deletes/{id}', response=PayoutDelete)
def get_payout_delete(request, id: int):
    return get_object_or_404(PayoutDelete, id=id)


@router.post('/payout_deletes', response=PayoutDelete)
def create_payout_delete(request, payload: PayoutDeleteCreate):
    data = payload.dict()
    payout_delete = PayoutDelete.objects.create(**data)
    return payout_delete


@router.put('/payout_deletes/{id}', response=PayoutDelete)
def update_payout_delete(request, id: int, payload: PayoutDeleteUpdate):
    payout_delete = get_object_or_404(PayoutDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_delete, attr, value)
    payout_delete.save()
    return payout_delete


@router.delete('/payout_deletes/{id}')
def delete_payout_delete(request, id: int):
    payout_delete = get_object_or_404(PayoutDelete, id=id)
    payout_delete.delete()
    return {'success': True}


# PayoutStatusUpdate endpoints
@router.get('/payout_status_updates', response=List[PayoutStatusUpdate])
@paginate
def list_payout_status_updates(request):
    return PayoutStatusUpdate.objects.all()


@router.get('/payout_status_updates/{id}', response=PayoutStatusUpdate)
def get_payout_status_update(request, id: int):
    return get_object_or_404(PayoutStatusUpdate, id=id)


@router.post('/payout_status_updates', response=PayoutStatusUpdate)
def create_payout_status_update(request, payload: PayoutStatusUpdateCreate):
    data = payload.dict()
    payout_status_update = PayoutStatusUpdate.objects.create(**data)
    return payout_status_update


@router.put('/payout_status_updates/{id}', response=PayoutStatusUpdate)
def update_payout_status_update(request, id: int, payload: PayoutStatusUpdateUpdate):
    payout_status_update = get_object_or_404(PayoutStatusUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_status_update, attr, value)
    payout_status_update.save()
    return payout_status_update


@router.delete('/payout_status_updates/{id}')
def delete_payout_status_update(request, id: int):
    payout_status_update = get_object_or_404(PayoutStatusUpdate, id=id)
    payout_status_update.delete()
    return {'success': True}


# PayoutDatesUpdate endpoints
@router.get('/payout_dates_updates', response=List[PayoutDatesUpdate])
@paginate
def list_payout_dates_updates(request):
    return PayoutDatesUpdate.objects.all()


@router.get('/payout_dates_updates/{id}', response=PayoutDatesUpdate)
def get_payout_dates_update(request, id: int):
    return get_object_or_404(PayoutDatesUpdate, id=id)


@router.post('/payout_dates_updates', response=PayoutDatesUpdate)
def create_payout_dates_update(request, payload: PayoutDatesUpdateCreate):
    data = payload.dict()
    payout_dates_update = PayoutDatesUpdate.objects.create(**data)
    return payout_dates_update


@router.put('/payout_dates_updates/{id}', response=PayoutDatesUpdate)
def update_payout_dates_update(request, id: int, payload: PayoutDatesUpdateUpdate):
    payout_dates_update = get_object_or_404(PayoutDatesUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_dates_update, attr, value)
    payout_dates_update.save()
    return payout_dates_update


@router.delete('/payout_dates_updates/{id}')
def delete_payout_dates_update(request, id: int):
    payout_dates_update = get_object_or_404(PayoutDatesUpdate, id=id)
    payout_dates_update.delete()
    return {'success': True}


# PayoutBulkArchive endpoints
@router.get('/payout_bulk_archives', response=List[PayoutBulkArchive])
@paginate
def list_payout_bulk_archives(request):
    return PayoutBulkArchive.objects.all()


@router.get('/payout_bulk_archives/{id}', response=PayoutBulkArchive)
def get_payout_bulk_archive(request, id: int):
    return get_object_or_404(PayoutBulkArchive, id=id)


@router.post('/payout_bulk_archives', response=PayoutBulkArchive)
def create_payout_bulk_archive(request, payload: PayoutBulkArchiveCreate):
    data = payload.dict()
    payout_bulk_archive = PayoutBulkArchive.objects.create(**data)
    return payout_bulk_archive


@router.put('/payout_bulk_archives/{id}', response=PayoutBulkArchive)
def update_payout_bulk_archive(request, id: int, payload: PayoutBulkArchiveUpdate):
    payout_bulk_archive = get_object_or_404(PayoutBulkArchive, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payout_bulk_archive, attr, value)
    payout_bulk_archive.save()
    return payout_bulk_archive


@router.delete('/payout_bulk_archives/{id}')
def delete_payout_bulk_archive(request, id: int):
    payout_bulk_archive = get_object_or_404(PayoutBulkArchive, id=id)
    payout_bulk_archive.delete()
    return {'success': True}


# VendorPayoutCreate endpoints
@router.get('/vendor_payout_creates', response=List[VendorPayoutCreate])
@paginate
def list_vendor_payout_creates(request):
    return VendorPayoutCreate.objects.all()


@router.get('/vendor_payout_creates/{id}', response=VendorPayoutCreate)
def get_vendor_payout_create(request, id: int):
    return get_object_or_404(VendorPayoutCreate, id=id)


@router.post('/vendor_payout_creates', response=VendorPayoutCreate)
def create_vendor_payout_create(request, payload: VendorPayoutCreateCreate):
    data = payload.dict()
    vendor_payout_create = VendorPayoutCreate.objects.create(**data)
    return vendor_payout_create


@router.put('/vendor_payout_creates/{id}', response=VendorPayoutCreate)
def update_vendor_payout_create(request, id: int, payload: VendorPayoutCreateUpdate):
    vendor_payout_create = get_object_or_404(VendorPayoutCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_create, attr, value)
    vendor_payout_create.save()
    return vendor_payout_create


@router.delete('/vendor_payout_creates/{id}')
def delete_vendor_payout_create(request, id: int):
    vendor_payout_create = get_object_or_404(VendorPayoutCreate, id=id)
    vendor_payout_create.delete()
    return {'success': True}


# VendorPayoutStatusUpdate endpoints
@router.get('/vendor_payout_status_updates', response=List[VendorPayoutStatusUpdate])
@paginate
def list_vendor_payout_status_updates(request):
    return VendorPayoutStatusUpdate.objects.all()


@router.get('/vendor_payout_status_updates/{id}', response=VendorPayoutStatusUpdate)
def get_vendor_payout_status_update(request, id: int):
    return get_object_or_404(VendorPayoutStatusUpdate, id=id)


@router.post('/vendor_payout_status_updates', response=VendorPayoutStatusUpdate)
def create_vendor_payout_status_update(request, payload: VendorPayoutStatusUpdateCreate):
    data = payload.dict()
    vendor_payout_status_update = VendorPayoutStatusUpdate.objects.create(**data)
    return vendor_payout_status_update


@router.put('/vendor_payout_status_updates/{id}', response=VendorPayoutStatusUpdate)
def update_vendor_payout_status_update(request, id: int, payload: VendorPayoutStatusUpdateUpdate):
    vendor_payout_status_update = get_object_or_404(VendorPayoutStatusUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_status_update, attr, value)
    vendor_payout_status_update.save()
    return vendor_payout_status_update


@router.delete('/vendor_payout_status_updates/{id}')
def delete_vendor_payout_status_update(request, id: int):
    vendor_payout_status_update = get_object_or_404(VendorPayoutStatusUpdate, id=id)
    vendor_payout_status_update.delete()
    return {'success': True}


# VendorPayoutsBulkInclude endpoints
@router.get('/vendor_payouts_bulk_includes', response=List[VendorPayoutsBulkInclude])
@paginate
def list_vendor_payouts_bulk_includes(request):
    return VendorPayoutsBulkInclude.objects.all()


@router.get('/vendor_payouts_bulk_includes/{id}', response=VendorPayoutsBulkInclude)
def get_vendor_payouts_bulk_include(request, id: int):
    return get_object_or_404(VendorPayoutsBulkInclude, id=id)


@router.post('/vendor_payouts_bulk_includes', response=VendorPayoutsBulkInclude)
def create_vendor_payouts_bulk_include(request, payload: VendorPayoutsBulkIncludeCreate):
    data = payload.dict()
    vendor_payouts_bulk_include = VendorPayoutsBulkInclude.objects.create(**data)
    return vendor_payouts_bulk_include


@router.put('/vendor_payouts_bulk_includes/{id}', response=VendorPayoutsBulkInclude)
def update_vendor_payouts_bulk_include(request, id: int, payload: VendorPayoutsBulkIncludeUpdate):
    vendor_payouts_bulk_include = get_object_or_404(VendorPayoutsBulkInclude, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payouts_bulk_include, attr, value)
    vendor_payouts_bulk_include.save()
    return vendor_payouts_bulk_include


@router.delete('/vendor_payouts_bulk_includes/{id}')
def delete_vendor_payouts_bulk_include(request, id: int):
    vendor_payouts_bulk_include = get_object_or_404(VendorPayoutsBulkInclude, id=id)
    vendor_payouts_bulk_include.delete()
    return {'success': True}


# VendorPayoutsBulkExclude endpoints
@router.get('/vendor_payouts_bulk_excludes', response=List[VendorPayoutsBulkExclude])
@paginate
def list_vendor_payouts_bulk_excludes(request):
    return VendorPayoutsBulkExclude.objects.all()


@router.get('/vendor_payouts_bulk_excludes/{id}', response=VendorPayoutsBulkExclude)
def get_vendor_payouts_bulk_exclude(request, id: int):
    return get_object_or_404(VendorPayoutsBulkExclude, id=id)


@router.post('/vendor_payouts_bulk_excludes', response=VendorPayoutsBulkExclude)
def create_vendor_payouts_bulk_exclude(request, payload: VendorPayoutsBulkExcludeCreate):
    data = payload.dict()
    vendor_payouts_bulk_exclude = VendorPayoutsBulkExclude.objects.create(**data)
    return vendor_payouts_bulk_exclude


@router.put('/vendor_payouts_bulk_excludes/{id}', response=VendorPayoutsBulkExclude)
def update_vendor_payouts_bulk_exclude(request, id: int, payload: VendorPayoutsBulkExcludeUpdate):
    vendor_payouts_bulk_exclude = get_object_or_404(VendorPayoutsBulkExclude, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payouts_bulk_exclude, attr, value)
    vendor_payouts_bulk_exclude.save()
    return vendor_payouts_bulk_exclude


@router.delete('/vendor_payouts_bulk_excludes/{id}')
def delete_vendor_payouts_bulk_exclude(request, id: int):
    vendor_payouts_bulk_exclude = get_object_or_404(VendorPayoutsBulkExclude, id=id)
    vendor_payouts_bulk_exclude.delete()
    return {'success': True}


# VendorPayoutsBulkProcess endpoints
@router.get('/vendor_payouts_bulk_processs', response=List[VendorPayoutsBulkProcess])
@paginate
def list_vendor_payouts_bulk_processs(request):
    return VendorPayoutsBulkProcess.objects.all()


@router.get('/vendor_payouts_bulk_processs/{id}', response=VendorPayoutsBulkProcess)
def get_vendor_payouts_bulk_process(request, id: int):
    return get_object_or_404(VendorPayoutsBulkProcess, id=id)


@router.post('/vendor_payouts_bulk_processs', response=VendorPayoutsBulkProcess)
def create_vendor_payouts_bulk_process(request, payload: VendorPayoutsBulkProcessCreate):
    data = payload.dict()
    vendor_payouts_bulk_process = VendorPayoutsBulkProcess.objects.create(**data)
    return vendor_payouts_bulk_process


@router.put('/vendor_payouts_bulk_processs/{id}', response=VendorPayoutsBulkProcess)
def update_vendor_payouts_bulk_process(request, id: int, payload: VendorPayoutsBulkProcessUpdate):
    vendor_payouts_bulk_process = get_object_or_404(VendorPayoutsBulkProcess, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payouts_bulk_process, attr, value)
    vendor_payouts_bulk_process.save()
    return vendor_payouts_bulk_process


@router.delete('/vendor_payouts_bulk_processs/{id}')
def delete_vendor_payouts_bulk_process(request, id: int):
    vendor_payouts_bulk_process = get_object_or_404(VendorPayoutsBulkProcess, id=id)
    vendor_payouts_bulk_process.delete()
    return {'success': True}


# VendorPayoutNoteAdd endpoints
@router.get('/vendor_payout_note_adds', response=List[VendorPayoutNoteAdd])
@paginate
def list_vendor_payout_note_adds(request):
    return VendorPayoutNoteAdd.objects.all()


@router.get('/vendor_payout_note_adds/{id}', response=VendorPayoutNoteAdd)
def get_vendor_payout_note_add(request, id: int):
    return get_object_or_404(VendorPayoutNoteAdd, id=id)


@router.post('/vendor_payout_note_adds', response=VendorPayoutNoteAdd)
def create_vendor_payout_note_add(request, payload: VendorPayoutNoteAddCreate):
    data = payload.dict()
    vendor_payout_note_add = VendorPayoutNoteAdd.objects.create(**data)
    return vendor_payout_note_add


@router.put('/vendor_payout_note_adds/{id}', response=VendorPayoutNoteAdd)
def update_vendor_payout_note_add(request, id: int, payload: VendorPayoutNoteAddUpdate):
    vendor_payout_note_add = get_object_or_404(VendorPayoutNoteAdd, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_note_add, attr, value)
    vendor_payout_note_add.save()
    return vendor_payout_note_add


@router.delete('/vendor_payout_note_adds/{id}')
def delete_vendor_payout_note_add(request, id: int):
    vendor_payout_note_add = get_object_or_404(VendorPayoutNoteAdd, id=id)
    vendor_payout_note_add.delete()
    return {'success': True}


# VendorPayoutNoteUpdate endpoints
@router.get('/vendor_payout_note_updates', response=List[VendorPayoutNoteUpdate])
@paginate
def list_vendor_payout_note_updates(request):
    return VendorPayoutNoteUpdate.objects.all()


@router.get('/vendor_payout_note_updates/{id}', response=VendorPayoutNoteUpdate)
def get_vendor_payout_note_update(request, id: int):
    return get_object_or_404(VendorPayoutNoteUpdate, id=id)


@router.post('/vendor_payout_note_updates', response=VendorPayoutNoteUpdate)
def create_vendor_payout_note_update(request, payload: VendorPayoutNoteUpdateCreate):
    data = payload.dict()
    vendor_payout_note_update = VendorPayoutNoteUpdate.objects.create(**data)
    return vendor_payout_note_update


@router.put('/vendor_payout_note_updates/{id}', response=VendorPayoutNoteUpdate)
def update_vendor_payout_note_update(request, id: int, payload: VendorPayoutNoteUpdateUpdate):
    vendor_payout_note_update = get_object_or_404(VendorPayoutNoteUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_note_update, attr, value)
    vendor_payout_note_update.save()
    return vendor_payout_note_update


@router.delete('/vendor_payout_note_updates/{id}')
def delete_vendor_payout_note_update(request, id: int):
    vendor_payout_note_update = get_object_or_404(VendorPayoutNoteUpdate, id=id)
    vendor_payout_note_update.delete()
    return {'success': True}


# WishlistCreate endpoints
@router.get('/wishlist_creates', response=List[WishlistCreate])
@paginate
def list_wishlist_creates(request):
    return WishlistCreate.objects.all()


@router.get('/wishlist_creates/{id}', response=WishlistCreate)
def get_wishlist_create(request, id: int):
    return get_object_or_404(WishlistCreate, id=id)


@router.post('/wishlist_creates', response=WishlistCreate)
def create_wishlist_create(request, payload: WishlistCreateCreate):
    data = payload.dict()
    wishlist_create = WishlistCreate.objects.create(**data)
    return wishlist_create


@router.put('/wishlist_creates/{id}', response=WishlistCreate)
def update_wishlist_create(request, id: int, payload: WishlistCreateUpdate):
    wishlist_create = get_object_or_404(WishlistCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_create, attr, value)
    wishlist_create.save()
    return wishlist_create


@router.delete('/wishlist_creates/{id}')
def delete_wishlist_create(request, id: int):
    wishlist_create = get_object_or_404(WishlistCreate, id=id)
    wishlist_create.delete()
    return {'success': True}


# WishlistError endpoints
@router.get('/wishlist_errors', response=List[WishlistError])
@paginate
def list_wishlist_errors(request):
    return WishlistError.objects.all()


@router.get('/wishlist_errors/{id}', response=WishlistError)
def get_wishlist_error(request, id: int):
    return get_object_or_404(WishlistError, id=id)


@router.post('/wishlist_errors', response=WishlistError)
def create_wishlist_error(request, payload: WishlistErrorCreate):
    data = payload.dict()
    wishlist_error = WishlistError.objects.create(**data)
    return wishlist_error


@router.put('/wishlist_errors/{id}', response=WishlistError)
def update_wishlist_error(request, id: int, payload: WishlistErrorUpdate):
    wishlist_error = get_object_or_404(WishlistError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_error, attr, value)
    wishlist_error.save()
    return wishlist_error


@router.delete('/wishlist_errors/{id}')
def delete_wishlist_error(request, id: int):
    wishlist_error = get_object_or_404(WishlistError, id=id)
    wishlist_error.delete()
    return {'success': True}


# WishlistCreateForBuyer endpoints
@router.get('/wishlist_create_for_buyers', response=List[WishlistCreateForBuyer])
@paginate
def list_wishlist_create_for_buyers(request):
    return WishlistCreateForBuyer.objects.all()


@router.get('/wishlist_create_for_buyers/{id}', response=WishlistCreateForBuyer)
def get_wishlist_create_for_buyer(request, id: int):
    return get_object_or_404(WishlistCreateForBuyer, id=id)


@router.post('/wishlist_create_for_buyers', response=WishlistCreateForBuyer)
def create_wishlist_create_for_buyer(request, payload: WishlistCreateForBuyerCreate):
    data = payload.dict()
    wishlist_create_for_buyer = WishlistCreateForBuyer.objects.create(**data)
    return wishlist_create_for_buyer


@router.put('/wishlist_create_for_buyers/{id}', response=WishlistCreateForBuyer)
def update_wishlist_create_for_buyer(request, id: int, payload: WishlistCreateForBuyerUpdate):
    wishlist_create_for_buyer = get_object_or_404(WishlistCreateForBuyer, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_create_for_buyer, attr, value)
    wishlist_create_for_buyer.save()
    return wishlist_create_for_buyer


@router.delete('/wishlist_create_for_buyers/{id}')
def delete_wishlist_create_for_buyer(request, id: int):
    wishlist_create_for_buyer = get_object_or_404(WishlistCreateForBuyer, id=id)
    wishlist_create_for_buyer.delete()
    return {'success': True}


# WishlistUpdate endpoints
@router.get('/wishlist_updates', response=List[WishlistUpdate])
@paginate
def list_wishlist_updates(request):
    return WishlistUpdate.objects.all()


@router.get('/wishlist_updates/{id}', response=WishlistUpdate)
def get_wishlist_update(request, id: int):
    return get_object_or_404(WishlistUpdate, id=id)


@router.post('/wishlist_updates', response=WishlistUpdate)
def create_wishlist_update(request, payload: WishlistUpdateCreate):
    data = payload.dict()
    wishlist_update = WishlistUpdate.objects.create(**data)
    return wishlist_update


@router.put('/wishlist_updates/{id}', response=WishlistUpdate)
def update_wishlist_update(request, id: int, payload: WishlistUpdateUpdate):
    wishlist_update = get_object_or_404(WishlistUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_update, attr, value)
    wishlist_update.save()
    return wishlist_update


@router.delete('/wishlist_updates/{id}')
def delete_wishlist_update(request, id: int):
    wishlist_update = get_object_or_404(WishlistUpdate, id=id)
    wishlist_update.delete()
    return {'success': True}


# WishlistDelete endpoints
@router.get('/wishlist_deletes', response=List[WishlistDelete])
@paginate
def list_wishlist_deletes(request):
    return WishlistDelete.objects.all()


@router.get('/wishlist_deletes/{id}', response=WishlistDelete)
def get_wishlist_delete(request, id: int):
    return get_object_or_404(WishlistDelete, id=id)


@router.post('/wishlist_deletes', response=WishlistDelete)
def create_wishlist_delete(request, payload: WishlistDeleteCreate):
    data = payload.dict()
    wishlist_delete = WishlistDelete.objects.create(**data)
    return wishlist_delete


@router.put('/wishlist_deletes/{id}', response=WishlistDelete)
def update_wishlist_delete(request, id: int, payload: WishlistDeleteUpdate):
    wishlist_delete = get_object_or_404(WishlistDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_delete, attr, value)
    wishlist_delete.save()
    return wishlist_delete


@router.delete('/wishlist_deletes/{id}')
def delete_wishlist_delete(request, id: int):
    wishlist_delete = get_object_or_404(WishlistDelete, id=id)
    wishlist_delete.delete()
    return {'success': True}


# WishlistSetDefault endpoints
@router.get('/wishlist_set_defaults', response=List[WishlistSetDefault])
@paginate
def list_wishlist_set_defaults(request):
    return WishlistSetDefault.objects.all()


@router.get('/wishlist_set_defaults/{id}', response=WishlistSetDefault)
def get_wishlist_set_default(request, id: int):
    return get_object_or_404(WishlistSetDefault, id=id)


@router.post('/wishlist_set_defaults', response=WishlistSetDefault)
def create_wishlist_set_default(request, payload: WishlistSetDefaultCreate):
    data = payload.dict()
    wishlist_set_default = WishlistSetDefault.objects.create(**data)
    return wishlist_set_default


@router.put('/wishlist_set_defaults/{id}', response=WishlistSetDefault)
def update_wishlist_set_default(request, id: int, payload: WishlistSetDefaultUpdate):
    wishlist_set_default = get_object_or_404(WishlistSetDefault, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_set_default, attr, value)
    wishlist_set_default.save()
    return wishlist_set_default


@router.delete('/wishlist_set_defaults/{id}')
def delete_wishlist_set_default(request, id: int):
    wishlist_set_default = get_object_or_404(WishlistSetDefault, id=id)
    wishlist_set_default.delete()
    return {'success': True}


# WishlistItemUpdate endpoints
@router.get('/wishlist_item_updates', response=List[WishlistItemUpdate])
@paginate
def list_wishlist_item_updates(request):
    return WishlistItemUpdate.objects.all()


@router.get('/wishlist_item_updates/{id}', response=WishlistItemUpdate)
def get_wishlist_item_update(request, id: int):
    return get_object_or_404(WishlistItemUpdate, id=id)


@router.post('/wishlist_item_updates', response=WishlistItemUpdate)
def create_wishlist_item_update(request, payload: WishlistItemUpdateCreate):
    data = payload.dict()
    wishlist_item_update = WishlistItemUpdate.objects.create(**data)
    return wishlist_item_update


@router.put('/wishlist_item_updates/{id}', response=WishlistItemUpdate)
def update_wishlist_item_update(request, id: int, payload: WishlistItemUpdateUpdate):
    wishlist_item_update = get_object_or_404(WishlistItemUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_item_update, attr, value)
    wishlist_item_update.save()
    return wishlist_item_update


@router.delete('/wishlist_item_updates/{id}')
def delete_wishlist_item_update(request, id: int):
    wishlist_item_update = get_object_or_404(WishlistItemUpdate, id=id)
    wishlist_item_update.delete()
    return {'success': True}


# WishlistAddProduct endpoints
@router.get('/wishlist_add_products', response=List[WishlistAddProduct])
@paginate
def list_wishlist_add_products(request):
    return WishlistAddProduct.objects.all()


@router.get('/wishlist_add_products/{id}', response=WishlistAddProduct)
def get_wishlist_add_product(request, id: int):
    return get_object_or_404(WishlistAddProduct, id=id)


@router.post('/wishlist_add_products', response=WishlistAddProduct)
def create_wishlist_add_product(request, payload: WishlistAddProductCreate):
    data = payload.dict()
    wishlist_add_product = WishlistAddProduct.objects.create(**data)
    return wishlist_add_product


@router.put('/wishlist_add_products/{id}', response=WishlistAddProduct)
def update_wishlist_add_product(request, id: int, payload: WishlistAddProductUpdate):
    wishlist_add_product = get_object_or_404(WishlistAddProduct, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_add_product, attr, value)
    wishlist_add_product.save()
    return wishlist_add_product


@router.delete('/wishlist_add_products/{id}')
def delete_wishlist_add_product(request, id: int):
    wishlist_add_product = get_object_or_404(WishlistAddProduct, id=id)
    wishlist_add_product.delete()
    return {'success': True}


# WishlistRemoveProduct endpoints
@router.get('/wishlist_remove_products', response=List[WishlistRemoveProduct])
@paginate
def list_wishlist_remove_products(request):
    return WishlistRemoveProduct.objects.all()


@router.get('/wishlist_remove_products/{id}', response=WishlistRemoveProduct)
def get_wishlist_remove_product(request, id: int):
    return get_object_or_404(WishlistRemoveProduct, id=id)


@router.post('/wishlist_remove_products', response=WishlistRemoveProduct)
def create_wishlist_remove_product(request, payload: WishlistRemoveProductCreate):
    data = payload.dict()
    wishlist_remove_product = WishlistRemoveProduct.objects.create(**data)
    return wishlist_remove_product


@router.put('/wishlist_remove_products/{id}', response=WishlistRemoveProduct)
def update_wishlist_remove_product(request, id: int, payload: WishlistRemoveProductUpdate):
    wishlist_remove_product = get_object_or_404(WishlistRemoveProduct, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_remove_product, attr, value)
    wishlist_remove_product.save()
    return wishlist_remove_product


@router.delete('/wishlist_remove_products/{id}')
def delete_wishlist_remove_product(request, id: int):
    wishlist_remove_product = get_object_or_404(WishlistRemoveProduct, id=id)
    wishlist_remove_product.delete()
    return {'success': True}


# WishlistAddProductVariant endpoints
@router.get('/wishlist_add_product_variants', response=List[WishlistAddProductVariant])
@paginate
def list_wishlist_add_product_variants(request):
    return WishlistAddProductVariant.objects.all()


@router.get('/wishlist_add_product_variants/{id}', response=WishlistAddProductVariant)
def get_wishlist_add_product_variant(request, id: int):
    return get_object_or_404(WishlistAddProductVariant, id=id)


@router.post('/wishlist_add_product_variants', response=WishlistAddProductVariant)
def create_wishlist_add_product_variant(request, payload: WishlistAddProductVariantCreate):
    data = payload.dict()
    wishlist_add_product_variant = WishlistAddProductVariant.objects.create(**data)
    return wishlist_add_product_variant


@router.put('/wishlist_add_product_variants/{id}', response=WishlistAddProductVariant)
def update_wishlist_add_product_variant(request, id: int, payload: WishlistAddProductVariantUpdate):
    wishlist_add_product_variant = get_object_or_404(WishlistAddProductVariant, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_add_product_variant, attr, value)
    wishlist_add_product_variant.save()
    return wishlist_add_product_variant


@router.delete('/wishlist_add_product_variants/{id}')
def delete_wishlist_add_product_variant(request, id: int):
    wishlist_add_product_variant = get_object_or_404(WishlistAddProductVariant, id=id)
    wishlist_add_product_variant.delete()
    return {'success': True}


# WishlistRemoveProductVariant endpoints
@router.get('/wishlist_remove_product_variants', response=List[WishlistRemoveProductVariant])
@paginate
def list_wishlist_remove_product_variants(request):
    return WishlistRemoveProductVariant.objects.all()


@router.get('/wishlist_remove_product_variants/{id}', response=WishlistRemoveProductVariant)
def get_wishlist_remove_product_variant(request, id: int):
    return get_object_or_404(WishlistRemoveProductVariant, id=id)


@router.post('/wishlist_remove_product_variants', response=WishlistRemoveProductVariant)
def create_wishlist_remove_product_variant(request, payload: WishlistRemoveProductVariantCreate):
    data = payload.dict()
    wishlist_remove_product_variant = WishlistRemoveProductVariant.objects.create(**data)
    return wishlist_remove_product_variant


@router.put('/wishlist_remove_product_variants/{id}', response=WishlistRemoveProductVariant)
def update_wishlist_remove_product_variant(request, id: int, payload: WishlistRemoveProductVariantUpdate):
    wishlist_remove_product_variant = get_object_or_404(WishlistRemoveProductVariant, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(wishlist_remove_product_variant, attr, value)
    wishlist_remove_product_variant.save()
    return wishlist_remove_product_variant


@router.delete('/wishlist_remove_product_variants/{id}')
def delete_wishlist_remove_product_variant(request, id: int):
    wishlist_remove_product_variant = get_object_or_404(WishlistRemoveProductVariant, id=id)
    wishlist_remove_product_variant.delete()
    return {'success': True}


# MicrositeAddProducts endpoints
@router.get('/microsite_add_productss', response=List[MicrositeAddProducts])
@paginate
def list_microsite_add_productss(request):
    return MicrositeAddProducts.objects.all()


@router.get('/microsite_add_productss/{id}', response=MicrositeAddProducts)
def get_microsite_add_products(request, id: int):
    return get_object_or_404(MicrositeAddProducts, id=id)


@router.post('/microsite_add_productss', response=MicrositeAddProducts)
def create_microsite_add_products(request, payload: MicrositeAddProductsCreate):
    data = payload.dict()
    microsite_add_products = MicrositeAddProducts.objects.create(**data)
    return microsite_add_products


@router.put('/microsite_add_productss/{id}', response=MicrositeAddProducts)
def update_microsite_add_products(request, id: int, payload: MicrositeAddProductsUpdate):
    microsite_add_products = get_object_or_404(MicrositeAddProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_add_products, attr, value)
    microsite_add_products.save()
    return microsite_add_products


@router.delete('/microsite_add_productss/{id}')
def delete_microsite_add_products(request, id: int):
    microsite_add_products = get_object_or_404(MicrositeAddProducts, id=id)
    microsite_add_products.delete()
    return {'success': True}


# ProductError endpoints
@router.get('/product_errors', response=List[ProductError])
@paginate
def list_product_errors(request):
    return ProductError.objects.all()


@router.get('/product_errors/{id}', response=ProductError)
def get_product_error(request, id: int):
    return get_object_or_404(ProductError, id=id)


@router.post('/product_errors', response=ProductError)
def create_product_error(request, payload: ProductErrorCreate):
    data = payload.dict()
    product_error = ProductError.objects.create(**data)
    return product_error


@router.put('/product_errors/{id}', response=ProductError)
def update_product_error(request, id: int, payload: ProductErrorUpdate):
    product_error = get_object_or_404(ProductError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_error, attr, value)
    product_error.save()
    return product_error


@router.delete('/product_errors/{id}')
def delete_product_error(request, id: int):
    product_error = get_object_or_404(ProductError, id=id)
    product_error.delete()
    return {'success': True}


# MicrositeCreate endpoints
@router.get('/microsite_creates', response=List[MicrositeCreate])
@paginate
def list_microsite_creates(request):
    return MicrositeCreate.objects.all()


@router.get('/microsite_creates/{id}', response=MicrositeCreate)
def get_microsite_create(request, id: int):
    return get_object_or_404(MicrositeCreate, id=id)


@router.post('/microsite_creates', response=MicrositeCreate)
def create_microsite_create(request, payload: MicrositeCreateCreate):
    data = payload.dict()
    microsite_create = MicrositeCreate.objects.create(**data)
    return microsite_create


@router.put('/microsite_creates/{id}', response=MicrositeCreate)
def update_microsite_create(request, id: int, payload: MicrositeCreateUpdate):
    microsite_create = get_object_or_404(MicrositeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_create, attr, value)
    microsite_create.save()
    return microsite_create


@router.delete('/microsite_creates/{id}')
def delete_microsite_create(request, id: int):
    microsite_create = get_object_or_404(MicrositeCreate, id=id)
    microsite_create.delete()
    return {'success': True}


# MicrositeDelete endpoints
@router.get('/microsite_deletes', response=List[MicrositeDelete])
@paginate
def list_microsite_deletes(request):
    return MicrositeDelete.objects.all()


@router.get('/microsite_deletes/{id}', response=MicrositeDelete)
def get_microsite_delete(request, id: int):
    return get_object_or_404(MicrositeDelete, id=id)


@router.post('/microsite_deletes', response=MicrositeDelete)
def create_microsite_delete(request, payload: MicrositeDeleteCreate):
    data = payload.dict()
    microsite_delete = MicrositeDelete.objects.create(**data)
    return microsite_delete


@router.put('/microsite_deletes/{id}', response=MicrositeDelete)
def update_microsite_delete(request, id: int, payload: MicrositeDeleteUpdate):
    microsite_delete = get_object_or_404(MicrositeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_delete, attr, value)
    microsite_delete.save()
    return microsite_delete


@router.delete('/microsite_deletes/{id}')
def delete_microsite_delete(request, id: int):
    microsite_delete = get_object_or_404(MicrositeDelete, id=id)
    microsite_delete.delete()
    return {'success': True}


# MicrositeReorderProducts endpoints
@router.get('/microsite_reorder_productss', response=List[MicrositeReorderProducts])
@paginate
def list_microsite_reorder_productss(request):
    return MicrositeReorderProducts.objects.all()


@router.get('/microsite_reorder_productss/{id}', response=MicrositeReorderProducts)
def get_microsite_reorder_products(request, id: int):
    return get_object_or_404(MicrositeReorderProducts, id=id)


@router.post('/microsite_reorder_productss', response=MicrositeReorderProducts)
def create_microsite_reorder_products(request, payload: MicrositeReorderProductsCreate):
    data = payload.dict()
    microsite_reorder_products = MicrositeReorderProducts.objects.create(**data)
    return microsite_reorder_products


@router.put('/microsite_reorder_productss/{id}', response=MicrositeReorderProducts)
def update_microsite_reorder_products(request, id: int, payload: MicrositeReorderProductsUpdate):
    microsite_reorder_products = get_object_or_404(MicrositeReorderProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_reorder_products, attr, value)
    microsite_reorder_products.save()
    return microsite_reorder_products


@router.delete('/microsite_reorder_productss/{id}')
def delete_microsite_reorder_products(request, id: int):
    microsite_reorder_products = get_object_or_404(MicrositeReorderProducts, id=id)
    microsite_reorder_products.delete()
    return {'success': True}


# MicrositeBulkDelete endpoints
@router.get('/microsite_bulk_deletes', response=List[MicrositeBulkDelete])
@paginate
def list_microsite_bulk_deletes(request):
    return MicrositeBulkDelete.objects.all()


@router.get('/microsite_bulk_deletes/{id}', response=MicrositeBulkDelete)
def get_microsite_bulk_delete(request, id: int):
    return get_object_or_404(MicrositeBulkDelete, id=id)


@router.post('/microsite_bulk_deletes', response=MicrositeBulkDelete)
def create_microsite_bulk_delete(request, payload: MicrositeBulkDeleteCreate):
    data = payload.dict()
    microsite_bulk_delete = MicrositeBulkDelete.objects.create(**data)
    return microsite_bulk_delete


@router.put('/microsite_bulk_deletes/{id}', response=MicrositeBulkDelete)
def update_microsite_bulk_delete(request, id: int, payload: MicrositeBulkDeleteUpdate):
    microsite_bulk_delete = get_object_or_404(MicrositeBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_bulk_delete, attr, value)
    microsite_bulk_delete.save()
    return microsite_bulk_delete


@router.delete('/microsite_bulk_deletes/{id}')
def delete_microsite_bulk_delete(request, id: int):
    microsite_bulk_delete = get_object_or_404(MicrositeBulkDelete, id=id)
    microsite_bulk_delete.delete()
    return {'success': True}


# MicrositeBulkPublish endpoints
@router.get('/microsite_bulk_publishs', response=List[MicrositeBulkPublish])
@paginate
def list_microsite_bulk_publishs(request):
    return MicrositeBulkPublish.objects.all()


@router.get('/microsite_bulk_publishs/{id}', response=MicrositeBulkPublish)
def get_microsite_bulk_publish(request, id: int):
    return get_object_or_404(MicrositeBulkPublish, id=id)


@router.post('/microsite_bulk_publishs', response=MicrositeBulkPublish)
def create_microsite_bulk_publish(request, payload: MicrositeBulkPublishCreate):
    data = payload.dict()
    microsite_bulk_publish = MicrositeBulkPublish.objects.create(**data)
    return microsite_bulk_publish


@router.put('/microsite_bulk_publishs/{id}', response=MicrositeBulkPublish)
def update_microsite_bulk_publish(request, id: int, payload: MicrositeBulkPublishUpdate):
    microsite_bulk_publish = get_object_or_404(MicrositeBulkPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_bulk_publish, attr, value)
    microsite_bulk_publish.save()
    return microsite_bulk_publish


@router.delete('/microsite_bulk_publishs/{id}')
def delete_microsite_bulk_publish(request, id: int):
    microsite_bulk_publish = get_object_or_404(MicrositeBulkPublish, id=id)
    microsite_bulk_publish.delete()
    return {'success': True}


# MicrositeRemoveProducts endpoints
@router.get('/microsite_remove_productss', response=List[MicrositeRemoveProducts])
@paginate
def list_microsite_remove_productss(request):
    return MicrositeRemoveProducts.objects.all()


@router.get('/microsite_remove_productss/{id}', response=MicrositeRemoveProducts)
def get_microsite_remove_products(request, id: int):
    return get_object_or_404(MicrositeRemoveProducts, id=id)


@router.post('/microsite_remove_productss', response=MicrositeRemoveProducts)
def create_microsite_remove_products(request, payload: MicrositeRemoveProductsCreate):
    data = payload.dict()
    microsite_remove_products = MicrositeRemoveProducts.objects.create(**data)
    return microsite_remove_products


@router.put('/microsite_remove_productss/{id}', response=MicrositeRemoveProducts)
def update_microsite_remove_products(request, id: int, payload: MicrositeRemoveProductsUpdate):
    microsite_remove_products = get_object_or_404(MicrositeRemoveProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_remove_products, attr, value)
    microsite_remove_products.save()
    return microsite_remove_products


@router.delete('/microsite_remove_productss/{id}')
def delete_microsite_remove_products(request, id: int):
    microsite_remove_products = get_object_or_404(MicrositeRemoveProducts, id=id)
    microsite_remove_products.delete()
    return {'success': True}


# MicrositeUpdate endpoints
@router.get('/microsite_updates', response=List[MicrositeUpdate])
@paginate
def list_microsite_updates(request):
    return MicrositeUpdate.objects.all()


@router.get('/microsite_updates/{id}', response=MicrositeUpdate)
def get_microsite_update(request, id: int):
    return get_object_or_404(MicrositeUpdate, id=id)


@router.post('/microsite_updates', response=MicrositeUpdate)
def create_microsite_update(request, payload: MicrositeUpdateCreate):
    data = payload.dict()
    microsite_update = MicrositeUpdate.objects.create(**data)
    return microsite_update


@router.put('/microsite_updates/{id}', response=MicrositeUpdate)
def update_microsite_update(request, id: int, payload: MicrositeUpdateUpdate):
    microsite_update = get_object_or_404(MicrositeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(microsite_update, attr, value)
    microsite_update.save()
    return microsite_update


@router.delete('/microsite_updates/{id}')
def delete_microsite_update(request, id: int):
    microsite_update = get_object_or_404(MicrositeUpdate, id=id)
    microsite_update.delete()
    return {'success': True}


# AgreementCreate endpoints
@router.get('/agreement_creates', response=List[AgreementCreate])
@paginate
def list_agreement_creates(request):
    return AgreementCreate.objects.all()


@router.get('/agreement_creates/{id}', response=AgreementCreate)
def get_agreement_create(request, id: int):
    return get_object_or_404(AgreementCreate, id=id)


@router.post('/agreement_creates', response=AgreementCreate)
def create_agreement_create(request, payload: AgreementCreateCreate):
    data = payload.dict()
    agreement_create = AgreementCreate.objects.create(**data)
    return agreement_create


@router.put('/agreement_creates/{id}', response=AgreementCreate)
def update_agreement_create(request, id: int, payload: AgreementCreateUpdate):
    agreement_create = get_object_or_404(AgreementCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_create, attr, value)
    agreement_create.save()
    return agreement_create


@router.delete('/agreement_creates/{id}')
def delete_agreement_create(request, id: int):
    agreement_create = get_object_or_404(AgreementCreate, id=id)
    agreement_create.delete()
    return {'success': True}


# AgreementError endpoints
@router.get('/agreement_errors', response=List[AgreementError])
@paginate
def list_agreement_errors(request):
    return AgreementError.objects.all()


@router.get('/agreement_errors/{id}', response=AgreementError)
def get_agreement_error(request, id: int):
    return get_object_or_404(AgreementError, id=id)


@router.post('/agreement_errors', response=AgreementError)
def create_agreement_error(request, payload: AgreementErrorCreate):
    data = payload.dict()
    agreement_error = AgreementError.objects.create(**data)
    return agreement_error


@router.put('/agreement_errors/{id}', response=AgreementError)
def update_agreement_error(request, id: int, payload: AgreementErrorUpdate):
    agreement_error = get_object_or_404(AgreementError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_error, attr, value)
    agreement_error.save()
    return agreement_error


@router.delete('/agreement_errors/{id}')
def delete_agreement_error(request, id: int):
    agreement_error = get_object_or_404(AgreementError, id=id)
    agreement_error.delete()
    return {'success': True}


# AgreementDelete endpoints
@router.get('/agreement_deletes', response=List[AgreementDelete])
@paginate
def list_agreement_deletes(request):
    return AgreementDelete.objects.all()


@router.get('/agreement_deletes/{id}', response=AgreementDelete)
def get_agreement_delete(request, id: int):
    return get_object_or_404(AgreementDelete, id=id)


@router.post('/agreement_deletes', response=AgreementDelete)
def create_agreement_delete(request, payload: AgreementDeleteCreate):
    data = payload.dict()
    agreement_delete = AgreementDelete.objects.create(**data)
    return agreement_delete


@router.put('/agreement_deletes/{id}', response=AgreementDelete)
def update_agreement_delete(request, id: int, payload: AgreementDeleteUpdate):
    agreement_delete = get_object_or_404(AgreementDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_delete, attr, value)
    agreement_delete.save()
    return agreement_delete


@router.delete('/agreement_deletes/{id}')
def delete_agreement_delete(request, id: int):
    agreement_delete = get_object_or_404(AgreementDelete, id=id)
    agreement_delete.delete()
    return {'success': True}


# AgreementBulkDelete endpoints
@router.get('/agreement_bulk_deletes', response=List[AgreementBulkDelete])
@paginate
def list_agreement_bulk_deletes(request):
    return AgreementBulkDelete.objects.all()


@router.get('/agreement_bulk_deletes/{id}', response=AgreementBulkDelete)
def get_agreement_bulk_delete(request, id: int):
    return get_object_or_404(AgreementBulkDelete, id=id)


@router.post('/agreement_bulk_deletes', response=AgreementBulkDelete)
def create_agreement_bulk_delete(request, payload: AgreementBulkDeleteCreate):
    data = payload.dict()
    agreement_bulk_delete = AgreementBulkDelete.objects.create(**data)
    return agreement_bulk_delete


@router.put('/agreement_bulk_deletes/{id}', response=AgreementBulkDelete)
def update_agreement_bulk_delete(request, id: int, payload: AgreementBulkDeleteUpdate):
    agreement_bulk_delete = get_object_or_404(AgreementBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_bulk_delete, attr, value)
    agreement_bulk_delete.save()
    return agreement_bulk_delete


@router.delete('/agreement_bulk_deletes/{id}')
def delete_agreement_bulk_delete(request, id: int):
    agreement_bulk_delete = get_object_or_404(AgreementBulkDelete, id=id)
    agreement_bulk_delete.delete()
    return {'success': True}


# AgreementBulkPublish endpoints
@router.get('/agreement_bulk_publishs', response=List[AgreementBulkPublish])
@paginate
def list_agreement_bulk_publishs(request):
    return AgreementBulkPublish.objects.all()


@router.get('/agreement_bulk_publishs/{id}', response=AgreementBulkPublish)
def get_agreement_bulk_publish(request, id: int):
    return get_object_or_404(AgreementBulkPublish, id=id)


@router.post('/agreement_bulk_publishs', response=AgreementBulkPublish)
def create_agreement_bulk_publish(request, payload: AgreementBulkPublishCreate):
    data = payload.dict()
    agreement_bulk_publish = AgreementBulkPublish.objects.create(**data)
    return agreement_bulk_publish


@router.put('/agreement_bulk_publishs/{id}', response=AgreementBulkPublish)
def update_agreement_bulk_publish(request, id: int, payload: AgreementBulkPublishUpdate):
    agreement_bulk_publish = get_object_or_404(AgreementBulkPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_bulk_publish, attr, value)
    agreement_bulk_publish.save()
    return agreement_bulk_publish


@router.delete('/agreement_bulk_publishs/{id}')
def delete_agreement_bulk_publish(request, id: int):
    agreement_bulk_publish = get_object_or_404(AgreementBulkPublish, id=id)
    agreement_bulk_publish.delete()
    return {'success': True}


# AgreementUpdate endpoints
@router.get('/agreement_updates', response=List[AgreementUpdate])
@paginate
def list_agreement_updates(request):
    return AgreementUpdate.objects.all()


@router.get('/agreement_updates/{id}', response=AgreementUpdate)
def get_agreement_update(request, id: int):
    return get_object_or_404(AgreementUpdate, id=id)


@router.post('/agreement_updates', response=AgreementUpdate)
def create_agreement_update(request, payload: AgreementUpdateCreate):
    data = payload.dict()
    agreement_update = AgreementUpdate.objects.create(**data)
    return agreement_update


@router.put('/agreement_updates/{id}', response=AgreementUpdate)
def update_agreement_update(request, id: int, payload: AgreementUpdateUpdate):
    agreement_update = get_object_or_404(AgreementUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_update, attr, value)
    agreement_update.save()
    return agreement_update


@router.delete('/agreement_updates/{id}')
def delete_agreement_update(request, id: int):
    agreement_update = get_object_or_404(AgreementUpdate, id=id)
    agreement_update.delete()
    return {'success': True}


# AgreementFeeCreate endpoints
@router.get('/agreement_fee_creates', response=List[AgreementFeeCreate])
@paginate
def list_agreement_fee_creates(request):
    return AgreementFeeCreate.objects.all()


@router.get('/agreement_fee_creates/{id}', response=AgreementFeeCreate)
def get_agreement_fee_create(request, id: int):
    return get_object_or_404(AgreementFeeCreate, id=id)


@router.post('/agreement_fee_creates', response=AgreementFeeCreate)
def create_agreement_fee_create(request, payload: AgreementFeeCreateCreate):
    data = payload.dict()
    agreement_fee_create = AgreementFeeCreate.objects.create(**data)
    return agreement_fee_create


@router.put('/agreement_fee_creates/{id}', response=AgreementFeeCreate)
def update_agreement_fee_create(request, id: int, payload: AgreementFeeCreateUpdate):
    agreement_fee_create = get_object_or_404(AgreementFeeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_fee_create, attr, value)
    agreement_fee_create.save()
    return agreement_fee_create


@router.delete('/agreement_fee_creates/{id}')
def delete_agreement_fee_create(request, id: int):
    agreement_fee_create = get_object_or_404(AgreementFeeCreate, id=id)
    agreement_fee_create.delete()
    return {'success': True}


# AgreementFeeDelete endpoints
@router.get('/agreement_fee_deletes', response=List[AgreementFeeDelete])
@paginate
def list_agreement_fee_deletes(request):
    return AgreementFeeDelete.objects.all()


@router.get('/agreement_fee_deletes/{id}', response=AgreementFeeDelete)
def get_agreement_fee_delete(request, id: int):
    return get_object_or_404(AgreementFeeDelete, id=id)


@router.post('/agreement_fee_deletes', response=AgreementFeeDelete)
def create_agreement_fee_delete(request, payload: AgreementFeeDeleteCreate):
    data = payload.dict()
    agreement_fee_delete = AgreementFeeDelete.objects.create(**data)
    return agreement_fee_delete


@router.put('/agreement_fee_deletes/{id}', response=AgreementFeeDelete)
def update_agreement_fee_delete(request, id: int, payload: AgreementFeeDeleteUpdate):
    agreement_fee_delete = get_object_or_404(AgreementFeeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_fee_delete, attr, value)
    agreement_fee_delete.save()
    return agreement_fee_delete


@router.delete('/agreement_fee_deletes/{id}')
def delete_agreement_fee_delete(request, id: int):
    agreement_fee_delete = get_object_or_404(AgreementFeeDelete, id=id)
    agreement_fee_delete.delete()
    return {'success': True}


# AgreementCommissionCreate endpoints
@router.get('/agreement_commission_creates', response=List[AgreementCommissionCreate])
@paginate
def list_agreement_commission_creates(request):
    return AgreementCommissionCreate.objects.all()


@router.get('/agreement_commission_creates/{id}', response=AgreementCommissionCreate)
def get_agreement_commission_create(request, id: int):
    return get_object_or_404(AgreementCommissionCreate, id=id)


@router.post('/agreement_commission_creates', response=AgreementCommissionCreate)
def create_agreement_commission_create(request, payload: AgreementCommissionCreateCreate):
    data = payload.dict()
    agreement_commission_create = AgreementCommissionCreate.objects.create(**data)
    return agreement_commission_create


@router.put('/agreement_commission_creates/{id}', response=AgreementCommissionCreate)
def update_agreement_commission_create(request, id: int, payload: AgreementCommissionCreateUpdate):
    agreement_commission_create = get_object_or_404(AgreementCommissionCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_commission_create, attr, value)
    agreement_commission_create.save()
    return agreement_commission_create


@router.delete('/agreement_commission_creates/{id}')
def delete_agreement_commission_create(request, id: int):
    agreement_commission_create = get_object_or_404(AgreementCommissionCreate, id=id)
    agreement_commission_create.delete()
    return {'success': True}


# AgreementCommissionDelete endpoints
@router.get('/agreement_commission_deletes', response=List[AgreementCommissionDelete])
@paginate
def list_agreement_commission_deletes(request):
    return AgreementCommissionDelete.objects.all()


@router.get('/agreement_commission_deletes/{id}', response=AgreementCommissionDelete)
def get_agreement_commission_delete(request, id: int):
    return get_object_or_404(AgreementCommissionDelete, id=id)


@router.post('/agreement_commission_deletes', response=AgreementCommissionDelete)
def create_agreement_commission_delete(request, payload: AgreementCommissionDeleteCreate):
    data = payload.dict()
    agreement_commission_delete = AgreementCommissionDelete.objects.create(**data)
    return agreement_commission_delete


@router.put('/agreement_commission_deletes/{id}', response=AgreementCommissionDelete)
def update_agreement_commission_delete(request, id: int, payload: AgreementCommissionDeleteUpdate):
    agreement_commission_delete = get_object_or_404(AgreementCommissionDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(agreement_commission_delete, attr, value)
    agreement_commission_delete.save()
    return agreement_commission_delete


@router.delete('/agreement_commission_deletes/{id}')
def delete_agreement_commission_delete(request, id: int):
    agreement_commission_delete = get_object_or_404(AgreementCommissionDelete, id=id)
    agreement_commission_delete.delete()
    return {'success': True}


# SellerAgreementAcknowledge endpoints
@router.get('/seller_agreement_acknowledges', response=List[SellerAgreementAcknowledge])
@paginate
def list_seller_agreement_acknowledges(request):
    return SellerAgreementAcknowledge.objects.all()


@router.get('/seller_agreement_acknowledges/{id}', response=SellerAgreementAcknowledge)
def get_seller_agreement_acknowledge(request, id: int):
    return get_object_or_404(SellerAgreementAcknowledge, id=id)


@router.post('/seller_agreement_acknowledges', response=SellerAgreementAcknowledge)
def create_seller_agreement_acknowledge(request, payload: SellerAgreementAcknowledgeCreate):
    data = payload.dict()
    seller_agreement_acknowledge = SellerAgreementAcknowledge.objects.create(**data)
    return seller_agreement_acknowledge


@router.put('/seller_agreement_acknowledges/{id}', response=SellerAgreementAcknowledge)
def update_seller_agreement_acknowledge(request, id: int, payload: SellerAgreementAcknowledgeUpdate):
    seller_agreement_acknowledge = get_object_or_404(SellerAgreementAcknowledge, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_agreement_acknowledge, attr, value)
    seller_agreement_acknowledge.save()
    return seller_agreement_acknowledge


@router.delete('/seller_agreement_acknowledges/{id}')
def delete_seller_agreement_acknowledge(request, id: int):
    seller_agreement_acknowledge = get_object_or_404(SellerAgreementAcknowledge, id=id)
    seller_agreement_acknowledge.delete()
    return {'success': True}


# SellerAgreementDecline endpoints
@router.get('/seller_agreement_declines', response=List[SellerAgreementDecline])
@paginate
def list_seller_agreement_declines(request):
    return SellerAgreementDecline.objects.all()


@router.get('/seller_agreement_declines/{id}', response=SellerAgreementDecline)
def get_seller_agreement_decline(request, id: int):
    return get_object_or_404(SellerAgreementDecline, id=id)


@router.post('/seller_agreement_declines', response=SellerAgreementDecline)
def create_seller_agreement_decline(request, payload: SellerAgreementDeclineCreate):
    data = payload.dict()
    seller_agreement_decline = SellerAgreementDecline.objects.create(**data)
    return seller_agreement_decline


@router.put('/seller_agreement_declines/{id}', response=SellerAgreementDecline)
def update_seller_agreement_decline(request, id: int, payload: SellerAgreementDeclineUpdate):
    seller_agreement_decline = get_object_or_404(SellerAgreementDecline, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_agreement_decline, attr, value)
    seller_agreement_decline.save()
    return seller_agreement_decline


@router.delete('/seller_agreement_declines/{id}')
def delete_seller_agreement_decline(request, id: int):
    seller_agreement_decline = get_object_or_404(SellerAgreementDecline, id=id)
    seller_agreement_decline.delete()
    return {'success': True}


# SellerAgreementAssign endpoints
@router.get('/seller_agreement_assigns', response=List[SellerAgreementAssign])
@paginate
def list_seller_agreement_assigns(request):
    return SellerAgreementAssign.objects.all()


@router.get('/seller_agreement_assigns/{id}', response=SellerAgreementAssign)
def get_seller_agreement_assign(request, id: int):
    return get_object_or_404(SellerAgreementAssign, id=id)


@router.post('/seller_agreement_assigns', response=SellerAgreementAssign)
def create_seller_agreement_assign(request, payload: SellerAgreementAssignCreate):
    data = payload.dict()
    seller_agreement_assign = SellerAgreementAssign.objects.create(**data)
    return seller_agreement_assign


@router.put('/seller_agreement_assigns/{id}', response=SellerAgreementAssign)
def update_seller_agreement_assign(request, id: int, payload: SellerAgreementAssignUpdate):
    seller_agreement_assign = get_object_or_404(SellerAgreementAssign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_agreement_assign, attr, value)
    seller_agreement_assign.save()
    return seller_agreement_assign


@router.delete('/seller_agreement_assigns/{id}')
def delete_seller_agreement_assign(request, id: int):
    seller_agreement_assign = get_object_or_404(SellerAgreementAssign, id=id)
    seller_agreement_assign.delete()
    return {'success': True}


# SellerAgreementDelete endpoints
@router.get('/seller_agreement_deletes', response=List[SellerAgreementDelete])
@paginate
def list_seller_agreement_deletes(request):
    return SellerAgreementDelete.objects.all()


@router.get('/seller_agreement_deletes/{id}', response=SellerAgreementDelete)
def get_seller_agreement_delete(request, id: int):
    return get_object_or_404(SellerAgreementDelete, id=id)


@router.post('/seller_agreement_deletes', response=SellerAgreementDelete)
def create_seller_agreement_delete(request, payload: SellerAgreementDeleteCreate):
    data = payload.dict()
    seller_agreement_delete = SellerAgreementDelete.objects.create(**data)
    return seller_agreement_delete


@router.put('/seller_agreement_deletes/{id}', response=SellerAgreementDelete)
def update_seller_agreement_delete(request, id: int, payload: SellerAgreementDeleteUpdate):
    seller_agreement_delete = get_object_or_404(SellerAgreementDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_agreement_delete, attr, value)
    seller_agreement_delete.save()
    return seller_agreement_delete


@router.delete('/seller_agreement_deletes/{id}')
def delete_seller_agreement_delete(request, id: int):
    seller_agreement_delete = get_object_or_404(SellerAgreementDelete, id=id)
    seller_agreement_delete.delete()
    return {'success': True}


# SellerWithOwnerCreate endpoints
@router.get('/seller_with_owner_creates', response=List[SellerWithOwnerCreate])
@paginate
def list_seller_with_owner_creates(request):
    return SellerWithOwnerCreate.objects.all()


@router.get('/seller_with_owner_creates/{id}', response=SellerWithOwnerCreate)
def get_seller_with_owner_create(request, id: int):
    return get_object_or_404(SellerWithOwnerCreate, id=id)


@router.post('/seller_with_owner_creates', response=SellerWithOwnerCreate)
def create_seller_with_owner_create(request, payload: SellerWithOwnerCreateCreate):
    data = payload.dict()
    seller_with_owner_create = SellerWithOwnerCreate.objects.create(**data)
    return seller_with_owner_create


@router.put('/seller_with_owner_creates/{id}', response=SellerWithOwnerCreate)
def update_seller_with_owner_create(request, id: int, payload: SellerWithOwnerCreateUpdate):
    seller_with_owner_create = get_object_or_404(SellerWithOwnerCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_with_owner_create, attr, value)
    seller_with_owner_create.save()
    return seller_with_owner_create


@router.delete('/seller_with_owner_creates/{id}')
def delete_seller_with_owner_create(request, id: int):
    seller_with_owner_create = get_object_or_404(SellerWithOwnerCreate, id=id)
    seller_with_owner_create.delete()
    return {'success': True}


# SellerError endpoints
@router.get('/seller_errors', response=List[SellerError])
@paginate
def list_seller_errors(request):
    return SellerError.objects.all()


@router.get('/seller_errors/{id}', response=SellerError)
def get_seller_error(request, id: int):
    return get_object_or_404(SellerError, id=id)


@router.post('/seller_errors', response=SellerError)
def create_seller_error(request, payload: SellerErrorCreate):
    data = payload.dict()
    seller_error = SellerError.objects.create(**data)
    return seller_error


@router.put('/seller_errors/{id}', response=SellerError)
def update_seller_error(request, id: int, payload: SellerErrorUpdate):
    seller_error = get_object_or_404(SellerError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_error, attr, value)
    seller_error.save()
    return seller_error


@router.delete('/seller_errors/{id}')
def delete_seller_error(request, id: int):
    seller_error = get_object_or_404(SellerError, id=id)
    seller_error.delete()
    return {'success': True}


# SellerDataCreate endpoints
@router.get('/seller_data_creates', response=List[SellerDataCreate])
@paginate
def list_seller_data_creates(request):
    return SellerDataCreate.objects.all()


@router.get('/seller_data_creates/{id}', response=SellerDataCreate)
def get_seller_data_create(request, id: int):
    return get_object_or_404(SellerDataCreate, id=id)


@router.post('/seller_data_creates', response=SellerDataCreate)
def create_seller_data_create(request, payload: SellerDataCreateCreate):
    data = payload.dict()
    seller_data_create = SellerDataCreate.objects.create(**data)
    return seller_data_create


@router.put('/seller_data_creates/{id}', response=SellerDataCreate)
def update_seller_data_create(request, id: int, payload: SellerDataCreateUpdate):
    seller_data_create = get_object_or_404(SellerDataCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_data_create, attr, value)
    seller_data_create.save()
    return seller_data_create


@router.delete('/seller_data_creates/{id}')
def delete_seller_data_create(request, id: int):
    seller_data_create = get_object_or_404(SellerDataCreate, id=id)
    seller_data_create.delete()
    return {'success': True}


# SellerUserMappingCreate endpoints
@router.get('/seller_user_mapping_creates', response=List[SellerUserMappingCreate])
@paginate
def list_seller_user_mapping_creates(request):
    return SellerUserMappingCreate.objects.all()


@router.get('/seller_user_mapping_creates/{id}', response=SellerUserMappingCreate)
def get_seller_user_mapping_create(request, id: int):
    return get_object_or_404(SellerUserMappingCreate, id=id)


@router.post('/seller_user_mapping_creates', response=SellerUserMappingCreate)
def create_seller_user_mapping_create(request, payload: SellerUserMappingCreateCreate):
    data = payload.dict()
    seller_user_mapping_create = SellerUserMappingCreate.objects.create(**data)
    return seller_user_mapping_create


@router.put('/seller_user_mapping_creates/{id}', response=SellerUserMappingCreate)
def update_seller_user_mapping_create(request, id: int, payload: SellerUserMappingCreateUpdate):
    seller_user_mapping_create = get_object_or_404(SellerUserMappingCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_user_mapping_create, attr, value)
    seller_user_mapping_create.save()
    return seller_user_mapping_create


@router.delete('/seller_user_mapping_creates/{id}')
def delete_seller_user_mapping_create(request, id: int):
    seller_user_mapping_create = get_object_or_404(SellerUserMappingCreate, id=id)
    seller_user_mapping_create.delete()
    return {'success': True}


# SellerDataUpdate endpoints
@router.get('/seller_data_updates', response=List[SellerDataUpdate])
@paginate
def list_seller_data_updates(request):
    return SellerDataUpdate.objects.all()


@router.get('/seller_data_updates/{id}', response=SellerDataUpdate)
def get_seller_data_update(request, id: int):
    return get_object_or_404(SellerDataUpdate, id=id)


@router.post('/seller_data_updates', response=SellerDataUpdate)
def create_seller_data_update(request, payload: SellerDataUpdateCreate):
    data = payload.dict()
    seller_data_update = SellerDataUpdate.objects.create(**data)
    return seller_data_update


@router.put('/seller_data_updates/{id}', response=SellerDataUpdate)
def update_seller_data_update(request, id: int, payload: SellerDataUpdateUpdate):
    seller_data_update = get_object_or_404(SellerDataUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_data_update, attr, value)
    seller_data_update.save()
    return seller_data_update


@router.delete('/seller_data_updates/{id}')
def delete_seller_data_update(request, id: int):
    seller_data_update = get_object_or_404(SellerDataUpdate, id=id)
    seller_data_update.delete()
    return {'success': True}


# SellerNoteCreate endpoints
@router.get('/seller_note_creates', response=List[SellerNoteCreate])
@paginate
def list_seller_note_creates(request):
    return SellerNoteCreate.objects.all()


@router.get('/seller_note_creates/{id}', response=SellerNoteCreate)
def get_seller_note_create(request, id: int):
    return get_object_or_404(SellerNoteCreate, id=id)


@router.post('/seller_note_creates', response=SellerNoteCreate)
def create_seller_note_create(request, payload: SellerNoteCreateCreate):
    data = payload.dict()
    seller_note_create = SellerNoteCreate.objects.create(**data)
    return seller_note_create


@router.put('/seller_note_creates/{id}', response=SellerNoteCreate)
def update_seller_note_create(request, id: int, payload: SellerNoteCreateUpdate):
    seller_note_create = get_object_or_404(SellerNoteCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_note_create, attr, value)
    seller_note_create.save()
    return seller_note_create


@router.delete('/seller_note_creates/{id}')
def delete_seller_note_create(request, id: int):
    seller_note_create = get_object_or_404(SellerNoteCreate, id=id)
    seller_note_create.delete()
    return {'success': True}


# SellerLogoUpdate endpoints
@router.get('/seller_logo_updates', response=List[SellerLogoUpdate])
@paginate
def list_seller_logo_updates(request):
    return SellerLogoUpdate.objects.all()


@router.get('/seller_logo_updates/{id}', response=SellerLogoUpdate)
def get_seller_logo_update(request, id: int):
    return get_object_or_404(SellerLogoUpdate, id=id)


@router.post('/seller_logo_updates', response=SellerLogoUpdate)
def create_seller_logo_update(request, payload: SellerLogoUpdateCreate):
    data = payload.dict()
    seller_logo_update = SellerLogoUpdate.objects.create(**data)
    return seller_logo_update


@router.put('/seller_logo_updates/{id}', response=SellerLogoUpdate)
def update_seller_logo_update(request, id: int, payload: SellerLogoUpdateUpdate):
    seller_logo_update = get_object_or_404(SellerLogoUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_logo_update, attr, value)
    seller_logo_update.save()
    return seller_logo_update


@router.delete('/seller_logo_updates/{id}')
def delete_seller_logo_update(request, id: int):
    seller_logo_update = get_object_or_404(SellerLogoUpdate, id=id)
    seller_logo_update.delete()
    return {'success': True}


# SellerLogoDelete endpoints
@router.get('/seller_logo_deletes', response=List[SellerLogoDelete])
@paginate
def list_seller_logo_deletes(request):
    return SellerLogoDelete.objects.all()


@router.get('/seller_logo_deletes/{id}', response=SellerLogoDelete)
def get_seller_logo_delete(request, id: int):
    return get_object_or_404(SellerLogoDelete, id=id)


@router.post('/seller_logo_deletes', response=SellerLogoDelete)
def create_seller_logo_delete(request, payload: SellerLogoDeleteCreate):
    data = payload.dict()
    seller_logo_delete = SellerLogoDelete.objects.create(**data)
    return seller_logo_delete


@router.put('/seller_logo_deletes/{id}', response=SellerLogoDelete)
def update_seller_logo_delete(request, id: int, payload: SellerLogoDeleteUpdate):
    seller_logo_delete = get_object_or_404(SellerLogoDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_logo_delete, attr, value)
    seller_logo_delete.save()
    return seller_logo_delete


@router.delete('/seller_logo_deletes/{id}')
def delete_seller_logo_delete(request, id: int):
    seller_logo_delete = get_object_or_404(SellerLogoDelete, id=id)
    seller_logo_delete.delete()
    return {'success': True}


# SellerBannerUpdate endpoints
@router.get('/seller_banner_updates', response=List[SellerBannerUpdate])
@paginate
def list_seller_banner_updates(request):
    return SellerBannerUpdate.objects.all()


@router.get('/seller_banner_updates/{id}', response=SellerBannerUpdate)
def get_seller_banner_update(request, id: int):
    return get_object_or_404(SellerBannerUpdate, id=id)


@router.post('/seller_banner_updates', response=SellerBannerUpdate)
def create_seller_banner_update(request, payload: SellerBannerUpdateCreate):
    data = payload.dict()
    seller_banner_update = SellerBannerUpdate.objects.create(**data)
    return seller_banner_update


@router.put('/seller_banner_updates/{id}', response=SellerBannerUpdate)
def update_seller_banner_update(request, id: int, payload: SellerBannerUpdateUpdate):
    seller_banner_update = get_object_or_404(SellerBannerUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_banner_update, attr, value)
    seller_banner_update.save()
    return seller_banner_update


@router.delete('/seller_banner_updates/{id}')
def delete_seller_banner_update(request, id: int):
    seller_banner_update = get_object_or_404(SellerBannerUpdate, id=id)
    seller_banner_update.delete()
    return {'success': True}


# SellerBannerDelete endpoints
@router.get('/seller_banner_deletes', response=List[SellerBannerDelete])
@paginate
def list_seller_banner_deletes(request):
    return SellerBannerDelete.objects.all()


@router.get('/seller_banner_deletes/{id}', response=SellerBannerDelete)
def get_seller_banner_delete(request, id: int):
    return get_object_or_404(SellerBannerDelete, id=id)


@router.post('/seller_banner_deletes', response=SellerBannerDelete)
def create_seller_banner_delete(request, payload: SellerBannerDeleteCreate):
    data = payload.dict()
    seller_banner_delete = SellerBannerDelete.objects.create(**data)
    return seller_banner_delete


@router.put('/seller_banner_deletes/{id}', response=SellerBannerDelete)
def update_seller_banner_delete(request, id: int, payload: SellerBannerDeleteUpdate):
    seller_banner_delete = get_object_or_404(SellerBannerDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_banner_delete, attr, value)
    seller_banner_delete.save()
    return seller_banner_delete


@router.delete('/seller_banner_deletes/{id}')
def delete_seller_banner_delete(request, id: int):
    seller_banner_delete = get_object_or_404(SellerBannerDelete, id=id)
    seller_banner_delete.delete()
    return {'success': True}


# SellerAddressCreate endpoints
@router.get('/seller_address_creates', response=List[SellerAddressCreate])
@paginate
def list_seller_address_creates(request):
    return SellerAddressCreate.objects.all()


@router.get('/seller_address_creates/{id}', response=SellerAddressCreate)
def get_seller_address_create(request, id: int):
    return get_object_or_404(SellerAddressCreate, id=id)


@router.post('/seller_address_creates', response=SellerAddressCreate)
def create_seller_address_create(request, payload: SellerAddressCreateCreate):
    data = payload.dict()
    seller_address_create = SellerAddressCreate.objects.create(**data)
    return seller_address_create


@router.put('/seller_address_creates/{id}', response=SellerAddressCreate)
def update_seller_address_create(request, id: int, payload: SellerAddressCreateUpdate):
    seller_address_create = get_object_or_404(SellerAddressCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_address_create, attr, value)
    seller_address_create.save()
    return seller_address_create


@router.delete('/seller_address_creates/{id}')
def delete_seller_address_create(request, id: int):
    seller_address_create = get_object_or_404(SellerAddressCreate, id=id)
    seller_address_create.delete()
    return {'success': True}


# SellerAddressUpdate endpoints
@router.get('/seller_address_updates', response=List[SellerAddressUpdate])
@paginate
def list_seller_address_updates(request):
    return SellerAddressUpdate.objects.all()


@router.get('/seller_address_updates/{id}', response=SellerAddressUpdate)
def get_seller_address_update(request, id: int):
    return get_object_or_404(SellerAddressUpdate, id=id)


@router.post('/seller_address_updates', response=SellerAddressUpdate)
def create_seller_address_update(request, payload: SellerAddressUpdateCreate):
    data = payload.dict()
    seller_address_update = SellerAddressUpdate.objects.create(**data)
    return seller_address_update


@router.put('/seller_address_updates/{id}', response=SellerAddressUpdate)
def update_seller_address_update(request, id: int, payload: SellerAddressUpdateUpdate):
    seller_address_update = get_object_or_404(SellerAddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_address_update, attr, value)
    seller_address_update.save()
    return seller_address_update


@router.delete('/seller_address_updates/{id}')
def delete_seller_address_update(request, id: int):
    seller_address_update = get_object_or_404(SellerAddressUpdate, id=id)
    seller_address_update.delete()
    return {'success': True}


# SellerAddressDelete endpoints
@router.get('/seller_address_deletes', response=List[SellerAddressDelete])
@paginate
def list_seller_address_deletes(request):
    return SellerAddressDelete.objects.all()


@router.get('/seller_address_deletes/{id}', response=SellerAddressDelete)
def get_seller_address_delete(request, id: int):
    return get_object_or_404(SellerAddressDelete, id=id)


@router.post('/seller_address_deletes', response=SellerAddressDelete)
def create_seller_address_delete(request, payload: SellerAddressDeleteCreate):
    data = payload.dict()
    seller_address_delete = SellerAddressDelete.objects.create(**data)
    return seller_address_delete


@router.put('/seller_address_deletes/{id}', response=SellerAddressDelete)
def update_seller_address_delete(request, id: int, payload: SellerAddressDeleteUpdate):
    seller_address_delete = get_object_or_404(SellerAddressDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_address_delete, attr, value)
    seller_address_delete.save()
    return seller_address_delete


@router.delete('/seller_address_deletes/{id}')
def delete_seller_address_delete(request, id: int):
    seller_address_delete = get_object_or_404(SellerAddressDelete, id=id)
    seller_address_delete.delete()
    return {'success': True}


# SellerAddressSetDefault endpoints
@router.get('/seller_address_set_defaults', response=List[SellerAddressSetDefault])
@paginate
def list_seller_address_set_defaults(request):
    return SellerAddressSetDefault.objects.all()


@router.get('/seller_address_set_defaults/{id}', response=SellerAddressSetDefault)
def get_seller_address_set_default(request, id: int):
    return get_object_or_404(SellerAddressSetDefault, id=id)


@router.post('/seller_address_set_defaults', response=SellerAddressSetDefault)
def create_seller_address_set_default(request, payload: SellerAddressSetDefaultCreate):
    data = payload.dict()
    seller_address_set_default = SellerAddressSetDefault.objects.create(**data)
    return seller_address_set_default


@router.put('/seller_address_set_defaults/{id}', response=SellerAddressSetDefault)
def update_seller_address_set_default(request, id: int, payload: SellerAddressSetDefaultUpdate):
    seller_address_set_default = get_object_or_404(SellerAddressSetDefault, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_address_set_default, attr, value)
    seller_address_set_default.save()
    return seller_address_set_default


@router.delete('/seller_address_set_defaults/{id}')
def delete_seller_address_set_default(request, id: int):
    seller_address_set_default = get_object_or_404(SellerAddressSetDefault, id=id)
    seller_address_set_default.delete()
    return {'success': True}


# SellerOwnerDelete endpoints
@router.get('/seller_owner_deletes', response=List[SellerOwnerDelete])
@paginate
def list_seller_owner_deletes(request):
    return SellerOwnerDelete.objects.all()


@router.get('/seller_owner_deletes/{id}', response=SellerOwnerDelete)
def get_seller_owner_delete(request, id: int):
    return get_object_or_404(SellerOwnerDelete, id=id)


@router.post('/seller_owner_deletes', response=SellerOwnerDelete)
def create_seller_owner_delete(request, payload: SellerOwnerDeleteCreate):
    data = payload.dict()
    seller_owner_delete = SellerOwnerDelete.objects.create(**data)
    return seller_owner_delete


@router.put('/seller_owner_deletes/{id}', response=SellerOwnerDelete)
def update_seller_owner_delete(request, id: int, payload: SellerOwnerDeleteUpdate):
    seller_owner_delete = get_object_or_404(SellerOwnerDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_owner_delete, attr, value)
    seller_owner_delete.save()
    return seller_owner_delete


@router.delete('/seller_owner_deletes/{id}')
def delete_seller_owner_delete(request, id: int):
    seller_owner_delete = get_object_or_404(SellerOwnerDelete, id=id)
    seller_owner_delete.delete()
    return {'success': True}


# SellerShellCreate endpoints
@router.get('/seller_shell_creates', response=List[SellerShellCreate])
@paginate
def list_seller_shell_creates(request):
    return SellerShellCreate.objects.all()


@router.get('/seller_shell_creates/{id}', response=SellerShellCreate)
def get_seller_shell_create(request, id: int):
    return get_object_or_404(SellerShellCreate, id=id)


@router.post('/seller_shell_creates', response=SellerShellCreate)
def create_seller_shell_create(request, payload: SellerShellCreateCreate):
    data = payload.dict()
    seller_shell_create = SellerShellCreate.objects.create(**data)
    return seller_shell_create


@router.put('/seller_shell_creates/{id}', response=SellerShellCreate)
def update_seller_shell_create(request, id: int, payload: SellerShellCreateUpdate):
    seller_shell_create = get_object_or_404(SellerShellCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_shell_create, attr, value)
    seller_shell_create.save()
    return seller_shell_create


@router.delete('/seller_shell_creates/{id}')
def delete_seller_shell_create(request, id: int):
    seller_shell_create = get_object_or_404(SellerShellCreate, id=id)
    seller_shell_create.delete()
    return {'success': True}


# SellerSettingsUpdate endpoints
@router.get('/seller_settings_updates', response=List[SellerSettingsUpdate])
@paginate
def list_seller_settings_updates(request):
    return SellerSettingsUpdate.objects.all()


@router.get('/seller_settings_updates/{id}', response=SellerSettingsUpdate)
def get_seller_settings_update(request, id: int):
    return get_object_or_404(SellerSettingsUpdate, id=id)


@router.post('/seller_settings_updates', response=SellerSettingsUpdate)
def create_seller_settings_update(request, payload: SellerSettingsUpdateCreate):
    data = payload.dict()
    seller_settings_update = SellerSettingsUpdate.objects.create(**data)
    return seller_settings_update


@router.put('/seller_settings_updates/{id}', response=SellerSettingsUpdate)
def update_seller_settings_update(request, id: int, payload: SellerSettingsUpdateUpdate):
    seller_settings_update = get_object_or_404(SellerSettingsUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_settings_update, attr, value)
    seller_settings_update.save()
    return seller_settings_update


@router.delete('/seller_settings_updates/{id}')
def delete_seller_settings_update(request, id: int):
    seller_settings_update = get_object_or_404(SellerSettingsUpdate, id=id)
    seller_settings_update.delete()
    return {'success': True}


# SellerOnboardingChecklistComplete endpoints
@router.get('/seller_onboarding_checklist_completes', response=List[SellerOnboardingChecklistComplete])
@paginate
def list_seller_onboarding_checklist_completes(request):
    return SellerOnboardingChecklistComplete.objects.all()


@router.get('/seller_onboarding_checklist_completes/{id}', response=SellerOnboardingChecklistComplete)
def get_seller_onboarding_checklist_complete(request, id: int):
    return get_object_or_404(SellerOnboardingChecklistComplete, id=id)


@router.post('/seller_onboarding_checklist_completes', response=SellerOnboardingChecklistComplete)
def create_seller_onboarding_checklist_complete(request, payload: SellerOnboardingChecklistCompleteCreate):
    data = payload.dict()
    seller_onboarding_checklist_complete = SellerOnboardingChecklistComplete.objects.create(**data)
    return seller_onboarding_checklist_complete


@router.put('/seller_onboarding_checklist_completes/{id}', response=SellerOnboardingChecklistComplete)
def update_seller_onboarding_checklist_complete(request, id: int, payload: SellerOnboardingChecklistCompleteUpdate):
    seller_onboarding_checklist_complete = get_object_or_404(SellerOnboardingChecklistComplete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_checklist_complete, attr, value)
    seller_onboarding_checklist_complete.save()
    return seller_onboarding_checklist_complete


@router.delete('/seller_onboarding_checklist_completes/{id}')
def delete_seller_onboarding_checklist_complete(request, id: int):
    seller_onboarding_checklist_complete = get_object_or_404(SellerOnboardingChecklistComplete, id=id)
    seller_onboarding_checklist_complete.delete()
    return {'success': True}


# SellerOnboardingChecklistError endpoints
@router.get('/seller_onboarding_checklist_errors', response=List[SellerOnboardingChecklistError])
@paginate
def list_seller_onboarding_checklist_errors(request):
    return SellerOnboardingChecklistError.objects.all()


@router.get('/seller_onboarding_checklist_errors/{id}', response=SellerOnboardingChecklistError)
def get_seller_onboarding_checklist_error(request, id: int):
    return get_object_or_404(SellerOnboardingChecklistError, id=id)


@router.post('/seller_onboarding_checklist_errors', response=SellerOnboardingChecklistError)
def create_seller_onboarding_checklist_error(request, payload: SellerOnboardingChecklistErrorCreate):
    data = payload.dict()
    seller_onboarding_checklist_error = SellerOnboardingChecklistError.objects.create(**data)
    return seller_onboarding_checklist_error


@router.put('/seller_onboarding_checklist_errors/{id}', response=SellerOnboardingChecklistError)
def update_seller_onboarding_checklist_error(request, id: int, payload: SellerOnboardingChecklistErrorUpdate):
    seller_onboarding_checklist_error = get_object_or_404(SellerOnboardingChecklistError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_checklist_error, attr, value)
    seller_onboarding_checklist_error.save()
    return seller_onboarding_checklist_error


@router.delete('/seller_onboarding_checklist_errors/{id}')
def delete_seller_onboarding_checklist_error(request, id: int):
    seller_onboarding_checklist_error = get_object_or_404(SellerOnboardingChecklistError, id=id)
    seller_onboarding_checklist_error.delete()
    return {'success': True}


# SellerApplicationUpdate endpoints
@router.get('/seller_application_updates', response=List[SellerApplicationUpdate])
@paginate
def list_seller_application_updates(request):
    return SellerApplicationUpdate.objects.all()


@router.get('/seller_application_updates/{id}', response=SellerApplicationUpdate)
def get_seller_application_update(request, id: int):
    return get_object_or_404(SellerApplicationUpdate, id=id)


@router.post('/seller_application_updates', response=SellerApplicationUpdate)
def create_seller_application_update(request, payload: SellerApplicationUpdateCreate):
    data = payload.dict()
    seller_application_update = SellerApplicationUpdate.objects.create(**data)
    return seller_application_update


@router.put('/seller_application_updates/{id}', response=SellerApplicationUpdate)
def update_seller_application_update(request, id: int, payload: SellerApplicationUpdateUpdate):
    seller_application_update = get_object_or_404(SellerApplicationUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_application_update, attr, value)
    seller_application_update.save()
    return seller_application_update


@router.delete('/seller_application_updates/{id}')
def delete_seller_application_update(request, id: int):
    seller_application_update = get_object_or_404(SellerApplicationUpdate, id=id)
    seller_application_update.delete()
    return {'success': True}


# DesignerDataCreate endpoints
@router.get('/designer_data_creates', response=List[DesignerDataCreate])
@paginate
def list_designer_data_creates(request):
    return DesignerDataCreate.objects.all()


@router.get('/designer_data_creates/{id}', response=DesignerDataCreate)
def get_designer_data_create(request, id: int):
    return get_object_or_404(DesignerDataCreate, id=id)


@router.post('/designer_data_creates', response=DesignerDataCreate)
def create_designer_data_create(request, payload: DesignerDataCreateCreate):
    data = payload.dict()
    designer_data_create = DesignerDataCreate.objects.create(**data)
    return designer_data_create


@router.put('/designer_data_creates/{id}', response=DesignerDataCreate)
def update_designer_data_create(request, id: int, payload: DesignerDataCreateUpdate):
    designer_data_create = get_object_or_404(DesignerDataCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(designer_data_create, attr, value)
    designer_data_create.save()
    return designer_data_create


@router.delete('/designer_data_creates/{id}')
def delete_designer_data_create(request, id: int):
    designer_data_create = get_object_or_404(DesignerDataCreate, id=id)
    designer_data_create.delete()
    return {'success': True}


# DesignerDataUpdate endpoints
@router.get('/designer_data_updates', response=List[DesignerDataUpdate])
@paginate
def list_designer_data_updates(request):
    return DesignerDataUpdate.objects.all()


@router.get('/designer_data_updates/{id}', response=DesignerDataUpdate)
def get_designer_data_update(request, id: int):
    return get_object_or_404(DesignerDataUpdate, id=id)


@router.post('/designer_data_updates', response=DesignerDataUpdate)
def create_designer_data_update(request, payload: DesignerDataUpdateCreate):
    data = payload.dict()
    designer_data_update = DesignerDataUpdate.objects.create(**data)
    return designer_data_update


@router.put('/designer_data_updates/{id}', response=DesignerDataUpdate)
def update_designer_data_update(request, id: int, payload: DesignerDataUpdateUpdate):
    designer_data_update = get_object_or_404(DesignerDataUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(designer_data_update, attr, value)
    designer_data_update.save()
    return designer_data_update


@router.delete('/designer_data_updates/{id}')
def delete_designer_data_update(request, id: int):
    designer_data_update = get_object_or_404(DesignerDataUpdate, id=id)
    designer_data_update.delete()
    return {'success': True}


# WebhookCreate endpoints
@router.get('/webhook_creates', response=List[WebhookCreate])
@paginate
def list_webhook_creates(request):
    return WebhookCreate.objects.all()


@router.get('/webhook_creates/{id}', response=WebhookCreate)
def get_webhook_create(request, id: int):
    return get_object_or_404(WebhookCreate, id=id)


@router.post('/webhook_creates', response=WebhookCreate)
def create_webhook_create(request, payload: WebhookCreateCreate):
    data = payload.dict()
    webhook_create = WebhookCreate.objects.create(**data)
    return webhook_create


@router.put('/webhook_creates/{id}', response=WebhookCreate)
def update_webhook_create(request, id: int, payload: WebhookCreateUpdate):
    webhook_create = get_object_or_404(WebhookCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_create, attr, value)
    webhook_create.save()
    return webhook_create


@router.delete('/webhook_creates/{id}')
def delete_webhook_create(request, id: int):
    webhook_create = get_object_or_404(WebhookCreate, id=id)
    webhook_create.delete()
    return {'success': True}


# WebhookError endpoints
@router.get('/webhook_errors', response=List[WebhookError])
@paginate
def list_webhook_errors(request):
    return WebhookError.objects.all()


@router.get('/webhook_errors/{id}', response=WebhookError)
def get_webhook_error(request, id: int):
    return get_object_or_404(WebhookError, id=id)


@router.post('/webhook_errors', response=WebhookError)
def create_webhook_error(request, payload: WebhookErrorCreate):
    data = payload.dict()
    webhook_error = WebhookError.objects.create(**data)
    return webhook_error


@router.put('/webhook_errors/{id}', response=WebhookError)
def update_webhook_error(request, id: int, payload: WebhookErrorUpdate):
    webhook_error = get_object_or_404(WebhookError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_error, attr, value)
    webhook_error.save()
    return webhook_error


@router.delete('/webhook_errors/{id}')
def delete_webhook_error(request, id: int):
    webhook_error = get_object_or_404(WebhookError, id=id)
    webhook_error.delete()
    return {'success': True}


# WebhookDelete endpoints
@router.get('/webhook_deletes', response=List[WebhookDelete])
@paginate
def list_webhook_deletes(request):
    return WebhookDelete.objects.all()


@router.get('/webhook_deletes/{id}', response=WebhookDelete)
def get_webhook_delete(request, id: int):
    return get_object_or_404(WebhookDelete, id=id)


@router.post('/webhook_deletes', response=WebhookDelete)
def create_webhook_delete(request, payload: WebhookDeleteCreate):
    data = payload.dict()
    webhook_delete = WebhookDelete.objects.create(**data)
    return webhook_delete


@router.put('/webhook_deletes/{id}', response=WebhookDelete)
def update_webhook_delete(request, id: int, payload: WebhookDeleteUpdate):
    webhook_delete = get_object_or_404(WebhookDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_delete, attr, value)
    webhook_delete.save()
    return webhook_delete


@router.delete('/webhook_deletes/{id}')
def delete_webhook_delete(request, id: int):
    webhook_delete = get_object_or_404(WebhookDelete, id=id)
    webhook_delete.delete()
    return {'success': True}


# WebhookUpdate endpoints
@router.get('/webhook_updates', response=List[WebhookUpdate])
@paginate
def list_webhook_updates(request):
    return WebhookUpdate.objects.all()


@router.get('/webhook_updates/{id}', response=WebhookUpdate)
def get_webhook_update(request, id: int):
    return get_object_or_404(WebhookUpdate, id=id)


@router.post('/webhook_updates', response=WebhookUpdate)
def create_webhook_update(request, payload: WebhookUpdateCreate):
    data = payload.dict()
    webhook_update = WebhookUpdate.objects.create(**data)
    return webhook_update


@router.put('/webhook_updates/{id}', response=WebhookUpdate)
def update_webhook_update(request, id: int, payload: WebhookUpdateUpdate):
    webhook_update = get_object_or_404(WebhookUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(webhook_update, attr, value)
    webhook_update.save()
    return webhook_update


@router.delete('/webhook_updates/{id}')
def delete_webhook_update(request, id: int):
    webhook_update = get_object_or_404(WebhookUpdate, id=id)
    webhook_update.delete()
    return {'success': True}


# WarehouseCreate endpoints
@router.get('/warehouse_creates', response=List[WarehouseCreate])
@paginate
def list_warehouse_creates(request):
    return WarehouseCreate.objects.all()


@router.get('/warehouse_creates/{id}', response=WarehouseCreate)
def get_warehouse_create(request, id: int):
    return get_object_or_404(WarehouseCreate, id=id)


@router.post('/warehouse_creates', response=WarehouseCreate)
def create_warehouse_create(request, payload: WarehouseCreateCreate):
    data = payload.dict()
    warehouse_create = WarehouseCreate.objects.create(**data)
    return warehouse_create


@router.put('/warehouse_creates/{id}', response=WarehouseCreate)
def update_warehouse_create(request, id: int, payload: WarehouseCreateUpdate):
    warehouse_create = get_object_or_404(WarehouseCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_create, attr, value)
    warehouse_create.save()
    return warehouse_create


@router.delete('/warehouse_creates/{id}')
def delete_warehouse_create(request, id: int):
    warehouse_create = get_object_or_404(WarehouseCreate, id=id)
    warehouse_create.delete()
    return {'success': True}


# WarehouseError endpoints
@router.get('/warehouse_errors', response=List[WarehouseError])
@paginate
def list_warehouse_errors(request):
    return WarehouseError.objects.all()


@router.get('/warehouse_errors/{id}', response=WarehouseError)
def get_warehouse_error(request, id: int):
    return get_object_or_404(WarehouseError, id=id)


@router.post('/warehouse_errors', response=WarehouseError)
def create_warehouse_error(request, payload: WarehouseErrorCreate):
    data = payload.dict()
    warehouse_error = WarehouseError.objects.create(**data)
    return warehouse_error


@router.put('/warehouse_errors/{id}', response=WarehouseError)
def update_warehouse_error(request, id: int, payload: WarehouseErrorUpdate):
    warehouse_error = get_object_or_404(WarehouseError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_error, attr, value)
    warehouse_error.save()
    return warehouse_error


@router.delete('/warehouse_errors/{id}')
def delete_warehouse_error(request, id: int):
    warehouse_error = get_object_or_404(WarehouseError, id=id)
    warehouse_error.delete()
    return {'success': True}


# WarehouseUpdate endpoints
@router.get('/warehouse_updates', response=List[WarehouseUpdate])
@paginate
def list_warehouse_updates(request):
    return WarehouseUpdate.objects.all()


@router.get('/warehouse_updates/{id}', response=WarehouseUpdate)
def get_warehouse_update(request, id: int):
    return get_object_or_404(WarehouseUpdate, id=id)


@router.post('/warehouse_updates', response=WarehouseUpdate)
def create_warehouse_update(request, payload: WarehouseUpdateCreate):
    data = payload.dict()
    warehouse_update = WarehouseUpdate.objects.create(**data)
    return warehouse_update


@router.put('/warehouse_updates/{id}', response=WarehouseUpdate)
def update_warehouse_update(request, id: int, payload: WarehouseUpdateUpdate):
    warehouse_update = get_object_or_404(WarehouseUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_update, attr, value)
    warehouse_update.save()
    return warehouse_update


@router.delete('/warehouse_updates/{id}')
def delete_warehouse_update(request, id: int):
    warehouse_update = get_object_or_404(WarehouseUpdate, id=id)
    warehouse_update.delete()
    return {'success': True}


# WarehouseDelete endpoints
@router.get('/warehouse_deletes', response=List[WarehouseDelete])
@paginate
def list_warehouse_deletes(request):
    return WarehouseDelete.objects.all()


@router.get('/warehouse_deletes/{id}', response=WarehouseDelete)
def get_warehouse_delete(request, id: int):
    return get_object_or_404(WarehouseDelete, id=id)


@router.post('/warehouse_deletes', response=WarehouseDelete)
def create_warehouse_delete(request, payload: WarehouseDeleteCreate):
    data = payload.dict()
    warehouse_delete = WarehouseDelete.objects.create(**data)
    return warehouse_delete


@router.put('/warehouse_deletes/{id}', response=WarehouseDelete)
def update_warehouse_delete(request, id: int, payload: WarehouseDeleteUpdate):
    warehouse_delete = get_object_or_404(WarehouseDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(warehouse_delete, attr, value)
    warehouse_delete.save()
    return warehouse_delete


@router.delete('/warehouse_deletes/{id}')
def delete_warehouse_delete(request, id: int):
    warehouse_delete = get_object_or_404(WarehouseDelete, id=id)
    warehouse_delete.delete()
    return {'success': True}


# ContentPageDataCreate endpoints
@router.get('/content_page_data_creates', response=List[ContentPageDataCreate])
@paginate
def list_content_page_data_creates(request):
    return ContentPageDataCreate.objects.all()


@router.get('/content_page_data_creates/{id}', response=ContentPageDataCreate)
def get_content_page_data_create(request, id: int):
    return get_object_or_404(ContentPageDataCreate, id=id)


@router.post('/content_page_data_creates', response=ContentPageDataCreate)
def create_content_page_data_create(request, payload: ContentPageDataCreateCreate):
    data = payload.dict()
    content_page_data_create = ContentPageDataCreate.objects.create(**data)
    return content_page_data_create


@router.put('/content_page_data_creates/{id}', response=ContentPageDataCreate)
def update_content_page_data_create(request, id: int, payload: ContentPageDataCreateUpdate):
    content_page_data_create = get_object_or_404(ContentPageDataCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_page_data_create, attr, value)
    content_page_data_create.save()
    return content_page_data_create


@router.delete('/content_page_data_creates/{id}')
def delete_content_page_data_create(request, id: int):
    content_page_data_create = get_object_or_404(ContentPageDataCreate, id=id)
    content_page_data_create.delete()
    return {'success': True}


# ShopError endpoints
@router.get('/shop_errors', response=List[ShopError])
@paginate
def list_shop_errors(request):
    return ShopError.objects.all()


@router.get('/shop_errors/{id}', response=ShopError)
def get_shop_error(request, id: int):
    return get_object_or_404(ShopError, id=id)


@router.post('/shop_errors', response=ShopError)
def create_shop_error(request, payload: ShopErrorCreate):
    data = payload.dict()
    shop_error = ShopError.objects.create(**data)
    return shop_error


@router.put('/shop_errors/{id}', response=ShopError)
def update_shop_error(request, id: int, payload: ShopErrorUpdate):
    shop_error = get_object_or_404(ShopError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop_error, attr, value)
    shop_error.save()
    return shop_error


@router.delete('/shop_errors/{id}')
def delete_shop_error(request, id: int):
    shop_error = get_object_or_404(ShopError, id=id)
    shop_error.delete()
    return {'success': True}


# ContentPageDataUpdate endpoints
@router.get('/content_page_data_updates', response=List[ContentPageDataUpdate])
@paginate
def list_content_page_data_updates(request):
    return ContentPageDataUpdate.objects.all()


@router.get('/content_page_data_updates/{id}', response=ContentPageDataUpdate)
def get_content_page_data_update(request, id: int):
    return get_object_or_404(ContentPageDataUpdate, id=id)


@router.post('/content_page_data_updates', response=ContentPageDataUpdate)
def create_content_page_data_update(request, payload: ContentPageDataUpdateCreate):
    data = payload.dict()
    content_page_data_update = ContentPageDataUpdate.objects.create(**data)
    return content_page_data_update


@router.put('/content_page_data_updates/{id}', response=ContentPageDataUpdate)
def update_content_page_data_update(request, id: int, payload: ContentPageDataUpdateUpdate):
    content_page_data_update = get_object_or_404(ContentPageDataUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_page_data_update, attr, value)
    content_page_data_update.save()
    return content_page_data_update


@router.delete('/content_page_data_updates/{id}')
def delete_content_page_data_update(request, id: int):
    content_page_data_update = get_object_or_404(ContentPageDataUpdate, id=id)
    content_page_data_update.delete()
    return {'success': True}


# ContentCreate endpoints
@router.get('/content_creates', response=List[ContentCreate])
@paginate
def list_content_creates(request):
    return ContentCreate.objects.all()


@router.get('/content_creates/{id}', response=ContentCreate)
def get_content_create(request, id: int):
    return get_object_or_404(ContentCreate, id=id)


@router.post('/content_creates', response=ContentCreate)
def create_content_create(request, payload: ContentCreateCreate):
    data = payload.dict()
    content_create = ContentCreate.objects.create(**data)
    return content_create


@router.put('/content_creates/{id}', response=ContentCreate)
def update_content_create(request, id: int, payload: ContentCreateUpdate):
    content_create = get_object_or_404(ContentCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_create, attr, value)
    content_create.save()
    return content_create


@router.delete('/content_creates/{id}')
def delete_content_create(request, id: int):
    content_create = get_object_or_404(ContentCreate, id=id)
    content_create.delete()
    return {'success': True}


# ContentSave endpoints
@router.get('/content_saves', response=List[ContentSave])
@paginate
def list_content_saves(request):
    return ContentSave.objects.all()


@router.get('/content_saves/{id}', response=ContentSave)
def get_content_save(request, id: int):
    return get_object_or_404(ContentSave, id=id)


@router.post('/content_saves', response=ContentSave)
def create_content_save(request, payload: ContentSaveCreate):
    data = payload.dict()
    content_save = ContentSave.objects.create(**data)
    return content_save


@router.put('/content_saves/{id}', response=ContentSave)
def update_content_save(request, id: int, payload: ContentSaveUpdate):
    content_save = get_object_or_404(ContentSave, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_save, attr, value)
    content_save.save()
    return content_save


@router.delete('/content_saves/{id}')
def delete_content_save(request, id: int):
    content_save = get_object_or_404(ContentSave, id=id)
    content_save.delete()
    return {'success': True}


# ContentDiscard endpoints
@router.get('/content_discards', response=List[ContentDiscard])
@paginate
def list_content_discards(request):
    return ContentDiscard.objects.all()


@router.get('/content_discards/{id}', response=ContentDiscard)
def get_content_discard(request, id: int):
    return get_object_or_404(ContentDiscard, id=id)


@router.post('/content_discards', response=ContentDiscard)
def create_content_discard(request, payload: ContentDiscardCreate):
    data = payload.dict()
    content_discard = ContentDiscard.objects.create(**data)
    return content_discard


@router.put('/content_discards/{id}', response=ContentDiscard)
def update_content_discard(request, id: int, payload: ContentDiscardUpdate):
    content_discard = get_object_or_404(ContentDiscard, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_discard, attr, value)
    content_discard.save()
    return content_discard


@router.delete('/content_discards/{id}')
def delete_content_discard(request, id: int):
    content_discard = get_object_or_404(ContentDiscard, id=id)
    content_discard.delete()
    return {'success': True}


# ContentPublish endpoints
@router.get('/content_publishs', response=List[ContentPublish])
@paginate
def list_content_publishs(request):
    return ContentPublish.objects.all()


@router.get('/content_publishs/{id}', response=ContentPublish)
def get_content_publish(request, id: int):
    return get_object_or_404(ContentPublish, id=id)


@router.post('/content_publishs', response=ContentPublish)
def create_content_publish(request, payload: ContentPublishCreate):
    data = payload.dict()
    content_publish = ContentPublish.objects.create(**data)
    return content_publish


@router.put('/content_publishs/{id}', response=ContentPublish)
def update_content_publish(request, id: int, payload: ContentPublishUpdate):
    content_publish = get_object_or_404(ContentPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_publish, attr, value)
    content_publish.save()
    return content_publish


@router.delete('/content_publishs/{id}')
def delete_content_publish(request, id: int):
    content_publish = get_object_or_404(ContentPublish, id=id)
    content_publish.delete()
    return {'success': True}


# ContentDelete endpoints
@router.get('/content_deletes', response=List[ContentDelete])
@paginate
def list_content_deletes(request):
    return ContentDelete.objects.all()


@router.get('/content_deletes/{id}', response=ContentDelete)
def get_content_delete(request, id: int):
    return get_object_or_404(ContentDelete, id=id)


@router.post('/content_deletes', response=ContentDelete)
def create_content_delete(request, payload: ContentDeleteCreate):
    data = payload.dict()
    content_delete = ContentDelete.objects.create(**data)
    return content_delete


@router.put('/content_deletes/{id}', response=ContentDelete)
def update_content_delete(request, id: int, payload: ContentDeleteUpdate):
    content_delete = get_object_or_404(ContentDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_delete, attr, value)
    content_delete.save()
    return content_delete


@router.delete('/content_deletes/{id}')
def delete_content_delete(request, id: int):
    content_delete = get_object_or_404(ContentDelete, id=id)
    content_delete.delete()
    return {'success': True}


# ContentDuplicate endpoints
@router.get('/content_duplicates', response=List[ContentDuplicate])
@paginate
def list_content_duplicates(request):
    return ContentDuplicate.objects.all()


@router.get('/content_duplicates/{id}', response=ContentDuplicate)
def get_content_duplicate(request, id: int):
    return get_object_or_404(ContentDuplicate, id=id)


@router.post('/content_duplicates', response=ContentDuplicate)
def create_content_duplicate(request, payload: ContentDuplicateCreate):
    data = payload.dict()
    content_duplicate = ContentDuplicate.objects.create(**data)
    return content_duplicate


@router.put('/content_duplicates/{id}', response=ContentDuplicate)
def update_content_duplicate(request, id: int, payload: ContentDuplicateUpdate):
    content_duplicate = get_object_or_404(ContentDuplicate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(content_duplicate, attr, value)
    content_duplicate.save()
    return content_duplicate


@router.delete('/content_duplicates/{id}')
def delete_content_duplicate(request, id: int):
    content_duplicate = get_object_or_404(ContentDuplicate, id=id)
    content_duplicate.delete()
    return {'success': True}


# MediaCreate endpoints
@router.get('/media_creates', response=List[MediaCreate])
@paginate
def list_media_creates(request):
    return MediaCreate.objects.all()


@router.get('/media_creates/{id}', response=MediaCreate)
def get_media_create(request, id: int):
    return get_object_or_404(MediaCreate, id=id)


@router.post('/media_creates', response=MediaCreate)
def create_media_create(request, payload: MediaCreateCreate):
    data = payload.dict()
    media_create = MediaCreate.objects.create(**data)
    return media_create


@router.put('/media_creates/{id}', response=MediaCreate)
def update_media_create(request, id: int, payload: MediaCreateUpdate):
    media_create = get_object_or_404(MediaCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media_create, attr, value)
    media_create.save()
    return media_create


@router.delete('/media_creates/{id}')
def delete_media_create(request, id: int):
    media_create = get_object_or_404(MediaCreate, id=id)
    media_create.delete()
    return {'success': True}


# MediaUpdate endpoints
@router.get('/media_updates', response=List[MediaUpdate])
@paginate
def list_media_updates(request):
    return MediaUpdate.objects.all()


@router.get('/media_updates/{id}', response=MediaUpdate)
def get_media_update(request, id: int):
    return get_object_or_404(MediaUpdate, id=id)


@router.post('/media_updates', response=MediaUpdate)
def create_media_update(request, payload: MediaUpdateCreate):
    data = payload.dict()
    media_update = MediaUpdate.objects.create(**data)
    return media_update


@router.put('/media_updates/{id}', response=MediaUpdate)
def update_media_update(request, id: int, payload: MediaUpdateUpdate):
    media_update = get_object_or_404(MediaUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media_update, attr, value)
    media_update.save()
    return media_update


@router.delete('/media_updates/{id}')
def delete_media_update(request, id: int):
    media_update = get_object_or_404(MediaUpdate, id=id)
    media_update.delete()
    return {'success': True}


# MediaBulkDelete endpoints
@router.get('/media_bulk_deletes', response=List[MediaBulkDelete])
@paginate
def list_media_bulk_deletes(request):
    return MediaBulkDelete.objects.all()


@router.get('/media_bulk_deletes/{id}', response=MediaBulkDelete)
def get_media_bulk_delete(request, id: int):
    return get_object_or_404(MediaBulkDelete, id=id)


@router.post('/media_bulk_deletes', response=MediaBulkDelete)
def create_media_bulk_delete(request, payload: MediaBulkDeleteCreate):
    data = payload.dict()
    media_bulk_delete = MediaBulkDelete.objects.create(**data)
    return media_bulk_delete


@router.put('/media_bulk_deletes/{id}', response=MediaBulkDelete)
def update_media_bulk_delete(request, id: int, payload: MediaBulkDeleteUpdate):
    media_bulk_delete = get_object_or_404(MediaBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(media_bulk_delete, attr, value)
    media_bulk_delete.save()
    return media_bulk_delete


@router.delete('/media_bulk_deletes/{id}')
def delete_media_bulk_delete(request, id: int):
    media_bulk_delete = get_object_or_404(MediaBulkDelete, id=id)
    media_bulk_delete.delete()
    return {'success': True}


# ShopDomainUpdate endpoints
@router.get('/shop_domain_updates', response=List[ShopDomainUpdate])
@paginate
def list_shop_domain_updates(request):
    return ShopDomainUpdate.objects.all()


@router.get('/shop_domain_updates/{id}', response=ShopDomainUpdate)
def get_shop_domain_update(request, id: int):
    return get_object_or_404(ShopDomainUpdate, id=id)


@router.post('/shop_domain_updates', response=ShopDomainUpdate)
def create_shop_domain_update(request, payload: ShopDomainUpdateCreate):
    data = payload.dict()
    shop_domain_update = ShopDomainUpdate.objects.create(**data)
    return shop_domain_update


@router.put('/shop_domain_updates/{id}', response=ShopDomainUpdate)
def update_shop_domain_update(request, id: int, payload: ShopDomainUpdateUpdate):
    shop_domain_update = get_object_or_404(ShopDomainUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop_domain_update, attr, value)
    shop_domain_update.save()
    return shop_domain_update


@router.delete('/shop_domain_updates/{id}')
def delete_shop_domain_update(request, id: int):
    shop_domain_update = get_object_or_404(ShopDomainUpdate, id=id)
    shop_domain_update.delete()
    return {'success': True}


# ShopSettingsUpdate endpoints
@router.get('/shop_settings_updates', response=List[ShopSettingsUpdate])
@paginate
def list_shop_settings_updates(request):
    return ShopSettingsUpdate.objects.all()


@router.get('/shop_settings_updates/{id}', response=ShopSettingsUpdate)
def get_shop_settings_update(request, id: int):
    return get_object_or_404(ShopSettingsUpdate, id=id)


@router.post('/shop_settings_updates', response=ShopSettingsUpdate)
def create_shop_settings_update(request, payload: ShopSettingsUpdateCreate):
    data = payload.dict()
    shop_settings_update = ShopSettingsUpdate.objects.create(**data)
    return shop_settings_update


@router.put('/shop_settings_updates/{id}', response=ShopSettingsUpdate)
def update_shop_settings_update(request, id: int, payload: ShopSettingsUpdateUpdate):
    shop_settings_update = get_object_or_404(ShopSettingsUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop_settings_update, attr, value)
    shop_settings_update.save()
    return shop_settings_update


@router.delete('/shop_settings_updates/{id}')
def delete_shop_settings_update(request, id: int):
    shop_settings_update = get_object_or_404(ShopSettingsUpdate, id=id)
    shop_settings_update.delete()
    return {'success': True}


# ShopFetchTaxRates endpoints
@router.get('/shop_fetch_tax_ratess', response=List[ShopFetchTaxRates])
@paginate
def list_shop_fetch_tax_ratess(request):
    return ShopFetchTaxRates.objects.all()


@router.get('/shop_fetch_tax_ratess/{id}', response=ShopFetchTaxRates)
def get_shop_fetch_tax_rates(request, id: int):
    return get_object_or_404(ShopFetchTaxRates, id=id)


@router.post('/shop_fetch_tax_ratess', response=ShopFetchTaxRates)
def create_shop_fetch_tax_rates(request, payload: ShopFetchTaxRatesCreate):
    data = payload.dict()
    shop_fetch_tax_rates = ShopFetchTaxRates.objects.create(**data)
    return shop_fetch_tax_rates


@router.put('/shop_fetch_tax_ratess/{id}', response=ShopFetchTaxRates)
def update_shop_fetch_tax_rates(request, id: int, payload: ShopFetchTaxRatesUpdate):
    shop_fetch_tax_rates = get_object_or_404(ShopFetchTaxRates, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop_fetch_tax_rates, attr, value)
    shop_fetch_tax_rates.save()
    return shop_fetch_tax_rates


@router.delete('/shop_fetch_tax_ratess/{id}')
def delete_shop_fetch_tax_rates(request, id: int):
    shop_fetch_tax_rates = get_object_or_404(ShopFetchTaxRates, id=id)
    shop_fetch_tax_rates.delete()
    return {'success': True}


# ShopAddressUpdate endpoints
@router.get('/shop_address_updates', response=List[ShopAddressUpdate])
@paginate
def list_shop_address_updates(request):
    return ShopAddressUpdate.objects.all()


@router.get('/shop_address_updates/{id}', response=ShopAddressUpdate)
def get_shop_address_update(request, id: int):
    return get_object_or_404(ShopAddressUpdate, id=id)


@router.post('/shop_address_updates', response=ShopAddressUpdate)
def create_shop_address_update(request, payload: ShopAddressUpdateCreate):
    data = payload.dict()
    shop_address_update = ShopAddressUpdate.objects.create(**data)
    return shop_address_update


@router.put('/shop_address_updates/{id}', response=ShopAddressUpdate)
def update_shop_address_update(request, id: int, payload: ShopAddressUpdateUpdate):
    shop_address_update = get_object_or_404(ShopAddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shop_address_update, attr, value)
    shop_address_update.save()
    return shop_address_update


@router.delete('/shop_address_updates/{id}')
def delete_shop_address_update(request, id: int):
    shop_address_update = get_object_or_404(ShopAddressUpdate, id=id)
    shop_address_update.delete()
    return {'success': True}


# CheckoutThemeCreate endpoints
@router.get('/checkout_theme_creates', response=List[CheckoutThemeCreate])
@paginate
def list_checkout_theme_creates(request):
    return CheckoutThemeCreate.objects.all()


@router.get('/checkout_theme_creates/{id}', response=CheckoutThemeCreate)
def get_checkout_theme_create(request, id: int):
    return get_object_or_404(CheckoutThemeCreate, id=id)


@router.post('/checkout_theme_creates', response=CheckoutThemeCreate)
def create_checkout_theme_create(request, payload: CheckoutThemeCreateCreate):
    data = payload.dict()
    checkout_theme_create = CheckoutThemeCreate.objects.create(**data)
    return checkout_theme_create


@router.put('/checkout_theme_creates/{id}', response=CheckoutThemeCreate)
def update_checkout_theme_create(request, id: int, payload: CheckoutThemeCreateUpdate):
    checkout_theme_create = get_object_or_404(CheckoutThemeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_theme_create, attr, value)
    checkout_theme_create.save()
    return checkout_theme_create


@router.delete('/checkout_theme_creates/{id}')
def delete_checkout_theme_create(request, id: int):
    checkout_theme_create = get_object_or_404(CheckoutThemeCreate, id=id)
    checkout_theme_create.delete()
    return {'success': True}


# CheckoutThemeUpdate endpoints
@router.get('/checkout_theme_updates', response=List[CheckoutThemeUpdate])
@paginate
def list_checkout_theme_updates(request):
    return CheckoutThemeUpdate.objects.all()


@router.get('/checkout_theme_updates/{id}', response=CheckoutThemeUpdate)
def get_checkout_theme_update(request, id: int):
    return get_object_or_404(CheckoutThemeUpdate, id=id)


@router.post('/checkout_theme_updates', response=CheckoutThemeUpdate)
def create_checkout_theme_update(request, payload: CheckoutThemeUpdateCreate):
    data = payload.dict()
    checkout_theme_update = CheckoutThemeUpdate.objects.create(**data)
    return checkout_theme_update


@router.put('/checkout_theme_updates/{id}', response=CheckoutThemeUpdate)
def update_checkout_theme_update(request, id: int, payload: CheckoutThemeUpdateUpdate):
    checkout_theme_update = get_object_or_404(CheckoutThemeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_theme_update, attr, value)
    checkout_theme_update.save()
    return checkout_theme_update


@router.delete('/checkout_theme_updates/{id}')
def delete_checkout_theme_update(request, id: int):
    checkout_theme_update = get_object_or_404(CheckoutThemeUpdate, id=id)
    checkout_theme_update.delete()
    return {'success': True}


# CustomDomainCreate endpoints
@router.get('/custom_domain_creates', response=List[CustomDomainCreate])
@paginate
def list_custom_domain_creates(request):
    return CustomDomainCreate.objects.all()


@router.get('/custom_domain_creates/{id}', response=CustomDomainCreate)
def get_custom_domain_create(request, id: int):
    return get_object_or_404(CustomDomainCreate, id=id)


@router.post('/custom_domain_creates', response=CustomDomainCreate)
def create_custom_domain_create(request, payload: CustomDomainCreateCreate):
    data = payload.dict()
    custom_domain_create = CustomDomainCreate.objects.create(**data)
    return custom_domain_create


@router.put('/custom_domain_creates/{id}', response=CustomDomainCreate)
def update_custom_domain_create(request, id: int, payload: CustomDomainCreateUpdate):
    custom_domain_create = get_object_or_404(CustomDomainCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_domain_create, attr, value)
    custom_domain_create.save()
    return custom_domain_create


@router.delete('/custom_domain_creates/{id}')
def delete_custom_domain_create(request, id: int):
    custom_domain_create = get_object_or_404(CustomDomainCreate, id=id)
    custom_domain_create.delete()
    return {'success': True}


# CustomDomainDelete endpoints
@router.get('/custom_domain_deletes', response=List[CustomDomainDelete])
@paginate
def list_custom_domain_deletes(request):
    return CustomDomainDelete.objects.all()


@router.get('/custom_domain_deletes/{id}', response=CustomDomainDelete)
def get_custom_domain_delete(request, id: int):
    return get_object_or_404(CustomDomainDelete, id=id)


@router.post('/custom_domain_deletes', response=CustomDomainDelete)
def create_custom_domain_delete(request, payload: CustomDomainDeleteCreate):
    data = payload.dict()
    custom_domain_delete = CustomDomainDelete.objects.create(**data)
    return custom_domain_delete


@router.put('/custom_domain_deletes/{id}', response=CustomDomainDelete)
def update_custom_domain_delete(request, id: int, payload: CustomDomainDeleteUpdate):
    custom_domain_delete = get_object_or_404(CustomDomainDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_domain_delete, attr, value)
    custom_domain_delete.save()
    return custom_domain_delete


@router.delete('/custom_domain_deletes/{id}')
def delete_custom_domain_delete(request, id: int):
    custom_domain_delete = get_object_or_404(CustomDomainDelete, id=id)
    custom_domain_delete.delete()
    return {'success': True}


# StorefrontThemeCreate endpoints
@router.get('/storefront_theme_creates', response=List[StorefrontThemeCreate])
@paginate
def list_storefront_theme_creates(request):
    return StorefrontThemeCreate.objects.all()


@router.get('/storefront_theme_creates/{id}', response=StorefrontThemeCreate)
def get_storefront_theme_create(request, id: int):
    return get_object_or_404(StorefrontThemeCreate, id=id)


@router.post('/storefront_theme_creates', response=StorefrontThemeCreate)
def create_storefront_theme_create(request, payload: StorefrontThemeCreateCreate):
    data = payload.dict()
    storefront_theme_create = StorefrontThemeCreate.objects.create(**data)
    return storefront_theme_create


@router.put('/storefront_theme_creates/{id}', response=StorefrontThemeCreate)
def update_storefront_theme_create(request, id: int, payload: StorefrontThemeCreateUpdate):
    storefront_theme_create = get_object_or_404(StorefrontThemeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(storefront_theme_create, attr, value)
    storefront_theme_create.save()
    return storefront_theme_create


@router.delete('/storefront_theme_creates/{id}')
def delete_storefront_theme_create(request, id: int):
    storefront_theme_create = get_object_or_404(StorefrontThemeCreate, id=id)
    storefront_theme_create.delete()
    return {'success': True}


# StorefrontThemeUpdate endpoints
@router.get('/storefront_theme_updates', response=List[StorefrontThemeUpdate])
@paginate
def list_storefront_theme_updates(request):
    return StorefrontThemeUpdate.objects.all()


@router.get('/storefront_theme_updates/{id}', response=StorefrontThemeUpdate)
def get_storefront_theme_update(request, id: int):
    return get_object_or_404(StorefrontThemeUpdate, id=id)


@router.post('/storefront_theme_updates', response=StorefrontThemeUpdate)
def create_storefront_theme_update(request, payload: StorefrontThemeUpdateCreate):
    data = payload.dict()
    storefront_theme_update = StorefrontThemeUpdate.objects.create(**data)
    return storefront_theme_update


@router.put('/storefront_theme_updates/{id}', response=StorefrontThemeUpdate)
def update_storefront_theme_update(request, id: int, payload: StorefrontThemeUpdateUpdate):
    storefront_theme_update = get_object_or_404(StorefrontThemeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(storefront_theme_update, attr, value)
    storefront_theme_update.save()
    return storefront_theme_update


@router.delete('/storefront_theme_updates/{id}')
def delete_storefront_theme_update(request, id: int):
    storefront_theme_update = get_object_or_404(StorefrontThemeUpdate, id=id)
    storefront_theme_update.delete()
    return {'success': True}


# SellerOnboardingSettingsCreate endpoints
@router.get('/seller_onboarding_settings_creates', response=List[SellerOnboardingSettingsCreate])
@paginate
def list_seller_onboarding_settings_creates(request):
    return SellerOnboardingSettingsCreate.objects.all()


@router.get('/seller_onboarding_settings_creates/{id}', response=SellerOnboardingSettingsCreate)
def get_seller_onboarding_settings_create(request, id: int):
    return get_object_or_404(SellerOnboardingSettingsCreate, id=id)


@router.post('/seller_onboarding_settings_creates', response=SellerOnboardingSettingsCreate)
def create_seller_onboarding_settings_create(request, payload: SellerOnboardingSettingsCreateCreate):
    data = payload.dict()
    seller_onboarding_settings_create = SellerOnboardingSettingsCreate.objects.create(**data)
    return seller_onboarding_settings_create


@router.put('/seller_onboarding_settings_creates/{id}', response=SellerOnboardingSettingsCreate)
def update_seller_onboarding_settings_create(request, id: int, payload: SellerOnboardingSettingsCreateUpdate):
    seller_onboarding_settings_create = get_object_or_404(SellerOnboardingSettingsCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_settings_create, attr, value)
    seller_onboarding_settings_create.save()
    return seller_onboarding_settings_create


@router.delete('/seller_onboarding_settings_creates/{id}')
def delete_seller_onboarding_settings_create(request, id: int):
    seller_onboarding_settings_create = get_object_or_404(SellerOnboardingSettingsCreate, id=id)
    seller_onboarding_settings_create.delete()
    return {'success': True}


# SellerOnboardingSettingsUpdate endpoints
@router.get('/seller_onboarding_settings_updates', response=List[SellerOnboardingSettingsUpdate])
@paginate
def list_seller_onboarding_settings_updates(request):
    return SellerOnboardingSettingsUpdate.objects.all()


@router.get('/seller_onboarding_settings_updates/{id}', response=SellerOnboardingSettingsUpdate)
def get_seller_onboarding_settings_update(request, id: int):
    return get_object_or_404(SellerOnboardingSettingsUpdate, id=id)


@router.post('/seller_onboarding_settings_updates', response=SellerOnboardingSettingsUpdate)
def create_seller_onboarding_settings_update(request, payload: SellerOnboardingSettingsUpdateCreate):
    data = payload.dict()
    seller_onboarding_settings_update = SellerOnboardingSettingsUpdate.objects.create(**data)
    return seller_onboarding_settings_update


@router.put('/seller_onboarding_settings_updates/{id}', response=SellerOnboardingSettingsUpdate)
def update_seller_onboarding_settings_update(request, id: int, payload: SellerOnboardingSettingsUpdateUpdate):
    seller_onboarding_settings_update = get_object_or_404(SellerOnboardingSettingsUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(seller_onboarding_settings_update, attr, value)
    seller_onboarding_settings_update.save()
    return seller_onboarding_settings_update


@router.delete('/seller_onboarding_settings_updates/{id}')
def delete_seller_onboarding_settings_update(request, id: int):
    seller_onboarding_settings_update = get_object_or_404(SellerOnboardingSettingsUpdate, id=id)
    seller_onboarding_settings_update.delete()
    return {'success': True}


# ShippingPriceCreate endpoints
@router.get('/shipping_price_creates', response=List[ShippingPriceCreate])
@paginate
def list_shipping_price_creates(request):
    return ShippingPriceCreate.objects.all()


@router.get('/shipping_price_creates/{id}', response=ShippingPriceCreate)
def get_shipping_price_create(request, id: int):
    return get_object_or_404(ShippingPriceCreate, id=id)


@router.post('/shipping_price_creates', response=ShippingPriceCreate)
def create_shipping_price_create(request, payload: ShippingPriceCreateCreate):
    data = payload.dict()
    shipping_price_create = ShippingPriceCreate.objects.create(**data)
    return shipping_price_create


@router.put('/shipping_price_creates/{id}', response=ShippingPriceCreate)
def update_shipping_price_create(request, id: int, payload: ShippingPriceCreateUpdate):
    shipping_price_create = get_object_or_404(ShippingPriceCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_price_create, attr, value)
    shipping_price_create.save()
    return shipping_price_create


@router.delete('/shipping_price_creates/{id}')
def delete_shipping_price_create(request, id: int):
    shipping_price_create = get_object_or_404(ShippingPriceCreate, id=id)
    shipping_price_create.delete()
    return {'success': True}


# ShippingError endpoints
@router.get('/shipping_errors', response=List[ShippingError])
@paginate
def list_shipping_errors(request):
    return ShippingError.objects.all()


@router.get('/shipping_errors/{id}', response=ShippingError)
def get_shipping_error(request, id: int):
    return get_object_or_404(ShippingError, id=id)


@router.post('/shipping_errors', response=ShippingError)
def create_shipping_error(request, payload: ShippingErrorCreate):
    data = payload.dict()
    shipping_error = ShippingError.objects.create(**data)
    return shipping_error


@router.put('/shipping_errors/{id}', response=ShippingError)
def update_shipping_error(request, id: int, payload: ShippingErrorUpdate):
    shipping_error = get_object_or_404(ShippingError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_error, attr, value)
    shipping_error.save()
    return shipping_error


@router.delete('/shipping_errors/{id}')
def delete_shipping_error(request, id: int):
    shipping_error = get_object_or_404(ShippingError, id=id)
    shipping_error.delete()
    return {'success': True}


# ShippingPriceDelete endpoints
@router.get('/shipping_price_deletes', response=List[ShippingPriceDelete])
@paginate
def list_shipping_price_deletes(request):
    return ShippingPriceDelete.objects.all()


@router.get('/shipping_price_deletes/{id}', response=ShippingPriceDelete)
def get_shipping_price_delete(request, id: int):
    return get_object_or_404(ShippingPriceDelete, id=id)


@router.post('/shipping_price_deletes', response=ShippingPriceDelete)
def create_shipping_price_delete(request, payload: ShippingPriceDeleteCreate):
    data = payload.dict()
    shipping_price_delete = ShippingPriceDelete.objects.create(**data)
    return shipping_price_delete


@router.put('/shipping_price_deletes/{id}', response=ShippingPriceDelete)
def update_shipping_price_delete(request, id: int, payload: ShippingPriceDeleteUpdate):
    shipping_price_delete = get_object_or_404(ShippingPriceDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_price_delete, attr, value)
    shipping_price_delete.save()
    return shipping_price_delete


@router.delete('/shipping_price_deletes/{id}')
def delete_shipping_price_delete(request, id: int):
    shipping_price_delete = get_object_or_404(ShippingPriceDelete, id=id)
    shipping_price_delete.delete()
    return {'success': True}


# ShippingPriceBulkDelete endpoints
@router.get('/shipping_price_bulk_deletes', response=List[ShippingPriceBulkDelete])
@paginate
def list_shipping_price_bulk_deletes(request):
    return ShippingPriceBulkDelete.objects.all()


@router.get('/shipping_price_bulk_deletes/{id}', response=ShippingPriceBulkDelete)
def get_shipping_price_bulk_delete(request, id: int):
    return get_object_or_404(ShippingPriceBulkDelete, id=id)


@router.post('/shipping_price_bulk_deletes', response=ShippingPriceBulkDelete)
def create_shipping_price_bulk_delete(request, payload: ShippingPriceBulkDeleteCreate):
    data = payload.dict()
    shipping_price_bulk_delete = ShippingPriceBulkDelete.objects.create(**data)
    return shipping_price_bulk_delete


@router.put('/shipping_price_bulk_deletes/{id}', response=ShippingPriceBulkDelete)
def update_shipping_price_bulk_delete(request, id: int, payload: ShippingPriceBulkDeleteUpdate):
    shipping_price_bulk_delete = get_object_or_404(ShippingPriceBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_price_bulk_delete, attr, value)
    shipping_price_bulk_delete.save()
    return shipping_price_bulk_delete


@router.delete('/shipping_price_bulk_deletes/{id}')
def delete_shipping_price_bulk_delete(request, id: int):
    shipping_price_bulk_delete = get_object_or_404(ShippingPriceBulkDelete, id=id)
    shipping_price_bulk_delete.delete()
    return {'success': True}


# ShippingPriceUpdate endpoints
@router.get('/shipping_price_updates', response=List[ShippingPriceUpdate])
@paginate
def list_shipping_price_updates(request):
    return ShippingPriceUpdate.objects.all()


@router.get('/shipping_price_updates/{id}', response=ShippingPriceUpdate)
def get_shipping_price_update(request, id: int):
    return get_object_or_404(ShippingPriceUpdate, id=id)


@router.post('/shipping_price_updates', response=ShippingPriceUpdate)
def create_shipping_price_update(request, payload: ShippingPriceUpdateCreate):
    data = payload.dict()
    shipping_price_update = ShippingPriceUpdate.objects.create(**data)
    return shipping_price_update


@router.put('/shipping_price_updates/{id}', response=ShippingPriceUpdate)
def update_shipping_price_update(request, id: int, payload: ShippingPriceUpdateUpdate):
    shipping_price_update = get_object_or_404(ShippingPriceUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_price_update, attr, value)
    shipping_price_update.save()
    return shipping_price_update


@router.delete('/shipping_price_updates/{id}')
def delete_shipping_price_update(request, id: int):
    shipping_price_update = get_object_or_404(ShippingPriceUpdate, id=id)
    shipping_price_update.delete()
    return {'success': True}


# ShippingZoneCreate endpoints
@router.get('/shipping_zone_creates', response=List[ShippingZoneCreate])
@paginate
def list_shipping_zone_creates(request):
    return ShippingZoneCreate.objects.all()


@router.get('/shipping_zone_creates/{id}', response=ShippingZoneCreate)
def get_shipping_zone_create(request, id: int):
    return get_object_or_404(ShippingZoneCreate, id=id)


@router.post('/shipping_zone_creates', response=ShippingZoneCreate)
def create_shipping_zone_create(request, payload: ShippingZoneCreateCreate):
    data = payload.dict()
    shipping_zone_create = ShippingZoneCreate.objects.create(**data)
    return shipping_zone_create


@router.put('/shipping_zone_creates/{id}', response=ShippingZoneCreate)
def update_shipping_zone_create(request, id: int, payload: ShippingZoneCreateUpdate):
    shipping_zone_create = get_object_or_404(ShippingZoneCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_create, attr, value)
    shipping_zone_create.save()
    return shipping_zone_create


@router.delete('/shipping_zone_creates/{id}')
def delete_shipping_zone_create(request, id: int):
    shipping_zone_create = get_object_or_404(ShippingZoneCreate, id=id)
    shipping_zone_create.delete()
    return {'success': True}


# ShippingZoneDelete endpoints
@router.get('/shipping_zone_deletes', response=List[ShippingZoneDelete])
@paginate
def list_shipping_zone_deletes(request):
    return ShippingZoneDelete.objects.all()


@router.get('/shipping_zone_deletes/{id}', response=ShippingZoneDelete)
def get_shipping_zone_delete(request, id: int):
    return get_object_or_404(ShippingZoneDelete, id=id)


@router.post('/shipping_zone_deletes', response=ShippingZoneDelete)
def create_shipping_zone_delete(request, payload: ShippingZoneDeleteCreate):
    data = payload.dict()
    shipping_zone_delete = ShippingZoneDelete.objects.create(**data)
    return shipping_zone_delete


@router.put('/shipping_zone_deletes/{id}', response=ShippingZoneDelete)
def update_shipping_zone_delete(request, id: int, payload: ShippingZoneDeleteUpdate):
    shipping_zone_delete = get_object_or_404(ShippingZoneDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_delete, attr, value)
    shipping_zone_delete.save()
    return shipping_zone_delete


@router.delete('/shipping_zone_deletes/{id}')
def delete_shipping_zone_delete(request, id: int):
    shipping_zone_delete = get_object_or_404(ShippingZoneDelete, id=id)
    shipping_zone_delete.delete()
    return {'success': True}


# ShippingZoneBulkDelete endpoints
@router.get('/shipping_zone_bulk_deletes', response=List[ShippingZoneBulkDelete])
@paginate
def list_shipping_zone_bulk_deletes(request):
    return ShippingZoneBulkDelete.objects.all()


@router.get('/shipping_zone_bulk_deletes/{id}', response=ShippingZoneBulkDelete)
def get_shipping_zone_bulk_delete(request, id: int):
    return get_object_or_404(ShippingZoneBulkDelete, id=id)


@router.post('/shipping_zone_bulk_deletes', response=ShippingZoneBulkDelete)
def create_shipping_zone_bulk_delete(request, payload: ShippingZoneBulkDeleteCreate):
    data = payload.dict()
    shipping_zone_bulk_delete = ShippingZoneBulkDelete.objects.create(**data)
    return shipping_zone_bulk_delete


@router.put('/shipping_zone_bulk_deletes/{id}', response=ShippingZoneBulkDelete)
def update_shipping_zone_bulk_delete(request, id: int, payload: ShippingZoneBulkDeleteUpdate):
    shipping_zone_bulk_delete = get_object_or_404(ShippingZoneBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_bulk_delete, attr, value)
    shipping_zone_bulk_delete.save()
    return shipping_zone_bulk_delete


@router.delete('/shipping_zone_bulk_deletes/{id}')
def delete_shipping_zone_bulk_delete(request, id: int):
    shipping_zone_bulk_delete = get_object_or_404(ShippingZoneBulkDelete, id=id)
    shipping_zone_bulk_delete.delete()
    return {'success': True}


# ShippingZoneUpdate endpoints
@router.get('/shipping_zone_updates', response=List[ShippingZoneUpdate])
@paginate
def list_shipping_zone_updates(request):
    return ShippingZoneUpdate.objects.all()


@router.get('/shipping_zone_updates/{id}', response=ShippingZoneUpdate)
def get_shipping_zone_update(request, id: int):
    return get_object_or_404(ShippingZoneUpdate, id=id)


@router.post('/shipping_zone_updates', response=ShippingZoneUpdate)
def create_shipping_zone_update(request, payload: ShippingZoneUpdateCreate):
    data = payload.dict()
    shipping_zone_update = ShippingZoneUpdate.objects.create(**data)
    return shipping_zone_update


@router.put('/shipping_zone_updates/{id}', response=ShippingZoneUpdate)
def update_shipping_zone_update(request, id: int, payload: ShippingZoneUpdateUpdate):
    shipping_zone_update = get_object_or_404(ShippingZoneUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(shipping_zone_update, attr, value)
    shipping_zone_update.save()
    return shipping_zone_update


@router.delete('/shipping_zone_updates/{id}')
def delete_shipping_zone_update(request, id: int):
    shipping_zone_update = get_object_or_404(ShippingZoneUpdate, id=id)
    shipping_zone_update.delete()
    return {'success': True}


# RefundCreate endpoints
@router.get('/refund_creates', response=List[RefundCreate])
@paginate
def list_refund_creates(request):
    return RefundCreate.objects.all()


@router.get('/refund_creates/{id}', response=RefundCreate)
def get_refund_create(request, id: int):
    return get_object_or_404(RefundCreate, id=id)


@router.post('/refund_creates', response=RefundCreate)
def create_refund_create(request, payload: RefundCreateCreate):
    data = payload.dict()
    refund_create = RefundCreate.objects.create(**data)
    return refund_create


@router.put('/refund_creates/{id}', response=RefundCreate)
def update_refund_create(request, id: int, payload: RefundCreateUpdate):
    refund_create = get_object_or_404(RefundCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_create, attr, value)
    refund_create.save()
    return refund_create


@router.delete('/refund_creates/{id}')
def delete_refund_create(request, id: int):
    refund_create = get_object_or_404(RefundCreate, id=id)
    refund_create.delete()
    return {'success': True}


# RefundError endpoints
@router.get('/refund_errors', response=List[RefundError])
@paginate
def list_refund_errors(request):
    return RefundError.objects.all()


@router.get('/refund_errors/{id}', response=RefundError)
def get_refund_error(request, id: int):
    return get_object_or_404(RefundError, id=id)


@router.post('/refund_errors', response=RefundError)
def create_refund_error(request, payload: RefundErrorCreate):
    data = payload.dict()
    refund_error = RefundError.objects.create(**data)
    return refund_error


@router.put('/refund_errors/{id}', response=RefundError)
def update_refund_error(request, id: int, payload: RefundErrorUpdate):
    refund_error = get_object_or_404(RefundError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_error, attr, value)
    refund_error.save()
    return refund_error


@router.delete('/refund_errors/{id}')
def delete_refund_error(request, id: int):
    refund_error = get_object_or_404(RefundError, id=id)
    refund_error.delete()
    return {'success': True}


# RefundUpdate endpoints
@router.get('/refund_updates', response=List[RefundUpdate])
@paginate
def list_refund_updates(request):
    return RefundUpdate.objects.all()


@router.get('/refund_updates/{id}', response=RefundUpdate)
def get_refund_update(request, id: int):
    return get_object_or_404(RefundUpdate, id=id)


@router.post('/refund_updates', response=RefundUpdate)
def create_refund_update(request, payload: RefundUpdateCreate):
    data = payload.dict()
    refund_update = RefundUpdate.objects.create(**data)
    return refund_update


@router.put('/refund_updates/{id}', response=RefundUpdate)
def update_refund_update(request, id: int, payload: RefundUpdateUpdate):
    refund_update = get_object_or_404(RefundUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_update, attr, value)
    refund_update.save()
    return refund_update


@router.delete('/refund_updates/{id}')
def delete_refund_update(request, id: int):
    refund_update = get_object_or_404(RefundUpdate, id=id)
    refund_update.delete()
    return {'success': True}


# RefundBulkDelete endpoints
@router.get('/refund_bulk_deletes', response=List[RefundBulkDelete])
@paginate
def list_refund_bulk_deletes(request):
    return RefundBulkDelete.objects.all()


@router.get('/refund_bulk_deletes/{id}', response=RefundBulkDelete)
def get_refund_bulk_delete(request, id: int):
    return get_object_or_404(RefundBulkDelete, id=id)


@router.post('/refund_bulk_deletes', response=RefundBulkDelete)
def create_refund_bulk_delete(request, payload: RefundBulkDeleteCreate):
    data = payload.dict()
    refund_bulk_delete = RefundBulkDelete.objects.create(**data)
    return refund_bulk_delete


@router.put('/refund_bulk_deletes/{id}', response=RefundBulkDelete)
def update_refund_bulk_delete(request, id: int, payload: RefundBulkDeleteUpdate):
    refund_bulk_delete = get_object_or_404(RefundBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_bulk_delete, attr, value)
    refund_bulk_delete.save()
    return refund_bulk_delete


@router.delete('/refund_bulk_deletes/{id}')
def delete_refund_bulk_delete(request, id: int):
    refund_bulk_delete = get_object_or_404(RefundBulkDelete, id=id)
    refund_bulk_delete.delete()
    return {'success': True}


# RefundsChangeStatus endpoints
@router.get('/refunds_change_statuss', response=List[RefundsChangeStatus])
@paginate
def list_refunds_change_statuss(request):
    return RefundsChangeStatus.objects.all()


@router.get('/refunds_change_statuss/{id}', response=RefundsChangeStatus)
def get_refunds_change_status(request, id: int):
    return get_object_or_404(RefundsChangeStatus, id=id)


@router.post('/refunds_change_statuss', response=RefundsChangeStatus)
def create_refunds_change_status(request, payload: RefundsChangeStatusCreate):
    data = payload.dict()
    refunds_change_status = RefundsChangeStatus.objects.create(**data)
    return refunds_change_status


@router.put('/refunds_change_statuss/{id}', response=RefundsChangeStatus)
def update_refunds_change_status(request, id: int, payload: RefundsChangeStatusUpdate):
    refunds_change_status = get_object_or_404(RefundsChangeStatus, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refunds_change_status, attr, value)
    refunds_change_status.save()
    return refunds_change_status


@router.delete('/refunds_change_statuss/{id}')
def delete_refunds_change_status(request, id: int):
    refunds_change_status = get_object_or_404(RefundsChangeStatus, id=id)
    refunds_change_status.delete()
    return {'success': True}


# RefundLinesAdd endpoints
@router.get('/refund_lines_adds', response=List[RefundLinesAdd])
@paginate
def list_refund_lines_adds(request):
    return RefundLinesAdd.objects.all()


@router.get('/refund_lines_adds/{id}', response=RefundLinesAdd)
def get_refund_lines_add(request, id: int):
    return get_object_or_404(RefundLinesAdd, id=id)


@router.post('/refund_lines_adds', response=RefundLinesAdd)
def create_refund_lines_add(request, payload: RefundLinesAddCreate):
    data = payload.dict()
    refund_lines_add = RefundLinesAdd.objects.create(**data)
    return refund_lines_add


@router.put('/refund_lines_adds/{id}', response=RefundLinesAdd)
def update_refund_lines_add(request, id: int, payload: RefundLinesAddUpdate):
    refund_lines_add = get_object_or_404(RefundLinesAdd, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_lines_add, attr, value)
    refund_lines_add.save()
    return refund_lines_add


@router.delete('/refund_lines_adds/{id}')
def delete_refund_lines_add(request, id: int):
    refund_lines_add = get_object_or_404(RefundLinesAdd, id=id)
    refund_lines_add.delete()
    return {'success': True}


# RefundLinesUpdate endpoints
@router.get('/refund_lines_updates', response=List[RefundLinesUpdate])
@paginate
def list_refund_lines_updates(request):
    return RefundLinesUpdate.objects.all()


@router.get('/refund_lines_updates/{id}', response=RefundLinesUpdate)
def get_refund_lines_update(request, id: int):
    return get_object_or_404(RefundLinesUpdate, id=id)


@router.post('/refund_lines_updates', response=RefundLinesUpdate)
def create_refund_lines_update(request, payload: RefundLinesUpdateCreate):
    data = payload.dict()
    refund_lines_update = RefundLinesUpdate.objects.create(**data)
    return refund_lines_update


@router.put('/refund_lines_updates/{id}', response=RefundLinesUpdate)
def update_refund_lines_update(request, id: int, payload: RefundLinesUpdateUpdate):
    refund_lines_update = get_object_or_404(RefundLinesUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_lines_update, attr, value)
    refund_lines_update.save()
    return refund_lines_update


@router.delete('/refund_lines_updates/{id}')
def delete_refund_lines_update(request, id: int):
    refund_lines_update = get_object_or_404(RefundLinesUpdate, id=id)
    refund_lines_update.delete()
    return {'success': True}


# RefundLineBulkDelete endpoints
@router.get('/refund_line_bulk_deletes', response=List[RefundLineBulkDelete])
@paginate
def list_refund_line_bulk_deletes(request):
    return RefundLineBulkDelete.objects.all()


@router.get('/refund_line_bulk_deletes/{id}', response=RefundLineBulkDelete)
def get_refund_line_bulk_delete(request, id: int):
    return get_object_or_404(RefundLineBulkDelete, id=id)


@router.post('/refund_line_bulk_deletes', response=RefundLineBulkDelete)
def create_refund_line_bulk_delete(request, payload: RefundLineBulkDeleteCreate):
    data = payload.dict()
    refund_line_bulk_delete = RefundLineBulkDelete.objects.create(**data)
    return refund_line_bulk_delete


@router.put('/refund_line_bulk_deletes/{id}', response=RefundLineBulkDelete)
def update_refund_line_bulk_delete(request, id: int, payload: RefundLineBulkDeleteUpdate):
    refund_line_bulk_delete = get_object_or_404(RefundLineBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_line_bulk_delete, attr, value)
    refund_line_bulk_delete.save()
    return refund_line_bulk_delete


@router.delete('/refund_line_bulk_deletes/{id}')
def delete_refund_line_bulk_delete(request, id: int):
    refund_line_bulk_delete = get_object_or_404(RefundLineBulkDelete, id=id)
    refund_line_bulk_delete.delete()
    return {'success': True}


# RefundPaymentsAdd endpoints
@router.get('/refund_payments_adds', response=List[RefundPaymentsAdd])
@paginate
def list_refund_payments_adds(request):
    return RefundPaymentsAdd.objects.all()


@router.get('/refund_payments_adds/{id}', response=RefundPaymentsAdd)
def get_refund_payments_add(request, id: int):
    return get_object_or_404(RefundPaymentsAdd, id=id)


@router.post('/refund_payments_adds', response=RefundPaymentsAdd)
def create_refund_payments_add(request, payload: RefundPaymentsAddCreate):
    data = payload.dict()
    refund_payments_add = RefundPaymentsAdd.objects.create(**data)
    return refund_payments_add


@router.put('/refund_payments_adds/{id}', response=RefundPaymentsAdd)
def update_refund_payments_add(request, id: int, payload: RefundPaymentsAddUpdate):
    refund_payments_add = get_object_or_404(RefundPaymentsAdd, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payments_add, attr, value)
    refund_payments_add.save()
    return refund_payments_add


@router.delete('/refund_payments_adds/{id}')
def delete_refund_payments_add(request, id: int):
    refund_payments_add = get_object_or_404(RefundPaymentsAdd, id=id)
    refund_payments_add.delete()
    return {'success': True}


# RefundPaymentsUpdate endpoints
@router.get('/refund_payments_updates', response=List[RefundPaymentsUpdate])
@paginate
def list_refund_payments_updates(request):
    return RefundPaymentsUpdate.objects.all()


@router.get('/refund_payments_updates/{id}', response=RefundPaymentsUpdate)
def get_refund_payments_update(request, id: int):
    return get_object_or_404(RefundPaymentsUpdate, id=id)


@router.post('/refund_payments_updates', response=RefundPaymentsUpdate)
def create_refund_payments_update(request, payload: RefundPaymentsUpdateCreate):
    data = payload.dict()
    refund_payments_update = RefundPaymentsUpdate.objects.create(**data)
    return refund_payments_update


@router.put('/refund_payments_updates/{id}', response=RefundPaymentsUpdate)
def update_refund_payments_update(request, id: int, payload: RefundPaymentsUpdateUpdate):
    refund_payments_update = get_object_or_404(RefundPaymentsUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payments_update, attr, value)
    refund_payments_update.save()
    return refund_payments_update


@router.delete('/refund_payments_updates/{id}')
def delete_refund_payments_update(request, id: int):
    refund_payments_update = get_object_or_404(RefundPaymentsUpdate, id=id)
    refund_payments_update.delete()
    return {'success': True}


# RefundPaymentsDelete endpoints
@router.get('/refund_payments_deletes', response=List[RefundPaymentsDelete])
@paginate
def list_refund_payments_deletes(request):
    return RefundPaymentsDelete.objects.all()


@router.get('/refund_payments_deletes/{id}', response=RefundPaymentsDelete)
def get_refund_payments_delete(request, id: int):
    return get_object_or_404(RefundPaymentsDelete, id=id)


@router.post('/refund_payments_deletes', response=RefundPaymentsDelete)
def create_refund_payments_delete(request, payload: RefundPaymentsDeleteCreate):
    data = payload.dict()
    refund_payments_delete = RefundPaymentsDelete.objects.create(**data)
    return refund_payments_delete


@router.put('/refund_payments_deletes/{id}', response=RefundPaymentsDelete)
def update_refund_payments_delete(request, id: int, payload: RefundPaymentsDeleteUpdate):
    refund_payments_delete = get_object_or_404(RefundPaymentsDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refund_payments_delete, attr, value)
    refund_payments_delete.save()
    return refund_payments_delete


@router.delete('/refund_payments_deletes/{id}')
def delete_refund_payments_delete(request, id: int):
    refund_payments_delete = get_object_or_404(RefundPaymentsDelete, id=id)
    refund_payments_delete.delete()
    return {'success': True}


# PriceBookCreate endpoints
@router.get('/price_book_creates', response=List[PriceBookCreate])
@paginate
def list_price_book_creates(request):
    return PriceBookCreate.objects.all()


@router.get('/price_book_creates/{id}', response=PriceBookCreate)
def get_price_book_create(request, id: int):
    return get_object_or_404(PriceBookCreate, id=id)


@router.post('/price_book_creates', response=PriceBookCreate)
def create_price_book_create(request, payload: PriceBookCreateCreate):
    data = payload.dict()
    price_book_create = PriceBookCreate.objects.create(**data)
    return price_book_create


@router.put('/price_book_creates/{id}', response=PriceBookCreate)
def update_price_book_create(request, id: int, payload: PriceBookCreateUpdate):
    price_book_create = get_object_or_404(PriceBookCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_create, attr, value)
    price_book_create.save()
    return price_book_create


@router.delete('/price_book_creates/{id}')
def delete_price_book_create(request, id: int):
    price_book_create = get_object_or_404(PriceBookCreate, id=id)
    price_book_create.delete()
    return {'success': True}


# PriceBookError endpoints
@router.get('/price_book_errors', response=List[PriceBookError])
@paginate
def list_price_book_errors(request):
    return PriceBookError.objects.all()


@router.get('/price_book_errors/{id}', response=PriceBookError)
def get_price_book_error(request, id: int):
    return get_object_or_404(PriceBookError, id=id)


@router.post('/price_book_errors', response=PriceBookError)
def create_price_book_error(request, payload: PriceBookErrorCreate):
    data = payload.dict()
    price_book_error = PriceBookError.objects.create(**data)
    return price_book_error


@router.put('/price_book_errors/{id}', response=PriceBookError)
def update_price_book_error(request, id: int, payload: PriceBookErrorUpdate):
    price_book_error = get_object_or_404(PriceBookError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_error, attr, value)
    price_book_error.save()
    return price_book_error


@router.delete('/price_book_errors/{id}')
def delete_price_book_error(request, id: int):
    price_book_error = get_object_or_404(PriceBookError, id=id)
    price_book_error.delete()
    return {'success': True}


# PriceBookUpdate endpoints
@router.get('/price_book_updates', response=List[PriceBookUpdate])
@paginate
def list_price_book_updates(request):
    return PriceBookUpdate.objects.all()


@router.get('/price_book_updates/{id}', response=PriceBookUpdate)
def get_price_book_update(request, id: int):
    return get_object_or_404(PriceBookUpdate, id=id)


@router.post('/price_book_updates', response=PriceBookUpdate)
def create_price_book_update(request, payload: PriceBookUpdateCreate):
    data = payload.dict()
    price_book_update = PriceBookUpdate.objects.create(**data)
    return price_book_update


@router.put('/price_book_updates/{id}', response=PriceBookUpdate)
def update_price_book_update(request, id: int, payload: PriceBookUpdateUpdate):
    price_book_update = get_object_or_404(PriceBookUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_update, attr, value)
    price_book_update.save()
    return price_book_update


@router.delete('/price_book_updates/{id}')
def delete_price_book_update(request, id: int):
    price_book_update = get_object_or_404(PriceBookUpdate, id=id)
    price_book_update.delete()
    return {'success': True}


# PriceBookDelete endpoints
@router.get('/price_book_deletes', response=List[PriceBookDelete])
@paginate
def list_price_book_deletes(request):
    return PriceBookDelete.objects.all()


@router.get('/price_book_deletes/{id}', response=PriceBookDelete)
def get_price_book_delete(request, id: int):
    return get_object_or_404(PriceBookDelete, id=id)


@router.post('/price_book_deletes', response=PriceBookDelete)
def create_price_book_delete(request, payload: PriceBookDeleteCreate):
    data = payload.dict()
    price_book_delete = PriceBookDelete.objects.create(**data)
    return price_book_delete


@router.put('/price_book_deletes/{id}', response=PriceBookDelete)
def update_price_book_delete(request, id: int, payload: PriceBookDeleteUpdate):
    price_book_delete = get_object_or_404(PriceBookDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_delete, attr, value)
    price_book_delete.save()
    return price_book_delete


@router.delete('/price_book_deletes/{id}')
def delete_price_book_delete(request, id: int):
    price_book_delete = get_object_or_404(PriceBookDelete, id=id)
    price_book_delete.delete()
    return {'success': True}


# PriceBookBulkDelete endpoints
@router.get('/price_book_bulk_deletes', response=List[PriceBookBulkDelete])
@paginate
def list_price_book_bulk_deletes(request):
    return PriceBookBulkDelete.objects.all()


@router.get('/price_book_bulk_deletes/{id}', response=PriceBookBulkDelete)
def get_price_book_bulk_delete(request, id: int):
    return get_object_or_404(PriceBookBulkDelete, id=id)


@router.post('/price_book_bulk_deletes', response=PriceBookBulkDelete)
def create_price_book_bulk_delete(request, payload: PriceBookBulkDeleteCreate):
    data = payload.dict()
    price_book_bulk_delete = PriceBookBulkDelete.objects.create(**data)
    return price_book_bulk_delete


@router.put('/price_book_bulk_deletes/{id}', response=PriceBookBulkDelete)
def update_price_book_bulk_delete(request, id: int, payload: PriceBookBulkDeleteUpdate):
    price_book_bulk_delete = get_object_or_404(PriceBookBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_bulk_delete, attr, value)
    price_book_bulk_delete.save()
    return price_book_bulk_delete


@router.delete('/price_book_bulk_deletes/{id}')
def delete_price_book_bulk_delete(request, id: int):
    price_book_bulk_delete = get_object_or_404(PriceBookBulkDelete, id=id)
    price_book_bulk_delete.delete()
    return {'success': True}


# PriceBookVariantCreate endpoints
@router.get('/price_book_variant_creates', response=List[PriceBookVariantCreate])
@paginate
def list_price_book_variant_creates(request):
    return PriceBookVariantCreate.objects.all()


@router.get('/price_book_variant_creates/{id}', response=PriceBookVariantCreate)
def get_price_book_variant_create(request, id: int):
    return get_object_or_404(PriceBookVariantCreate, id=id)


@router.post('/price_book_variant_creates', response=PriceBookVariantCreate)
def create_price_book_variant_create(request, payload: PriceBookVariantCreateCreate):
    data = payload.dict()
    price_book_variant_create = PriceBookVariantCreate.objects.create(**data)
    return price_book_variant_create


@router.put('/price_book_variant_creates/{id}', response=PriceBookVariantCreate)
def update_price_book_variant_create(request, id: int, payload: PriceBookVariantCreateUpdate):
    price_book_variant_create = get_object_or_404(PriceBookVariantCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_create, attr, value)
    price_book_variant_create.save()
    return price_book_variant_create


@router.delete('/price_book_variant_creates/{id}')
def delete_price_book_variant_create(request, id: int):
    price_book_variant_create = get_object_or_404(PriceBookVariantCreate, id=id)
    price_book_variant_create.delete()
    return {'success': True}


# PriceBookVariantUpdate endpoints
@router.get('/price_book_variant_updates', response=List[PriceBookVariantUpdate])
@paginate
def list_price_book_variant_updates(request):
    return PriceBookVariantUpdate.objects.all()


@router.get('/price_book_variant_updates/{id}', response=PriceBookVariantUpdate)
def get_price_book_variant_update(request, id: int):
    return get_object_or_404(PriceBookVariantUpdate, id=id)


@router.post('/price_book_variant_updates', response=PriceBookVariantUpdate)
def create_price_book_variant_update(request, payload: PriceBookVariantUpdateCreate):
    data = payload.dict()
    price_book_variant_update = PriceBookVariantUpdate.objects.create(**data)
    return price_book_variant_update


@router.put('/price_book_variant_updates/{id}', response=PriceBookVariantUpdate)
def update_price_book_variant_update(request, id: int, payload: PriceBookVariantUpdateUpdate):
    price_book_variant_update = get_object_or_404(PriceBookVariantUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_update, attr, value)
    price_book_variant_update.save()
    return price_book_variant_update


@router.delete('/price_book_variant_updates/{id}')
def delete_price_book_variant_update(request, id: int):
    price_book_variant_update = get_object_or_404(PriceBookVariantUpdate, id=id)
    price_book_variant_update.delete()
    return {'success': True}


# PriceBookVariantDelete endpoints
@router.get('/price_book_variant_deletes', response=List[PriceBookVariantDelete])
@paginate
def list_price_book_variant_deletes(request):
    return PriceBookVariantDelete.objects.all()


@router.get('/price_book_variant_deletes/{id}', response=PriceBookVariantDelete)
def get_price_book_variant_delete(request, id: int):
    return get_object_or_404(PriceBookVariantDelete, id=id)


@router.post('/price_book_variant_deletes', response=PriceBookVariantDelete)
def create_price_book_variant_delete(request, payload: PriceBookVariantDeleteCreate):
    data = payload.dict()
    price_book_variant_delete = PriceBookVariantDelete.objects.create(**data)
    return price_book_variant_delete


@router.put('/price_book_variant_deletes/{id}', response=PriceBookVariantDelete)
def update_price_book_variant_delete(request, id: int, payload: PriceBookVariantDeleteUpdate):
    price_book_variant_delete = get_object_or_404(PriceBookVariantDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_delete, attr, value)
    price_book_variant_delete.save()
    return price_book_variant_delete


@router.delete('/price_book_variant_deletes/{id}')
def delete_price_book_variant_delete(request, id: int):
    price_book_variant_delete = get_object_or_404(PriceBookVariantDelete, id=id)
    price_book_variant_delete.delete()
    return {'success': True}


# PriceBookVariantBulkDelete endpoints
@router.get('/price_book_variant_bulk_deletes', response=List[PriceBookVariantBulkDelete])
@paginate
def list_price_book_variant_bulk_deletes(request):
    return PriceBookVariantBulkDelete.objects.all()


@router.get('/price_book_variant_bulk_deletes/{id}', response=PriceBookVariantBulkDelete)
def get_price_book_variant_bulk_delete(request, id: int):
    return get_object_or_404(PriceBookVariantBulkDelete, id=id)


@router.post('/price_book_variant_bulk_deletes', response=PriceBookVariantBulkDelete)
def create_price_book_variant_bulk_delete(request, payload: PriceBookVariantBulkDeleteCreate):
    data = payload.dict()
    price_book_variant_bulk_delete = PriceBookVariantBulkDelete.objects.create(**data)
    return price_book_variant_bulk_delete


@router.put('/price_book_variant_bulk_deletes/{id}', response=PriceBookVariantBulkDelete)
def update_price_book_variant_bulk_delete(request, id: int, payload: PriceBookVariantBulkDeleteUpdate):
    price_book_variant_bulk_delete = get_object_or_404(PriceBookVariantBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_variant_bulk_delete, attr, value)
    price_book_variant_bulk_delete.save()
    return price_book_variant_bulk_delete


@router.delete('/price_book_variant_bulk_deletes/{id}')
def delete_price_book_variant_bulk_delete(request, id: int):
    price_book_variant_bulk_delete = get_object_or_404(PriceBookVariantBulkDelete, id=id)
    price_book_variant_bulk_delete.delete()
    return {'success': True}


# PriceBookProductCreate endpoints
@router.get('/price_book_product_creates', response=List[PriceBookProductCreate])
@paginate
def list_price_book_product_creates(request):
    return PriceBookProductCreate.objects.all()


@router.get('/price_book_product_creates/{id}', response=PriceBookProductCreate)
def get_price_book_product_create(request, id: int):
    return get_object_or_404(PriceBookProductCreate, id=id)


@router.post('/price_book_product_creates', response=PriceBookProductCreate)
def create_price_book_product_create(request, payload: PriceBookProductCreateCreate):
    data = payload.dict()
    price_book_product_create = PriceBookProductCreate.objects.create(**data)
    return price_book_product_create


@router.put('/price_book_product_creates/{id}', response=PriceBookProductCreate)
def update_price_book_product_create(request, id: int, payload: PriceBookProductCreateUpdate):
    price_book_product_create = get_object_or_404(PriceBookProductCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_create, attr, value)
    price_book_product_create.save()
    return price_book_product_create


@router.delete('/price_book_product_creates/{id}')
def delete_price_book_product_create(request, id: int):
    price_book_product_create = get_object_or_404(PriceBookProductCreate, id=id)
    price_book_product_create.delete()
    return {'success': True}


# PriceBookProductUpdate endpoints
@router.get('/price_book_product_updates', response=List[PriceBookProductUpdate])
@paginate
def list_price_book_product_updates(request):
    return PriceBookProductUpdate.objects.all()


@router.get('/price_book_product_updates/{id}', response=PriceBookProductUpdate)
def get_price_book_product_update(request, id: int):
    return get_object_or_404(PriceBookProductUpdate, id=id)


@router.post('/price_book_product_updates', response=PriceBookProductUpdate)
def create_price_book_product_update(request, payload: PriceBookProductUpdateCreate):
    data = payload.dict()
    price_book_product_update = PriceBookProductUpdate.objects.create(**data)
    return price_book_product_update


@router.put('/price_book_product_updates/{id}', response=PriceBookProductUpdate)
def update_price_book_product_update(request, id: int, payload: PriceBookProductUpdateUpdate):
    price_book_product_update = get_object_or_404(PriceBookProductUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_update, attr, value)
    price_book_product_update.save()
    return price_book_product_update


@router.delete('/price_book_product_updates/{id}')
def delete_price_book_product_update(request, id: int):
    price_book_product_update = get_object_or_404(PriceBookProductUpdate, id=id)
    price_book_product_update.delete()
    return {'success': True}


# PriceBookProductDelete endpoints
@router.get('/price_book_product_deletes', response=List[PriceBookProductDelete])
@paginate
def list_price_book_product_deletes(request):
    return PriceBookProductDelete.objects.all()


@router.get('/price_book_product_deletes/{id}', response=PriceBookProductDelete)
def get_price_book_product_delete(request, id: int):
    return get_object_or_404(PriceBookProductDelete, id=id)


@router.post('/price_book_product_deletes', response=PriceBookProductDelete)
def create_price_book_product_delete(request, payload: PriceBookProductDeleteCreate):
    data = payload.dict()
    price_book_product_delete = PriceBookProductDelete.objects.create(**data)
    return price_book_product_delete


@router.put('/price_book_product_deletes/{id}', response=PriceBookProductDelete)
def update_price_book_product_delete(request, id: int, payload: PriceBookProductDeleteUpdate):
    price_book_product_delete = get_object_or_404(PriceBookProductDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_delete, attr, value)
    price_book_product_delete.save()
    return price_book_product_delete


@router.delete('/price_book_product_deletes/{id}')
def delete_price_book_product_delete(request, id: int):
    price_book_product_delete = get_object_or_404(PriceBookProductDelete, id=id)
    price_book_product_delete.delete()
    return {'success': True}


# PriceBookProductBulkDelete endpoints
@router.get('/price_book_product_bulk_deletes', response=List[PriceBookProductBulkDelete])
@paginate
def list_price_book_product_bulk_deletes(request):
    return PriceBookProductBulkDelete.objects.all()


@router.get('/price_book_product_bulk_deletes/{id}', response=PriceBookProductBulkDelete)
def get_price_book_product_bulk_delete(request, id: int):
    return get_object_or_404(PriceBookProductBulkDelete, id=id)


@router.post('/price_book_product_bulk_deletes', response=PriceBookProductBulkDelete)
def create_price_book_product_bulk_delete(request, payload: PriceBookProductBulkDeleteCreate):
    data = payload.dict()
    price_book_product_bulk_delete = PriceBookProductBulkDelete.objects.create(**data)
    return price_book_product_bulk_delete


@router.put('/price_book_product_bulk_deletes/{id}', response=PriceBookProductBulkDelete)
def update_price_book_product_bulk_delete(request, id: int, payload: PriceBookProductBulkDeleteUpdate):
    price_book_product_bulk_delete = get_object_or_404(PriceBookProductBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_bulk_delete, attr, value)
    price_book_product_bulk_delete.save()
    return price_book_product_bulk_delete


@router.delete('/price_book_product_bulk_deletes/{id}')
def delete_price_book_product_bulk_delete(request, id: int):
    price_book_product_bulk_delete = get_object_or_404(PriceBookProductBulkDelete, id=id)
    price_book_product_bulk_delete.delete()
    return {'success': True}


# PriceBookProductTypeCreate endpoints
@router.get('/price_book_product_type_creates', response=List[PriceBookProductTypeCreate])
@paginate
def list_price_book_product_type_creates(request):
    return PriceBookProductTypeCreate.objects.all()


@router.get('/price_book_product_type_creates/{id}', response=PriceBookProductTypeCreate)
def get_price_book_product_type_create(request, id: int):
    return get_object_or_404(PriceBookProductTypeCreate, id=id)


@router.post('/price_book_product_type_creates', response=PriceBookProductTypeCreate)
def create_price_book_product_type_create(request, payload: PriceBookProductTypeCreateCreate):
    data = payload.dict()
    price_book_product_type_create = PriceBookProductTypeCreate.objects.create(**data)
    return price_book_product_type_create


@router.put('/price_book_product_type_creates/{id}', response=PriceBookProductTypeCreate)
def update_price_book_product_type_create(request, id: int, payload: PriceBookProductTypeCreateUpdate):
    price_book_product_type_create = get_object_or_404(PriceBookProductTypeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_create, attr, value)
    price_book_product_type_create.save()
    return price_book_product_type_create


@router.delete('/price_book_product_type_creates/{id}')
def delete_price_book_product_type_create(request, id: int):
    price_book_product_type_create = get_object_or_404(PriceBookProductTypeCreate, id=id)
    price_book_product_type_create.delete()
    return {'success': True}


# PriceBookProductTypeUpdate endpoints
@router.get('/price_book_product_type_updates', response=List[PriceBookProductTypeUpdate])
@paginate
def list_price_book_product_type_updates(request):
    return PriceBookProductTypeUpdate.objects.all()


@router.get('/price_book_product_type_updates/{id}', response=PriceBookProductTypeUpdate)
def get_price_book_product_type_update(request, id: int):
    return get_object_or_404(PriceBookProductTypeUpdate, id=id)


@router.post('/price_book_product_type_updates', response=PriceBookProductTypeUpdate)
def create_price_book_product_type_update(request, payload: PriceBookProductTypeUpdateCreate):
    data = payload.dict()
    price_book_product_type_update = PriceBookProductTypeUpdate.objects.create(**data)
    return price_book_product_type_update


@router.put('/price_book_product_type_updates/{id}', response=PriceBookProductTypeUpdate)
def update_price_book_product_type_update(request, id: int, payload: PriceBookProductTypeUpdateUpdate):
    price_book_product_type_update = get_object_or_404(PriceBookProductTypeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_update, attr, value)
    price_book_product_type_update.save()
    return price_book_product_type_update


@router.delete('/price_book_product_type_updates/{id}')
def delete_price_book_product_type_update(request, id: int):
    price_book_product_type_update = get_object_or_404(PriceBookProductTypeUpdate, id=id)
    price_book_product_type_update.delete()
    return {'success': True}


# PriceBookProductTypeDelete endpoints
@router.get('/price_book_product_type_deletes', response=List[PriceBookProductTypeDelete])
@paginate
def list_price_book_product_type_deletes(request):
    return PriceBookProductTypeDelete.objects.all()


@router.get('/price_book_product_type_deletes/{id}', response=PriceBookProductTypeDelete)
def get_price_book_product_type_delete(request, id: int):
    return get_object_or_404(PriceBookProductTypeDelete, id=id)


@router.post('/price_book_product_type_deletes', response=PriceBookProductTypeDelete)
def create_price_book_product_type_delete(request, payload: PriceBookProductTypeDeleteCreate):
    data = payload.dict()
    price_book_product_type_delete = PriceBookProductTypeDelete.objects.create(**data)
    return price_book_product_type_delete


@router.put('/price_book_product_type_deletes/{id}', response=PriceBookProductTypeDelete)
def update_price_book_product_type_delete(request, id: int, payload: PriceBookProductTypeDeleteUpdate):
    price_book_product_type_delete = get_object_or_404(PriceBookProductTypeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_delete, attr, value)
    price_book_product_type_delete.save()
    return price_book_product_type_delete


@router.delete('/price_book_product_type_deletes/{id}')
def delete_price_book_product_type_delete(request, id: int):
    price_book_product_type_delete = get_object_or_404(PriceBookProductTypeDelete, id=id)
    price_book_product_type_delete.delete()
    return {'success': True}


# PriceBookProductTypeBulkDelete endpoints
@router.get('/price_book_product_type_bulk_deletes', response=List[PriceBookProductTypeBulkDelete])
@paginate
def list_price_book_product_type_bulk_deletes(request):
    return PriceBookProductTypeBulkDelete.objects.all()


@router.get('/price_book_product_type_bulk_deletes/{id}', response=PriceBookProductTypeBulkDelete)
def get_price_book_product_type_bulk_delete(request, id: int):
    return get_object_or_404(PriceBookProductTypeBulkDelete, id=id)


@router.post('/price_book_product_type_bulk_deletes', response=PriceBookProductTypeBulkDelete)
def create_price_book_product_type_bulk_delete(request, payload: PriceBookProductTypeBulkDeleteCreate):
    data = payload.dict()
    price_book_product_type_bulk_delete = PriceBookProductTypeBulkDelete.objects.create(**data)
    return price_book_product_type_bulk_delete


@router.put('/price_book_product_type_bulk_deletes/{id}', response=PriceBookProductTypeBulkDelete)
def update_price_book_product_type_bulk_delete(request, id: int, payload: PriceBookProductTypeBulkDeleteUpdate):
    price_book_product_type_bulk_delete = get_object_or_404(PriceBookProductTypeBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(price_book_product_type_bulk_delete, attr, value)
    price_book_product_type_bulk_delete.save()
    return price_book_product_type_bulk_delete


@router.delete('/price_book_product_type_bulk_deletes/{id}')
def delete_price_book_product_type_bulk_delete(request, id: int):
    price_book_product_type_bulk_delete = get_object_or_404(PriceBookProductTypeBulkDelete, id=id)
    price_book_product_type_bulk_delete.delete()
    return {'success': True}


# UserAddToPriceBook endpoints
@router.get('/user_add_to_price_books', response=List[UserAddToPriceBook])
@paginate
def list_user_add_to_price_books(request):
    return UserAddToPriceBook.objects.all()


@router.get('/user_add_to_price_books/{id}', response=UserAddToPriceBook)
def get_user_add_to_price_book(request, id: int):
    return get_object_or_404(UserAddToPriceBook, id=id)


@router.post('/user_add_to_price_books', response=UserAddToPriceBook)
def create_user_add_to_price_book(request, payload: UserAddToPriceBookCreate):
    data = payload.dict()
    user_add_to_price_book = UserAddToPriceBook.objects.create(**data)
    return user_add_to_price_book


@router.put('/user_add_to_price_books/{id}', response=UserAddToPriceBook)
def update_user_add_to_price_book(request, id: int, payload: UserAddToPriceBookUpdate):
    user_add_to_price_book = get_object_or_404(UserAddToPriceBook, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_add_to_price_book, attr, value)
    user_add_to_price_book.save()
    return user_add_to_price_book


@router.delete('/user_add_to_price_books/{id}')
def delete_user_add_to_price_book(request, id: int):
    user_add_to_price_book = get_object_or_404(UserAddToPriceBook, id=id)
    user_add_to_price_book.delete()
    return {'success': True}


# UserRemoveFromPriceBook endpoints
@router.get('/user_remove_from_price_books', response=List[UserRemoveFromPriceBook])
@paginate
def list_user_remove_from_price_books(request):
    return UserRemoveFromPriceBook.objects.all()


@router.get('/user_remove_from_price_books/{id}', response=UserRemoveFromPriceBook)
def get_user_remove_from_price_book(request, id: int):
    return get_object_or_404(UserRemoveFromPriceBook, id=id)


@router.post('/user_remove_from_price_books', response=UserRemoveFromPriceBook)
def create_user_remove_from_price_book(request, payload: UserRemoveFromPriceBookCreate):
    data = payload.dict()
    user_remove_from_price_book = UserRemoveFromPriceBook.objects.create(**data)
    return user_remove_from_price_book


@router.put('/user_remove_from_price_books/{id}', response=UserRemoveFromPriceBook)
def update_user_remove_from_price_book(request, id: int, payload: UserRemoveFromPriceBookUpdate):
    user_remove_from_price_book = get_object_or_404(UserRemoveFromPriceBook, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_remove_from_price_book, attr, value)
    user_remove_from_price_book.save()
    return user_remove_from_price_book


@router.delete('/user_remove_from_price_books/{id}')
def delete_user_remove_from_price_book(request, id: int):
    user_remove_from_price_book = get_object_or_404(UserRemoveFromPriceBook, id=id)
    user_remove_from_price_book.delete()
    return {'success': True}


# CategoryCreate endpoints
@router.get('/category_creates', response=List[CategoryCreate])
@paginate
def list_category_creates(request):
    return CategoryCreate.objects.all()


@router.get('/category_creates/{id}', response=CategoryCreate)
def get_category_create(request, id: int):
    return get_object_or_404(CategoryCreate, id=id)


@router.post('/category_creates', response=CategoryCreate)
def create_category_create(request, payload: CategoryCreateCreate):
    data = payload.dict()
    category_create = CategoryCreate.objects.create(**data)
    return category_create


@router.put('/category_creates/{id}', response=CategoryCreate)
def update_category_create(request, id: int, payload: CategoryCreateUpdate):
    category_create = get_object_or_404(CategoryCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_create, attr, value)
    category_create.save()
    return category_create


@router.delete('/category_creates/{id}')
def delete_category_create(request, id: int):
    category_create = get_object_or_404(CategoryCreate, id=id)
    category_create.delete()
    return {'success': True}


# CategoryDelete endpoints
@router.get('/category_deletes', response=List[CategoryDelete])
@paginate
def list_category_deletes(request):
    return CategoryDelete.objects.all()


@router.get('/category_deletes/{id}', response=CategoryDelete)
def get_category_delete(request, id: int):
    return get_object_or_404(CategoryDelete, id=id)


@router.post('/category_deletes', response=CategoryDelete)
def create_category_delete(request, payload: CategoryDeleteCreate):
    data = payload.dict()
    category_delete = CategoryDelete.objects.create(**data)
    return category_delete


@router.put('/category_deletes/{id}', response=CategoryDelete)
def update_category_delete(request, id: int, payload: CategoryDeleteUpdate):
    category_delete = get_object_or_404(CategoryDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_delete, attr, value)
    category_delete.save()
    return category_delete


@router.delete('/category_deletes/{id}')
def delete_category_delete(request, id: int):
    category_delete = get_object_or_404(CategoryDelete, id=id)
    category_delete.delete()
    return {'success': True}


# CategoryBulkDelete endpoints
@router.get('/category_bulk_deletes', response=List[CategoryBulkDelete])
@paginate
def list_category_bulk_deletes(request):
    return CategoryBulkDelete.objects.all()


@router.get('/category_bulk_deletes/{id}', response=CategoryBulkDelete)
def get_category_bulk_delete(request, id: int):
    return get_object_or_404(CategoryBulkDelete, id=id)


@router.post('/category_bulk_deletes', response=CategoryBulkDelete)
def create_category_bulk_delete(request, payload: CategoryBulkDeleteCreate):
    data = payload.dict()
    category_bulk_delete = CategoryBulkDelete.objects.create(**data)
    return category_bulk_delete


@router.put('/category_bulk_deletes/{id}', response=CategoryBulkDelete)
def update_category_bulk_delete(request, id: int, payload: CategoryBulkDeleteUpdate):
    category_bulk_delete = get_object_or_404(CategoryBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_bulk_delete, attr, value)
    category_bulk_delete.save()
    return category_bulk_delete


@router.delete('/category_bulk_deletes/{id}')
def delete_category_bulk_delete(request, id: int):
    category_bulk_delete = get_object_or_404(CategoryBulkDelete, id=id)
    category_bulk_delete.delete()
    return {'success': True}


# CategoryUpdate endpoints
@router.get('/category_updates', response=List[CategoryUpdate])
@paginate
def list_category_updates(request):
    return CategoryUpdate.objects.all()


@router.get('/category_updates/{id}', response=CategoryUpdate)
def get_category_update(request, id: int):
    return get_object_or_404(CategoryUpdate, id=id)


@router.post('/category_updates', response=CategoryUpdate)
def create_category_update(request, payload: CategoryUpdateCreate):
    data = payload.dict()
    category_update = CategoryUpdate.objects.create(**data)
    return category_update


@router.put('/category_updates/{id}', response=CategoryUpdate)
def update_category_update(request, id: int, payload: CategoryUpdateUpdate):
    category_update = get_object_or_404(CategoryUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(category_update, attr, value)
    category_update.save()
    return category_update


@router.delete('/category_updates/{id}')
def delete_category_update(request, id: int):
    category_update = get_object_or_404(CategoryUpdate, id=id)
    category_update.delete()
    return {'success': True}


# CollectionAddProducts endpoints
@router.get('/collection_add_productss', response=List[CollectionAddProducts])
@paginate
def list_collection_add_productss(request):
    return CollectionAddProducts.objects.all()


@router.get('/collection_add_productss/{id}', response=CollectionAddProducts)
def get_collection_add_products(request, id: int):
    return get_object_or_404(CollectionAddProducts, id=id)


@router.post('/collection_add_productss', response=CollectionAddProducts)
def create_collection_add_products(request, payload: CollectionAddProductsCreate):
    data = payload.dict()
    collection_add_products = CollectionAddProducts.objects.create(**data)
    return collection_add_products


@router.put('/collection_add_productss/{id}', response=CollectionAddProducts)
def update_collection_add_products(request, id: int, payload: CollectionAddProductsUpdate):
    collection_add_products = get_object_or_404(CollectionAddProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_add_products, attr, value)
    collection_add_products.save()
    return collection_add_products


@router.delete('/collection_add_productss/{id}')
def delete_collection_add_products(request, id: int):
    collection_add_products = get_object_or_404(CollectionAddProducts, id=id)
    collection_add_products.delete()
    return {'success': True}


# CollectionAddVariants endpoints
@router.get('/collection_add_variantss', response=List[CollectionAddVariants])
@paginate
def list_collection_add_variantss(request):
    return CollectionAddVariants.objects.all()


@router.get('/collection_add_variantss/{id}', response=CollectionAddVariants)
def get_collection_add_variants(request, id: int):
    return get_object_or_404(CollectionAddVariants, id=id)


@router.post('/collection_add_variantss', response=CollectionAddVariants)
def create_collection_add_variants(request, payload: CollectionAddVariantsCreate):
    data = payload.dict()
    collection_add_variants = CollectionAddVariants.objects.create(**data)
    return collection_add_variants


@router.put('/collection_add_variantss/{id}', response=CollectionAddVariants)
def update_collection_add_variants(request, id: int, payload: CollectionAddVariantsUpdate):
    collection_add_variants = get_object_or_404(CollectionAddVariants, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_add_variants, attr, value)
    collection_add_variants.save()
    return collection_add_variants


@router.delete('/collection_add_variantss/{id}')
def delete_collection_add_variants(request, id: int):
    collection_add_variants = get_object_or_404(CollectionAddVariants, id=id)
    collection_add_variants.delete()
    return {'success': True}


# CollectionCreate endpoints
@router.get('/collection_creates', response=List[CollectionCreate])
@paginate
def list_collection_creates(request):
    return CollectionCreate.objects.all()


@router.get('/collection_creates/{id}', response=CollectionCreate)
def get_collection_create(request, id: int):
    return get_object_or_404(CollectionCreate, id=id)


@router.post('/collection_creates', response=CollectionCreate)
def create_collection_create(request, payload: CollectionCreateCreate):
    data = payload.dict()
    collection_create = CollectionCreate.objects.create(**data)
    return collection_create


@router.put('/collection_creates/{id}', response=CollectionCreate)
def update_collection_create(request, id: int, payload: CollectionCreateUpdate):
    collection_create = get_object_or_404(CollectionCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_create, attr, value)
    collection_create.save()
    return collection_create


@router.delete('/collection_creates/{id}')
def delete_collection_create(request, id: int):
    collection_create = get_object_or_404(CollectionCreate, id=id)
    collection_create.delete()
    return {'success': True}


# CollectionDelete endpoints
@router.get('/collection_deletes', response=List[CollectionDelete])
@paginate
def list_collection_deletes(request):
    return CollectionDelete.objects.all()


@router.get('/collection_deletes/{id}', response=CollectionDelete)
def get_collection_delete(request, id: int):
    return get_object_or_404(CollectionDelete, id=id)


@router.post('/collection_deletes', response=CollectionDelete)
def create_collection_delete(request, payload: CollectionDeleteCreate):
    data = payload.dict()
    collection_delete = CollectionDelete.objects.create(**data)
    return collection_delete


@router.put('/collection_deletes/{id}', response=CollectionDelete)
def update_collection_delete(request, id: int, payload: CollectionDeleteUpdate):
    collection_delete = get_object_or_404(CollectionDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_delete, attr, value)
    collection_delete.save()
    return collection_delete


@router.delete('/collection_deletes/{id}')
def delete_collection_delete(request, id: int):
    collection_delete = get_object_or_404(CollectionDelete, id=id)
    collection_delete.delete()
    return {'success': True}


# CollectionReorderProducts endpoints
@router.get('/collection_reorder_productss', response=List[CollectionReorderProducts])
@paginate
def list_collection_reorder_productss(request):
    return CollectionReorderProducts.objects.all()


@router.get('/collection_reorder_productss/{id}', response=CollectionReorderProducts)
def get_collection_reorder_products(request, id: int):
    return get_object_or_404(CollectionReorderProducts, id=id)


@router.post('/collection_reorder_productss', response=CollectionReorderProducts)
def create_collection_reorder_products(request, payload: CollectionReorderProductsCreate):
    data = payload.dict()
    collection_reorder_products = CollectionReorderProducts.objects.create(**data)
    return collection_reorder_products


@router.put('/collection_reorder_productss/{id}', response=CollectionReorderProducts)
def update_collection_reorder_products(request, id: int, payload: CollectionReorderProductsUpdate):
    collection_reorder_products = get_object_or_404(CollectionReorderProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_reorder_products, attr, value)
    collection_reorder_products.save()
    return collection_reorder_products


@router.delete('/collection_reorder_productss/{id}')
def delete_collection_reorder_products(request, id: int):
    collection_reorder_products = get_object_or_404(CollectionReorderProducts, id=id)
    collection_reorder_products.delete()
    return {'success': True}


# CollectionBulkDelete endpoints
@router.get('/collection_bulk_deletes', response=List[CollectionBulkDelete])
@paginate
def list_collection_bulk_deletes(request):
    return CollectionBulkDelete.objects.all()


@router.get('/collection_bulk_deletes/{id}', response=CollectionBulkDelete)
def get_collection_bulk_delete(request, id: int):
    return get_object_or_404(CollectionBulkDelete, id=id)


@router.post('/collection_bulk_deletes', response=CollectionBulkDelete)
def create_collection_bulk_delete(request, payload: CollectionBulkDeleteCreate):
    data = payload.dict()
    collection_bulk_delete = CollectionBulkDelete.objects.create(**data)
    return collection_bulk_delete


@router.put('/collection_bulk_deletes/{id}', response=CollectionBulkDelete)
def update_collection_bulk_delete(request, id: int, payload: CollectionBulkDeleteUpdate):
    collection_bulk_delete = get_object_or_404(CollectionBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_bulk_delete, attr, value)
    collection_bulk_delete.save()
    return collection_bulk_delete


@router.delete('/collection_bulk_deletes/{id}')
def delete_collection_bulk_delete(request, id: int):
    collection_bulk_delete = get_object_or_404(CollectionBulkDelete, id=id)
    collection_bulk_delete.delete()
    return {'success': True}


# CollectionBulkPublish endpoints
@router.get('/collection_bulk_publishs', response=List[CollectionBulkPublish])
@paginate
def list_collection_bulk_publishs(request):
    return CollectionBulkPublish.objects.all()


@router.get('/collection_bulk_publishs/{id}', response=CollectionBulkPublish)
def get_collection_bulk_publish(request, id: int):
    return get_object_or_404(CollectionBulkPublish, id=id)


@router.post('/collection_bulk_publishs', response=CollectionBulkPublish)
def create_collection_bulk_publish(request, payload: CollectionBulkPublishCreate):
    data = payload.dict()
    collection_bulk_publish = CollectionBulkPublish.objects.create(**data)
    return collection_bulk_publish


@router.put('/collection_bulk_publishs/{id}', response=CollectionBulkPublish)
def update_collection_bulk_publish(request, id: int, payload: CollectionBulkPublishUpdate):
    collection_bulk_publish = get_object_or_404(CollectionBulkPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_bulk_publish, attr, value)
    collection_bulk_publish.save()
    return collection_bulk_publish


@router.delete('/collection_bulk_publishs/{id}')
def delete_collection_bulk_publish(request, id: int):
    collection_bulk_publish = get_object_or_404(CollectionBulkPublish, id=id)
    collection_bulk_publish.delete()
    return {'success': True}


# CollectionRemoveProducts endpoints
@router.get('/collection_remove_productss', response=List[CollectionRemoveProducts])
@paginate
def list_collection_remove_productss(request):
    return CollectionRemoveProducts.objects.all()


@router.get('/collection_remove_productss/{id}', response=CollectionRemoveProducts)
def get_collection_remove_products(request, id: int):
    return get_object_or_404(CollectionRemoveProducts, id=id)


@router.post('/collection_remove_productss', response=CollectionRemoveProducts)
def create_collection_remove_products(request, payload: CollectionRemoveProductsCreate):
    data = payload.dict()
    collection_remove_products = CollectionRemoveProducts.objects.create(**data)
    return collection_remove_products


@router.put('/collection_remove_productss/{id}', response=CollectionRemoveProducts)
def update_collection_remove_products(request, id: int, payload: CollectionRemoveProductsUpdate):
    collection_remove_products = get_object_or_404(CollectionRemoveProducts, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_remove_products, attr, value)
    collection_remove_products.save()
    return collection_remove_products


@router.delete('/collection_remove_productss/{id}')
def delete_collection_remove_products(request, id: int):
    collection_remove_products = get_object_or_404(CollectionRemoveProducts, id=id)
    collection_remove_products.delete()
    return {'success': True}


# CollectionRemoveVariants endpoints
@router.get('/collection_remove_variantss', response=List[CollectionRemoveVariants])
@paginate
def list_collection_remove_variantss(request):
    return CollectionRemoveVariants.objects.all()


@router.get('/collection_remove_variantss/{id}', response=CollectionRemoveVariants)
def get_collection_remove_variants(request, id: int):
    return get_object_or_404(CollectionRemoveVariants, id=id)


@router.post('/collection_remove_variantss', response=CollectionRemoveVariants)
def create_collection_remove_variants(request, payload: CollectionRemoveVariantsCreate):
    data = payload.dict()
    collection_remove_variants = CollectionRemoveVariants.objects.create(**data)
    return collection_remove_variants


@router.put('/collection_remove_variantss/{id}', response=CollectionRemoveVariants)
def update_collection_remove_variants(request, id: int, payload: CollectionRemoveVariantsUpdate):
    collection_remove_variants = get_object_or_404(CollectionRemoveVariants, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_remove_variants, attr, value)
    collection_remove_variants.save()
    return collection_remove_variants


@router.delete('/collection_remove_variantss/{id}')
def delete_collection_remove_variants(request, id: int):
    collection_remove_variants = get_object_or_404(CollectionRemoveVariants, id=id)
    collection_remove_variants.delete()
    return {'success': True}


# CollectionUpdate endpoints
@router.get('/collection_updates', response=List[CollectionUpdate])
@paginate
def list_collection_updates(request):
    return CollectionUpdate.objects.all()


@router.get('/collection_updates/{id}', response=CollectionUpdate)
def get_collection_update(request, id: int):
    return get_object_or_404(CollectionUpdate, id=id)


@router.post('/collection_updates', response=CollectionUpdate)
def create_collection_update(request, payload: CollectionUpdateCreate):
    data = payload.dict()
    collection_update = CollectionUpdate.objects.create(**data)
    return collection_update


@router.put('/collection_updates/{id}', response=CollectionUpdate)
def update_collection_update(request, id: int, payload: CollectionUpdateUpdate):
    collection_update = get_object_or_404(CollectionUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(collection_update, attr, value)
    collection_update.save()
    return collection_update


@router.delete('/collection_updates/{id}')
def delete_collection_update(request, id: int):
    collection_update = get_object_or_404(CollectionUpdate, id=id)
    collection_update.delete()
    return {'success': True}


# ProductCreate endpoints
@router.get('/product_creates', response=List[ProductCreate])
@paginate
def list_product_creates(request):
    return ProductCreate.objects.all()


@router.get('/product_creates/{id}', response=ProductCreate)
def get_product_create(request, id: int):
    return get_object_or_404(ProductCreate, id=id)


@router.post('/product_creates', response=ProductCreate)
def create_product_create(request, payload: ProductCreateCreate):
    data = payload.dict()
    product_create = ProductCreate.objects.create(**data)
    return product_create


@router.put('/product_creates/{id}', response=ProductCreate)
def update_product_create(request, id: int, payload: ProductCreateUpdate):
    product_create = get_object_or_404(ProductCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_create, attr, value)
    product_create.save()
    return product_create


@router.delete('/product_creates/{id}')
def delete_product_create(request, id: int):
    product_create = get_object_or_404(ProductCreate, id=id)
    product_create.delete()
    return {'success': True}


# ProductDelete endpoints
@router.get('/product_deletes', response=List[ProductDelete])
@paginate
def list_product_deletes(request):
    return ProductDelete.objects.all()


@router.get('/product_deletes/{id}', response=ProductDelete)
def get_product_delete(request, id: int):
    return get_object_or_404(ProductDelete, id=id)


@router.post('/product_deletes', response=ProductDelete)
def create_product_delete(request, payload: ProductDeleteCreate):
    data = payload.dict()
    product_delete = ProductDelete.objects.create(**data)
    return product_delete


@router.put('/product_deletes/{id}', response=ProductDelete)
def update_product_delete(request, id: int, payload: ProductDeleteUpdate):
    product_delete = get_object_or_404(ProductDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_delete, attr, value)
    product_delete.save()
    return product_delete


@router.delete('/product_deletes/{id}')
def delete_product_delete(request, id: int):
    product_delete = get_object_or_404(ProductDelete, id=id)
    product_delete.delete()
    return {'success': True}


# ProductBulkDelete endpoints
@router.get('/product_bulk_deletes', response=List[ProductBulkDelete])
@paginate
def list_product_bulk_deletes(request):
    return ProductBulkDelete.objects.all()


@router.get('/product_bulk_deletes/{id}', response=ProductBulkDelete)
def get_product_bulk_delete(request, id: int):
    return get_object_or_404(ProductBulkDelete, id=id)


@router.post('/product_bulk_deletes', response=ProductBulkDelete)
def create_product_bulk_delete(request, payload: ProductBulkDeleteCreate):
    data = payload.dict()
    product_bulk_delete = ProductBulkDelete.objects.create(**data)
    return product_bulk_delete


@router.put('/product_bulk_deletes/{id}', response=ProductBulkDelete)
def update_product_bulk_delete(request, id: int, payload: ProductBulkDeleteUpdate):
    product_bulk_delete = get_object_or_404(ProductBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_bulk_delete, attr, value)
    product_bulk_delete.save()
    return product_bulk_delete


@router.delete('/product_bulk_deletes/{id}')
def delete_product_bulk_delete(request, id: int):
    product_bulk_delete = get_object_or_404(ProductBulkDelete, id=id)
    product_bulk_delete.delete()
    return {'success': True}


# ProductBulkPublish endpoints
@router.get('/product_bulk_publishs', response=List[ProductBulkPublish])
@paginate
def list_product_bulk_publishs(request):
    return ProductBulkPublish.objects.all()


@router.get('/product_bulk_publishs/{id}', response=ProductBulkPublish)
def get_product_bulk_publish(request, id: int):
    return get_object_or_404(ProductBulkPublish, id=id)


@router.post('/product_bulk_publishs', response=ProductBulkPublish)
def create_product_bulk_publish(request, payload: ProductBulkPublishCreate):
    data = payload.dict()
    product_bulk_publish = ProductBulkPublish.objects.create(**data)
    return product_bulk_publish


@router.put('/product_bulk_publishs/{id}', response=ProductBulkPublish)
def update_product_bulk_publish(request, id: int, payload: ProductBulkPublishUpdate):
    product_bulk_publish = get_object_or_404(ProductBulkPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_bulk_publish, attr, value)
    product_bulk_publish.save()
    return product_bulk_publish


@router.delete('/product_bulk_publishs/{id}')
def delete_product_bulk_publish(request, id: int):
    product_bulk_publish = get_object_or_404(ProductBulkPublish, id=id)
    product_bulk_publish.delete()
    return {'success': True}


# ProductBulkCategoryUpdate endpoints
@router.get('/product_bulk_category_updates', response=List[ProductBulkCategoryUpdate])
@paginate
def list_product_bulk_category_updates(request):
    return ProductBulkCategoryUpdate.objects.all()


@router.get('/product_bulk_category_updates/{id}', response=ProductBulkCategoryUpdate)
def get_product_bulk_category_update(request, id: int):
    return get_object_or_404(ProductBulkCategoryUpdate, id=id)


@router.post('/product_bulk_category_updates', response=ProductBulkCategoryUpdate)
def create_product_bulk_category_update(request, payload: ProductBulkCategoryUpdateCreate):
    data = payload.dict()
    product_bulk_category_update = ProductBulkCategoryUpdate.objects.create(**data)
    return product_bulk_category_update


@router.put('/product_bulk_category_updates/{id}', response=ProductBulkCategoryUpdate)
def update_product_bulk_category_update(request, id: int, payload: ProductBulkCategoryUpdateUpdate):
    product_bulk_category_update = get_object_or_404(ProductBulkCategoryUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_bulk_category_update, attr, value)
    product_bulk_category_update.save()
    return product_bulk_category_update


@router.delete('/product_bulk_category_updates/{id}')
def delete_product_bulk_category_update(request, id: int):
    product_bulk_category_update = get_object_or_404(ProductBulkCategoryUpdate, id=id)
    product_bulk_category_update.delete()
    return {'success': True}


# ProductUpdate endpoints
@router.get('/product_updates', response=List[ProductUpdate])
@paginate
def list_product_updates(request):
    return ProductUpdate.objects.all()


@router.get('/product_updates/{id}', response=ProductUpdate)
def get_product_update(request, id: int):
    return get_object_or_404(ProductUpdate, id=id)


@router.post('/product_updates', response=ProductUpdate)
def create_product_update(request, payload: ProductUpdateCreate):
    data = payload.dict()
    product_update = ProductUpdate.objects.create(**data)
    return product_update


@router.put('/product_updates/{id}', response=ProductUpdate)
def update_product_update(request, id: int, payload: ProductUpdateUpdate):
    product_update = get_object_or_404(ProductUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_update, attr, value)
    product_update.save()
    return product_update


@router.delete('/product_updates/{id}')
def delete_product_update(request, id: int):
    product_update = get_object_or_404(ProductUpdate, id=id)
    product_update.delete()
    return {'success': True}


# ProductSetAvailabilityForPurchase endpoints
@router.get('/product_set_availability_for_purchases', response=List[ProductSetAvailabilityForPurchase])
@paginate
def list_product_set_availability_for_purchases(request):
    return ProductSetAvailabilityForPurchase.objects.all()


@router.get('/product_set_availability_for_purchases/{id}', response=ProductSetAvailabilityForPurchase)
def get_product_set_availability_for_purchase(request, id: int):
    return get_object_or_404(ProductSetAvailabilityForPurchase, id=id)


@router.post('/product_set_availability_for_purchases', response=ProductSetAvailabilityForPurchase)
def create_product_set_availability_for_purchase(request, payload: ProductSetAvailabilityForPurchaseCreate):
    data = payload.dict()
    product_set_availability_for_purchase = ProductSetAvailabilityForPurchase.objects.create(**data)
    return product_set_availability_for_purchase


@router.put('/product_set_availability_for_purchases/{id}', response=ProductSetAvailabilityForPurchase)
def update_product_set_availability_for_purchase(request, id: int, payload: ProductSetAvailabilityForPurchaseUpdate):
    product_set_availability_for_purchase = get_object_or_404(ProductSetAvailabilityForPurchase, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_set_availability_for_purchase, attr, value)
    product_set_availability_for_purchase.save()
    return product_set_availability_for_purchase


@router.delete('/product_set_availability_for_purchases/{id}')
def delete_product_set_availability_for_purchase(request, id: int):
    product_set_availability_for_purchase = get_object_or_404(ProductSetAvailabilityForPurchase, id=id)
    product_set_availability_for_purchase.delete()
    return {'success': True}


# ProductImageCreate endpoints
@router.get('/product_image_creates', response=List[ProductImageCreate])
@paginate
def list_product_image_creates(request):
    return ProductImageCreate.objects.all()


@router.get('/product_image_creates/{id}', response=ProductImageCreate)
def get_product_image_create(request, id: int):
    return get_object_or_404(ProductImageCreate, id=id)


@router.post('/product_image_creates', response=ProductImageCreate)
def create_product_image_create(request, payload: ProductImageCreateCreate):
    data = payload.dict()
    product_image_create = ProductImageCreate.objects.create(**data)
    return product_image_create


@router.put('/product_image_creates/{id}', response=ProductImageCreate)
def update_product_image_create(request, id: int, payload: ProductImageCreateUpdate):
    product_image_create = get_object_or_404(ProductImageCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_create, attr, value)
    product_image_create.save()
    return product_image_create


@router.delete('/product_image_creates/{id}')
def delete_product_image_create(request, id: int):
    product_image_create = get_object_or_404(ProductImageCreate, id=id)
    product_image_create.delete()
    return {'success': True}


# ProductReorderVariants endpoints
@router.get('/product_reorder_variantss', response=List[ProductReorderVariants])
@paginate
def list_product_reorder_variantss(request):
    return ProductReorderVariants.objects.all()


@router.get('/product_reorder_variantss/{id}', response=ProductReorderVariants)
def get_product_reorder_variants(request, id: int):
    return get_object_or_404(ProductReorderVariants, id=id)


@router.post('/product_reorder_variantss', response=ProductReorderVariants)
def create_product_reorder_variants(request, payload: ProductReorderVariantsCreate):
    data = payload.dict()
    product_reorder_variants = ProductReorderVariants.objects.create(**data)
    return product_reorder_variants


@router.put('/product_reorder_variantss/{id}', response=ProductReorderVariants)
def update_product_reorder_variants(request, id: int, payload: ProductReorderVariantsUpdate):
    product_reorder_variants = get_object_or_404(ProductReorderVariants, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_reorder_variants, attr, value)
    product_reorder_variants.save()
    return product_reorder_variants


@router.delete('/product_reorder_variantss/{id}')
def delete_product_reorder_variants(request, id: int):
    product_reorder_variants = get_object_or_404(ProductReorderVariants, id=id)
    product_reorder_variants.delete()
    return {'success': True}


# ProductImageDelete endpoints
@router.get('/product_image_deletes', response=List[ProductImageDelete])
@paginate
def list_product_image_deletes(request):
    return ProductImageDelete.objects.all()


@router.get('/product_image_deletes/{id}', response=ProductImageDelete)
def get_product_image_delete(request, id: int):
    return get_object_or_404(ProductImageDelete, id=id)


@router.post('/product_image_deletes', response=ProductImageDelete)
def create_product_image_delete(request, payload: ProductImageDeleteCreate):
    data = payload.dict()
    product_image_delete = ProductImageDelete.objects.create(**data)
    return product_image_delete


@router.put('/product_image_deletes/{id}', response=ProductImageDelete)
def update_product_image_delete(request, id: int, payload: ProductImageDeleteUpdate):
    product_image_delete = get_object_or_404(ProductImageDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_delete, attr, value)
    product_image_delete.save()
    return product_image_delete


@router.delete('/product_image_deletes/{id}')
def delete_product_image_delete(request, id: int):
    product_image_delete = get_object_or_404(ProductImageDelete, id=id)
    product_image_delete.delete()
    return {'success': True}


# ProductImageBulkDelete endpoints
@router.get('/product_image_bulk_deletes', response=List[ProductImageBulkDelete])
@paginate
def list_product_image_bulk_deletes(request):
    return ProductImageBulkDelete.objects.all()


@router.get('/product_image_bulk_deletes/{id}', response=ProductImageBulkDelete)
def get_product_image_bulk_delete(request, id: int):
    return get_object_or_404(ProductImageBulkDelete, id=id)


@router.post('/product_image_bulk_deletes', response=ProductImageBulkDelete)
def create_product_image_bulk_delete(request, payload: ProductImageBulkDeleteCreate):
    data = payload.dict()
    product_image_bulk_delete = ProductImageBulkDelete.objects.create(**data)
    return product_image_bulk_delete


@router.put('/product_image_bulk_deletes/{id}', response=ProductImageBulkDelete)
def update_product_image_bulk_delete(request, id: int, payload: ProductImageBulkDeleteUpdate):
    product_image_bulk_delete = get_object_or_404(ProductImageBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_bulk_delete, attr, value)
    product_image_bulk_delete.save()
    return product_image_bulk_delete


@router.delete('/product_image_bulk_deletes/{id}')
def delete_product_image_bulk_delete(request, id: int):
    product_image_bulk_delete = get_object_or_404(ProductImageBulkDelete, id=id)
    product_image_bulk_delete.delete()
    return {'success': True}


# ProductImageReorder endpoints
@router.get('/product_image_reorders', response=List[ProductImageReorder])
@paginate
def list_product_image_reorders(request):
    return ProductImageReorder.objects.all()


@router.get('/product_image_reorders/{id}', response=ProductImageReorder)
def get_product_image_reorder(request, id: int):
    return get_object_or_404(ProductImageReorder, id=id)


@router.post('/product_image_reorders', response=ProductImageReorder)
def create_product_image_reorder(request, payload: ProductImageReorderCreate):
    data = payload.dict()
    product_image_reorder = ProductImageReorder.objects.create(**data)
    return product_image_reorder


@router.put('/product_image_reorders/{id}', response=ProductImageReorder)
def update_product_image_reorder(request, id: int, payload: ProductImageReorderUpdate):
    product_image_reorder = get_object_or_404(ProductImageReorder, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_reorder, attr, value)
    product_image_reorder.save()
    return product_image_reorder


@router.delete('/product_image_reorders/{id}')
def delete_product_image_reorder(request, id: int):
    product_image_reorder = get_object_or_404(ProductImageReorder, id=id)
    product_image_reorder.delete()
    return {'success': True}


# ProductImageUpdate endpoints
@router.get('/product_image_updates', response=List[ProductImageUpdate])
@paginate
def list_product_image_updates(request):
    return ProductImageUpdate.objects.all()


@router.get('/product_image_updates/{id}', response=ProductImageUpdate)
def get_product_image_update(request, id: int):
    return get_object_or_404(ProductImageUpdate, id=id)


@router.post('/product_image_updates', response=ProductImageUpdate)
def create_product_image_update(request, payload: ProductImageUpdateCreate):
    data = payload.dict()
    product_image_update = ProductImageUpdate.objects.create(**data)
    return product_image_update


@router.put('/product_image_updates/{id}', response=ProductImageUpdate)
def update_product_image_update(request, id: int, payload: ProductImageUpdateUpdate):
    product_image_update = get_object_or_404(ProductImageUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_image_update, attr, value)
    product_image_update.save()
    return product_image_update


@router.delete('/product_image_updates/{id}')
def delete_product_image_update(request, id: int):
    product_image_update = get_object_or_404(ProductImageUpdate, id=id)
    product_image_update.delete()
    return {'success': True}


# ProductTypeCreate endpoints
@router.get('/product_type_creates', response=List[ProductTypeCreate])
@paginate
def list_product_type_creates(request):
    return ProductTypeCreate.objects.all()


@router.get('/product_type_creates/{id}', response=ProductTypeCreate)
def get_product_type_create(request, id: int):
    return get_object_or_404(ProductTypeCreate, id=id)


@router.post('/product_type_creates', response=ProductTypeCreate)
def create_product_type_create(request, payload: ProductTypeCreateCreate):
    data = payload.dict()
    product_type_create = ProductTypeCreate.objects.create(**data)
    return product_type_create


@router.put('/product_type_creates/{id}', response=ProductTypeCreate)
def update_product_type_create(request, id: int, payload: ProductTypeCreateUpdate):
    product_type_create = get_object_or_404(ProductTypeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_create, attr, value)
    product_type_create.save()
    return product_type_create


@router.delete('/product_type_creates/{id}')
def delete_product_type_create(request, id: int):
    product_type_create = get_object_or_404(ProductTypeCreate, id=id)
    product_type_create.delete()
    return {'success': True}


# ProductTypeDelete endpoints
@router.get('/product_type_deletes', response=List[ProductTypeDelete])
@paginate
def list_product_type_deletes(request):
    return ProductTypeDelete.objects.all()


@router.get('/product_type_deletes/{id}', response=ProductTypeDelete)
def get_product_type_delete(request, id: int):
    return get_object_or_404(ProductTypeDelete, id=id)


@router.post('/product_type_deletes', response=ProductTypeDelete)
def create_product_type_delete(request, payload: ProductTypeDeleteCreate):
    data = payload.dict()
    product_type_delete = ProductTypeDelete.objects.create(**data)
    return product_type_delete


@router.put('/product_type_deletes/{id}', response=ProductTypeDelete)
def update_product_type_delete(request, id: int, payload: ProductTypeDeleteUpdate):
    product_type_delete = get_object_or_404(ProductTypeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_delete, attr, value)
    product_type_delete.save()
    return product_type_delete


@router.delete('/product_type_deletes/{id}')
def delete_product_type_delete(request, id: int):
    product_type_delete = get_object_or_404(ProductTypeDelete, id=id)
    product_type_delete.delete()
    return {'success': True}


# ProductTypeBulkDelete endpoints
@router.get('/product_type_bulk_deletes', response=List[ProductTypeBulkDelete])
@paginate
def list_product_type_bulk_deletes(request):
    return ProductTypeBulkDelete.objects.all()


@router.get('/product_type_bulk_deletes/{id}', response=ProductTypeBulkDelete)
def get_product_type_bulk_delete(request, id: int):
    return get_object_or_404(ProductTypeBulkDelete, id=id)


@router.post('/product_type_bulk_deletes', response=ProductTypeBulkDelete)
def create_product_type_bulk_delete(request, payload: ProductTypeBulkDeleteCreate):
    data = payload.dict()
    product_type_bulk_delete = ProductTypeBulkDelete.objects.create(**data)
    return product_type_bulk_delete


@router.put('/product_type_bulk_deletes/{id}', response=ProductTypeBulkDelete)
def update_product_type_bulk_delete(request, id: int, payload: ProductTypeBulkDeleteUpdate):
    product_type_bulk_delete = get_object_or_404(ProductTypeBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_bulk_delete, attr, value)
    product_type_bulk_delete.save()
    return product_type_bulk_delete


@router.delete('/product_type_bulk_deletes/{id}')
def delete_product_type_bulk_delete(request, id: int):
    product_type_bulk_delete = get_object_or_404(ProductTypeBulkDelete, id=id)
    product_type_bulk_delete.delete()
    return {'success': True}


# ProductTypeUpdate endpoints
@router.get('/product_type_updates', response=List[ProductTypeUpdate])
@paginate
def list_product_type_updates(request):
    return ProductTypeUpdate.objects.all()


@router.get('/product_type_updates/{id}', response=ProductTypeUpdate)
def get_product_type_update(request, id: int):
    return get_object_or_404(ProductTypeUpdate, id=id)


@router.post('/product_type_updates', response=ProductTypeUpdate)
def create_product_type_update(request, payload: ProductTypeUpdateCreate):
    data = payload.dict()
    product_type_update = ProductTypeUpdate.objects.create(**data)
    return product_type_update


@router.put('/product_type_updates/{id}', response=ProductTypeUpdate)
def update_product_type_update(request, id: int, payload: ProductTypeUpdateUpdate):
    product_type_update = get_object_or_404(ProductTypeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_update, attr, value)
    product_type_update.save()
    return product_type_update


@router.delete('/product_type_updates/{id}')
def delete_product_type_update(request, id: int):
    product_type_update = get_object_or_404(ProductTypeUpdate, id=id)
    product_type_update.delete()
    return {'success': True}


# ProductTypeReorderAttributes endpoints
@router.get('/product_type_reorder_attributess', response=List[ProductTypeReorderAttributes])
@paginate
def list_product_type_reorder_attributess(request):
    return ProductTypeReorderAttributes.objects.all()


@router.get('/product_type_reorder_attributess/{id}', response=ProductTypeReorderAttributes)
def get_product_type_reorder_attributes(request, id: int):
    return get_object_or_404(ProductTypeReorderAttributes, id=id)


@router.post('/product_type_reorder_attributess', response=ProductTypeReorderAttributes)
def create_product_type_reorder_attributes(request, payload: ProductTypeReorderAttributesCreate):
    data = payload.dict()
    product_type_reorder_attributes = ProductTypeReorderAttributes.objects.create(**data)
    return product_type_reorder_attributes


@router.put('/product_type_reorder_attributess/{id}', response=ProductTypeReorderAttributes)
def update_product_type_reorder_attributes(request, id: int, payload: ProductTypeReorderAttributesUpdate):
    product_type_reorder_attributes = get_object_or_404(ProductTypeReorderAttributes, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_reorder_attributes, attr, value)
    product_type_reorder_attributes.save()
    return product_type_reorder_attributes


@router.delete('/product_type_reorder_attributess/{id}')
def delete_product_type_reorder_attributes(request, id: int):
    product_type_reorder_attributes = get_object_or_404(ProductTypeReorderAttributes, id=id)
    product_type_reorder_attributes.delete()
    return {'success': True}


# DigitalContentCreate endpoints
@router.get('/digital_content_creates', response=List[DigitalContentCreate])
@paginate
def list_digital_content_creates(request):
    return DigitalContentCreate.objects.all()


@router.get('/digital_content_creates/{id}', response=DigitalContentCreate)
def get_digital_content_create(request, id: int):
    return get_object_or_404(DigitalContentCreate, id=id)


@router.post('/digital_content_creates', response=DigitalContentCreate)
def create_digital_content_create(request, payload: DigitalContentCreateCreate):
    data = payload.dict()
    digital_content_create = DigitalContentCreate.objects.create(**data)
    return digital_content_create


@router.put('/digital_content_creates/{id}', response=DigitalContentCreate)
def update_digital_content_create(request, id: int, payload: DigitalContentCreateUpdate):
    digital_content_create = get_object_or_404(DigitalContentCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_create, attr, value)
    digital_content_create.save()
    return digital_content_create


@router.delete('/digital_content_creates/{id}')
def delete_digital_content_create(request, id: int):
    digital_content_create = get_object_or_404(DigitalContentCreate, id=id)
    digital_content_create.delete()
    return {'success': True}


# DigitalContentDelete endpoints
@router.get('/digital_content_deletes', response=List[DigitalContentDelete])
@paginate
def list_digital_content_deletes(request):
    return DigitalContentDelete.objects.all()


@router.get('/digital_content_deletes/{id}', response=DigitalContentDelete)
def get_digital_content_delete(request, id: int):
    return get_object_or_404(DigitalContentDelete, id=id)


@router.post('/digital_content_deletes', response=DigitalContentDelete)
def create_digital_content_delete(request, payload: DigitalContentDeleteCreate):
    data = payload.dict()
    digital_content_delete = DigitalContentDelete.objects.create(**data)
    return digital_content_delete


@router.put('/digital_content_deletes/{id}', response=DigitalContentDelete)
def update_digital_content_delete(request, id: int, payload: DigitalContentDeleteUpdate):
    digital_content_delete = get_object_or_404(DigitalContentDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_delete, attr, value)
    digital_content_delete.save()
    return digital_content_delete


@router.delete('/digital_content_deletes/{id}')
def delete_digital_content_delete(request, id: int):
    digital_content_delete = get_object_or_404(DigitalContentDelete, id=id)
    digital_content_delete.delete()
    return {'success': True}


# DigitalContentUpdate endpoints
@router.get('/digital_content_updates', response=List[DigitalContentUpdate])
@paginate
def list_digital_content_updates(request):
    return DigitalContentUpdate.objects.all()


@router.get('/digital_content_updates/{id}', response=DigitalContentUpdate)
def get_digital_content_update(request, id: int):
    return get_object_or_404(DigitalContentUpdate, id=id)


@router.post('/digital_content_updates', response=DigitalContentUpdate)
def create_digital_content_update(request, payload: DigitalContentUpdateCreate):
    data = payload.dict()
    digital_content_update = DigitalContentUpdate.objects.create(**data)
    return digital_content_update


@router.put('/digital_content_updates/{id}', response=DigitalContentUpdate)
def update_digital_content_update(request, id: int, payload: DigitalContentUpdateUpdate):
    digital_content_update = get_object_or_404(DigitalContentUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_update, attr, value)
    digital_content_update.save()
    return digital_content_update


@router.delete('/digital_content_updates/{id}')
def delete_digital_content_update(request, id: int):
    digital_content_update = get_object_or_404(DigitalContentUpdate, id=id)
    digital_content_update.delete()
    return {'success': True}


# DigitalContentUrlCreate endpoints
@router.get('/digital_content_url_creates', response=List[DigitalContentUrlCreate])
@paginate
def list_digital_content_url_creates(request):
    return DigitalContentUrlCreate.objects.all()


@router.get('/digital_content_url_creates/{id}', response=DigitalContentUrlCreate)
def get_digital_content_url_create(request, id: int):
    return get_object_or_404(DigitalContentUrlCreate, id=id)


@router.post('/digital_content_url_creates', response=DigitalContentUrlCreate)
def create_digital_content_url_create(request, payload: DigitalContentUrlCreateCreate):
    data = payload.dict()
    digital_content_url_create = DigitalContentUrlCreate.objects.create(**data)
    return digital_content_url_create


@router.put('/digital_content_url_creates/{id}', response=DigitalContentUrlCreate)
def update_digital_content_url_create(request, id: int, payload: DigitalContentUrlCreateUpdate):
    digital_content_url_create = get_object_or_404(DigitalContentUrlCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(digital_content_url_create, attr, value)
    digital_content_url_create.save()
    return digital_content_url_create


@router.delete('/digital_content_url_creates/{id}')
def delete_digital_content_url_create(request, id: int):
    digital_content_url_create = get_object_or_404(DigitalContentUrlCreate, id=id)
    digital_content_url_create.delete()
    return {'success': True}


# ProductVariantCreate endpoints
@router.get('/product_variant_creates', response=List[ProductVariantCreate])
@paginate
def list_product_variant_creates(request):
    return ProductVariantCreate.objects.all()


@router.get('/product_variant_creates/{id}', response=ProductVariantCreate)
def get_product_variant_create(request, id: int):
    return get_object_or_404(ProductVariantCreate, id=id)


@router.post('/product_variant_creates', response=ProductVariantCreate)
def create_product_variant_create(request, payload: ProductVariantCreateCreate):
    data = payload.dict()
    product_variant_create = ProductVariantCreate.objects.create(**data)
    return product_variant_create


@router.put('/product_variant_creates/{id}', response=ProductVariantCreate)
def update_product_variant_create(request, id: int, payload: ProductVariantCreateUpdate):
    product_variant_create = get_object_or_404(ProductVariantCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_create, attr, value)
    product_variant_create.save()
    return product_variant_create


@router.delete('/product_variant_creates/{id}')
def delete_product_variant_create(request, id: int):
    product_variant_create = get_object_or_404(ProductVariantCreate, id=id)
    product_variant_create.delete()
    return {'success': True}


# ProductVariantDelete endpoints
@router.get('/product_variant_deletes', response=List[ProductVariantDelete])
@paginate
def list_product_variant_deletes(request):
    return ProductVariantDelete.objects.all()


@router.get('/product_variant_deletes/{id}', response=ProductVariantDelete)
def get_product_variant_delete(request, id: int):
    return get_object_or_404(ProductVariantDelete, id=id)


@router.post('/product_variant_deletes', response=ProductVariantDelete)
def create_product_variant_delete(request, payload: ProductVariantDeleteCreate):
    data = payload.dict()
    product_variant_delete = ProductVariantDelete.objects.create(**data)
    return product_variant_delete


@router.put('/product_variant_deletes/{id}', response=ProductVariantDelete)
def update_product_variant_delete(request, id: int, payload: ProductVariantDeleteUpdate):
    product_variant_delete = get_object_or_404(ProductVariantDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_delete, attr, value)
    product_variant_delete.save()
    return product_variant_delete


@router.delete('/product_variant_deletes/{id}')
def delete_product_variant_delete(request, id: int):
    product_variant_delete = get_object_or_404(ProductVariantDelete, id=id)
    product_variant_delete.delete()
    return {'success': True}


# ProductVariantBulkCreate endpoints
@router.get('/product_variant_bulk_creates', response=List[ProductVariantBulkCreate])
@paginate
def list_product_variant_bulk_creates(request):
    return ProductVariantBulkCreate.objects.all()


@router.get('/product_variant_bulk_creates/{id}', response=ProductVariantBulkCreate)
def get_product_variant_bulk_create(request, id: int):
    return get_object_or_404(ProductVariantBulkCreate, id=id)


@router.post('/product_variant_bulk_creates', response=ProductVariantBulkCreate)
def create_product_variant_bulk_create(request, payload: ProductVariantBulkCreateCreate):
    data = payload.dict()
    product_variant_bulk_create = ProductVariantBulkCreate.objects.create(**data)
    return product_variant_bulk_create


@router.put('/product_variant_bulk_creates/{id}', response=ProductVariantBulkCreate)
def update_product_variant_bulk_create(request, id: int, payload: ProductVariantBulkCreateUpdate):
    product_variant_bulk_create = get_object_or_404(ProductVariantBulkCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_bulk_create, attr, value)
    product_variant_bulk_create.save()
    return product_variant_bulk_create


@router.delete('/product_variant_bulk_creates/{id}')
def delete_product_variant_bulk_create(request, id: int):
    product_variant_bulk_create = get_object_or_404(ProductVariantBulkCreate, id=id)
    product_variant_bulk_create.delete()
    return {'success': True}


# BulkProductError endpoints
@router.get('/bulk_product_errors', response=List[BulkProductError])
@paginate
def list_bulk_product_errors(request):
    return BulkProductError.objects.all()


@router.get('/bulk_product_errors/{id}', response=BulkProductError)
def get_bulk_product_error(request, id: int):
    return get_object_or_404(BulkProductError, id=id)


@router.post('/bulk_product_errors', response=BulkProductError)
def create_bulk_product_error(request, payload: BulkProductErrorCreate):
    data = payload.dict()
    bulk_product_error = BulkProductError.objects.create(**data)
    return bulk_product_error


@router.put('/bulk_product_errors/{id}', response=BulkProductError)
def update_bulk_product_error(request, id: int, payload: BulkProductErrorUpdate):
    bulk_product_error = get_object_or_404(BulkProductError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(bulk_product_error, attr, value)
    bulk_product_error.save()
    return bulk_product_error


@router.delete('/bulk_product_errors/{id}')
def delete_bulk_product_error(request, id: int):
    bulk_product_error = get_object_or_404(BulkProductError, id=id)
    bulk_product_error.delete()
    return {'success': True}


# ProductVariantBulkDelete endpoints
@router.get('/product_variant_bulk_deletes', response=List[ProductVariantBulkDelete])
@paginate
def list_product_variant_bulk_deletes(request):
    return ProductVariantBulkDelete.objects.all()


@router.get('/product_variant_bulk_deletes/{id}', response=ProductVariantBulkDelete)
def get_product_variant_bulk_delete(request, id: int):
    return get_object_or_404(ProductVariantBulkDelete, id=id)


@router.post('/product_variant_bulk_deletes', response=ProductVariantBulkDelete)
def create_product_variant_bulk_delete(request, payload: ProductVariantBulkDeleteCreate):
    data = payload.dict()
    product_variant_bulk_delete = ProductVariantBulkDelete.objects.create(**data)
    return product_variant_bulk_delete


@router.put('/product_variant_bulk_deletes/{id}', response=ProductVariantBulkDelete)
def update_product_variant_bulk_delete(request, id: int, payload: ProductVariantBulkDeleteUpdate):
    product_variant_bulk_delete = get_object_or_404(ProductVariantBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_bulk_delete, attr, value)
    product_variant_bulk_delete.save()
    return product_variant_bulk_delete


@router.delete('/product_variant_bulk_deletes/{id}')
def delete_product_variant_bulk_delete(request, id: int):
    product_variant_bulk_delete = get_object_or_404(ProductVariantBulkDelete, id=id)
    product_variant_bulk_delete.delete()
    return {'success': True}


# ProductVariantStocksCreate endpoints
@router.get('/product_variant_stocks_creates', response=List[ProductVariantStocksCreate])
@paginate
def list_product_variant_stocks_creates(request):
    return ProductVariantStocksCreate.objects.all()


@router.get('/product_variant_stocks_creates/{id}', response=ProductVariantStocksCreate)
def get_product_variant_stocks_create(request, id: int):
    return get_object_or_404(ProductVariantStocksCreate, id=id)


@router.post('/product_variant_stocks_creates', response=ProductVariantStocksCreate)
def create_product_variant_stocks_create(request, payload: ProductVariantStocksCreateCreate):
    data = payload.dict()
    product_variant_stocks_create = ProductVariantStocksCreate.objects.create(**data)
    return product_variant_stocks_create


@router.put('/product_variant_stocks_creates/{id}', response=ProductVariantStocksCreate)
def update_product_variant_stocks_create(request, id: int, payload: ProductVariantStocksCreateUpdate):
    product_variant_stocks_create = get_object_or_404(ProductVariantStocksCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_stocks_create, attr, value)
    product_variant_stocks_create.save()
    return product_variant_stocks_create


@router.delete('/product_variant_stocks_creates/{id}')
def delete_product_variant_stocks_create(request, id: int):
    product_variant_stocks_create = get_object_or_404(ProductVariantStocksCreate, id=id)
    product_variant_stocks_create.delete()
    return {'success': True}


# BulkStockError endpoints
@router.get('/bulk_stock_errors', response=List[BulkStockError])
@paginate
def list_bulk_stock_errors(request):
    return BulkStockError.objects.all()


@router.get('/bulk_stock_errors/{id}', response=BulkStockError)
def get_bulk_stock_error(request, id: int):
    return get_object_or_404(BulkStockError, id=id)


@router.post('/bulk_stock_errors', response=BulkStockError)
def create_bulk_stock_error(request, payload: BulkStockErrorCreate):
    data = payload.dict()
    bulk_stock_error = BulkStockError.objects.create(**data)
    return bulk_stock_error


@router.put('/bulk_stock_errors/{id}', response=BulkStockError)
def update_bulk_stock_error(request, id: int, payload: BulkStockErrorUpdate):
    bulk_stock_error = get_object_or_404(BulkStockError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(bulk_stock_error, attr, value)
    bulk_stock_error.save()
    return bulk_stock_error


@router.delete('/bulk_stock_errors/{id}')
def delete_bulk_stock_error(request, id: int):
    bulk_stock_error = get_object_or_404(BulkStockError, id=id)
    bulk_stock_error.delete()
    return {'success': True}


# ProductVariantStocksDelete endpoints
@router.get('/product_variant_stocks_deletes', response=List[ProductVariantStocksDelete])
@paginate
def list_product_variant_stocks_deletes(request):
    return ProductVariantStocksDelete.objects.all()


@router.get('/product_variant_stocks_deletes/{id}', response=ProductVariantStocksDelete)
def get_product_variant_stocks_delete(request, id: int):
    return get_object_or_404(ProductVariantStocksDelete, id=id)


@router.post('/product_variant_stocks_deletes', response=ProductVariantStocksDelete)
def create_product_variant_stocks_delete(request, payload: ProductVariantStocksDeleteCreate):
    data = payload.dict()
    product_variant_stocks_delete = ProductVariantStocksDelete.objects.create(**data)
    return product_variant_stocks_delete


@router.put('/product_variant_stocks_deletes/{id}', response=ProductVariantStocksDelete)
def update_product_variant_stocks_delete(request, id: int, payload: ProductVariantStocksDeleteUpdate):
    product_variant_stocks_delete = get_object_or_404(ProductVariantStocksDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_stocks_delete, attr, value)
    product_variant_stocks_delete.save()
    return product_variant_stocks_delete


@router.delete('/product_variant_stocks_deletes/{id}')
def delete_product_variant_stocks_delete(request, id: int):
    product_variant_stocks_delete = get_object_or_404(ProductVariantStocksDelete, id=id)
    product_variant_stocks_delete.delete()
    return {'success': True}


# StockError endpoints
@router.get('/stock_errors', response=List[StockError])
@paginate
def list_stock_errors(request):
    return StockError.objects.all()


@router.get('/stock_errors/{id}', response=StockError)
def get_stock_error(request, id: int):
    return get_object_or_404(StockError, id=id)


@router.post('/stock_errors', response=StockError)
def create_stock_error(request, payload: StockErrorCreate):
    data = payload.dict()
    stock_error = StockError.objects.create(**data)
    return stock_error


@router.put('/stock_errors/{id}', response=StockError)
def update_stock_error(request, id: int, payload: StockErrorUpdate):
    stock_error = get_object_or_404(StockError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(stock_error, attr, value)
    stock_error.save()
    return stock_error


@router.delete('/stock_errors/{id}')
def delete_stock_error(request, id: int):
    stock_error = get_object_or_404(StockError, id=id)
    stock_error.delete()
    return {'success': True}


# ProductVariantStocksUpdate endpoints
@router.get('/product_variant_stocks_updates', response=List[ProductVariantStocksUpdate])
@paginate
def list_product_variant_stocks_updates(request):
    return ProductVariantStocksUpdate.objects.all()


@router.get('/product_variant_stocks_updates/{id}', response=ProductVariantStocksUpdate)
def get_product_variant_stocks_update(request, id: int):
    return get_object_or_404(ProductVariantStocksUpdate, id=id)


@router.post('/product_variant_stocks_updates', response=ProductVariantStocksUpdate)
def create_product_variant_stocks_update(request, payload: ProductVariantStocksUpdateCreate):
    data = payload.dict()
    product_variant_stocks_update = ProductVariantStocksUpdate.objects.create(**data)
    return product_variant_stocks_update


@router.put('/product_variant_stocks_updates/{id}', response=ProductVariantStocksUpdate)
def update_product_variant_stocks_update(request, id: int, payload: ProductVariantStocksUpdateUpdate):
    product_variant_stocks_update = get_object_or_404(ProductVariantStocksUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_stocks_update, attr, value)
    product_variant_stocks_update.save()
    return product_variant_stocks_update


@router.delete('/product_variant_stocks_updates/{id}')
def delete_product_variant_stocks_update(request, id: int):
    product_variant_stocks_update = get_object_or_404(ProductVariantStocksUpdate, id=id)
    product_variant_stocks_update.delete()
    return {'success': True}


# ProductVariantUpdate endpoints
@router.get('/product_variant_updates', response=List[ProductVariantUpdate])
@paginate
def list_product_variant_updates(request):
    return ProductVariantUpdate.objects.all()


@router.get('/product_variant_updates/{id}', response=ProductVariantUpdate)
def get_product_variant_update(request, id: int):
    return get_object_or_404(ProductVariantUpdate, id=id)


@router.post('/product_variant_updates', response=ProductVariantUpdate)
def create_product_variant_update(request, payload: ProductVariantUpdateCreate):
    data = payload.dict()
    product_variant_update = ProductVariantUpdate.objects.create(**data)
    return product_variant_update


@router.put('/product_variant_updates/{id}', response=ProductVariantUpdate)
def update_product_variant_update(request, id: int, payload: ProductVariantUpdateUpdate):
    product_variant_update = get_object_or_404(ProductVariantUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_update, attr, value)
    product_variant_update.save()
    return product_variant_update


@router.delete('/product_variant_updates/{id}')
def delete_product_variant_update(request, id: int):
    product_variant_update = get_object_or_404(ProductVariantUpdate, id=id)
    product_variant_update.delete()
    return {'success': True}


# ProductVariantSetDefault endpoints
@router.get('/product_variant_set_defaults', response=List[ProductVariantSetDefault])
@paginate
def list_product_variant_set_defaults(request):
    return ProductVariantSetDefault.objects.all()


@router.get('/product_variant_set_defaults/{id}', response=ProductVariantSetDefault)
def get_product_variant_set_default(request, id: int):
    return get_object_or_404(ProductVariantSetDefault, id=id)


@router.post('/product_variant_set_defaults', response=ProductVariantSetDefault)
def create_product_variant_set_default(request, payload: ProductVariantSetDefaultCreate):
    data = payload.dict()
    product_variant_set_default = ProductVariantSetDefault.objects.create(**data)
    return product_variant_set_default


@router.put('/product_variant_set_defaults/{id}', response=ProductVariantSetDefault)
def update_product_variant_set_default(request, id: int, payload: ProductVariantSetDefaultUpdate):
    product_variant_set_default = get_object_or_404(ProductVariantSetDefault, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_set_default, attr, value)
    product_variant_set_default.save()
    return product_variant_set_default


@router.delete('/product_variant_set_defaults/{id}')
def delete_product_variant_set_default(request, id: int):
    product_variant_set_default = get_object_or_404(ProductVariantSetDefault, id=id)
    product_variant_set_default.delete()
    return {'success': True}


# ProductVariantImageAssign endpoints
@router.get('/product_variant_image_assigns', response=List[ProductVariantImageAssign])
@paginate
def list_product_variant_image_assigns(request):
    return ProductVariantImageAssign.objects.all()


@router.get('/product_variant_image_assigns/{id}', response=ProductVariantImageAssign)
def get_product_variant_image_assign(request, id: int):
    return get_object_or_404(ProductVariantImageAssign, id=id)


@router.post('/product_variant_image_assigns', response=ProductVariantImageAssign)
def create_product_variant_image_assign(request, payload: ProductVariantImageAssignCreate):
    data = payload.dict()
    product_variant_image_assign = ProductVariantImageAssign.objects.create(**data)
    return product_variant_image_assign


@router.put('/product_variant_image_assigns/{id}', response=ProductVariantImageAssign)
def update_product_variant_image_assign(request, id: int, payload: ProductVariantImageAssignUpdate):
    product_variant_image_assign = get_object_or_404(ProductVariantImageAssign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_image_assign, attr, value)
    product_variant_image_assign.save()
    return product_variant_image_assign


@router.delete('/product_variant_image_assigns/{id}')
def delete_product_variant_image_assign(request, id: int):
    product_variant_image_assign = get_object_or_404(ProductVariantImageAssign, id=id)
    product_variant_image_assign.delete()
    return {'success': True}


# ProductVariantImageUnassign endpoints
@router.get('/product_variant_image_unassigns', response=List[ProductVariantImageUnassign])
@paginate
def list_product_variant_image_unassigns(request):
    return ProductVariantImageUnassign.objects.all()


@router.get('/product_variant_image_unassigns/{id}', response=ProductVariantImageUnassign)
def get_product_variant_image_unassign(request, id: int):
    return get_object_or_404(ProductVariantImageUnassign, id=id)


@router.post('/product_variant_image_unassigns', response=ProductVariantImageUnassign)
def create_product_variant_image_unassign(request, payload: ProductVariantImageUnassignCreate):
    data = payload.dict()
    product_variant_image_unassign = ProductVariantImageUnassign.objects.create(**data)
    return product_variant_image_unassign


@router.put('/product_variant_image_unassigns/{id}', response=ProductVariantImageUnassign)
def update_product_variant_image_unassign(request, id: int, payload: ProductVariantImageUnassignUpdate):
    product_variant_image_unassign = get_object_or_404(ProductVariantImageUnassign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_variant_image_unassign, attr, value)
    product_variant_image_unassign.save()
    return product_variant_image_unassign


@router.delete('/product_variant_image_unassigns/{id}')
def delete_product_variant_image_unassign(request, id: int):
    product_variant_image_unassign = get_object_or_404(ProductVariantImageUnassign, id=id)
    product_variant_image_unassign.delete()
    return {'success': True}


# FeatureCreate endpoints
@router.get('/feature_creates', response=List[FeatureCreate])
@paginate
def list_feature_creates(request):
    return FeatureCreate.objects.all()


@router.get('/feature_creates/{id}', response=FeatureCreate)
def get_feature_create(request, id: int):
    return get_object_or_404(FeatureCreate, id=id)


@router.post('/feature_creates', response=FeatureCreate)
def create_feature_create(request, payload: FeatureCreateCreate):
    data = payload.dict()
    feature_create = FeatureCreate.objects.create(**data)
    return feature_create


@router.put('/feature_creates/{id}', response=FeatureCreate)
def update_feature_create(request, id: int, payload: FeatureCreateUpdate):
    feature_create = get_object_or_404(FeatureCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(feature_create, attr, value)
    feature_create.save()
    return feature_create


@router.delete('/feature_creates/{id}')
def delete_feature_create(request, id: int):
    feature_create = get_object_or_404(FeatureCreate, id=id)
    feature_create.delete()
    return {'success': True}


# FeatureUpdate endpoints
@router.get('/feature_updates', response=List[FeatureUpdate])
@paginate
def list_feature_updates(request):
    return FeatureUpdate.objects.all()


@router.get('/feature_updates/{id}', response=FeatureUpdate)
def get_feature_update(request, id: int):
    return get_object_or_404(FeatureUpdate, id=id)


@router.post('/feature_updates', response=FeatureUpdate)
def create_feature_update(request, payload: FeatureUpdateCreate):
    data = payload.dict()
    feature_update = FeatureUpdate.objects.create(**data)
    return feature_update


@router.put('/feature_updates/{id}', response=FeatureUpdate)
def update_feature_update(request, id: int, payload: FeatureUpdateUpdate):
    feature_update = get_object_or_404(FeatureUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(feature_update, attr, value)
    feature_update.save()
    return feature_update


@router.delete('/feature_updates/{id}')
def delete_feature_update(request, id: int):
    feature_update = get_object_or_404(FeatureUpdate, id=id)
    feature_update.delete()
    return {'success': True}


# FeatureDelete endpoints
@router.get('/feature_deletes', response=List[FeatureDelete])
@paginate
def list_feature_deletes(request):
    return FeatureDelete.objects.all()


@router.get('/feature_deletes/{id}', response=FeatureDelete)
def get_feature_delete(request, id: int):
    return get_object_or_404(FeatureDelete, id=id)


@router.post('/feature_deletes', response=FeatureDelete)
def create_feature_delete(request, payload: FeatureDeleteCreate):
    data = payload.dict()
    feature_delete = FeatureDelete.objects.create(**data)
    return feature_delete


@router.put('/feature_deletes/{id}', response=FeatureDelete)
def update_feature_delete(request, id: int, payload: FeatureDeleteUpdate):
    feature_delete = get_object_or_404(FeatureDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(feature_delete, attr, value)
    feature_delete.save()
    return feature_delete


@router.delete('/feature_deletes/{id}')
def delete_feature_delete(request, id: int):
    feature_delete = get_object_or_404(FeatureDelete, id=id)
    feature_delete.delete()
    return {'success': True}


# ProductTypeFeatureCreate endpoints
@router.get('/product_type_feature_creates', response=List[ProductTypeFeatureCreate])
@paginate
def list_product_type_feature_creates(request):
    return ProductTypeFeatureCreate.objects.all()


@router.get('/product_type_feature_creates/{id}', response=ProductTypeFeatureCreate)
def get_product_type_feature_create(request, id: int):
    return get_object_or_404(ProductTypeFeatureCreate, id=id)


@router.post('/product_type_feature_creates', response=ProductTypeFeatureCreate)
def create_product_type_feature_create(request, payload: ProductTypeFeatureCreateCreate):
    data = payload.dict()
    product_type_feature_create = ProductTypeFeatureCreate.objects.create(**data)
    return product_type_feature_create


@router.put('/product_type_feature_creates/{id}', response=ProductTypeFeatureCreate)
def update_product_type_feature_create(request, id: int, payload: ProductTypeFeatureCreateUpdate):
    product_type_feature_create = get_object_or_404(ProductTypeFeatureCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_feature_create, attr, value)
    product_type_feature_create.save()
    return product_type_feature_create


@router.delete('/product_type_feature_creates/{id}')
def delete_product_type_feature_create(request, id: int):
    product_type_feature_create = get_object_or_404(ProductTypeFeatureCreate, id=id)
    product_type_feature_create.delete()
    return {'success': True}


# ProductTypeFeatureUpdate endpoints
@router.get('/product_type_feature_updates', response=List[ProductTypeFeatureUpdate])
@paginate
def list_product_type_feature_updates(request):
    return ProductTypeFeatureUpdate.objects.all()


@router.get('/product_type_feature_updates/{id}', response=ProductTypeFeatureUpdate)
def get_product_type_feature_update(request, id: int):
    return get_object_or_404(ProductTypeFeatureUpdate, id=id)


@router.post('/product_type_feature_updates', response=ProductTypeFeatureUpdate)
def create_product_type_feature_update(request, payload: ProductTypeFeatureUpdateCreate):
    data = payload.dict()
    product_type_feature_update = ProductTypeFeatureUpdate.objects.create(**data)
    return product_type_feature_update


@router.put('/product_type_feature_updates/{id}', response=ProductTypeFeatureUpdate)
def update_product_type_feature_update(request, id: int, payload: ProductTypeFeatureUpdateUpdate):
    product_type_feature_update = get_object_or_404(ProductTypeFeatureUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_feature_update, attr, value)
    product_type_feature_update.save()
    return product_type_feature_update


@router.delete('/product_type_feature_updates/{id}')
def delete_product_type_feature_update(request, id: int):
    product_type_feature_update = get_object_or_404(ProductTypeFeatureUpdate, id=id)
    product_type_feature_update.delete()
    return {'success': True}


# ProductTypeFeatureDelete endpoints
@router.get('/product_type_feature_deletes', response=List[ProductTypeFeatureDelete])
@paginate
def list_product_type_feature_deletes(request):
    return ProductTypeFeatureDelete.objects.all()


@router.get('/product_type_feature_deletes/{id}', response=ProductTypeFeatureDelete)
def get_product_type_feature_delete(request, id: int):
    return get_object_or_404(ProductTypeFeatureDelete, id=id)


@router.post('/product_type_feature_deletes', response=ProductTypeFeatureDelete)
def create_product_type_feature_delete(request, payload: ProductTypeFeatureDeleteCreate):
    data = payload.dict()
    product_type_feature_delete = ProductTypeFeatureDelete.objects.create(**data)
    return product_type_feature_delete


@router.put('/product_type_feature_deletes/{id}', response=ProductTypeFeatureDelete)
def update_product_type_feature_delete(request, id: int, payload: ProductTypeFeatureDeleteUpdate):
    product_type_feature_delete = get_object_or_404(ProductTypeFeatureDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_type_feature_delete, attr, value)
    product_type_feature_delete.save()
    return product_type_feature_delete


@router.delete('/product_type_feature_deletes/{id}')
def delete_product_type_feature_delete(request, id: int):
    product_type_feature_delete = get_object_or_404(ProductTypeFeatureDelete, id=id)
    product_type_feature_delete.delete()
    return {'success': True}


# ProductLocationCreate endpoints
@router.get('/product_location_creates', response=List[ProductLocationCreate])
@paginate
def list_product_location_creates(request):
    return ProductLocationCreate.objects.all()


@router.get('/product_location_creates/{id}', response=ProductLocationCreate)
def get_product_location_create(request, id: int):
    return get_object_or_404(ProductLocationCreate, id=id)


@router.post('/product_location_creates', response=ProductLocationCreate)
def create_product_location_create(request, payload: ProductLocationCreateCreate):
    data = payload.dict()
    product_location_create = ProductLocationCreate.objects.create(**data)
    return product_location_create


@router.put('/product_location_creates/{id}', response=ProductLocationCreate)
def update_product_location_create(request, id: int, payload: ProductLocationCreateUpdate):
    product_location_create = get_object_or_404(ProductLocationCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_location_create, attr, value)
    product_location_create.save()
    return product_location_create


@router.delete('/product_location_creates/{id}')
def delete_product_location_create(request, id: int):
    product_location_create = get_object_or_404(ProductLocationCreate, id=id)
    product_location_create.delete()
    return {'success': True}


# ProductLocationUpdate endpoints
@router.get('/product_location_updates', response=List[ProductLocationUpdate])
@paginate
def list_product_location_updates(request):
    return ProductLocationUpdate.objects.all()


@router.get('/product_location_updates/{id}', response=ProductLocationUpdate)
def get_product_location_update(request, id: int):
    return get_object_or_404(ProductLocationUpdate, id=id)


@router.post('/product_location_updates', response=ProductLocationUpdate)
def create_product_location_update(request, payload: ProductLocationUpdateCreate):
    data = payload.dict()
    product_location_update = ProductLocationUpdate.objects.create(**data)
    return product_location_update


@router.put('/product_location_updates/{id}', response=ProductLocationUpdate)
def update_product_location_update(request, id: int, payload: ProductLocationUpdateUpdate):
    product_location_update = get_object_or_404(ProductLocationUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_location_update, attr, value)
    product_location_update.save()
    return product_location_update


@router.delete('/product_location_updates/{id}')
def delete_product_location_update(request, id: int):
    product_location_update = get_object_or_404(ProductLocationUpdate, id=id)
    product_location_update.delete()
    return {'success': True}


# ProductLocationDelete endpoints
@router.get('/product_location_deletes', response=List[ProductLocationDelete])
@paginate
def list_product_location_deletes(request):
    return ProductLocationDelete.objects.all()


@router.get('/product_location_deletes/{id}', response=ProductLocationDelete)
def get_product_location_delete(request, id: int):
    return get_object_or_404(ProductLocationDelete, id=id)


@router.post('/product_location_deletes', response=ProductLocationDelete)
def create_product_location_delete(request, payload: ProductLocationDeleteCreate):
    data = payload.dict()
    product_location_delete = ProductLocationDelete.objects.create(**data)
    return product_location_delete


@router.put('/product_location_deletes/{id}', response=ProductLocationDelete)
def update_product_location_delete(request, id: int, payload: ProductLocationDeleteUpdate):
    product_location_delete = get_object_or_404(ProductLocationDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_location_delete, attr, value)
    product_location_delete.save()
    return product_location_delete


@router.delete('/product_location_deletes/{id}')
def delete_product_location_delete(request, id: int):
    product_location_delete = get_object_or_404(ProductLocationDelete, id=id)
    product_location_delete.delete()
    return {'success': True}


# ProductSetLocationType endpoints
@router.get('/product_set_location_types', response=List[ProductSetLocationType])
@paginate
def list_product_set_location_types(request):
    return ProductSetLocationType.objects.all()


@router.get('/product_set_location_types/{id}', response=ProductSetLocationType)
def get_product_set_location_type(request, id: int):
    return get_object_or_404(ProductSetLocationType, id=id)


@router.post('/product_set_location_types', response=ProductSetLocationType)
def create_product_set_location_type(request, payload: ProductSetLocationTypeCreate):
    data = payload.dict()
    product_set_location_type = ProductSetLocationType.objects.create(**data)
    return product_set_location_type


@router.put('/product_set_location_types/{id}', response=ProductSetLocationType)
def update_product_set_location_type(request, id: int, payload: ProductSetLocationTypeUpdate):
    product_set_location_type = get_object_or_404(ProductSetLocationType, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(product_set_location_type, attr, value)
    product_set_location_type.save()
    return product_set_location_type


@router.delete('/product_set_location_types/{id}')
def delete_product_set_location_type(request, id: int):
    product_set_location_type = get_object_or_404(ProductSetLocationType, id=id)
    product_set_location_type.delete()
    return {'success': True}


# PaymentCapture endpoints
@router.get('/payment_captures', response=List[PaymentCapture])
@paginate
def list_payment_captures(request):
    return PaymentCapture.objects.all()


@router.get('/payment_captures/{id}', response=PaymentCapture)
def get_payment_capture(request, id: int):
    return get_object_or_404(PaymentCapture, id=id)


@router.post('/payment_captures', response=PaymentCapture)
def create_payment_capture(request, payload: PaymentCaptureCreate):
    data = payload.dict()
    payment_capture = PaymentCapture.objects.create(**data)
    return payment_capture


@router.put('/payment_captures/{id}', response=PaymentCapture)
def update_payment_capture(request, id: int, payload: PaymentCaptureUpdate):
    payment_capture = get_object_or_404(PaymentCapture, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_capture, attr, value)
    payment_capture.save()
    return payment_capture


@router.delete('/payment_captures/{id}')
def delete_payment_capture(request, id: int):
    payment_capture = get_object_or_404(PaymentCapture, id=id)
    payment_capture.delete()
    return {'success': True}


# PaymentError endpoints
@router.get('/payment_errors', response=List[PaymentError])
@paginate
def list_payment_errors(request):
    return PaymentError.objects.all()


@router.get('/payment_errors/{id}', response=PaymentError)
def get_payment_error(request, id: int):
    return get_object_or_404(PaymentError, id=id)


@router.post('/payment_errors', response=PaymentError)
def create_payment_error(request, payload: PaymentErrorCreate):
    data = payload.dict()
    payment_error = PaymentError.objects.create(**data)
    return payment_error


@router.put('/payment_errors/{id}', response=PaymentError)
def update_payment_error(request, id: int, payload: PaymentErrorUpdate):
    payment_error = get_object_or_404(PaymentError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_error, attr, value)
    payment_error.save()
    return payment_error


@router.delete('/payment_errors/{id}')
def delete_payment_error(request, id: int):
    payment_error = get_object_or_404(PaymentError, id=id)
    payment_error.delete()
    return {'success': True}


# PaymentVoid endpoints
@router.get('/payment_voids', response=List[PaymentVoid])
@paginate
def list_payment_voids(request):
    return PaymentVoid.objects.all()


@router.get('/payment_voids/{id}', response=PaymentVoid)
def get_payment_void(request, id: int):
    return get_object_or_404(PaymentVoid, id=id)


@router.post('/payment_voids', response=PaymentVoid)
def create_payment_void(request, payload: PaymentVoidCreate):
    data = payload.dict()
    payment_void = PaymentVoid.objects.create(**data)
    return payment_void


@router.put('/payment_voids/{id}', response=PaymentVoid)
def update_payment_void(request, id: int, payload: PaymentVoidUpdate):
    payment_void = get_object_or_404(PaymentVoid, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(payment_void, attr, value)
    payment_void.save()
    return payment_void


@router.delete('/payment_voids/{id}')
def delete_payment_void(request, id: int):
    payment_void = get_object_or_404(PaymentVoid, id=id)
    payment_void.delete()
    return {'success': True}


# PageCreate endpoints
@router.get('/page_creates', response=List[PageCreate])
@paginate
def list_page_creates(request):
    return PageCreate.objects.all()


@router.get('/page_creates/{id}', response=PageCreate)
def get_page_create(request, id: int):
    return get_object_or_404(PageCreate, id=id)


@router.post('/page_creates', response=PageCreate)
def create_page_create(request, payload: PageCreateCreate):
    data = payload.dict()
    page_create = PageCreate.objects.create(**data)
    return page_create


@router.put('/page_creates/{id}', response=PageCreate)
def update_page_create(request, id: int, payload: PageCreateUpdate):
    page_create = get_object_or_404(PageCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_create, attr, value)
    page_create.save()
    return page_create


@router.delete('/page_creates/{id}')
def delete_page_create(request, id: int):
    page_create = get_object_or_404(PageCreate, id=id)
    page_create.delete()
    return {'success': True}


# PageError endpoints
@router.get('/page_errors', response=List[PageError])
@paginate
def list_page_errors(request):
    return PageError.objects.all()


@router.get('/page_errors/{id}', response=PageError)
def get_page_error(request, id: int):
    return get_object_or_404(PageError, id=id)


@router.post('/page_errors', response=PageError)
def create_page_error(request, payload: PageErrorCreate):
    data = payload.dict()
    page_error = PageError.objects.create(**data)
    return page_error


@router.put('/page_errors/{id}', response=PageError)
def update_page_error(request, id: int, payload: PageErrorUpdate):
    page_error = get_object_or_404(PageError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_error, attr, value)
    page_error.save()
    return page_error


@router.delete('/page_errors/{id}')
def delete_page_error(request, id: int):
    page_error = get_object_or_404(PageError, id=id)
    page_error.delete()
    return {'success': True}


# PageDelete endpoints
@router.get('/page_deletes', response=List[PageDelete])
@paginate
def list_page_deletes(request):
    return PageDelete.objects.all()


@router.get('/page_deletes/{id}', response=PageDelete)
def get_page_delete(request, id: int):
    return get_object_or_404(PageDelete, id=id)


@router.post('/page_deletes', response=PageDelete)
def create_page_delete(request, payload: PageDeleteCreate):
    data = payload.dict()
    page_delete = PageDelete.objects.create(**data)
    return page_delete


@router.put('/page_deletes/{id}', response=PageDelete)
def update_page_delete(request, id: int, payload: PageDeleteUpdate):
    page_delete = get_object_or_404(PageDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_delete, attr, value)
    page_delete.save()
    return page_delete


@router.delete('/page_deletes/{id}')
def delete_page_delete(request, id: int):
    page_delete = get_object_or_404(PageDelete, id=id)
    page_delete.delete()
    return {'success': True}


# PageBulkDelete endpoints
@router.get('/page_bulk_deletes', response=List[PageBulkDelete])
@paginate
def list_page_bulk_deletes(request):
    return PageBulkDelete.objects.all()


@router.get('/page_bulk_deletes/{id}', response=PageBulkDelete)
def get_page_bulk_delete(request, id: int):
    return get_object_or_404(PageBulkDelete, id=id)


@router.post('/page_bulk_deletes', response=PageBulkDelete)
def create_page_bulk_delete(request, payload: PageBulkDeleteCreate):
    data = payload.dict()
    page_bulk_delete = PageBulkDelete.objects.create(**data)
    return page_bulk_delete


@router.put('/page_bulk_deletes/{id}', response=PageBulkDelete)
def update_page_bulk_delete(request, id: int, payload: PageBulkDeleteUpdate):
    page_bulk_delete = get_object_or_404(PageBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_bulk_delete, attr, value)
    page_bulk_delete.save()
    return page_bulk_delete


@router.delete('/page_bulk_deletes/{id}')
def delete_page_bulk_delete(request, id: int):
    page_bulk_delete = get_object_or_404(PageBulkDelete, id=id)
    page_bulk_delete.delete()
    return {'success': True}


# PageBulkPublish endpoints
@router.get('/page_bulk_publishs', response=List[PageBulkPublish])
@paginate
def list_page_bulk_publishs(request):
    return PageBulkPublish.objects.all()


@router.get('/page_bulk_publishs/{id}', response=PageBulkPublish)
def get_page_bulk_publish(request, id: int):
    return get_object_or_404(PageBulkPublish, id=id)


@router.post('/page_bulk_publishs', response=PageBulkPublish)
def create_page_bulk_publish(request, payload: PageBulkPublishCreate):
    data = payload.dict()
    page_bulk_publish = PageBulkPublish.objects.create(**data)
    return page_bulk_publish


@router.put('/page_bulk_publishs/{id}', response=PageBulkPublish)
def update_page_bulk_publish(request, id: int, payload: PageBulkPublishUpdate):
    page_bulk_publish = get_object_or_404(PageBulkPublish, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_bulk_publish, attr, value)
    page_bulk_publish.save()
    return page_bulk_publish


@router.delete('/page_bulk_publishs/{id}')
def delete_page_bulk_publish(request, id: int):
    page_bulk_publish = get_object_or_404(PageBulkPublish, id=id)
    page_bulk_publish.delete()
    return {'success': True}


# PageUpdate endpoints
@router.get('/page_updates', response=List[PageUpdate])
@paginate
def list_page_updates(request):
    return PageUpdate.objects.all()


@router.get('/page_updates/{id}', response=PageUpdate)
def get_page_update(request, id: int):
    return get_object_or_404(PageUpdate, id=id)


@router.post('/page_updates', response=PageUpdate)
def create_page_update(request, payload: PageUpdateCreate):
    data = payload.dict()
    page_update = PageUpdate.objects.create(**data)
    return page_update


@router.put('/page_updates/{id}', response=PageUpdate)
def update_page_update(request, id: int, payload: PageUpdateUpdate):
    page_update = get_object_or_404(PageUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(page_update, attr, value)
    page_update.save()
    return page_update


@router.delete('/page_updates/{id}')
def delete_page_update(request, id: int):
    page_update = get_object_or_404(PageUpdate, id=id)
    page_update.delete()
    return {'success': True}


# DraftOrderComplete endpoints
@router.get('/draft_order_completes', response=List[DraftOrderComplete])
@paginate
def list_draft_order_completes(request):
    return DraftOrderComplete.objects.all()


@router.get('/draft_order_completes/{id}', response=DraftOrderComplete)
def get_draft_order_complete(request, id: int):
    return get_object_or_404(DraftOrderComplete, id=id)


@router.post('/draft_order_completes', response=DraftOrderComplete)
def create_draft_order_complete(request, payload: DraftOrderCompleteCreate):
    data = payload.dict()
    draft_order_complete = DraftOrderComplete.objects.create(**data)
    return draft_order_complete


@router.put('/draft_order_completes/{id}', response=DraftOrderComplete)
def update_draft_order_complete(request, id: int, payload: DraftOrderCompleteUpdate):
    draft_order_complete = get_object_or_404(DraftOrderComplete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_complete, attr, value)
    draft_order_complete.save()
    return draft_order_complete


@router.delete('/draft_order_completes/{id}')
def delete_draft_order_complete(request, id: int):
    draft_order_complete = get_object_or_404(DraftOrderComplete, id=id)
    draft_order_complete.delete()
    return {'success': True}


# OrderError endpoints
@router.get('/order_errors', response=List[OrderError])
@paginate
def list_order_errors(request):
    return OrderError.objects.all()


@router.get('/order_errors/{id}', response=OrderError)
def get_order_error(request, id: int):
    return get_object_or_404(OrderError, id=id)


@router.post('/order_errors', response=OrderError)
def create_order_error(request, payload: OrderErrorCreate):
    data = payload.dict()
    order_error = OrderError.objects.create(**data)
    return order_error


@router.put('/order_errors/{id}', response=OrderError)
def update_order_error(request, id: int, payload: OrderErrorUpdate):
    order_error = get_object_or_404(OrderError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_error, attr, value)
    order_error.save()
    return order_error


@router.delete('/order_errors/{id}')
def delete_order_error(request, id: int):
    order_error = get_object_or_404(OrderError, id=id)
    order_error.delete()
    return {'success': True}


# NauticalDraftOrderComplete endpoints
@router.get('/nautical_draft_order_completes', response=List[NauticalDraftOrderComplete])
@paginate
def list_nautical_draft_order_completes(request):
    return NauticalDraftOrderComplete.objects.all()


@router.get('/nautical_draft_order_completes/{id}', response=NauticalDraftOrderComplete)
def get_nautical_draft_order_complete(request, id: int):
    return get_object_or_404(NauticalDraftOrderComplete, id=id)


@router.post('/nautical_draft_order_completes', response=NauticalDraftOrderComplete)
def create_nautical_draft_order_complete(request, payload: NauticalDraftOrderCompleteCreate):
    data = payload.dict()
    nautical_draft_order_complete = NauticalDraftOrderComplete.objects.create(**data)
    return nautical_draft_order_complete


@router.put('/nautical_draft_order_completes/{id}', response=NauticalDraftOrderComplete)
def update_nautical_draft_order_complete(request, id: int, payload: NauticalDraftOrderCompleteUpdate):
    nautical_draft_order_complete = get_object_or_404(NauticalDraftOrderComplete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_complete, attr, value)
    nautical_draft_order_complete.save()
    return nautical_draft_order_complete


@router.delete('/nautical_draft_order_completes/{id}')
def delete_nautical_draft_order_complete(request, id: int):
    nautical_draft_order_complete = get_object_or_404(NauticalDraftOrderComplete, id=id)
    nautical_draft_order_complete.delete()
    return {'success': True}


# DraftOrderSetTransactionCurrency endpoints
@router.get('/draft_order_set_transaction_currencys', response=List[DraftOrderSetTransactionCurrency])
@paginate
def list_draft_order_set_transaction_currencys(request):
    return DraftOrderSetTransactionCurrency.objects.all()


@router.get('/draft_order_set_transaction_currencys/{id}', response=DraftOrderSetTransactionCurrency)
def get_draft_order_set_transaction_currency(request, id: int):
    return get_object_or_404(DraftOrderSetTransactionCurrency, id=id)


@router.post('/draft_order_set_transaction_currencys', response=DraftOrderSetTransactionCurrency)
def create_draft_order_set_transaction_currency(request, payload: DraftOrderSetTransactionCurrencyCreate):
    data = payload.dict()
    draft_order_set_transaction_currency = DraftOrderSetTransactionCurrency.objects.create(**data)
    return draft_order_set_transaction_currency


@router.put('/draft_order_set_transaction_currencys/{id}', response=DraftOrderSetTransactionCurrency)
def update_draft_order_set_transaction_currency(request, id: int, payload: DraftOrderSetTransactionCurrencyUpdate):
    draft_order_set_transaction_currency = get_object_or_404(DraftOrderSetTransactionCurrency, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_set_transaction_currency, attr, value)
    draft_order_set_transaction_currency.save()
    return draft_order_set_transaction_currency


@router.delete('/draft_order_set_transaction_currencys/{id}')
def delete_draft_order_set_transaction_currency(request, id: int):
    draft_order_set_transaction_currency = get_object_or_404(DraftOrderSetTransactionCurrency, id=id)
    draft_order_set_transaction_currency.delete()
    return {'success': True}


# NauticalDraftOrderSetTransactionCurrency endpoints
@router.get('/nautical_draft_order_set_transaction_currencys', response=List[NauticalDraftOrderSetTransactionCurrency])
@paginate
def list_nautical_draft_order_set_transaction_currencys(request):
    return NauticalDraftOrderSetTransactionCurrency.objects.all()


@router.get('/nautical_draft_order_set_transaction_currencys/{id}', response=NauticalDraftOrderSetTransactionCurrency)
def get_nautical_draft_order_set_transaction_currency(request, id: int):
    return get_object_or_404(NauticalDraftOrderSetTransactionCurrency, id=id)


@router.post('/nautical_draft_order_set_transaction_currencys', response=NauticalDraftOrderSetTransactionCurrency)
def create_nautical_draft_order_set_transaction_currency(request, payload: NauticalDraftOrderSetTransactionCurrencyCreate):
    data = payload.dict()
    nautical_draft_order_set_transaction_currency = NauticalDraftOrderSetTransactionCurrency.objects.create(**data)
    return nautical_draft_order_set_transaction_currency


@router.put('/nautical_draft_order_set_transaction_currencys/{id}', response=NauticalDraftOrderSetTransactionCurrency)
def update_nautical_draft_order_set_transaction_currency(request, id: int, payload: NauticalDraftOrderSetTransactionCurrencyUpdate):
    nautical_draft_order_set_transaction_currency = get_object_or_404(NauticalDraftOrderSetTransactionCurrency, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_set_transaction_currency, attr, value)
    nautical_draft_order_set_transaction_currency.save()
    return nautical_draft_order_set_transaction_currency


@router.delete('/nautical_draft_order_set_transaction_currencys/{id}')
def delete_nautical_draft_order_set_transaction_currency(request, id: int):
    nautical_draft_order_set_transaction_currency = get_object_or_404(NauticalDraftOrderSetTransactionCurrency, id=id)
    nautical_draft_order_set_transaction_currency.delete()
    return {'success': True}


# DraftOrderCreate endpoints
@router.get('/draft_order_creates', response=List[DraftOrderCreate])
@paginate
def list_draft_order_creates(request):
    return DraftOrderCreate.objects.all()


@router.get('/draft_order_creates/{id}', response=DraftOrderCreate)
def get_draft_order_create(request, id: int):
    return get_object_or_404(DraftOrderCreate, id=id)


@router.post('/draft_order_creates', response=DraftOrderCreate)
def create_draft_order_create(request, payload: DraftOrderCreateCreate):
    data = payload.dict()
    draft_order_create = DraftOrderCreate.objects.create(**data)
    return draft_order_create


@router.put('/draft_order_creates/{id}', response=DraftOrderCreate)
def update_draft_order_create(request, id: int, payload: DraftOrderCreateUpdate):
    draft_order_create = get_object_or_404(DraftOrderCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_create, attr, value)
    draft_order_create.save()
    return draft_order_create


@router.delete('/draft_order_creates/{id}')
def delete_draft_order_create(request, id: int):
    draft_order_create = get_object_or_404(DraftOrderCreate, id=id)
    draft_order_create.delete()
    return {'success': True}


# NauticalDraftOrderCreate endpoints
@router.get('/nautical_draft_order_creates', response=List[NauticalDraftOrderCreate])
@paginate
def list_nautical_draft_order_creates(request):
    return NauticalDraftOrderCreate.objects.all()


@router.get('/nautical_draft_order_creates/{id}', response=NauticalDraftOrderCreate)
def get_nautical_draft_order_create(request, id: int):
    return get_object_or_404(NauticalDraftOrderCreate, id=id)


@router.post('/nautical_draft_order_creates', response=NauticalDraftOrderCreate)
def create_nautical_draft_order_create(request, payload: NauticalDraftOrderCreateCreate):
    data = payload.dict()
    nautical_draft_order_create = NauticalDraftOrderCreate.objects.create(**data)
    return nautical_draft_order_create


@router.put('/nautical_draft_order_creates/{id}', response=NauticalDraftOrderCreate)
def update_nautical_draft_order_create(request, id: int, payload: NauticalDraftOrderCreateUpdate):
    nautical_draft_order_create = get_object_or_404(NauticalDraftOrderCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_create, attr, value)
    nautical_draft_order_create.save()
    return nautical_draft_order_create


@router.delete('/nautical_draft_order_creates/{id}')
def delete_nautical_draft_order_create(request, id: int):
    nautical_draft_order_create = get_object_or_404(NauticalDraftOrderCreate, id=id)
    nautical_draft_order_create.delete()
    return {'success': True}


# NauticalHistoricalOrderCreate endpoints
@router.get('/nautical_historical_order_creates', response=List[NauticalHistoricalOrderCreate])
@paginate
def list_nautical_historical_order_creates(request):
    return NauticalHistoricalOrderCreate.objects.all()


@router.get('/nautical_historical_order_creates/{id}', response=NauticalHistoricalOrderCreate)
def get_nautical_historical_order_create(request, id: int):
    return get_object_or_404(NauticalHistoricalOrderCreate, id=id)


@router.post('/nautical_historical_order_creates', response=NauticalHistoricalOrderCreate)
def create_nautical_historical_order_create(request, payload: NauticalHistoricalOrderCreateCreate):
    data = payload.dict()
    nautical_historical_order_create = NauticalHistoricalOrderCreate.objects.create(**data)
    return nautical_historical_order_create


@router.put('/nautical_historical_order_creates/{id}', response=NauticalHistoricalOrderCreate)
def update_nautical_historical_order_create(request, id: int, payload: NauticalHistoricalOrderCreateUpdate):
    nautical_historical_order_create = get_object_or_404(NauticalHistoricalOrderCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_historical_order_create, attr, value)
    nautical_historical_order_create.save()
    return nautical_historical_order_create


@router.delete('/nautical_historical_order_creates/{id}')
def delete_nautical_historical_order_create(request, id: int):
    nautical_historical_order_create = get_object_or_404(NauticalHistoricalOrderCreate, id=id)
    nautical_historical_order_create.delete()
    return {'success': True}


# DraftOrderDelete endpoints
@router.get('/draft_order_deletes', response=List[DraftOrderDelete])
@paginate
def list_draft_order_deletes(request):
    return DraftOrderDelete.objects.all()


@router.get('/draft_order_deletes/{id}', response=DraftOrderDelete)
def get_draft_order_delete(request, id: int):
    return get_object_or_404(DraftOrderDelete, id=id)


@router.post('/draft_order_deletes', response=DraftOrderDelete)
def create_draft_order_delete(request, payload: DraftOrderDeleteCreate):
    data = payload.dict()
    draft_order_delete = DraftOrderDelete.objects.create(**data)
    return draft_order_delete


@router.put('/draft_order_deletes/{id}', response=DraftOrderDelete)
def update_draft_order_delete(request, id: int, payload: DraftOrderDeleteUpdate):
    draft_order_delete = get_object_or_404(DraftOrderDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_delete, attr, value)
    draft_order_delete.save()
    return draft_order_delete


@router.delete('/draft_order_deletes/{id}')
def delete_draft_order_delete(request, id: int):
    draft_order_delete = get_object_or_404(DraftOrderDelete, id=id)
    draft_order_delete.delete()
    return {'success': True}


# NauticalDraftOrderDelete endpoints
@router.get('/nautical_draft_order_deletes', response=List[NauticalDraftOrderDelete])
@paginate
def list_nautical_draft_order_deletes(request):
    return NauticalDraftOrderDelete.objects.all()


@router.get('/nautical_draft_order_deletes/{id}', response=NauticalDraftOrderDelete)
def get_nautical_draft_order_delete(request, id: int):
    return get_object_or_404(NauticalDraftOrderDelete, id=id)


@router.post('/nautical_draft_order_deletes', response=NauticalDraftOrderDelete)
def create_nautical_draft_order_delete(request, payload: NauticalDraftOrderDeleteCreate):
    data = payload.dict()
    nautical_draft_order_delete = NauticalDraftOrderDelete.objects.create(**data)
    return nautical_draft_order_delete


@router.put('/nautical_draft_order_deletes/{id}', response=NauticalDraftOrderDelete)
def update_nautical_draft_order_delete(request, id: int, payload: NauticalDraftOrderDeleteUpdate):
    nautical_draft_order_delete = get_object_or_404(NauticalDraftOrderDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_delete, attr, value)
    nautical_draft_order_delete.save()
    return nautical_draft_order_delete


@router.delete('/nautical_draft_order_deletes/{id}')
def delete_nautical_draft_order_delete(request, id: int):
    nautical_draft_order_delete = get_object_or_404(NauticalDraftOrderDelete, id=id)
    nautical_draft_order_delete.delete()
    return {'success': True}


# DraftOrderBulkDelete endpoints
@router.get('/draft_order_bulk_deletes', response=List[DraftOrderBulkDelete])
@paginate
def list_draft_order_bulk_deletes(request):
    return DraftOrderBulkDelete.objects.all()


@router.get('/draft_order_bulk_deletes/{id}', response=DraftOrderBulkDelete)
def get_draft_order_bulk_delete(request, id: int):
    return get_object_or_404(DraftOrderBulkDelete, id=id)


@router.post('/draft_order_bulk_deletes', response=DraftOrderBulkDelete)
def create_draft_order_bulk_delete(request, payload: DraftOrderBulkDeleteCreate):
    data = payload.dict()
    draft_order_bulk_delete = DraftOrderBulkDelete.objects.create(**data)
    return draft_order_bulk_delete


@router.put('/draft_order_bulk_deletes/{id}', response=DraftOrderBulkDelete)
def update_draft_order_bulk_delete(request, id: int, payload: DraftOrderBulkDeleteUpdate):
    draft_order_bulk_delete = get_object_or_404(DraftOrderBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_bulk_delete, attr, value)
    draft_order_bulk_delete.save()
    return draft_order_bulk_delete


@router.delete('/draft_order_bulk_deletes/{id}')
def delete_draft_order_bulk_delete(request, id: int):
    draft_order_bulk_delete = get_object_or_404(DraftOrderBulkDelete, id=id)
    draft_order_bulk_delete.delete()
    return {'success': True}


# NauticalDraftOrderBulkDelete endpoints
@router.get('/nautical_draft_order_bulk_deletes', response=List[NauticalDraftOrderBulkDelete])
@paginate
def list_nautical_draft_order_bulk_deletes(request):
    return NauticalDraftOrderBulkDelete.objects.all()


@router.get('/nautical_draft_order_bulk_deletes/{id}', response=NauticalDraftOrderBulkDelete)
def get_nautical_draft_order_bulk_delete(request, id: int):
    return get_object_or_404(NauticalDraftOrderBulkDelete, id=id)


@router.post('/nautical_draft_order_bulk_deletes', response=NauticalDraftOrderBulkDelete)
def create_nautical_draft_order_bulk_delete(request, payload: NauticalDraftOrderBulkDeleteCreate):
    data = payload.dict()
    nautical_draft_order_bulk_delete = NauticalDraftOrderBulkDelete.objects.create(**data)
    return nautical_draft_order_bulk_delete


@router.put('/nautical_draft_order_bulk_deletes/{id}', response=NauticalDraftOrderBulkDelete)
def update_nautical_draft_order_bulk_delete(request, id: int, payload: NauticalDraftOrderBulkDeleteUpdate):
    nautical_draft_order_bulk_delete = get_object_or_404(NauticalDraftOrderBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_bulk_delete, attr, value)
    nautical_draft_order_bulk_delete.save()
    return nautical_draft_order_bulk_delete


@router.delete('/nautical_draft_order_bulk_deletes/{id}')
def delete_nautical_draft_order_bulk_delete(request, id: int):
    nautical_draft_order_bulk_delete = get_object_or_404(NauticalDraftOrderBulkDelete, id=id)
    nautical_draft_order_bulk_delete.delete()
    return {'success': True}


# DraftOrderLinesBulkDelete endpoints
@router.get('/draft_order_lines_bulk_deletes', response=List[DraftOrderLinesBulkDelete])
@paginate
def list_draft_order_lines_bulk_deletes(request):
    return DraftOrderLinesBulkDelete.objects.all()


@router.get('/draft_order_lines_bulk_deletes/{id}', response=DraftOrderLinesBulkDelete)
def get_draft_order_lines_bulk_delete(request, id: int):
    return get_object_or_404(DraftOrderLinesBulkDelete, id=id)


@router.post('/draft_order_lines_bulk_deletes', response=DraftOrderLinesBulkDelete)
def create_draft_order_lines_bulk_delete(request, payload: DraftOrderLinesBulkDeleteCreate):
    data = payload.dict()
    draft_order_lines_bulk_delete = DraftOrderLinesBulkDelete.objects.create(**data)
    return draft_order_lines_bulk_delete


@router.put('/draft_order_lines_bulk_deletes/{id}', response=DraftOrderLinesBulkDelete)
def update_draft_order_lines_bulk_delete(request, id: int, payload: DraftOrderLinesBulkDeleteUpdate):
    draft_order_lines_bulk_delete = get_object_or_404(DraftOrderLinesBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_lines_bulk_delete, attr, value)
    draft_order_lines_bulk_delete.save()
    return draft_order_lines_bulk_delete


@router.delete('/draft_order_lines_bulk_deletes/{id}')
def delete_draft_order_lines_bulk_delete(request, id: int):
    draft_order_lines_bulk_delete = get_object_or_404(DraftOrderLinesBulkDelete, id=id)
    draft_order_lines_bulk_delete.delete()
    return {'success': True}


# NauticalDraftOrderLinesBulkDelete endpoints
@router.get('/nautical_draft_order_lines_bulk_deletes', response=List[NauticalDraftOrderLinesBulkDelete])
@paginate
def list_nautical_draft_order_lines_bulk_deletes(request):
    return NauticalDraftOrderLinesBulkDelete.objects.all()


@router.get('/nautical_draft_order_lines_bulk_deletes/{id}', response=NauticalDraftOrderLinesBulkDelete)
def get_nautical_draft_order_lines_bulk_delete(request, id: int):
    return get_object_or_404(NauticalDraftOrderLinesBulkDelete, id=id)


@router.post('/nautical_draft_order_lines_bulk_deletes', response=NauticalDraftOrderLinesBulkDelete)
def create_nautical_draft_order_lines_bulk_delete(request, payload: NauticalDraftOrderLinesBulkDeleteCreate):
    data = payload.dict()
    nautical_draft_order_lines_bulk_delete = NauticalDraftOrderLinesBulkDelete.objects.create(**data)
    return nautical_draft_order_lines_bulk_delete


@router.put('/nautical_draft_order_lines_bulk_deletes/{id}', response=NauticalDraftOrderLinesBulkDelete)
def update_nautical_draft_order_lines_bulk_delete(request, id: int, payload: NauticalDraftOrderLinesBulkDeleteUpdate):
    nautical_draft_order_lines_bulk_delete = get_object_or_404(NauticalDraftOrderLinesBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_lines_bulk_delete, attr, value)
    nautical_draft_order_lines_bulk_delete.save()
    return nautical_draft_order_lines_bulk_delete


@router.delete('/nautical_draft_order_lines_bulk_deletes/{id}')
def delete_nautical_draft_order_lines_bulk_delete(request, id: int):
    nautical_draft_order_lines_bulk_delete = get_object_or_404(NauticalDraftOrderLinesBulkDelete, id=id)
    nautical_draft_order_lines_bulk_delete.delete()
    return {'success': True}


# DraftOrderLinesCreate endpoints
@router.get('/draft_order_lines_creates', response=List[DraftOrderLinesCreate])
@paginate
def list_draft_order_lines_creates(request):
    return DraftOrderLinesCreate.objects.all()


@router.get('/draft_order_lines_creates/{id}', response=DraftOrderLinesCreate)
def get_draft_order_lines_create(request, id: int):
    return get_object_or_404(DraftOrderLinesCreate, id=id)


@router.post('/draft_order_lines_creates', response=DraftOrderLinesCreate)
def create_draft_order_lines_create(request, payload: DraftOrderLinesCreateCreate):
    data = payload.dict()
    draft_order_lines_create = DraftOrderLinesCreate.objects.create(**data)
    return draft_order_lines_create


@router.put('/draft_order_lines_creates/{id}', response=DraftOrderLinesCreate)
def update_draft_order_lines_create(request, id: int, payload: DraftOrderLinesCreateUpdate):
    draft_order_lines_create = get_object_or_404(DraftOrderLinesCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_lines_create, attr, value)
    draft_order_lines_create.save()
    return draft_order_lines_create


@router.delete('/draft_order_lines_creates/{id}')
def delete_draft_order_lines_create(request, id: int):
    draft_order_lines_create = get_object_or_404(DraftOrderLinesCreate, id=id)
    draft_order_lines_create.delete()
    return {'success': True}


# NauticalDraftOrderLinesCreate endpoints
@router.get('/nautical_draft_order_lines_creates', response=List[NauticalDraftOrderLinesCreate])
@paginate
def list_nautical_draft_order_lines_creates(request):
    return NauticalDraftOrderLinesCreate.objects.all()


@router.get('/nautical_draft_order_lines_creates/{id}', response=NauticalDraftOrderLinesCreate)
def get_nautical_draft_order_lines_create(request, id: int):
    return get_object_or_404(NauticalDraftOrderLinesCreate, id=id)


@router.post('/nautical_draft_order_lines_creates', response=NauticalDraftOrderLinesCreate)
def create_nautical_draft_order_lines_create(request, payload: NauticalDraftOrderLinesCreateCreate):
    data = payload.dict()
    nautical_draft_order_lines_create = NauticalDraftOrderLinesCreate.objects.create(**data)
    return nautical_draft_order_lines_create


@router.put('/nautical_draft_order_lines_creates/{id}', response=NauticalDraftOrderLinesCreate)
def update_nautical_draft_order_lines_create(request, id: int, payload: NauticalDraftOrderLinesCreateUpdate):
    nautical_draft_order_lines_create = get_object_or_404(NauticalDraftOrderLinesCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_lines_create, attr, value)
    nautical_draft_order_lines_create.save()
    return nautical_draft_order_lines_create


@router.delete('/nautical_draft_order_lines_creates/{id}')
def delete_nautical_draft_order_lines_create(request, id: int):
    nautical_draft_order_lines_create = get_object_or_404(NauticalDraftOrderLinesCreate, id=id)
    nautical_draft_order_lines_create.delete()
    return {'success': True}


# DraftOrderLineDelete endpoints
@router.get('/draft_order_line_deletes', response=List[DraftOrderLineDelete])
@paginate
def list_draft_order_line_deletes(request):
    return DraftOrderLineDelete.objects.all()


@router.get('/draft_order_line_deletes/{id}', response=DraftOrderLineDelete)
def get_draft_order_line_delete(request, id: int):
    return get_object_or_404(DraftOrderLineDelete, id=id)


@router.post('/draft_order_line_deletes', response=DraftOrderLineDelete)
def create_draft_order_line_delete(request, payload: DraftOrderLineDeleteCreate):
    data = payload.dict()
    draft_order_line_delete = DraftOrderLineDelete.objects.create(**data)
    return draft_order_line_delete


@router.put('/draft_order_line_deletes/{id}', response=DraftOrderLineDelete)
def update_draft_order_line_delete(request, id: int, payload: DraftOrderLineDeleteUpdate):
    draft_order_line_delete = get_object_or_404(DraftOrderLineDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_line_delete, attr, value)
    draft_order_line_delete.save()
    return draft_order_line_delete


@router.delete('/draft_order_line_deletes/{id}')
def delete_draft_order_line_delete(request, id: int):
    draft_order_line_delete = get_object_or_404(DraftOrderLineDelete, id=id)
    draft_order_line_delete.delete()
    return {'success': True}


# NauticalDraftOrderLineDelete endpoints
@router.get('/nautical_draft_order_line_deletes', response=List[NauticalDraftOrderLineDelete])
@paginate
def list_nautical_draft_order_line_deletes(request):
    return NauticalDraftOrderLineDelete.objects.all()


@router.get('/nautical_draft_order_line_deletes/{id}', response=NauticalDraftOrderLineDelete)
def get_nautical_draft_order_line_delete(request, id: int):
    return get_object_or_404(NauticalDraftOrderLineDelete, id=id)


@router.post('/nautical_draft_order_line_deletes', response=NauticalDraftOrderLineDelete)
def create_nautical_draft_order_line_delete(request, payload: NauticalDraftOrderLineDeleteCreate):
    data = payload.dict()
    nautical_draft_order_line_delete = NauticalDraftOrderLineDelete.objects.create(**data)
    return nautical_draft_order_line_delete


@router.put('/nautical_draft_order_line_deletes/{id}', response=NauticalDraftOrderLineDelete)
def update_nautical_draft_order_line_delete(request, id: int, payload: NauticalDraftOrderLineDeleteUpdate):
    nautical_draft_order_line_delete = get_object_or_404(NauticalDraftOrderLineDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_line_delete, attr, value)
    nautical_draft_order_line_delete.save()
    return nautical_draft_order_line_delete


@router.delete('/nautical_draft_order_line_deletes/{id}')
def delete_nautical_draft_order_line_delete(request, id: int):
    nautical_draft_order_line_delete = get_object_or_404(NauticalDraftOrderLineDelete, id=id)
    nautical_draft_order_line_delete.delete()
    return {'success': True}


# DraftOrderLineUpdate endpoints
@router.get('/draft_order_line_updates', response=List[DraftOrderLineUpdate])
@paginate
def list_draft_order_line_updates(request):
    return DraftOrderLineUpdate.objects.all()


@router.get('/draft_order_line_updates/{id}', response=DraftOrderLineUpdate)
def get_draft_order_line_update(request, id: int):
    return get_object_or_404(DraftOrderLineUpdate, id=id)


@router.post('/draft_order_line_updates', response=DraftOrderLineUpdate)
def create_draft_order_line_update(request, payload: DraftOrderLineUpdateCreate):
    data = payload.dict()
    draft_order_line_update = DraftOrderLineUpdate.objects.create(**data)
    return draft_order_line_update


@router.put('/draft_order_line_updates/{id}', response=DraftOrderLineUpdate)
def update_draft_order_line_update(request, id: int, payload: DraftOrderLineUpdateUpdate):
    draft_order_line_update = get_object_or_404(DraftOrderLineUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_line_update, attr, value)
    draft_order_line_update.save()
    return draft_order_line_update


@router.delete('/draft_order_line_updates/{id}')
def delete_draft_order_line_update(request, id: int):
    draft_order_line_update = get_object_or_404(DraftOrderLineUpdate, id=id)
    draft_order_line_update.delete()
    return {'success': True}


# NauticalDraftOrderLineUpdate endpoints
@router.get('/nautical_draft_order_line_updates', response=List[NauticalDraftOrderLineUpdate])
@paginate
def list_nautical_draft_order_line_updates(request):
    return NauticalDraftOrderLineUpdate.objects.all()


@router.get('/nautical_draft_order_line_updates/{id}', response=NauticalDraftOrderLineUpdate)
def get_nautical_draft_order_line_update(request, id: int):
    return get_object_or_404(NauticalDraftOrderLineUpdate, id=id)


@router.post('/nautical_draft_order_line_updates', response=NauticalDraftOrderLineUpdate)
def create_nautical_draft_order_line_update(request, payload: NauticalDraftOrderLineUpdateCreate):
    data = payload.dict()
    nautical_draft_order_line_update = NauticalDraftOrderLineUpdate.objects.create(**data)
    return nautical_draft_order_line_update


@router.put('/nautical_draft_order_line_updates/{id}', response=NauticalDraftOrderLineUpdate)
def update_nautical_draft_order_line_update(request, id: int, payload: NauticalDraftOrderLineUpdateUpdate):
    nautical_draft_order_line_update = get_object_or_404(NauticalDraftOrderLineUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_line_update, attr, value)
    nautical_draft_order_line_update.save()
    return nautical_draft_order_line_update


@router.delete('/nautical_draft_order_line_updates/{id}')
def delete_nautical_draft_order_line_update(request, id: int):
    nautical_draft_order_line_update = get_object_or_404(NauticalDraftOrderLineUpdate, id=id)
    nautical_draft_order_line_update.delete()
    return {'success': True}


# DraftOrderUpdate endpoints
@router.get('/draft_order_updates', response=List[DraftOrderUpdate])
@paginate
def list_draft_order_updates(request):
    return DraftOrderUpdate.objects.all()


@router.get('/draft_order_updates/{id}', response=DraftOrderUpdate)
def get_draft_order_update(request, id: int):
    return get_object_or_404(DraftOrderUpdate, id=id)


@router.post('/draft_order_updates', response=DraftOrderUpdate)
def create_draft_order_update(request, payload: DraftOrderUpdateCreate):
    data = payload.dict()
    draft_order_update = DraftOrderUpdate.objects.create(**data)
    return draft_order_update


@router.put('/draft_order_updates/{id}', response=DraftOrderUpdate)
def update_draft_order_update(request, id: int, payload: DraftOrderUpdateUpdate):
    draft_order_update = get_object_or_404(DraftOrderUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_update, attr, value)
    draft_order_update.save()
    return draft_order_update


@router.delete('/draft_order_updates/{id}')
def delete_draft_order_update(request, id: int):
    draft_order_update = get_object_or_404(DraftOrderUpdate, id=id)
    draft_order_update.delete()
    return {'success': True}


# NauticalDraftOrderUpdate endpoints
@router.get('/nautical_draft_order_updates', response=List[NauticalDraftOrderUpdate])
@paginate
def list_nautical_draft_order_updates(request):
    return NauticalDraftOrderUpdate.objects.all()


@router.get('/nautical_draft_order_updates/{id}', response=NauticalDraftOrderUpdate)
def get_nautical_draft_order_update(request, id: int):
    return get_object_or_404(NauticalDraftOrderUpdate, id=id)


@router.post('/nautical_draft_order_updates', response=NauticalDraftOrderUpdate)
def create_nautical_draft_order_update(request, payload: NauticalDraftOrderUpdateCreate):
    data = payload.dict()
    nautical_draft_order_update = NauticalDraftOrderUpdate.objects.create(**data)
    return nautical_draft_order_update


@router.put('/nautical_draft_order_updates/{id}', response=NauticalDraftOrderUpdate)
def update_nautical_draft_order_update(request, id: int, payload: NauticalDraftOrderUpdateUpdate):
    nautical_draft_order_update = get_object_or_404(NauticalDraftOrderUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_update, attr, value)
    nautical_draft_order_update.save()
    return nautical_draft_order_update


@router.delete('/nautical_draft_order_updates/{id}')
def delete_nautical_draft_order_update(request, id: int):
    nautical_draft_order_update = get_object_or_404(NauticalDraftOrderUpdate, id=id)
    nautical_draft_order_update.delete()
    return {'success': True}


# DraftOrderLinePriceOverride endpoints
@router.get('/draft_order_line_price_overrides', response=List[DraftOrderLinePriceOverride])
@paginate
def list_draft_order_line_price_overrides(request):
    return DraftOrderLinePriceOverride.objects.all()


@router.get('/draft_order_line_price_overrides/{id}', response=DraftOrderLinePriceOverride)
def get_draft_order_line_price_override(request, id: int):
    return get_object_or_404(DraftOrderLinePriceOverride, id=id)


@router.post('/draft_order_line_price_overrides', response=DraftOrderLinePriceOverride)
def create_draft_order_line_price_override(request, payload: DraftOrderLinePriceOverrideCreate):
    data = payload.dict()
    draft_order_line_price_override = DraftOrderLinePriceOverride.objects.create(**data)
    return draft_order_line_price_override


@router.put('/draft_order_line_price_overrides/{id}', response=DraftOrderLinePriceOverride)
def update_draft_order_line_price_override(request, id: int, payload: DraftOrderLinePriceOverrideUpdate):
    draft_order_line_price_override = get_object_or_404(DraftOrderLinePriceOverride, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(draft_order_line_price_override, attr, value)
    draft_order_line_price_override.save()
    return draft_order_line_price_override


@router.delete('/draft_order_line_price_overrides/{id}')
def delete_draft_order_line_price_override(request, id: int):
    draft_order_line_price_override = get_object_or_404(DraftOrderLinePriceOverride, id=id)
    draft_order_line_price_override.delete()
    return {'success': True}


# NauticalDraftOrderLinePriceOverride endpoints
@router.get('/nautical_draft_order_line_price_overrides', response=List[NauticalDraftOrderLinePriceOverride])
@paginate
def list_nautical_draft_order_line_price_overrides(request):
    return NauticalDraftOrderLinePriceOverride.objects.all()


@router.get('/nautical_draft_order_line_price_overrides/{id}', response=NauticalDraftOrderLinePriceOverride)
def get_nautical_draft_order_line_price_override(request, id: int):
    return get_object_or_404(NauticalDraftOrderLinePriceOverride, id=id)


@router.post('/nautical_draft_order_line_price_overrides', response=NauticalDraftOrderLinePriceOverride)
def create_nautical_draft_order_line_price_override(request, payload: NauticalDraftOrderLinePriceOverrideCreate):
    data = payload.dict()
    nautical_draft_order_line_price_override = NauticalDraftOrderLinePriceOverride.objects.create(**data)
    return nautical_draft_order_line_price_override


@router.put('/nautical_draft_order_line_price_overrides/{id}', response=NauticalDraftOrderLinePriceOverride)
def update_nautical_draft_order_line_price_override(request, id: int, payload: NauticalDraftOrderLinePriceOverrideUpdate):
    nautical_draft_order_line_price_override = get_object_or_404(NauticalDraftOrderLinePriceOverride, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_draft_order_line_price_override, attr, value)
    nautical_draft_order_line_price_override.save()
    return nautical_draft_order_line_price_override


@router.delete('/nautical_draft_order_line_price_overrides/{id}')
def delete_nautical_draft_order_line_price_override(request, id: int):
    nautical_draft_order_line_price_override = get_object_or_404(NauticalDraftOrderLinePriceOverride, id=id)
    nautical_draft_order_line_price_override.delete()
    return {'success': True}


# OrderAddNote endpoints
@router.get('/order_add_notes', response=List[OrderAddNote])
@paginate
def list_order_add_notes(request):
    return OrderAddNote.objects.all()


@router.get('/order_add_notes/{id}', response=OrderAddNote)
def get_order_add_note(request, id: int):
    return get_object_or_404(OrderAddNote, id=id)


@router.post('/order_add_notes', response=OrderAddNote)
def create_order_add_note(request, payload: OrderAddNoteCreate):
    data = payload.dict()
    order_add_note = OrderAddNote.objects.create(**data)
    return order_add_note


@router.put('/order_add_notes/{id}', response=OrderAddNote)
def update_order_add_note(request, id: int, payload: OrderAddNoteUpdate):
    order_add_note = get_object_or_404(OrderAddNote, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_add_note, attr, value)
    order_add_note.save()
    return order_add_note


@router.delete('/order_add_notes/{id}')
def delete_order_add_note(request, id: int):
    order_add_note = get_object_or_404(OrderAddNote, id=id)
    order_add_note.delete()
    return {'success': True}


# NauticalOrderAddNote endpoints
@router.get('/nautical_order_add_notes', response=List[NauticalOrderAddNote])
@paginate
def list_nautical_order_add_notes(request):
    return NauticalOrderAddNote.objects.all()


@router.get('/nautical_order_add_notes/{id}', response=NauticalOrderAddNote)
def get_nautical_order_add_note(request, id: int):
    return get_object_or_404(NauticalOrderAddNote, id=id)


@router.post('/nautical_order_add_notes', response=NauticalOrderAddNote)
def create_nautical_order_add_note(request, payload: NauticalOrderAddNoteCreate):
    data = payload.dict()
    nautical_order_add_note = NauticalOrderAddNote.objects.create(**data)
    return nautical_order_add_note


@router.put('/nautical_order_add_notes/{id}', response=NauticalOrderAddNote)
def update_nautical_order_add_note(request, id: int, payload: NauticalOrderAddNoteUpdate):
    nautical_order_add_note = get_object_or_404(NauticalOrderAddNote, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_add_note, attr, value)
    nautical_order_add_note.save()
    return nautical_order_add_note


@router.delete('/nautical_order_add_notes/{id}')
def delete_nautical_order_add_note(request, id: int):
    nautical_order_add_note = get_object_or_404(NauticalOrderAddNote, id=id)
    nautical_order_add_note.delete()
    return {'success': True}


# OrderLineAddNote endpoints
@router.get('/order_line_add_notes', response=List[OrderLineAddNote])
@paginate
def list_order_line_add_notes(request):
    return OrderLineAddNote.objects.all()


@router.get('/order_line_add_notes/{id}', response=OrderLineAddNote)
def get_order_line_add_note(request, id: int):
    return get_object_or_404(OrderLineAddNote, id=id)


@router.post('/order_line_add_notes', response=OrderLineAddNote)
def create_order_line_add_note(request, payload: OrderLineAddNoteCreate):
    data = payload.dict()
    order_line_add_note = OrderLineAddNote.objects.create(**data)
    return order_line_add_note


@router.put('/order_line_add_notes/{id}', response=OrderLineAddNote)
def update_order_line_add_note(request, id: int, payload: OrderLineAddNoteUpdate):
    order_line_add_note = get_object_or_404(OrderLineAddNote, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_line_add_note, attr, value)
    order_line_add_note.save()
    return order_line_add_note


@router.delete('/order_line_add_notes/{id}')
def delete_order_line_add_note(request, id: int):
    order_line_add_note = get_object_or_404(OrderLineAddNote, id=id)
    order_line_add_note.delete()
    return {'success': True}


# NauticalOrderLineAddNote endpoints
@router.get('/nautical_order_line_add_notes', response=List[NauticalOrderLineAddNote])
@paginate
def list_nautical_order_line_add_notes(request):
    return NauticalOrderLineAddNote.objects.all()


@router.get('/nautical_order_line_add_notes/{id}', response=NauticalOrderLineAddNote)
def get_nautical_order_line_add_note(request, id: int):
    return get_object_or_404(NauticalOrderLineAddNote, id=id)


@router.post('/nautical_order_line_add_notes', response=NauticalOrderLineAddNote)
def create_nautical_order_line_add_note(request, payload: NauticalOrderLineAddNoteCreate):
    data = payload.dict()
    nautical_order_line_add_note = NauticalOrderLineAddNote.objects.create(**data)
    return nautical_order_line_add_note


@router.put('/nautical_order_line_add_notes/{id}', response=NauticalOrderLineAddNote)
def update_nautical_order_line_add_note(request, id: int, payload: NauticalOrderLineAddNoteUpdate):
    nautical_order_line_add_note = get_object_or_404(NauticalOrderLineAddNote, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_line_add_note, attr, value)
    nautical_order_line_add_note.save()
    return nautical_order_line_add_note


@router.delete('/nautical_order_line_add_notes/{id}')
def delete_nautical_order_line_add_note(request, id: int):
    nautical_order_line_add_note = get_object_or_404(NauticalOrderLineAddNote, id=id)
    nautical_order_line_add_note.delete()
    return {'success': True}


# OrderReturnNotification endpoints
@router.get('/order_return_notifications', response=List[OrderReturnNotification])
@paginate
def list_order_return_notifications(request):
    return OrderReturnNotification.objects.all()


@router.get('/order_return_notifications/{id}', response=OrderReturnNotification)
def get_order_return_notification(request, id: int):
    return get_object_or_404(OrderReturnNotification, id=id)


@router.post('/order_return_notifications', response=OrderReturnNotification)
def create_order_return_notification(request, payload: OrderReturnNotificationCreate):
    data = payload.dict()
    order_return_notification = OrderReturnNotification.objects.create(**data)
    return order_return_notification


@router.put('/order_return_notifications/{id}', response=OrderReturnNotification)
def update_order_return_notification(request, id: int, payload: OrderReturnNotificationUpdate):
    order_return_notification = get_object_or_404(OrderReturnNotification, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_return_notification, attr, value)
    order_return_notification.save()
    return order_return_notification


@router.delete('/order_return_notifications/{id}')
def delete_order_return_notification(request, id: int):
    order_return_notification = get_object_or_404(OrderReturnNotification, id=id)
    order_return_notification.delete()
    return {'success': True}


# NauticalOrderRefreshTaxes endpoints
@router.get('/nautical_order_refresh_taxess', response=List[NauticalOrderRefreshTaxes])
@paginate
def list_nautical_order_refresh_taxess(request):
    return NauticalOrderRefreshTaxes.objects.all()


@router.get('/nautical_order_refresh_taxess/{id}', response=NauticalOrderRefreshTaxes)
def get_nautical_order_refresh_taxes(request, id: int):
    return get_object_or_404(NauticalOrderRefreshTaxes, id=id)


@router.post('/nautical_order_refresh_taxess', response=NauticalOrderRefreshTaxes)
def create_nautical_order_refresh_taxes(request, payload: NauticalOrderRefreshTaxesCreate):
    data = payload.dict()
    nautical_order_refresh_taxes = NauticalOrderRefreshTaxes.objects.create(**data)
    return nautical_order_refresh_taxes


@router.put('/nautical_order_refresh_taxess/{id}', response=NauticalOrderRefreshTaxes)
def update_nautical_order_refresh_taxes(request, id: int, payload: NauticalOrderRefreshTaxesUpdate):
    nautical_order_refresh_taxes = get_object_or_404(NauticalOrderRefreshTaxes, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_refresh_taxes, attr, value)
    nautical_order_refresh_taxes.save()
    return nautical_order_refresh_taxes


@router.delete('/nautical_order_refresh_taxess/{id}')
def delete_nautical_order_refresh_taxes(request, id: int):
    nautical_order_refresh_taxes = get_object_or_404(NauticalOrderRefreshTaxes, id=id)
    nautical_order_refresh_taxes.delete()
    return {'success': True}


# NauticalOrderUpdateApplyVoucherCode endpoints
@router.get('/nautical_order_update_apply_voucher_codes', response=List[NauticalOrderUpdateApplyVoucherCode])
@paginate
def list_nautical_order_update_apply_voucher_codes(request):
    return NauticalOrderUpdateApplyVoucherCode.objects.all()


@router.get('/nautical_order_update_apply_voucher_codes/{id}', response=NauticalOrderUpdateApplyVoucherCode)
def get_nautical_order_update_apply_voucher_code(request, id: int):
    return get_object_or_404(NauticalOrderUpdateApplyVoucherCode, id=id)


@router.post('/nautical_order_update_apply_voucher_codes', response=NauticalOrderUpdateApplyVoucherCode)
def create_nautical_order_update_apply_voucher_code(request, payload: NauticalOrderUpdateApplyVoucherCodeCreate):
    data = payload.dict()
    nautical_order_update_apply_voucher_code = NauticalOrderUpdateApplyVoucherCode.objects.create(**data)
    return nautical_order_update_apply_voucher_code


@router.put('/nautical_order_update_apply_voucher_codes/{id}', response=NauticalOrderUpdateApplyVoucherCode)
def update_nautical_order_update_apply_voucher_code(request, id: int, payload: NauticalOrderUpdateApplyVoucherCodeUpdate):
    nautical_order_update_apply_voucher_code = get_object_or_404(NauticalOrderUpdateApplyVoucherCode, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_update_apply_voucher_code, attr, value)
    nautical_order_update_apply_voucher_code.save()
    return nautical_order_update_apply_voucher_code


@router.delete('/nautical_order_update_apply_voucher_codes/{id}')
def delete_nautical_order_update_apply_voucher_code(request, id: int):
    nautical_order_update_apply_voucher_code = get_object_or_404(NauticalOrderUpdateApplyVoucherCode, id=id)
    nautical_order_update_apply_voucher_code.delete()
    return {'success': True}


# NauticalOrderUpdateDeleteDiscount endpoints
@router.get('/nautical_order_update_delete_discounts', response=List[NauticalOrderUpdateDeleteDiscount])
@paginate
def list_nautical_order_update_delete_discounts(request):
    return NauticalOrderUpdateDeleteDiscount.objects.all()


@router.get('/nautical_order_update_delete_discounts/{id}', response=NauticalOrderUpdateDeleteDiscount)
def get_nautical_order_update_delete_discount(request, id: int):
    return get_object_or_404(NauticalOrderUpdateDeleteDiscount, id=id)


@router.post('/nautical_order_update_delete_discounts', response=NauticalOrderUpdateDeleteDiscount)
def create_nautical_order_update_delete_discount(request, payload: NauticalOrderUpdateDeleteDiscountCreate):
    data = payload.dict()
    nautical_order_update_delete_discount = NauticalOrderUpdateDeleteDiscount.objects.create(**data)
    return nautical_order_update_delete_discount


@router.put('/nautical_order_update_delete_discounts/{id}', response=NauticalOrderUpdateDeleteDiscount)
def update_nautical_order_update_delete_discount(request, id: int, payload: NauticalOrderUpdateDeleteDiscountUpdate):
    nautical_order_update_delete_discount = get_object_or_404(NauticalOrderUpdateDeleteDiscount, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_update_delete_discount, attr, value)
    nautical_order_update_delete_discount.save()
    return nautical_order_update_delete_discount


@router.delete('/nautical_order_update_delete_discounts/{id}')
def delete_nautical_order_update_delete_discount(request, id: int):
    nautical_order_update_delete_discount = get_object_or_404(NauticalOrderUpdateDeleteDiscount, id=id)
    nautical_order_update_delete_discount.delete()
    return {'success': True}


# NauticalOrderReturnNotification endpoints
@router.get('/nautical_order_return_notifications', response=List[NauticalOrderReturnNotification])
@paginate
def list_nautical_order_return_notifications(request):
    return NauticalOrderReturnNotification.objects.all()


@router.get('/nautical_order_return_notifications/{id}', response=NauticalOrderReturnNotification)
def get_nautical_order_return_notification(request, id: int):
    return get_object_or_404(NauticalOrderReturnNotification, id=id)


@router.post('/nautical_order_return_notifications', response=NauticalOrderReturnNotification)
def create_nautical_order_return_notification(request, payload: NauticalOrderReturnNotificationCreate):
    data = payload.dict()
    nautical_order_return_notification = NauticalOrderReturnNotification.objects.create(**data)
    return nautical_order_return_notification


@router.put('/nautical_order_return_notifications/{id}', response=NauticalOrderReturnNotification)
def update_nautical_order_return_notification(request, id: int, payload: NauticalOrderReturnNotificationUpdate):
    nautical_order_return_notification = get_object_or_404(NauticalOrderReturnNotification, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_return_notification, attr, value)
    nautical_order_return_notification.save()
    return nautical_order_return_notification


@router.delete('/nautical_order_return_notifications/{id}')
def delete_nautical_order_return_notification(request, id: int):
    nautical_order_return_notification = get_object_or_404(NauticalOrderReturnNotification, id=id)
    nautical_order_return_notification.delete()
    return {'success': True}


# NauticalOrderReturnFromStorefrontNotification endpoints
@router.get('/nautical_order_return_from_storefront_notifications', response=List[NauticalOrderReturnFromStorefrontNotification])
@paginate
def list_nautical_order_return_from_storefront_notifications(request):
    return NauticalOrderReturnFromStorefrontNotification.objects.all()


@router.get('/nautical_order_return_from_storefront_notifications/{id}', response=NauticalOrderReturnFromStorefrontNotification)
def get_nautical_order_return_from_storefront_notification(request, id: int):
    return get_object_or_404(NauticalOrderReturnFromStorefrontNotification, id=id)


@router.post('/nautical_order_return_from_storefront_notifications', response=NauticalOrderReturnFromStorefrontNotification)
def create_nautical_order_return_from_storefront_notification(request, payload: NauticalOrderReturnFromStorefrontNotificationCreate):
    data = payload.dict()
    nautical_order_return_from_storefront_notification = NauticalOrderReturnFromStorefrontNotification.objects.create(**data)
    return nautical_order_return_from_storefront_notification


@router.put('/nautical_order_return_from_storefront_notifications/{id}', response=NauticalOrderReturnFromStorefrontNotification)
def update_nautical_order_return_from_storefront_notification(request, id: int, payload: NauticalOrderReturnFromStorefrontNotificationUpdate):
    nautical_order_return_from_storefront_notification = get_object_or_404(NauticalOrderReturnFromStorefrontNotification, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_return_from_storefront_notification, attr, value)
    nautical_order_return_from_storefront_notification.save()
    return nautical_order_return_from_storefront_notification


@router.delete('/nautical_order_return_from_storefront_notifications/{id}')
def delete_nautical_order_return_from_storefront_notification(request, id: int):
    nautical_order_return_from_storefront_notification = get_object_or_404(NauticalOrderReturnFromStorefrontNotification, id=id)
    nautical_order_return_from_storefront_notification.delete()
    return {'success': True}


# VendorOrderReturnFromStorefrontNotification endpoints
@router.get('/vendor_order_return_from_storefront_notifications', response=List[VendorOrderReturnFromStorefrontNotification])
@paginate
def list_vendor_order_return_from_storefront_notifications(request):
    return VendorOrderReturnFromStorefrontNotification.objects.all()


@router.get('/vendor_order_return_from_storefront_notifications/{id}', response=VendorOrderReturnFromStorefrontNotification)
def get_vendor_order_return_from_storefront_notification(request, id: int):
    return get_object_or_404(VendorOrderReturnFromStorefrontNotification, id=id)


@router.post('/vendor_order_return_from_storefront_notifications', response=VendorOrderReturnFromStorefrontNotification)
def create_vendor_order_return_from_storefront_notification(request, payload: VendorOrderReturnFromStorefrontNotificationCreate):
    data = payload.dict()
    vendor_order_return_from_storefront_notification = VendorOrderReturnFromStorefrontNotification.objects.create(**data)
    return vendor_order_return_from_storefront_notification


@router.put('/vendor_order_return_from_storefront_notifications/{id}', response=VendorOrderReturnFromStorefrontNotification)
def update_vendor_order_return_from_storefront_notification(request, id: int, payload: VendorOrderReturnFromStorefrontNotificationUpdate):
    vendor_order_return_from_storefront_notification = get_object_or_404(VendorOrderReturnFromStorefrontNotification, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_order_return_from_storefront_notification, attr, value)
    vendor_order_return_from_storefront_notification.save()
    return vendor_order_return_from_storefront_notification


@router.delete('/vendor_order_return_from_storefront_notifications/{id}')
def delete_vendor_order_return_from_storefront_notification(request, id: int):
    vendor_order_return_from_storefront_notification = get_object_or_404(VendorOrderReturnFromStorefrontNotification, id=id)
    vendor_order_return_from_storefront_notification.delete()
    return {'success': True}


# OrderCancel endpoints
@router.get('/order_cancels', response=List[OrderCancel])
@paginate
def list_order_cancels(request):
    return OrderCancel.objects.all()


@router.get('/order_cancels/{id}', response=OrderCancel)
def get_order_cancel(request, id: int):
    return get_object_or_404(OrderCancel, id=id)


@router.post('/order_cancels', response=OrderCancel)
def create_order_cancel(request, payload: OrderCancelCreate):
    data = payload.dict()
    order_cancel = OrderCancel.objects.create(**data)
    return order_cancel


@router.put('/order_cancels/{id}', response=OrderCancel)
def update_order_cancel(request, id: int, payload: OrderCancelUpdate):
    order_cancel = get_object_or_404(OrderCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_cancel, attr, value)
    order_cancel.save()
    return order_cancel


@router.delete('/order_cancels/{id}')
def delete_order_cancel(request, id: int):
    order_cancel = get_object_or_404(OrderCancel, id=id)
    order_cancel.delete()
    return {'success': True}


# NauticalOrderCancel endpoints
@router.get('/nautical_order_cancels', response=List[NauticalOrderCancel])
@paginate
def list_nautical_order_cancels(request):
    return NauticalOrderCancel.objects.all()


@router.get('/nautical_order_cancels/{id}', response=NauticalOrderCancel)
def get_nautical_order_cancel(request, id: int):
    return get_object_or_404(NauticalOrderCancel, id=id)


@router.post('/nautical_order_cancels', response=NauticalOrderCancel)
def create_nautical_order_cancel(request, payload: NauticalOrderCancelCreate):
    data = payload.dict()
    nautical_order_cancel = NauticalOrderCancel.objects.create(**data)
    return nautical_order_cancel


@router.put('/nautical_order_cancels/{id}', response=NauticalOrderCancel)
def update_nautical_order_cancel(request, id: int, payload: NauticalOrderCancelUpdate):
    nautical_order_cancel = get_object_or_404(NauticalOrderCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_cancel, attr, value)
    nautical_order_cancel.save()
    return nautical_order_cancel


@router.delete('/nautical_order_cancels/{id}')
def delete_nautical_order_cancel(request, id: int):
    nautical_order_cancel = get_object_or_404(NauticalOrderCancel, id=id)
    nautical_order_cancel.delete()
    return {'success': True}


# NauticalQuoteOrderCancel endpoints
@router.get('/nautical_quote_order_cancels', response=List[NauticalQuoteOrderCancel])
@paginate
def list_nautical_quote_order_cancels(request):
    return NauticalQuoteOrderCancel.objects.all()


@router.get('/nautical_quote_order_cancels/{id}', response=NauticalQuoteOrderCancel)
def get_nautical_quote_order_cancel(request, id: int):
    return get_object_or_404(NauticalQuoteOrderCancel, id=id)


@router.post('/nautical_quote_order_cancels', response=NauticalQuoteOrderCancel)
def create_nautical_quote_order_cancel(request, payload: NauticalQuoteOrderCancelCreate):
    data = payload.dict()
    nautical_quote_order_cancel = NauticalQuoteOrderCancel.objects.create(**data)
    return nautical_quote_order_cancel


@router.put('/nautical_quote_order_cancels/{id}', response=NauticalQuoteOrderCancel)
def update_nautical_quote_order_cancel(request, id: int, payload: NauticalQuoteOrderCancelUpdate):
    nautical_quote_order_cancel = get_object_or_404(NauticalQuoteOrderCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_quote_order_cancel, attr, value)
    nautical_quote_order_cancel.save()
    return nautical_quote_order_cancel


@router.delete('/nautical_quote_order_cancels/{id}')
def delete_nautical_quote_order_cancel(request, id: int):
    nautical_quote_order_cancel = get_object_or_404(NauticalQuoteOrderCancel, id=id)
    nautical_quote_order_cancel.delete()
    return {'success': True}


# NauticalOrderCapture endpoints
@router.get('/nautical_order_captures', response=List[NauticalOrderCapture])
@paginate
def list_nautical_order_captures(request):
    return NauticalOrderCapture.objects.all()


@router.get('/nautical_order_captures/{id}', response=NauticalOrderCapture)
def get_nautical_order_capture(request, id: int):
    return get_object_or_404(NauticalOrderCapture, id=id)


@router.post('/nautical_order_captures', response=NauticalOrderCapture)
def create_nautical_order_capture(request, payload: NauticalOrderCaptureCreate):
    data = payload.dict()
    nautical_order_capture = NauticalOrderCapture.objects.create(**data)
    return nautical_order_capture


@router.put('/nautical_order_captures/{id}', response=NauticalOrderCapture)
def update_nautical_order_capture(request, id: int, payload: NauticalOrderCaptureUpdate):
    nautical_order_capture = get_object_or_404(NauticalOrderCapture, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_capture, attr, value)
    nautical_order_capture.save()
    return nautical_order_capture


@router.delete('/nautical_order_captures/{id}')
def delete_nautical_order_capture(request, id: int):
    nautical_order_capture = get_object_or_404(NauticalOrderCapture, id=id)
    nautical_order_capture.delete()
    return {'success': True}


# OrderFulfill endpoints
@router.get('/order_fulfills', response=List[OrderFulfill])
@paginate
def list_order_fulfills(request):
    return OrderFulfill.objects.all()


@router.get('/order_fulfills/{id}', response=OrderFulfill)
def get_order_fulfill(request, id: int):
    return get_object_or_404(OrderFulfill, id=id)


@router.post('/order_fulfills', response=OrderFulfill)
def create_order_fulfill(request, payload: OrderFulfillCreate):
    data = payload.dict()
    order_fulfill = OrderFulfill.objects.create(**data)
    return order_fulfill


@router.put('/order_fulfills/{id}', response=OrderFulfill)
def update_order_fulfill(request, id: int, payload: OrderFulfillUpdate):
    order_fulfill = get_object_or_404(OrderFulfill, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_fulfill, attr, value)
    order_fulfill.save()
    return order_fulfill


@router.delete('/order_fulfills/{id}')
def delete_order_fulfill(request, id: int):
    order_fulfill = get_object_or_404(OrderFulfill, id=id)
    order_fulfill.delete()
    return {'success': True}


# OrderDeclineFulfillment endpoints
@router.get('/order_decline_fulfillments', response=List[OrderDeclineFulfillment])
@paginate
def list_order_decline_fulfillments(request):
    return OrderDeclineFulfillment.objects.all()


@router.get('/order_decline_fulfillments/{id}', response=OrderDeclineFulfillment)
def get_order_decline_fulfillment(request, id: int):
    return get_object_or_404(OrderDeclineFulfillment, id=id)


@router.post('/order_decline_fulfillments', response=OrderDeclineFulfillment)
def create_order_decline_fulfillment(request, payload: OrderDeclineFulfillmentCreate):
    data = payload.dict()
    order_decline_fulfillment = OrderDeclineFulfillment.objects.create(**data)
    return order_decline_fulfillment


@router.put('/order_decline_fulfillments/{id}', response=OrderDeclineFulfillment)
def update_order_decline_fulfillment(request, id: int, payload: OrderDeclineFulfillmentUpdate):
    order_decline_fulfillment = get_object_or_404(OrderDeclineFulfillment, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_decline_fulfillment, attr, value)
    order_decline_fulfillment.save()
    return order_decline_fulfillment


@router.delete('/order_decline_fulfillments/{id}')
def delete_order_decline_fulfillment(request, id: int):
    order_decline_fulfillment = get_object_or_404(OrderDeclineFulfillment, id=id)
    order_decline_fulfillment.delete()
    return {'success': True}


# FulfillmentCancel endpoints
@router.get('/fulfillment_cancels', response=List[FulfillmentCancel])
@paginate
def list_fulfillment_cancels(request):
    return FulfillmentCancel.objects.all()


@router.get('/fulfillment_cancels/{id}', response=FulfillmentCancel)
def get_fulfillment_cancel(request, id: int):
    return get_object_or_404(FulfillmentCancel, id=id)


@router.post('/fulfillment_cancels', response=FulfillmentCancel)
def create_fulfillment_cancel(request, payload: FulfillmentCancelCreate):
    data = payload.dict()
    fulfillment_cancel = FulfillmentCancel.objects.create(**data)
    return fulfillment_cancel


@router.put('/fulfillment_cancels/{id}', response=FulfillmentCancel)
def update_fulfillment_cancel(request, id: int, payload: FulfillmentCancelUpdate):
    fulfillment_cancel = get_object_or_404(FulfillmentCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_cancel, attr, value)
    fulfillment_cancel.save()
    return fulfillment_cancel


@router.delete('/fulfillment_cancels/{id}')
def delete_fulfillment_cancel(request, id: int):
    fulfillment_cancel = get_object_or_404(FulfillmentCancel, id=id)
    fulfillment_cancel.delete()
    return {'success': True}


# FulfillmentReturn endpoints
@router.get('/fulfillment_returns', response=List[FulfillmentReturn])
@paginate
def list_fulfillment_returns(request):
    return FulfillmentReturn.objects.all()


@router.get('/fulfillment_returns/{id}', response=FulfillmentReturn)
def get_fulfillment_return(request, id: int):
    return get_object_or_404(FulfillmentReturn, id=id)


@router.post('/fulfillment_returns', response=FulfillmentReturn)
def create_fulfillment_return(request, payload: FulfillmentReturnCreate):
    data = payload.dict()
    fulfillment_return = FulfillmentReturn.objects.create(**data)
    return fulfillment_return


@router.put('/fulfillment_returns/{id}', response=FulfillmentReturn)
def update_fulfillment_return(request, id: int, payload: FulfillmentReturnUpdate):
    fulfillment_return = get_object_or_404(FulfillmentReturn, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_return, attr, value)
    fulfillment_return.save()
    return fulfillment_return


@router.delete('/fulfillment_returns/{id}')
def delete_fulfillment_return(request, id: int):
    fulfillment_return = get_object_or_404(FulfillmentReturn, id=id)
    fulfillment_return.delete()
    return {'success': True}


# FulfillmentUpdateTracking endpoints
@router.get('/fulfillment_update_trackings', response=List[FulfillmentUpdateTracking])
@paginate
def list_fulfillment_update_trackings(request):
    return FulfillmentUpdateTracking.objects.all()


@router.get('/fulfillment_update_trackings/{id}', response=FulfillmentUpdateTracking)
def get_fulfillment_update_tracking(request, id: int):
    return get_object_or_404(FulfillmentUpdateTracking, id=id)


@router.post('/fulfillment_update_trackings', response=FulfillmentUpdateTracking)
def create_fulfillment_update_tracking(request, payload: FulfillmentUpdateTrackingCreate):
    data = payload.dict()
    fulfillment_update_tracking = FulfillmentUpdateTracking.objects.create(**data)
    return fulfillment_update_tracking


@router.put('/fulfillment_update_trackings/{id}', response=FulfillmentUpdateTracking)
def update_fulfillment_update_tracking(request, id: int, payload: FulfillmentUpdateTrackingUpdate):
    fulfillment_update_tracking = get_object_or_404(FulfillmentUpdateTracking, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_update_tracking, attr, value)
    fulfillment_update_tracking.save()
    return fulfillment_update_tracking


@router.delete('/fulfillment_update_trackings/{id}')
def delete_fulfillment_update_tracking(request, id: int):
    fulfillment_update_tracking = get_object_or_404(FulfillmentUpdateTracking, id=id)
    fulfillment_update_tracking.delete()
    return {'success': True}


# FulfillmentReturnStatusBulkUpdate endpoints
@router.get('/fulfillment_return_status_bulk_updates', response=List[FulfillmentReturnStatusBulkUpdate])
@paginate
def list_fulfillment_return_status_bulk_updates(request):
    return FulfillmentReturnStatusBulkUpdate.objects.all()


@router.get('/fulfillment_return_status_bulk_updates/{id}', response=FulfillmentReturnStatusBulkUpdate)
def get_fulfillment_return_status_bulk_update(request, id: int):
    return get_object_or_404(FulfillmentReturnStatusBulkUpdate, id=id)


@router.post('/fulfillment_return_status_bulk_updates', response=FulfillmentReturnStatusBulkUpdate)
def create_fulfillment_return_status_bulk_update(request, payload: FulfillmentReturnStatusBulkUpdateCreate):
    data = payload.dict()
    fulfillment_return_status_bulk_update = FulfillmentReturnStatusBulkUpdate.objects.create(**data)
    return fulfillment_return_status_bulk_update


@router.put('/fulfillment_return_status_bulk_updates/{id}', response=FulfillmentReturnStatusBulkUpdate)
def update_fulfillment_return_status_bulk_update(request, id: int, payload: FulfillmentReturnStatusBulkUpdateUpdate):
    fulfillment_return_status_bulk_update = get_object_or_404(FulfillmentReturnStatusBulkUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_return_status_bulk_update, attr, value)
    fulfillment_return_status_bulk_update.save()
    return fulfillment_return_status_bulk_update


@router.delete('/fulfillment_return_status_bulk_updates/{id}')
def delete_fulfillment_return_status_bulk_update(request, id: int):
    fulfillment_return_status_bulk_update = get_object_or_404(FulfillmentReturnStatusBulkUpdate, id=id)
    fulfillment_return_status_bulk_update.delete()
    return {'success': True}


# FulfillmentBulkReturn endpoints
@router.get('/fulfillment_bulk_returns', response=List[FulfillmentBulkReturn])
@paginate
def list_fulfillment_bulk_returns(request):
    return FulfillmentBulkReturn.objects.all()


@router.get('/fulfillment_bulk_returns/{id}', response=FulfillmentBulkReturn)
def get_fulfillment_bulk_return(request, id: int):
    return get_object_or_404(FulfillmentBulkReturn, id=id)


@router.post('/fulfillment_bulk_returns', response=FulfillmentBulkReturn)
def create_fulfillment_bulk_return(request, payload: FulfillmentBulkReturnCreate):
    data = payload.dict()
    fulfillment_bulk_return = FulfillmentBulkReturn.objects.create(**data)
    return fulfillment_bulk_return


@router.put('/fulfillment_bulk_returns/{id}', response=FulfillmentBulkReturn)
def update_fulfillment_bulk_return(request, id: int, payload: FulfillmentBulkReturnUpdate):
    fulfillment_bulk_return = get_object_or_404(FulfillmentBulkReturn, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(fulfillment_bulk_return, attr, value)
    fulfillment_bulk_return.save()
    return fulfillment_bulk_return


@router.delete('/fulfillment_bulk_returns/{id}')
def delete_fulfillment_bulk_return(request, id: int):
    fulfillment_bulk_return = get_object_or_404(FulfillmentBulkReturn, id=id)
    fulfillment_bulk_return.delete()
    return {'success': True}


# OrderMarkAsDelivered endpoints
@router.get('/order_mark_as_delivereds', response=List[OrderMarkAsDelivered])
@paginate
def list_order_mark_as_delivereds(request):
    return OrderMarkAsDelivered.objects.all()


@router.get('/order_mark_as_delivereds/{id}', response=OrderMarkAsDelivered)
def get_order_mark_as_delivered(request, id: int):
    return get_object_or_404(OrderMarkAsDelivered, id=id)


@router.post('/order_mark_as_delivereds', response=OrderMarkAsDelivered)
def create_order_mark_as_delivered(request, payload: OrderMarkAsDeliveredCreate):
    data = payload.dict()
    order_mark_as_delivered = OrderMarkAsDelivered.objects.create(**data)
    return order_mark_as_delivered


@router.put('/order_mark_as_delivereds/{id}', response=OrderMarkAsDelivered)
def update_order_mark_as_delivered(request, id: int, payload: OrderMarkAsDeliveredUpdate):
    order_mark_as_delivered = get_object_or_404(OrderMarkAsDelivered, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_mark_as_delivered, attr, value)
    order_mark_as_delivered.save()
    return order_mark_as_delivered


@router.delete('/order_mark_as_delivereds/{id}')
def delete_order_mark_as_delivered(request, id: int):
    order_mark_as_delivered = get_object_or_404(OrderMarkAsDelivered, id=id)
    order_mark_as_delivered.delete()
    return {'success': True}


# NauticalOrderMarkAsPaid endpoints
@router.get('/nautical_order_mark_as_paids', response=List[NauticalOrderMarkAsPaid])
@paginate
def list_nautical_order_mark_as_paids(request):
    return NauticalOrderMarkAsPaid.objects.all()


@router.get('/nautical_order_mark_as_paids/{id}', response=NauticalOrderMarkAsPaid)
def get_nautical_order_mark_as_paid(request, id: int):
    return get_object_or_404(NauticalOrderMarkAsPaid, id=id)


@router.post('/nautical_order_mark_as_paids', response=NauticalOrderMarkAsPaid)
def create_nautical_order_mark_as_paid(request, payload: NauticalOrderMarkAsPaidCreate):
    data = payload.dict()
    nautical_order_mark_as_paid = NauticalOrderMarkAsPaid.objects.create(**data)
    return nautical_order_mark_as_paid


@router.put('/nautical_order_mark_as_paids/{id}', response=NauticalOrderMarkAsPaid)
def update_nautical_order_mark_as_paid(request, id: int, payload: NauticalOrderMarkAsPaidUpdate):
    nautical_order_mark_as_paid = get_object_or_404(NauticalOrderMarkAsPaid, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_mark_as_paid, attr, value)
    nautical_order_mark_as_paid.save()
    return nautical_order_mark_as_paid


@router.delete('/nautical_order_mark_as_paids/{id}')
def delete_nautical_order_mark_as_paid(request, id: int):
    nautical_order_mark_as_paid = get_object_or_404(NauticalOrderMarkAsPaid, id=id)
    nautical_order_mark_as_paid.delete()
    return {'success': True}


# OrderUpdate endpoints
@router.get('/order_updates', response=List[OrderUpdate])
@paginate
def list_order_updates(request):
    return OrderUpdate.objects.all()


@router.get('/order_updates/{id}', response=OrderUpdate)
def get_order_update(request, id: int):
    return get_object_or_404(OrderUpdate, id=id)


@router.post('/order_updates', response=OrderUpdate)
def create_order_update(request, payload: OrderUpdateCreate):
    data = payload.dict()
    order_update = OrderUpdate.objects.create(**data)
    return order_update


@router.put('/order_updates/{id}', response=OrderUpdate)
def update_order_update(request, id: int, payload: OrderUpdateUpdate):
    order_update = get_object_or_404(OrderUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_update, attr, value)
    order_update.save()
    return order_update


@router.delete('/order_updates/{id}')
def delete_order_update(request, id: int):
    order_update = get_object_or_404(OrderUpdate, id=id)
    order_update.delete()
    return {'success': True}


# NauticalOrderUpdate endpoints
@router.get('/nautical_order_updates', response=List[NauticalOrderUpdate])
@paginate
def list_nautical_order_updates(request):
    return NauticalOrderUpdate.objects.all()


@router.get('/nautical_order_updates/{id}', response=NauticalOrderUpdate)
def get_nautical_order_update(request, id: int):
    return get_object_or_404(NauticalOrderUpdate, id=id)


@router.post('/nautical_order_updates', response=NauticalOrderUpdate)
def create_nautical_order_update(request, payload: NauticalOrderUpdateCreate):
    data = payload.dict()
    nautical_order_update = NauticalOrderUpdate.objects.create(**data)
    return nautical_order_update


@router.put('/nautical_order_updates/{id}', response=NauticalOrderUpdate)
def update_nautical_order_update(request, id: int, payload: NauticalOrderUpdateUpdate):
    nautical_order_update = get_object_or_404(NauticalOrderUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_update, attr, value)
    nautical_order_update.save()
    return nautical_order_update


@router.delete('/nautical_order_updates/{id}')
def delete_nautical_order_update(request, id: int):
    nautical_order_update = get_object_or_404(NauticalOrderUpdate, id=id)
    nautical_order_update.delete()
    return {'success': True}


# OrderPayoutStatusUpdate endpoints
@router.get('/order_payout_status_updates', response=List[OrderPayoutStatusUpdate])
@paginate
def list_order_payout_status_updates(request):
    return OrderPayoutStatusUpdate.objects.all()


@router.get('/order_payout_status_updates/{id}', response=OrderPayoutStatusUpdate)
def get_order_payout_status_update(request, id: int):
    return get_object_or_404(OrderPayoutStatusUpdate, id=id)


@router.post('/order_payout_status_updates', response=OrderPayoutStatusUpdate)
def create_order_payout_status_update(request, payload: OrderPayoutStatusUpdateCreate):
    data = payload.dict()
    order_payout_status_update = OrderPayoutStatusUpdate.objects.create(**data)
    return order_payout_status_update


@router.put('/order_payout_status_updates/{id}', response=OrderPayoutStatusUpdate)
def update_order_payout_status_update(request, id: int, payload: OrderPayoutStatusUpdateUpdate):
    order_payout_status_update = get_object_or_404(OrderPayoutStatusUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_payout_status_update, attr, value)
    order_payout_status_update.save()
    return order_payout_status_update


@router.delete('/order_payout_status_updates/{id}')
def delete_order_payout_status_update(request, id: int):
    order_payout_status_update = get_object_or_404(OrderPayoutStatusUpdate, id=id)
    order_payout_status_update.delete()
    return {'success': True}


# OrderUpdateShipping endpoints
@router.get('/order_update_shippings', response=List[OrderUpdateShipping])
@paginate
def list_order_update_shippings(request):
    return OrderUpdateShipping.objects.all()


@router.get('/order_update_shippings/{id}', response=OrderUpdateShipping)
def get_order_update_shipping(request, id: int):
    return get_object_or_404(OrderUpdateShipping, id=id)


@router.post('/order_update_shippings', response=OrderUpdateShipping)
def create_order_update_shipping(request, payload: OrderUpdateShippingCreate):
    data = payload.dict()
    order_update_shipping = OrderUpdateShipping.objects.create(**data)
    return order_update_shipping


@router.put('/order_update_shippings/{id}', response=OrderUpdateShipping)
def update_order_update_shipping(request, id: int, payload: OrderUpdateShippingUpdate):
    order_update_shipping = get_object_or_404(OrderUpdateShipping, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_update_shipping, attr, value)
    order_update_shipping.save()
    return order_update_shipping


@router.delete('/order_update_shippings/{id}')
def delete_order_update_shipping(request, id: int):
    order_update_shipping = get_object_or_404(OrderUpdateShipping, id=id)
    order_update_shipping.delete()
    return {'success': True}


# NauticalOrderUpdateShipping endpoints
@router.get('/nautical_order_update_shippings', response=List[NauticalOrderUpdateShipping])
@paginate
def list_nautical_order_update_shippings(request):
    return NauticalOrderUpdateShipping.objects.all()


@router.get('/nautical_order_update_shippings/{id}', response=NauticalOrderUpdateShipping)
def get_nautical_order_update_shipping(request, id: int):
    return get_object_or_404(NauticalOrderUpdateShipping, id=id)


@router.post('/nautical_order_update_shippings', response=NauticalOrderUpdateShipping)
def create_nautical_order_update_shipping(request, payload: NauticalOrderUpdateShippingCreate):
    data = payload.dict()
    nautical_order_update_shipping = NauticalOrderUpdateShipping.objects.create(**data)
    return nautical_order_update_shipping


@router.put('/nautical_order_update_shippings/{id}', response=NauticalOrderUpdateShipping)
def update_nautical_order_update_shipping(request, id: int, payload: NauticalOrderUpdateShippingUpdate):
    nautical_order_update_shipping = get_object_or_404(NauticalOrderUpdateShipping, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_update_shipping, attr, value)
    nautical_order_update_shipping.save()
    return nautical_order_update_shipping


@router.delete('/nautical_order_update_shippings/{id}')
def delete_nautical_order_update_shipping(request, id: int):
    nautical_order_update_shipping = get_object_or_404(NauticalOrderUpdateShipping, id=id)
    nautical_order_update_shipping.delete()
    return {'success': True}


# NauticalOrderUpdateMarketplaceShipping endpoints
@router.get('/nautical_order_update_marketplace_shippings', response=List[NauticalOrderUpdateMarketplaceShipping])
@paginate
def list_nautical_order_update_marketplace_shippings(request):
    return NauticalOrderUpdateMarketplaceShipping.objects.all()


@router.get('/nautical_order_update_marketplace_shippings/{id}', response=NauticalOrderUpdateMarketplaceShipping)
def get_nautical_order_update_marketplace_shipping(request, id: int):
    return get_object_or_404(NauticalOrderUpdateMarketplaceShipping, id=id)


@router.post('/nautical_order_update_marketplace_shippings', response=NauticalOrderUpdateMarketplaceShipping)
def create_nautical_order_update_marketplace_shipping(request, payload: NauticalOrderUpdateMarketplaceShippingCreate):
    data = payload.dict()
    nautical_order_update_marketplace_shipping = NauticalOrderUpdateMarketplaceShipping.objects.create(**data)
    return nautical_order_update_marketplace_shipping


@router.put('/nautical_order_update_marketplace_shippings/{id}', response=NauticalOrderUpdateMarketplaceShipping)
def update_nautical_order_update_marketplace_shipping(request, id: int, payload: NauticalOrderUpdateMarketplaceShippingUpdate):
    nautical_order_update_marketplace_shipping = get_object_or_404(NauticalOrderUpdateMarketplaceShipping, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_update_marketplace_shipping, attr, value)
    nautical_order_update_marketplace_shipping.save()
    return nautical_order_update_marketplace_shipping


@router.delete('/nautical_order_update_marketplace_shippings/{id}')
def delete_nautical_order_update_marketplace_shipping(request, id: int):
    nautical_order_update_marketplace_shipping = get_object_or_404(NauticalOrderUpdateMarketplaceShipping, id=id)
    nautical_order_update_marketplace_shipping.delete()
    return {'success': True}


# NauticalOrderVoid endpoints
@router.get('/nautical_order_voids', response=List[NauticalOrderVoid])
@paginate
def list_nautical_order_voids(request):
    return NauticalOrderVoid.objects.all()


@router.get('/nautical_order_voids/{id}', response=NauticalOrderVoid)
def get_nautical_order_void(request, id: int):
    return get_object_or_404(NauticalOrderVoid, id=id)


@router.post('/nautical_order_voids', response=NauticalOrderVoid)
def create_nautical_order_void(request, payload: NauticalOrderVoidCreate):
    data = payload.dict()
    nautical_order_void = NauticalOrderVoid.objects.create(**data)
    return nautical_order_void


@router.put('/nautical_order_voids/{id}', response=NauticalOrderVoid)
def update_nautical_order_void(request, id: int, payload: NauticalOrderVoidUpdate):
    nautical_order_void = get_object_or_404(NauticalOrderVoid, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_void, attr, value)
    nautical_order_void.save()
    return nautical_order_void


@router.delete('/nautical_order_voids/{id}')
def delete_nautical_order_void(request, id: int):
    nautical_order_void = get_object_or_404(NauticalOrderVoid, id=id)
    nautical_order_void.delete()
    return {'success': True}


# OrderBulkCancel endpoints
@router.get('/order_bulk_cancels', response=List[OrderBulkCancel])
@paginate
def list_order_bulk_cancels(request):
    return OrderBulkCancel.objects.all()


@router.get('/order_bulk_cancels/{id}', response=OrderBulkCancel)
def get_order_bulk_cancel(request, id: int):
    return get_object_or_404(OrderBulkCancel, id=id)


@router.post('/order_bulk_cancels', response=OrderBulkCancel)
def create_order_bulk_cancel(request, payload: OrderBulkCancelCreate):
    data = payload.dict()
    order_bulk_cancel = OrderBulkCancel.objects.create(**data)
    return order_bulk_cancel


@router.put('/order_bulk_cancels/{id}', response=OrderBulkCancel)
def update_order_bulk_cancel(request, id: int, payload: OrderBulkCancelUpdate):
    order_bulk_cancel = get_object_or_404(OrderBulkCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_bulk_cancel, attr, value)
    order_bulk_cancel.save()
    return order_bulk_cancel


@router.delete('/order_bulk_cancels/{id}')
def delete_order_bulk_cancel(request, id: int):
    order_bulk_cancel = get_object_or_404(OrderBulkCancel, id=id)
    order_bulk_cancel.delete()
    return {'success': True}


# NauticalOrderLineBulkCancel endpoints
@router.get('/nautical_order_line_bulk_cancels', response=List[NauticalOrderLineBulkCancel])
@paginate
def list_nautical_order_line_bulk_cancels(request):
    return NauticalOrderLineBulkCancel.objects.all()


@router.get('/nautical_order_line_bulk_cancels/{id}', response=NauticalOrderLineBulkCancel)
def get_nautical_order_line_bulk_cancel(request, id: int):
    return get_object_or_404(NauticalOrderLineBulkCancel, id=id)


@router.post('/nautical_order_line_bulk_cancels', response=NauticalOrderLineBulkCancel)
def create_nautical_order_line_bulk_cancel(request, payload: NauticalOrderLineBulkCancelCreate):
    data = payload.dict()
    nautical_order_line_bulk_cancel = NauticalOrderLineBulkCancel.objects.create(**data)
    return nautical_order_line_bulk_cancel


@router.put('/nautical_order_line_bulk_cancels/{id}', response=NauticalOrderLineBulkCancel)
def update_nautical_order_line_bulk_cancel(request, id: int, payload: NauticalOrderLineBulkCancelUpdate):
    nautical_order_line_bulk_cancel = get_object_or_404(NauticalOrderLineBulkCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_line_bulk_cancel, attr, value)
    nautical_order_line_bulk_cancel.save()
    return nautical_order_line_bulk_cancel


@router.delete('/nautical_order_line_bulk_cancels/{id}')
def delete_nautical_order_line_bulk_cancel(request, id: int):
    nautical_order_line_bulk_cancel = get_object_or_404(NauticalOrderLineBulkCancel, id=id)
    nautical_order_line_bulk_cancel.delete()
    return {'success': True}


# NauticalOrderPaymentCreate endpoints
@router.get('/nautical_order_payment_creates', response=List[NauticalOrderPaymentCreate])
@paginate
def list_nautical_order_payment_creates(request):
    return NauticalOrderPaymentCreate.objects.all()


@router.get('/nautical_order_payment_creates/{id}', response=NauticalOrderPaymentCreate)
def get_nautical_order_payment_create(request, id: int):
    return get_object_or_404(NauticalOrderPaymentCreate, id=id)


@router.post('/nautical_order_payment_creates', response=NauticalOrderPaymentCreate)
def create_nautical_order_payment_create(request, payload: NauticalOrderPaymentCreateCreate):
    data = payload.dict()
    nautical_order_payment_create = NauticalOrderPaymentCreate.objects.create(**data)
    return nautical_order_payment_create


@router.put('/nautical_order_payment_creates/{id}', response=NauticalOrderPaymentCreate)
def update_nautical_order_payment_create(request, id: int, payload: NauticalOrderPaymentCreateUpdate):
    nautical_order_payment_create = get_object_or_404(NauticalOrderPaymentCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_payment_create, attr, value)
    nautical_order_payment_create.save()
    return nautical_order_payment_create


@router.delete('/nautical_order_payment_creates/{id}')
def delete_nautical_order_payment_create(request, id: int):
    nautical_order_payment_create = get_object_or_404(NauticalOrderPaymentCreate, id=id)
    nautical_order_payment_create.delete()
    return {'success': True}


# NauticalQuoteOrderSendToCustomer endpoints
@router.get('/nautical_quote_order_send_to_customers', response=List[NauticalQuoteOrderSendToCustomer])
@paginate
def list_nautical_quote_order_send_to_customers(request):
    return NauticalQuoteOrderSendToCustomer.objects.all()


@router.get('/nautical_quote_order_send_to_customers/{id}', response=NauticalQuoteOrderSendToCustomer)
def get_nautical_quote_order_send_to_customer(request, id: int):
    return get_object_or_404(NauticalQuoteOrderSendToCustomer, id=id)


@router.post('/nautical_quote_order_send_to_customers', response=NauticalQuoteOrderSendToCustomer)
def create_nautical_quote_order_send_to_customer(request, payload: NauticalQuoteOrderSendToCustomerCreate):
    data = payload.dict()
    nautical_quote_order_send_to_customer = NauticalQuoteOrderSendToCustomer.objects.create(**data)
    return nautical_quote_order_send_to_customer


@router.put('/nautical_quote_order_send_to_customers/{id}', response=NauticalQuoteOrderSendToCustomer)
def update_nautical_quote_order_send_to_customer(request, id: int, payload: NauticalQuoteOrderSendToCustomerUpdate):
    nautical_quote_order_send_to_customer = get_object_or_404(NauticalQuoteOrderSendToCustomer, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_quote_order_send_to_customer, attr, value)
    nautical_quote_order_send_to_customer.save()
    return nautical_quote_order_send_to_customer


@router.delete('/nautical_quote_order_send_to_customers/{id}')
def delete_nautical_quote_order_send_to_customer(request, id: int):
    nautical_quote_order_send_to_customer = get_object_or_404(NauticalQuoteOrderSendToCustomer, id=id)
    nautical_quote_order_send_to_customer.delete()
    return {'success': True}


# OrderFeeCreate endpoints
@router.get('/order_fee_creates', response=List[OrderFeeCreate])
@paginate
def list_order_fee_creates(request):
    return OrderFeeCreate.objects.all()


@router.get('/order_fee_creates/{id}', response=OrderFeeCreate)
def get_order_fee_create(request, id: int):
    return get_object_or_404(OrderFeeCreate, id=id)


@router.post('/order_fee_creates', response=OrderFeeCreate)
def create_order_fee_create(request, payload: OrderFeeCreateCreate):
    data = payload.dict()
    order_fee_create = OrderFeeCreate.objects.create(**data)
    return order_fee_create


@router.put('/order_fee_creates/{id}', response=OrderFeeCreate)
def update_order_fee_create(request, id: int, payload: OrderFeeCreateUpdate):
    order_fee_create = get_object_or_404(OrderFeeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_fee_create, attr, value)
    order_fee_create.save()
    return order_fee_create


@router.delete('/order_fee_creates/{id}')
def delete_order_fee_create(request, id: int):
    order_fee_create = get_object_or_404(OrderFeeCreate, id=id)
    order_fee_create.delete()
    return {'success': True}


# OrderFeeDelete endpoints
@router.get('/order_fee_deletes', response=List[OrderFeeDelete])
@paginate
def list_order_fee_deletes(request):
    return OrderFeeDelete.objects.all()


@router.get('/order_fee_deletes/{id}', response=OrderFeeDelete)
def get_order_fee_delete(request, id: int):
    return get_object_or_404(OrderFeeDelete, id=id)


@router.post('/order_fee_deletes', response=OrderFeeDelete)
def create_order_fee_delete(request, payload: OrderFeeDeleteCreate):
    data = payload.dict()
    order_fee_delete = OrderFeeDelete.objects.create(**data)
    return order_fee_delete


@router.put('/order_fee_deletes/{id}', response=OrderFeeDelete)
def update_order_fee_delete(request, id: int, payload: OrderFeeDeleteUpdate):
    order_fee_delete = get_object_or_404(OrderFeeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_fee_delete, attr, value)
    order_fee_delete.save()
    return order_fee_delete


@router.delete('/order_fee_deletes/{id}')
def delete_order_fee_delete(request, id: int):
    order_fee_delete = get_object_or_404(OrderFeeDelete, id=id)
    order_fee_delete.delete()
    return {'success': True}


# NauticalOrderLinesCsvUpload endpoints
@router.get('/nautical_order_lines_csv_uploads', response=List[NauticalOrderLinesCsvUpload])
@paginate
def list_nautical_order_lines_csv_uploads(request):
    return NauticalOrderLinesCsvUpload.objects.all()


@router.get('/nautical_order_lines_csv_uploads/{id}', response=NauticalOrderLinesCsvUpload)
def get_nautical_order_lines_csv_upload(request, id: int):
    return get_object_or_404(NauticalOrderLinesCsvUpload, id=id)


@router.post('/nautical_order_lines_csv_uploads', response=NauticalOrderLinesCsvUpload)
def create_nautical_order_lines_csv_upload(request, payload: NauticalOrderLinesCsvUploadCreate):
    data = payload.dict()
    nautical_order_lines_csv_upload = NauticalOrderLinesCsvUpload.objects.create(**data)
    return nautical_order_lines_csv_upload


@router.put('/nautical_order_lines_csv_uploads/{id}', response=NauticalOrderLinesCsvUpload)
def update_nautical_order_lines_csv_upload(request, id: int, payload: NauticalOrderLinesCsvUploadUpdate):
    nautical_order_lines_csv_upload = get_object_or_404(NauticalOrderLinesCsvUpload, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(nautical_order_lines_csv_upload, attr, value)
    nautical_order_lines_csv_upload.save()
    return nautical_order_lines_csv_upload


@router.delete('/nautical_order_lines_csv_uploads/{id}')
def delete_nautical_order_lines_csv_upload(request, id: int):
    nautical_order_lines_csv_upload = get_object_or_404(NauticalOrderLinesCsvUpload, id=id)
    nautical_order_lines_csv_upload.delete()
    return {'success': True}


# ImportFile endpoints
@router.get('/import_files', response=List[ImportFile])
@paginate
def list_import_files(request):
    return ImportFile.objects.all()


@router.get('/import_files/{id}', response=ImportFile)
def get_import_file(request, id: int):
    return get_object_or_404(ImportFile, id=id)


@router.post('/import_files', response=ImportFile)
def create_import_file(request, payload: ImportFileCreate):
    data = payload.dict()
    import_file = ImportFile.objects.create(**data)
    return import_file


@router.put('/import_files/{id}', response=ImportFile)
def update_import_file(request, id: int, payload: ImportFileUpdate):
    import_file = get_object_or_404(ImportFile, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(import_file, attr, value)
    import_file.save()
    return import_file


@router.delete('/import_files/{id}')
def delete_import_file(request, id: int):
    import_file = get_object_or_404(ImportFile, id=id)
    import_file.delete()
    return {'success': True}


# ImportEvent endpoints
@router.get('/import_events', response=List[ImportEvent])
@paginate
def list_import_events(request):
    return ImportEvent.objects.all()


@router.get('/import_events/{id}', response=ImportEvent)
def get_import_event(request, id: int):
    return get_object_or_404(ImportEvent, id=id)


@router.post('/import_events', response=ImportEvent)
def create_import_event(request, payload: ImportEventCreate):
    data = payload.dict()
    import_event = ImportEvent.objects.create(**data)
    return import_event


@router.put('/import_events/{id}', response=ImportEvent)
def update_import_event(request, id: int, payload: ImportEventUpdate):
    import_event = get_object_or_404(ImportEvent, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(import_event, attr, value)
    import_event.save()
    return import_event


@router.delete('/import_events/{id}')
def delete_import_event(request, id: int):
    import_event = get_object_or_404(ImportEvent, id=id)
    import_event.delete()
    return {'success': True}


# OrderLinesCsvUpload endpoints
@router.get('/order_lines_csv_uploads', response=List[OrderLinesCsvUpload])
@paginate
def list_order_lines_csv_uploads(request):
    return OrderLinesCsvUpload.objects.all()


@router.get('/order_lines_csv_uploads/{id}', response=OrderLinesCsvUpload)
def get_order_lines_csv_upload(request, id: int):
    return get_object_or_404(OrderLinesCsvUpload, id=id)


@router.post('/order_lines_csv_uploads', response=OrderLinesCsvUpload)
def create_order_lines_csv_upload(request, payload: OrderLinesCsvUploadCreate):
    data = payload.dict()
    order_lines_csv_upload = OrderLinesCsvUpload.objects.create(**data)
    return order_lines_csv_upload


@router.put('/order_lines_csv_uploads/{id}', response=OrderLinesCsvUpload)
def update_order_lines_csv_upload(request, id: int, payload: OrderLinesCsvUploadUpdate):
    order_lines_csv_upload = get_object_or_404(OrderLinesCsvUpload, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(order_lines_csv_upload, attr, value)
    order_lines_csv_upload.save()
    return order_lines_csv_upload


@router.delete('/order_lines_csv_uploads/{id}')
def delete_order_lines_csv_upload(request, id: int):
    order_lines_csv_upload = get_object_or_404(OrderLinesCsvUpload, id=id)
    order_lines_csv_upload.delete()
    return {'success': True}


# MetadataDelete endpoints
@router.get('/metadata_deletes', response=List[MetadataDelete])
@paginate
def list_metadata_deletes(request):
    return MetadataDelete.objects.all()


@router.get('/metadata_deletes/{id}', response=MetadataDelete)
def get_metadata_delete(request, id: int):
    return get_object_or_404(MetadataDelete, id=id)


@router.post('/metadata_deletes', response=MetadataDelete)
def create_metadata_delete(request, payload: MetadataDeleteCreate):
    data = payload.dict()
    metadata_delete = MetadataDelete.objects.create(**data)
    return metadata_delete


@router.put('/metadata_deletes/{id}', response=MetadataDelete)
def update_metadata_delete(request, id: int, payload: MetadataDeleteUpdate):
    metadata_delete = get_object_or_404(MetadataDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(metadata_delete, attr, value)
    metadata_delete.save()
    return metadata_delete


@router.delete('/metadata_deletes/{id}')
def delete_metadata_delete(request, id: int):
    metadata_delete = get_object_or_404(MetadataDelete, id=id)
    metadata_delete.delete()
    return {'success': True}


# MetadataError endpoints
@router.get('/metadata_errors', response=List[MetadataError])
@paginate
def list_metadata_errors(request):
    return MetadataError.objects.all()


@router.get('/metadata_errors/{id}', response=MetadataError)
def get_metadata_error(request, id: int):
    return get_object_or_404(MetadataError, id=id)


@router.post('/metadata_errors', response=MetadataError)
def create_metadata_error(request, payload: MetadataErrorCreate):
    data = payload.dict()
    metadata_error = MetadataError.objects.create(**data)
    return metadata_error


@router.put('/metadata_errors/{id}', response=MetadataError)
def update_metadata_error(request, id: int, payload: MetadataErrorUpdate):
    metadata_error = get_object_or_404(MetadataError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(metadata_error, attr, value)
    metadata_error.save()
    return metadata_error


@router.delete('/metadata_errors/{id}')
def delete_metadata_error(request, id: int):
    metadata_error = get_object_or_404(MetadataError, id=id)
    metadata_error.delete()
    return {'success': True}


# PrivateMetadataDelete endpoints
@router.get('/private_metadata_deletes', response=List[PrivateMetadataDelete])
@paginate
def list_private_metadata_deletes(request):
    return PrivateMetadataDelete.objects.all()


@router.get('/private_metadata_deletes/{id}', response=PrivateMetadataDelete)
def get_private_metadata_delete(request, id: int):
    return get_object_or_404(PrivateMetadataDelete, id=id)


@router.post('/private_metadata_deletes', response=PrivateMetadataDelete)
def create_private_metadata_delete(request, payload: PrivateMetadataDeleteCreate):
    data = payload.dict()
    private_metadata_delete = PrivateMetadataDelete.objects.create(**data)
    return private_metadata_delete


@router.put('/private_metadata_deletes/{id}', response=PrivateMetadataDelete)
def update_private_metadata_delete(request, id: int, payload: PrivateMetadataDeleteUpdate):
    private_metadata_delete = get_object_or_404(PrivateMetadataDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(private_metadata_delete, attr, value)
    private_metadata_delete.save()
    return private_metadata_delete


@router.delete('/private_metadata_deletes/{id}')
def delete_private_metadata_delete(request, id: int):
    private_metadata_delete = get_object_or_404(PrivateMetadataDelete, id=id)
    private_metadata_delete.delete()
    return {'success': True}


# MetadataUpdate endpoints
@router.get('/metadata_updates', response=List[MetadataUpdate])
@paginate
def list_metadata_updates(request):
    return MetadataUpdate.objects.all()


@router.get('/metadata_updates/{id}', response=MetadataUpdate)
def get_metadata_update(request, id: int):
    return get_object_or_404(MetadataUpdate, id=id)


@router.post('/metadata_updates', response=MetadataUpdate)
def create_metadata_update(request, payload: MetadataUpdateCreate):
    data = payload.dict()
    metadata_update = MetadataUpdate.objects.create(**data)
    return metadata_update


@router.put('/metadata_updates/{id}', response=MetadataUpdate)
def update_metadata_update(request, id: int, payload: MetadataUpdateUpdate):
    metadata_update = get_object_or_404(MetadataUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(metadata_update, attr, value)
    metadata_update.save()
    return metadata_update


@router.delete('/metadata_updates/{id}')
def delete_metadata_update(request, id: int):
    metadata_update = get_object_or_404(MetadataUpdate, id=id)
    metadata_update.delete()
    return {'success': True}


# PrivateMetadataUpdate endpoints
@router.get('/private_metadata_updates', response=List[PrivateMetadataUpdate])
@paginate
def list_private_metadata_updates(request):
    return PrivateMetadataUpdate.objects.all()


@router.get('/private_metadata_updates/{id}', response=PrivateMetadataUpdate)
def get_private_metadata_update(request, id: int):
    return get_object_or_404(PrivateMetadataUpdate, id=id)


@router.post('/private_metadata_updates', response=PrivateMetadataUpdate)
def create_private_metadata_update(request, payload: PrivateMetadataUpdateCreate):
    data = payload.dict()
    private_metadata_update = PrivateMetadataUpdate.objects.create(**data)
    return private_metadata_update


@router.put('/private_metadata_updates/{id}', response=PrivateMetadataUpdate)
def update_private_metadata_update(request, id: int, payload: PrivateMetadataUpdateUpdate):
    private_metadata_update = get_object_or_404(PrivateMetadataUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(private_metadata_update, attr, value)
    private_metadata_update.save()
    return private_metadata_update


@router.delete('/private_metadata_updates/{id}')
def delete_private_metadata_update(request, id: int):
    private_metadata_update = get_object_or_404(PrivateMetadataUpdate, id=id)
    private_metadata_update.delete()
    return {'success': True}


# MenuCreate endpoints
@router.get('/menu_creates', response=List[MenuCreate])
@paginate
def list_menu_creates(request):
    return MenuCreate.objects.all()


@router.get('/menu_creates/{id}', response=MenuCreate)
def get_menu_create(request, id: int):
    return get_object_or_404(MenuCreate, id=id)


@router.post('/menu_creates', response=MenuCreate)
def create_menu_create(request, payload: MenuCreateCreate):
    data = payload.dict()
    menu_create = MenuCreate.objects.create(**data)
    return menu_create


@router.put('/menu_creates/{id}', response=MenuCreate)
def update_menu_create(request, id: int, payload: MenuCreateUpdate):
    menu_create = get_object_or_404(MenuCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_create, attr, value)
    menu_create.save()
    return menu_create


@router.delete('/menu_creates/{id}')
def delete_menu_create(request, id: int):
    menu_create = get_object_or_404(MenuCreate, id=id)
    menu_create.delete()
    return {'success': True}


# MenuError endpoints
@router.get('/menu_errors', response=List[MenuError])
@paginate
def list_menu_errors(request):
    return MenuError.objects.all()


@router.get('/menu_errors/{id}', response=MenuError)
def get_menu_error(request, id: int):
    return get_object_or_404(MenuError, id=id)


@router.post('/menu_errors', response=MenuError)
def create_menu_error(request, payload: MenuErrorCreate):
    data = payload.dict()
    menu_error = MenuError.objects.create(**data)
    return menu_error


@router.put('/menu_errors/{id}', response=MenuError)
def update_menu_error(request, id: int, payload: MenuErrorUpdate):
    menu_error = get_object_or_404(MenuError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_error, attr, value)
    menu_error.save()
    return menu_error


@router.delete('/menu_errors/{id}')
def delete_menu_error(request, id: int):
    menu_error = get_object_or_404(MenuError, id=id)
    menu_error.delete()
    return {'success': True}


# MenuDelete endpoints
@router.get('/menu_deletes', response=List[MenuDelete])
@paginate
def list_menu_deletes(request):
    return MenuDelete.objects.all()


@router.get('/menu_deletes/{id}', response=MenuDelete)
def get_menu_delete(request, id: int):
    return get_object_or_404(MenuDelete, id=id)


@router.post('/menu_deletes', response=MenuDelete)
def create_menu_delete(request, payload: MenuDeleteCreate):
    data = payload.dict()
    menu_delete = MenuDelete.objects.create(**data)
    return menu_delete


@router.put('/menu_deletes/{id}', response=MenuDelete)
def update_menu_delete(request, id: int, payload: MenuDeleteUpdate):
    menu_delete = get_object_or_404(MenuDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_delete, attr, value)
    menu_delete.save()
    return menu_delete


@router.delete('/menu_deletes/{id}')
def delete_menu_delete(request, id: int):
    menu_delete = get_object_or_404(MenuDelete, id=id)
    menu_delete.delete()
    return {'success': True}


# MenuBulkDelete endpoints
@router.get('/menu_bulk_deletes', response=List[MenuBulkDelete])
@paginate
def list_menu_bulk_deletes(request):
    return MenuBulkDelete.objects.all()


@router.get('/menu_bulk_deletes/{id}', response=MenuBulkDelete)
def get_menu_bulk_delete(request, id: int):
    return get_object_or_404(MenuBulkDelete, id=id)


@router.post('/menu_bulk_deletes', response=MenuBulkDelete)
def create_menu_bulk_delete(request, payload: MenuBulkDeleteCreate):
    data = payload.dict()
    menu_bulk_delete = MenuBulkDelete.objects.create(**data)
    return menu_bulk_delete


@router.put('/menu_bulk_deletes/{id}', response=MenuBulkDelete)
def update_menu_bulk_delete(request, id: int, payload: MenuBulkDeleteUpdate):
    menu_bulk_delete = get_object_or_404(MenuBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_bulk_delete, attr, value)
    menu_bulk_delete.save()
    return menu_bulk_delete


@router.delete('/menu_bulk_deletes/{id}')
def delete_menu_bulk_delete(request, id: int):
    menu_bulk_delete = get_object_or_404(MenuBulkDelete, id=id)
    menu_bulk_delete.delete()
    return {'success': True}


# MenuUpdate endpoints
@router.get('/menu_updates', response=List[MenuUpdate])
@paginate
def list_menu_updates(request):
    return MenuUpdate.objects.all()


@router.get('/menu_updates/{id}', response=MenuUpdate)
def get_menu_update(request, id: int):
    return get_object_or_404(MenuUpdate, id=id)


@router.post('/menu_updates', response=MenuUpdate)
def create_menu_update(request, payload: MenuUpdateCreate):
    data = payload.dict()
    menu_update = MenuUpdate.objects.create(**data)
    return menu_update


@router.put('/menu_updates/{id}', response=MenuUpdate)
def update_menu_update(request, id: int, payload: MenuUpdateUpdate):
    menu_update = get_object_or_404(MenuUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_update, attr, value)
    menu_update.save()
    return menu_update


@router.delete('/menu_updates/{id}')
def delete_menu_update(request, id: int):
    menu_update = get_object_or_404(MenuUpdate, id=id)
    menu_update.delete()
    return {'success': True}


# MenuItemCreate endpoints
@router.get('/menu_item_creates', response=List[MenuItemCreate])
@paginate
def list_menu_item_creates(request):
    return MenuItemCreate.objects.all()


@router.get('/menu_item_creates/{id}', response=MenuItemCreate)
def get_menu_item_create(request, id: int):
    return get_object_or_404(MenuItemCreate, id=id)


@router.post('/menu_item_creates', response=MenuItemCreate)
def create_menu_item_create(request, payload: MenuItemCreateCreate):
    data = payload.dict()
    menu_item_create = MenuItemCreate.objects.create(**data)
    return menu_item_create


@router.put('/menu_item_creates/{id}', response=MenuItemCreate)
def update_menu_item_create(request, id: int, payload: MenuItemCreateUpdate):
    menu_item_create = get_object_or_404(MenuItemCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_create, attr, value)
    menu_item_create.save()
    return menu_item_create


@router.delete('/menu_item_creates/{id}')
def delete_menu_item_create(request, id: int):
    menu_item_create = get_object_or_404(MenuItemCreate, id=id)
    menu_item_create.delete()
    return {'success': True}


# MenuItemDelete endpoints
@router.get('/menu_item_deletes', response=List[MenuItemDelete])
@paginate
def list_menu_item_deletes(request):
    return MenuItemDelete.objects.all()


@router.get('/menu_item_deletes/{id}', response=MenuItemDelete)
def get_menu_item_delete(request, id: int):
    return get_object_or_404(MenuItemDelete, id=id)


@router.post('/menu_item_deletes', response=MenuItemDelete)
def create_menu_item_delete(request, payload: MenuItemDeleteCreate):
    data = payload.dict()
    menu_item_delete = MenuItemDelete.objects.create(**data)
    return menu_item_delete


@router.put('/menu_item_deletes/{id}', response=MenuItemDelete)
def update_menu_item_delete(request, id: int, payload: MenuItemDeleteUpdate):
    menu_item_delete = get_object_or_404(MenuItemDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_delete, attr, value)
    menu_item_delete.save()
    return menu_item_delete


@router.delete('/menu_item_deletes/{id}')
def delete_menu_item_delete(request, id: int):
    menu_item_delete = get_object_or_404(MenuItemDelete, id=id)
    menu_item_delete.delete()
    return {'success': True}


# MenuItemBulkDelete endpoints
@router.get('/menu_item_bulk_deletes', response=List[MenuItemBulkDelete])
@paginate
def list_menu_item_bulk_deletes(request):
    return MenuItemBulkDelete.objects.all()


@router.get('/menu_item_bulk_deletes/{id}', response=MenuItemBulkDelete)
def get_menu_item_bulk_delete(request, id: int):
    return get_object_or_404(MenuItemBulkDelete, id=id)


@router.post('/menu_item_bulk_deletes', response=MenuItemBulkDelete)
def create_menu_item_bulk_delete(request, payload: MenuItemBulkDeleteCreate):
    data = payload.dict()
    menu_item_bulk_delete = MenuItemBulkDelete.objects.create(**data)
    return menu_item_bulk_delete


@router.put('/menu_item_bulk_deletes/{id}', response=MenuItemBulkDelete)
def update_menu_item_bulk_delete(request, id: int, payload: MenuItemBulkDeleteUpdate):
    menu_item_bulk_delete = get_object_or_404(MenuItemBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_bulk_delete, attr, value)
    menu_item_bulk_delete.save()
    return menu_item_bulk_delete


@router.delete('/menu_item_bulk_deletes/{id}')
def delete_menu_item_bulk_delete(request, id: int):
    menu_item_bulk_delete = get_object_or_404(MenuItemBulkDelete, id=id)
    menu_item_bulk_delete.delete()
    return {'success': True}


# MenuItemUpdate endpoints
@router.get('/menu_item_updates', response=List[MenuItemUpdate])
@paginate
def list_menu_item_updates(request):
    return MenuItemUpdate.objects.all()


@router.get('/menu_item_updates/{id}', response=MenuItemUpdate)
def get_menu_item_update(request, id: int):
    return get_object_or_404(MenuItemUpdate, id=id)


@router.post('/menu_item_updates', response=MenuItemUpdate)
def create_menu_item_update(request, payload: MenuItemUpdateCreate):
    data = payload.dict()
    menu_item_update = MenuItemUpdate.objects.create(**data)
    return menu_item_update


@router.put('/menu_item_updates/{id}', response=MenuItemUpdate)
def update_menu_item_update(request, id: int, payload: MenuItemUpdateUpdate):
    menu_item_update = get_object_or_404(MenuItemUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_update, attr, value)
    menu_item_update.save()
    return menu_item_update


@router.delete('/menu_item_updates/{id}')
def delete_menu_item_update(request, id: int):
    menu_item_update = get_object_or_404(MenuItemUpdate, id=id)
    menu_item_update.delete()
    return {'success': True}


# MenuItemMove endpoints
@router.get('/menu_item_moves', response=List[MenuItemMove])
@paginate
def list_menu_item_moves(request):
    return MenuItemMove.objects.all()


@router.get('/menu_item_moves/{id}', response=MenuItemMove)
def get_menu_item_move(request, id: int):
    return get_object_or_404(MenuItemMove, id=id)


@router.post('/menu_item_moves', response=MenuItemMove)
def create_menu_item_move(request, payload: MenuItemMoveCreate):
    data = payload.dict()
    menu_item_move = MenuItemMove.objects.create(**data)
    return menu_item_move


@router.put('/menu_item_moves/{id}', response=MenuItemMove)
def update_menu_item_move(request, id: int, payload: MenuItemMoveUpdate):
    menu_item_move = get_object_or_404(MenuItemMove, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(menu_item_move, attr, value)
    menu_item_move.save()
    return menu_item_move


@router.delete('/menu_item_moves/{id}')
def delete_menu_item_move(request, id: int):
    menu_item_move = get_object_or_404(MenuItemMove, id=id)
    menu_item_move.delete()
    return {'success': True}


# InvoiceRequest endpoints
@router.get('/invoice_requests', response=List[InvoiceRequest])
@paginate
def list_invoice_requests(request):
    return InvoiceRequest.objects.all()


@router.get('/invoice_requests/{id}', response=InvoiceRequest)
def get_invoice_request(request, id: int):
    return get_object_or_404(InvoiceRequest, id=id)


@router.post('/invoice_requests', response=InvoiceRequest)
def create_invoice_request(request, payload: InvoiceRequestCreate):
    data = payload.dict()
    invoice_request = InvoiceRequest.objects.create(**data)
    return invoice_request


@router.put('/invoice_requests/{id}', response=InvoiceRequest)
def update_invoice_request(request, id: int, payload: InvoiceRequestUpdate):
    invoice_request = get_object_or_404(InvoiceRequest, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_request, attr, value)
    invoice_request.save()
    return invoice_request


@router.delete('/invoice_requests/{id}')
def delete_invoice_request(request, id: int):
    invoice_request = get_object_or_404(InvoiceRequest, id=id)
    invoice_request.delete()
    return {'success': True}


# InvoiceError endpoints
@router.get('/invoice_errors', response=List[InvoiceError])
@paginate
def list_invoice_errors(request):
    return InvoiceError.objects.all()


@router.get('/invoice_errors/{id}', response=InvoiceError)
def get_invoice_error(request, id: int):
    return get_object_or_404(InvoiceError, id=id)


@router.post('/invoice_errors', response=InvoiceError)
def create_invoice_error(request, payload: InvoiceErrorCreate):
    data = payload.dict()
    invoice_error = InvoiceError.objects.create(**data)
    return invoice_error


@router.put('/invoice_errors/{id}', response=InvoiceError)
def update_invoice_error(request, id: int, payload: InvoiceErrorUpdate):
    invoice_error = get_object_or_404(InvoiceError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_error, attr, value)
    invoice_error.save()
    return invoice_error


@router.delete('/invoice_errors/{id}')
def delete_invoice_error(request, id: int):
    invoice_error = get_object_or_404(InvoiceError, id=id)
    invoice_error.delete()
    return {'success': True}


# InvoiceRequestDelete endpoints
@router.get('/invoice_request_deletes', response=List[InvoiceRequestDelete])
@paginate
def list_invoice_request_deletes(request):
    return InvoiceRequestDelete.objects.all()


@router.get('/invoice_request_deletes/{id}', response=InvoiceRequestDelete)
def get_invoice_request_delete(request, id: int):
    return get_object_or_404(InvoiceRequestDelete, id=id)


@router.post('/invoice_request_deletes', response=InvoiceRequestDelete)
def create_invoice_request_delete(request, payload: InvoiceRequestDeleteCreate):
    data = payload.dict()
    invoice_request_delete = InvoiceRequestDelete.objects.create(**data)
    return invoice_request_delete


@router.put('/invoice_request_deletes/{id}', response=InvoiceRequestDelete)
def update_invoice_request_delete(request, id: int, payload: InvoiceRequestDeleteUpdate):
    invoice_request_delete = get_object_or_404(InvoiceRequestDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_request_delete, attr, value)
    invoice_request_delete.save()
    return invoice_request_delete


@router.delete('/invoice_request_deletes/{id}')
def delete_invoice_request_delete(request, id: int):
    invoice_request_delete = get_object_or_404(InvoiceRequestDelete, id=id)
    invoice_request_delete.delete()
    return {'success': True}


# InvoiceCreate endpoints
@router.get('/invoice_creates', response=List[InvoiceCreate])
@paginate
def list_invoice_creates(request):
    return InvoiceCreate.objects.all()


@router.get('/invoice_creates/{id}', response=InvoiceCreate)
def get_invoice_create(request, id: int):
    return get_object_or_404(InvoiceCreate, id=id)


@router.post('/invoice_creates', response=InvoiceCreate)
def create_invoice_create(request, payload: InvoiceCreateCreate):
    data = payload.dict()
    invoice_create = InvoiceCreate.objects.create(**data)
    return invoice_create


@router.put('/invoice_creates/{id}', response=InvoiceCreate)
def update_invoice_create(request, id: int, payload: InvoiceCreateUpdate):
    invoice_create = get_object_or_404(InvoiceCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_create, attr, value)
    invoice_create.save()
    return invoice_create


@router.delete('/invoice_creates/{id}')
def delete_invoice_create(request, id: int):
    invoice_create = get_object_or_404(InvoiceCreate, id=id)
    invoice_create.delete()
    return {'success': True}


# InvoiceDelete endpoints
@router.get('/invoice_deletes', response=List[InvoiceDelete])
@paginate
def list_invoice_deletes(request):
    return InvoiceDelete.objects.all()


@router.get('/invoice_deletes/{id}', response=InvoiceDelete)
def get_invoice_delete(request, id: int):
    return get_object_or_404(InvoiceDelete, id=id)


@router.post('/invoice_deletes', response=InvoiceDelete)
def create_invoice_delete(request, payload: InvoiceDeleteCreate):
    data = payload.dict()
    invoice_delete = InvoiceDelete.objects.create(**data)
    return invoice_delete


@router.put('/invoice_deletes/{id}', response=InvoiceDelete)
def update_invoice_delete(request, id: int, payload: InvoiceDeleteUpdate):
    invoice_delete = get_object_or_404(InvoiceDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_delete, attr, value)
    invoice_delete.save()
    return invoice_delete


@router.delete('/invoice_deletes/{id}')
def delete_invoice_delete(request, id: int):
    invoice_delete = get_object_or_404(InvoiceDelete, id=id)
    invoice_delete.delete()
    return {'success': True}


# InvoiceUpdate endpoints
@router.get('/invoice_updates', response=List[InvoiceUpdate])
@paginate
def list_invoice_updates(request):
    return InvoiceUpdate.objects.all()


@router.get('/invoice_updates/{id}', response=InvoiceUpdate)
def get_invoice_update(request, id: int):
    return get_object_or_404(InvoiceUpdate, id=id)


@router.post('/invoice_updates', response=InvoiceUpdate)
def create_invoice_update(request, payload: InvoiceUpdateCreate):
    data = payload.dict()
    invoice_update = InvoiceUpdate.objects.create(**data)
    return invoice_update


@router.put('/invoice_updates/{id}', response=InvoiceUpdate)
def update_invoice_update(request, id: int, payload: InvoiceUpdateUpdate):
    invoice_update = get_object_or_404(InvoiceUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_update, attr, value)
    invoice_update.save()
    return invoice_update


@router.delete('/invoice_updates/{id}')
def delete_invoice_update(request, id: int):
    invoice_update = get_object_or_404(InvoiceUpdate, id=id)
    invoice_update.delete()
    return {'success': True}


# InvoiceSendNotification endpoints
@router.get('/invoice_send_notifications', response=List[InvoiceSendNotification])
@paginate
def list_invoice_send_notifications(request):
    return InvoiceSendNotification.objects.all()


@router.get('/invoice_send_notifications/{id}', response=InvoiceSendNotification)
def get_invoice_send_notification(request, id: int):
    return get_object_or_404(InvoiceSendNotification, id=id)


@router.post('/invoice_send_notifications', response=InvoiceSendNotification)
def create_invoice_send_notification(request, payload: InvoiceSendNotificationCreate):
    data = payload.dict()
    invoice_send_notification = InvoiceSendNotification.objects.create(**data)
    return invoice_send_notification


@router.put('/invoice_send_notifications/{id}', response=InvoiceSendNotification)
def update_invoice_send_notification(request, id: int, payload: InvoiceSendNotificationUpdate):
    invoice_send_notification = get_object_or_404(InvoiceSendNotification, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_send_notification, attr, value)
    invoice_send_notification.save()
    return invoice_send_notification


@router.delete('/invoice_send_notifications/{id}')
def delete_invoice_send_notification(request, id: int):
    invoice_send_notification = get_object_or_404(InvoiceSendNotification, id=id)
    invoice_send_notification.delete()
    return {'success': True}


# InvoiceRefresh endpoints
@router.get('/invoice_refreshs', response=List[InvoiceRefresh])
@paginate
def list_invoice_refreshs(request):
    return InvoiceRefresh.objects.all()


@router.get('/invoice_refreshs/{id}', response=InvoiceRefresh)
def get_invoice_refresh(request, id: int):
    return get_object_or_404(InvoiceRefresh, id=id)


@router.post('/invoice_refreshs', response=InvoiceRefresh)
def create_invoice_refresh(request, payload: InvoiceRefreshCreate):
    data = payload.dict()
    invoice_refresh = InvoiceRefresh.objects.create(**data)
    return invoice_refresh


@router.put('/invoice_refreshs/{id}', response=InvoiceRefresh)
def update_invoice_refresh(request, id: int, payload: InvoiceRefreshUpdate):
    invoice_refresh = get_object_or_404(InvoiceRefresh, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_refresh, attr, value)
    invoice_refresh.save()
    return invoice_refresh


@router.delete('/invoice_refreshs/{id}')
def delete_invoice_refresh(request, id: int):
    invoice_refresh = get_object_or_404(InvoiceRefresh, id=id)
    invoice_refresh.delete()
    return {'success': True}


# InvoiceFinalize endpoints
@router.get('/invoice_finalizes', response=List[InvoiceFinalize])
@paginate
def list_invoice_finalizes(request):
    return InvoiceFinalize.objects.all()


@router.get('/invoice_finalizes/{id}', response=InvoiceFinalize)
def get_invoice_finalize(request, id: int):
    return get_object_or_404(InvoiceFinalize, id=id)


@router.post('/invoice_finalizes', response=InvoiceFinalize)
def create_invoice_finalize(request, payload: InvoiceFinalizeCreate):
    data = payload.dict()
    invoice_finalize = InvoiceFinalize.objects.create(**data)
    return invoice_finalize


@router.put('/invoice_finalizes/{id}', response=InvoiceFinalize)
def update_invoice_finalize(request, id: int, payload: InvoiceFinalizeUpdate):
    invoice_finalize = get_object_or_404(InvoiceFinalize, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_finalize, attr, value)
    invoice_finalize.save()
    return invoice_finalize


@router.delete('/invoice_finalizes/{id}')
def delete_invoice_finalize(request, id: int):
    invoice_finalize = get_object_or_404(InvoiceFinalize, id=id)
    invoice_finalize.delete()
    return {'success': True}


# InvoiceCancel endpoints
@router.get('/invoice_cancels', response=List[InvoiceCancel])
@paginate
def list_invoice_cancels(request):
    return InvoiceCancel.objects.all()


@router.get('/invoice_cancels/{id}', response=InvoiceCancel)
def get_invoice_cancel(request, id: int):
    return get_object_or_404(InvoiceCancel, id=id)


@router.post('/invoice_cancels', response=InvoiceCancel)
def create_invoice_cancel(request, payload: InvoiceCancelCreate):
    data = payload.dict()
    invoice_cancel = InvoiceCancel.objects.create(**data)
    return invoice_cancel


@router.put('/invoice_cancels/{id}', response=InvoiceCancel)
def update_invoice_cancel(request, id: int, payload: InvoiceCancelUpdate):
    invoice_cancel = get_object_or_404(InvoiceCancel, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(invoice_cancel, attr, value)
    invoice_cancel.save()
    return invoice_cancel


@router.delete('/invoice_cancels/{id}')
def delete_invoice_cancel(request, id: int):
    invoice_cancel = get_object_or_404(InvoiceCancel, id=id)
    invoice_cancel.delete()
    return {'success': True}


# PluginUpdate endpoints
@router.get('/plugin_updates', response=List[PluginUpdate])
@paginate
def list_plugin_updates(request):
    return PluginUpdate.objects.all()


@router.get('/plugin_updates/{id}', response=PluginUpdate)
def get_plugin_update(request, id: int):
    return get_object_or_404(PluginUpdate, id=id)


@router.post('/plugin_updates', response=PluginUpdate)
def create_plugin_update(request, payload: PluginUpdateCreate):
    data = payload.dict()
    plugin_update = PluginUpdate.objects.create(**data)
    return plugin_update


@router.put('/plugin_updates/{id}', response=PluginUpdate)
def update_plugin_update(request, id: int, payload: PluginUpdateUpdate):
    plugin_update = get_object_or_404(PluginUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_update, attr, value)
    plugin_update.save()
    return plugin_update


@router.delete('/plugin_updates/{id}')
def delete_plugin_update(request, id: int):
    plugin_update = get_object_or_404(PluginUpdate, id=id)
    plugin_update.delete()
    return {'success': True}


# PluginError endpoints
@router.get('/plugin_errors', response=List[PluginError])
@paginate
def list_plugin_errors(request):
    return PluginError.objects.all()


@router.get('/plugin_errors/{id}', response=PluginError)
def get_plugin_error(request, id: int):
    return get_object_or_404(PluginError, id=id)


@router.post('/plugin_errors', response=PluginError)
def create_plugin_error(request, payload: PluginErrorCreate):
    data = payload.dict()
    plugin_error = PluginError.objects.create(**data)
    return plugin_error


@router.put('/plugin_errors/{id}', response=PluginError)
def update_plugin_error(request, id: int, payload: PluginErrorUpdate):
    plugin_error = get_object_or_404(PluginError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_error, attr, value)
    plugin_error.save()
    return plugin_error


@router.delete('/plugin_errors/{id}')
def delete_plugin_error(request, id: int):
    plugin_error = get_object_or_404(PluginError, id=id)
    plugin_error.delete()
    return {'success': True}


# CatalogImport endpoints
@router.get('/catalog_imports', response=List[CatalogImport])
@paginate
def list_catalog_imports(request):
    return CatalogImport.objects.all()


@router.get('/catalog_imports/{id}', response=CatalogImport)
def get_catalog_import(request, id: int):
    return get_object_or_404(CatalogImport, id=id)


@router.post('/catalog_imports', response=CatalogImport)
def create_catalog_import(request, payload: CatalogImportCreate):
    data = payload.dict()
    catalog_import = CatalogImport.objects.create(**data)
    return catalog_import


@router.put('/catalog_imports/{id}', response=CatalogImport)
def update_catalog_import(request, id: int, payload: CatalogImportUpdate):
    catalog_import = get_object_or_404(CatalogImport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_import, attr, value)
    catalog_import.save()
    return catalog_import


@router.delete('/catalog_imports/{id}')
def delete_catalog_import(request, id: int):
    catalog_import = get_object_or_404(CatalogImport, id=id)
    catalog_import.delete()
    return {'success': True}


# CatalogExport endpoints
@router.get('/catalog_exports', response=List[CatalogExport])
@paginate
def list_catalog_exports(request):
    return CatalogExport.objects.all()


@router.get('/catalog_exports/{id}', response=CatalogExport)
def get_catalog_export(request, id: int):
    return get_object_or_404(CatalogExport, id=id)


@router.post('/catalog_exports', response=CatalogExport)
def create_catalog_export(request, payload: CatalogExportCreate):
    data = payload.dict()
    catalog_export = CatalogExport.objects.create(**data)
    return catalog_export


@router.put('/catalog_exports/{id}', response=CatalogExport)
def update_catalog_export(request, id: int, payload: CatalogExportUpdate):
    catalog_export = get_object_or_404(CatalogExport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(catalog_export, attr, value)
    catalog_export.save()
    return catalog_export


@router.delete('/catalog_exports/{id}')
def delete_catalog_export(request, id: int):
    catalog_export = get_object_or_404(CatalogExport, id=id)
    catalog_export.delete()
    return {'success': True}


# CustomersExport endpoints
@router.get('/customers_exports', response=List[CustomersExport])
@paginate
def list_customers_exports(request):
    return CustomersExport.objects.all()


@router.get('/customers_exports/{id}', response=CustomersExport)
def get_customers_export(request, id: int):
    return get_object_or_404(CustomersExport, id=id)


@router.post('/customers_exports', response=CustomersExport)
def create_customers_export(request, payload: CustomersExportCreate):
    data = payload.dict()
    customers_export = CustomersExport.objects.create(**data)
    return customers_export


@router.put('/customers_exports/{id}', response=CustomersExport)
def update_customers_export(request, id: int, payload: CustomersExportUpdate):
    customers_export = get_object_or_404(CustomersExport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customers_export, attr, value)
    customers_export.save()
    return customers_export


@router.delete('/customers_exports/{id}')
def delete_customers_export(request, id: int):
    customers_export = get_object_or_404(CustomersExport, id=id)
    customers_export.delete()
    return {'success': True}


# PluginFlowUpdate endpoints
@router.get('/plugin_flow_updates', response=List[PluginFlowUpdate])
@paginate
def list_plugin_flow_updates(request):
    return PluginFlowUpdate.objects.all()


@router.get('/plugin_flow_updates/{id}', response=PluginFlowUpdate)
def get_plugin_flow_update(request, id: int):
    return get_object_or_404(PluginFlowUpdate, id=id)


@router.post('/plugin_flow_updates', response=PluginFlowUpdate)
def create_plugin_flow_update(request, payload: PluginFlowUpdateCreate):
    data = payload.dict()
    plugin_flow_update = PluginFlowUpdate.objects.create(**data)
    return plugin_flow_update


@router.put('/plugin_flow_updates/{id}', response=PluginFlowUpdate)
def update_plugin_flow_update(request, id: int, payload: PluginFlowUpdateUpdate):
    plugin_flow_update = get_object_or_404(PluginFlowUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_flow_update, attr, value)
    plugin_flow_update.save()
    return plugin_flow_update


@router.delete('/plugin_flow_updates/{id}')
def delete_plugin_flow_update(request, id: int):
    plugin_flow_update = get_object_or_404(PluginFlowUpdate, id=id)
    plugin_flow_update.delete()
    return {'success': True}


# PluginFlowDelete endpoints
@router.get('/plugin_flow_deletes', response=List[PluginFlowDelete])
@paginate
def list_plugin_flow_deletes(request):
    return PluginFlowDelete.objects.all()


@router.get('/plugin_flow_deletes/{id}', response=PluginFlowDelete)
def get_plugin_flow_delete(request, id: int):
    return get_object_or_404(PluginFlowDelete, id=id)


@router.post('/plugin_flow_deletes', response=PluginFlowDelete)
def create_plugin_flow_delete(request, payload: PluginFlowDeleteCreate):
    data = payload.dict()
    plugin_flow_delete = PluginFlowDelete.objects.create(**data)
    return plugin_flow_delete


@router.put('/plugin_flow_deletes/{id}', response=PluginFlowDelete)
def update_plugin_flow_delete(request, id: int, payload: PluginFlowDeleteUpdate):
    plugin_flow_delete = get_object_or_404(PluginFlowDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(plugin_flow_delete, attr, value)
    plugin_flow_delete.save()
    return plugin_flow_delete


@router.delete('/plugin_flow_deletes/{id}')
def delete_plugin_flow_delete(request, id: int):
    plugin_flow_delete = get_object_or_404(PluginFlowDelete, id=id)
    plugin_flow_delete.delete()
    return {'success': True}


# VendorPayoutOnboardingLinkRequest endpoints
@router.get('/vendor_payout_onboarding_link_requests', response=List[VendorPayoutOnboardingLinkRequest])
@paginate
def list_vendor_payout_onboarding_link_requests(request):
    return VendorPayoutOnboardingLinkRequest.objects.all()


@router.get('/vendor_payout_onboarding_link_requests/{id}', response=VendorPayoutOnboardingLinkRequest)
def get_vendor_payout_onboarding_link_request(request, id: int):
    return get_object_or_404(VendorPayoutOnboardingLinkRequest, id=id)


@router.post('/vendor_payout_onboarding_link_requests', response=VendorPayoutOnboardingLinkRequest)
def create_vendor_payout_onboarding_link_request(request, payload: VendorPayoutOnboardingLinkRequestCreate):
    data = payload.dict()
    vendor_payout_onboarding_link_request = VendorPayoutOnboardingLinkRequest.objects.create(**data)
    return vendor_payout_onboarding_link_request


@router.put('/vendor_payout_onboarding_link_requests/{id}', response=VendorPayoutOnboardingLinkRequest)
def update_vendor_payout_onboarding_link_request(request, id: int, payload: VendorPayoutOnboardingLinkRequestUpdate):
    vendor_payout_onboarding_link_request = get_object_or_404(VendorPayoutOnboardingLinkRequest, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(vendor_payout_onboarding_link_request, attr, value)
    vendor_payout_onboarding_link_request.save()
    return vendor_payout_onboarding_link_request


@router.delete('/vendor_payout_onboarding_link_requests/{id}')
def delete_vendor_payout_onboarding_link_request(request, id: int):
    vendor_payout_onboarding_link_request = get_object_or_404(VendorPayoutOnboardingLinkRequest, id=id)
    vendor_payout_onboarding_link_request.delete()
    return {'success': True}


# ExchangeRatesRefresh endpoints
@router.get('/exchange_rates_refreshs', response=List[ExchangeRatesRefresh])
@paginate
def list_exchange_rates_refreshs(request):
    return ExchangeRatesRefresh.objects.all()


@router.get('/exchange_rates_refreshs/{id}', response=ExchangeRatesRefresh)
def get_exchange_rates_refresh(request, id: int):
    return get_object_or_404(ExchangeRatesRefresh, id=id)


@router.post('/exchange_rates_refreshs', response=ExchangeRatesRefresh)
def create_exchange_rates_refresh(request, payload: ExchangeRatesRefreshCreate):
    data = payload.dict()
    exchange_rates_refresh = ExchangeRatesRefresh.objects.create(**data)
    return exchange_rates_refresh


@router.put('/exchange_rates_refreshs/{id}', response=ExchangeRatesRefresh)
def update_exchange_rates_refresh(request, id: int, payload: ExchangeRatesRefreshUpdate):
    exchange_rates_refresh = get_object_or_404(ExchangeRatesRefresh, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(exchange_rates_refresh, attr, value)
    exchange_rates_refresh.save()
    return exchange_rates_refresh


@router.delete('/exchange_rates_refreshs/{id}')
def delete_exchange_rates_refresh(request, id: int):
    exchange_rates_refresh = get_object_or_404(ExchangeRatesRefresh, id=id)
    exchange_rates_refresh.delete()
    return {'success': True}


# CheckoutEventTriggered endpoints
@router.get('/checkout_event_triggereds', response=List[CheckoutEventTriggered])
@paginate
def list_checkout_event_triggereds(request):
    return CheckoutEventTriggered.objects.all()


@router.get('/checkout_event_triggereds/{id}', response=CheckoutEventTriggered)
def get_checkout_event_triggered(request, id: int):
    return get_object_or_404(CheckoutEventTriggered, id=id)


@router.post('/checkout_event_triggereds', response=CheckoutEventTriggered)
def create_checkout_event_triggered(request, payload: CheckoutEventTriggeredCreate):
    data = payload.dict()
    checkout_event_triggered = CheckoutEventTriggered.objects.create(**data)
    return checkout_event_triggered


@router.put('/checkout_event_triggereds/{id}', response=CheckoutEventTriggered)
def update_checkout_event_triggered(request, id: int, payload: CheckoutEventTriggeredUpdate):
    checkout_event_triggered = get_object_or_404(CheckoutEventTriggered, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_event_triggered, attr, value)
    checkout_event_triggered.save()
    return checkout_event_triggered


@router.delete('/checkout_event_triggereds/{id}')
def delete_checkout_event_triggered(request, id: int):
    checkout_event_triggered = get_object_or_404(CheckoutEventTriggered, id=id)
    checkout_event_triggered.delete()
    return {'success': True}


# JournalEntryCorrect endpoints
@router.get('/journal_entry_corrects', response=List[JournalEntryCorrect])
@paginate
def list_journal_entry_corrects(request):
    return JournalEntryCorrect.objects.all()


@router.get('/journal_entry_corrects/{id}', response=JournalEntryCorrect)
def get_journal_entry_correct(request, id: int):
    return get_object_or_404(JournalEntryCorrect, id=id)


@router.post('/journal_entry_corrects', response=JournalEntryCorrect)
def create_journal_entry_correct(request, payload: JournalEntryCorrectCreate):
    data = payload.dict()
    journal_entry_correct = JournalEntryCorrect.objects.create(**data)
    return journal_entry_correct


@router.put('/journal_entry_corrects/{id}', response=JournalEntryCorrect)
def update_journal_entry_correct(request, id: int, payload: JournalEntryCorrectUpdate):
    journal_entry_correct = get_object_or_404(JournalEntryCorrect, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(journal_entry_correct, attr, value)
    journal_entry_correct.save()
    return journal_entry_correct


@router.delete('/journal_entry_corrects/{id}')
def delete_journal_entry_correct(request, id: int):
    journal_entry_correct = get_object_or_404(JournalEntryCorrect, id=id)
    journal_entry_correct.delete()
    return {'success': True}


# FinancialError endpoints
@router.get('/financial_errors', response=List[FinancialError])
@paginate
def list_financial_errors(request):
    return FinancialError.objects.all()


@router.get('/financial_errors/{id}', response=FinancialError)
def get_financial_error(request, id: int):
    return get_object_or_404(FinancialError, id=id)


@router.post('/financial_errors', response=FinancialError)
def create_financial_error(request, payload: FinancialErrorCreate):
    data = payload.dict()
    financial_error = FinancialError.objects.create(**data)
    return financial_error


@router.put('/financial_errors/{id}', response=FinancialError)
def update_financial_error(request, id: int, payload: FinancialErrorUpdate):
    financial_error = get_object_or_404(FinancialError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(financial_error, attr, value)
    financial_error.save()
    return financial_error


@router.delete('/financial_errors/{id}')
def delete_financial_error(request, id: int):
    financial_error = get_object_or_404(FinancialError, id=id)
    financial_error.delete()
    return {'success': True}


# SaleCreate endpoints
@router.get('/sale_creates', response=List[SaleCreate])
@paginate
def list_sale_creates(request):
    return SaleCreate.objects.all()


@router.get('/sale_creates/{id}', response=SaleCreate)
def get_sale_create(request, id: int):
    return get_object_or_404(SaleCreate, id=id)


@router.post('/sale_creates', response=SaleCreate)
def create_sale_create(request, payload: SaleCreateCreate):
    data = payload.dict()
    sale_create = SaleCreate.objects.create(**data)
    return sale_create


@router.put('/sale_creates/{id}', response=SaleCreate)
def update_sale_create(request, id: int, payload: SaleCreateUpdate):
    sale_create = get_object_or_404(SaleCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_create, attr, value)
    sale_create.save()
    return sale_create


@router.delete('/sale_creates/{id}')
def delete_sale_create(request, id: int):
    sale_create = get_object_or_404(SaleCreate, id=id)
    sale_create.delete()
    return {'success': True}


# DiscountError endpoints
@router.get('/discount_errors', response=List[DiscountError])
@paginate
def list_discount_errors(request):
    return DiscountError.objects.all()


@router.get('/discount_errors/{id}', response=DiscountError)
def get_discount_error(request, id: int):
    return get_object_or_404(DiscountError, id=id)


@router.post('/discount_errors', response=DiscountError)
def create_discount_error(request, payload: DiscountErrorCreate):
    data = payload.dict()
    discount_error = DiscountError.objects.create(**data)
    return discount_error


@router.put('/discount_errors/{id}', response=DiscountError)
def update_discount_error(request, id: int, payload: DiscountErrorUpdate):
    discount_error = get_object_or_404(DiscountError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(discount_error, attr, value)
    discount_error.save()
    return discount_error


@router.delete('/discount_errors/{id}')
def delete_discount_error(request, id: int):
    discount_error = get_object_or_404(DiscountError, id=id)
    discount_error.delete()
    return {'success': True}


# SaleDelete endpoints
@router.get('/sale_deletes', response=List[SaleDelete])
@paginate
def list_sale_deletes(request):
    return SaleDelete.objects.all()


@router.get('/sale_deletes/{id}', response=SaleDelete)
def get_sale_delete(request, id: int):
    return get_object_or_404(SaleDelete, id=id)


@router.post('/sale_deletes', response=SaleDelete)
def create_sale_delete(request, payload: SaleDeleteCreate):
    data = payload.dict()
    sale_delete = SaleDelete.objects.create(**data)
    return sale_delete


@router.put('/sale_deletes/{id}', response=SaleDelete)
def update_sale_delete(request, id: int, payload: SaleDeleteUpdate):
    sale_delete = get_object_or_404(SaleDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_delete, attr, value)
    sale_delete.save()
    return sale_delete


@router.delete('/sale_deletes/{id}')
def delete_sale_delete(request, id: int):
    sale_delete = get_object_or_404(SaleDelete, id=id)
    sale_delete.delete()
    return {'success': True}


# SaleBulkDelete endpoints
@router.get('/sale_bulk_deletes', response=List[SaleBulkDelete])
@paginate
def list_sale_bulk_deletes(request):
    return SaleBulkDelete.objects.all()


@router.get('/sale_bulk_deletes/{id}', response=SaleBulkDelete)
def get_sale_bulk_delete(request, id: int):
    return get_object_or_404(SaleBulkDelete, id=id)


@router.post('/sale_bulk_deletes', response=SaleBulkDelete)
def create_sale_bulk_delete(request, payload: SaleBulkDeleteCreate):
    data = payload.dict()
    sale_bulk_delete = SaleBulkDelete.objects.create(**data)
    return sale_bulk_delete


@router.put('/sale_bulk_deletes/{id}', response=SaleBulkDelete)
def update_sale_bulk_delete(request, id: int, payload: SaleBulkDeleteUpdate):
    sale_bulk_delete = get_object_or_404(SaleBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_bulk_delete, attr, value)
    sale_bulk_delete.save()
    return sale_bulk_delete


@router.delete('/sale_bulk_deletes/{id}')
def delete_sale_bulk_delete(request, id: int):
    sale_bulk_delete = get_object_or_404(SaleBulkDelete, id=id)
    sale_bulk_delete.delete()
    return {'success': True}


# SaleUpdate endpoints
@router.get('/sale_updates', response=List[SaleUpdate])
@paginate
def list_sale_updates(request):
    return SaleUpdate.objects.all()


@router.get('/sale_updates/{id}', response=SaleUpdate)
def get_sale_update(request, id: int):
    return get_object_or_404(SaleUpdate, id=id)


@router.post('/sale_updates', response=SaleUpdate)
def create_sale_update(request, payload: SaleUpdateCreate):
    data = payload.dict()
    sale_update = SaleUpdate.objects.create(**data)
    return sale_update


@router.put('/sale_updates/{id}', response=SaleUpdate)
def update_sale_update(request, id: int, payload: SaleUpdateUpdate):
    sale_update = get_object_or_404(SaleUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_update, attr, value)
    sale_update.save()
    return sale_update


@router.delete('/sale_updates/{id}')
def delete_sale_update(request, id: int):
    sale_update = get_object_or_404(SaleUpdate, id=id)
    sale_update.delete()
    return {'success': True}


# SaleAddCatalogues endpoints
@router.get('/sale_add_cataloguess', response=List[SaleAddCatalogues])
@paginate
def list_sale_add_cataloguess(request):
    return SaleAddCatalogues.objects.all()


@router.get('/sale_add_cataloguess/{id}', response=SaleAddCatalogues)
def get_sale_add_catalogues(request, id: int):
    return get_object_or_404(SaleAddCatalogues, id=id)


@router.post('/sale_add_cataloguess', response=SaleAddCatalogues)
def create_sale_add_catalogues(request, payload: SaleAddCataloguesCreate):
    data = payload.dict()
    sale_add_catalogues = SaleAddCatalogues.objects.create(**data)
    return sale_add_catalogues


@router.put('/sale_add_cataloguess/{id}', response=SaleAddCatalogues)
def update_sale_add_catalogues(request, id: int, payload: SaleAddCataloguesUpdate):
    sale_add_catalogues = get_object_or_404(SaleAddCatalogues, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_add_catalogues, attr, value)
    sale_add_catalogues.save()
    return sale_add_catalogues


@router.delete('/sale_add_cataloguess/{id}')
def delete_sale_add_catalogues(request, id: int):
    sale_add_catalogues = get_object_or_404(SaleAddCatalogues, id=id)
    sale_add_catalogues.delete()
    return {'success': True}


# SaleRemoveCatalogues endpoints
@router.get('/sale_remove_cataloguess', response=List[SaleRemoveCatalogues])
@paginate
def list_sale_remove_cataloguess(request):
    return SaleRemoveCatalogues.objects.all()


@router.get('/sale_remove_cataloguess/{id}', response=SaleRemoveCatalogues)
def get_sale_remove_catalogues(request, id: int):
    return get_object_or_404(SaleRemoveCatalogues, id=id)


@router.post('/sale_remove_cataloguess', response=SaleRemoveCatalogues)
def create_sale_remove_catalogues(request, payload: SaleRemoveCataloguesCreate):
    data = payload.dict()
    sale_remove_catalogues = SaleRemoveCatalogues.objects.create(**data)
    return sale_remove_catalogues


@router.put('/sale_remove_cataloguess/{id}', response=SaleRemoveCatalogues)
def update_sale_remove_catalogues(request, id: int, payload: SaleRemoveCataloguesUpdate):
    sale_remove_catalogues = get_object_or_404(SaleRemoveCatalogues, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(sale_remove_catalogues, attr, value)
    sale_remove_catalogues.save()
    return sale_remove_catalogues


@router.delete('/sale_remove_cataloguess/{id}')
def delete_sale_remove_catalogues(request, id: int):
    sale_remove_catalogues = get_object_or_404(SaleRemoveCatalogues, id=id)
    sale_remove_catalogues.delete()
    return {'success': True}


# VoucherCreate endpoints
@router.get('/voucher_creates', response=List[VoucherCreate])
@paginate
def list_voucher_creates(request):
    return VoucherCreate.objects.all()


@router.get('/voucher_creates/{id}', response=VoucherCreate)
def get_voucher_create(request, id: int):
    return get_object_or_404(VoucherCreate, id=id)


@router.post('/voucher_creates', response=VoucherCreate)
def create_voucher_create(request, payload: VoucherCreateCreate):
    data = payload.dict()
    voucher_create = VoucherCreate.objects.create(**data)
    return voucher_create


@router.put('/voucher_creates/{id}', response=VoucherCreate)
def update_voucher_create(request, id: int, payload: VoucherCreateUpdate):
    voucher_create = get_object_or_404(VoucherCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_create, attr, value)
    voucher_create.save()
    return voucher_create


@router.delete('/voucher_creates/{id}')
def delete_voucher_create(request, id: int):
    voucher_create = get_object_or_404(VoucherCreate, id=id)
    voucher_create.delete()
    return {'success': True}


# VoucherDelete endpoints
@router.get('/voucher_deletes', response=List[VoucherDelete])
@paginate
def list_voucher_deletes(request):
    return VoucherDelete.objects.all()


@router.get('/voucher_deletes/{id}', response=VoucherDelete)
def get_voucher_delete(request, id: int):
    return get_object_or_404(VoucherDelete, id=id)


@router.post('/voucher_deletes', response=VoucherDelete)
def create_voucher_delete(request, payload: VoucherDeleteCreate):
    data = payload.dict()
    voucher_delete = VoucherDelete.objects.create(**data)
    return voucher_delete


@router.put('/voucher_deletes/{id}', response=VoucherDelete)
def update_voucher_delete(request, id: int, payload: VoucherDeleteUpdate):
    voucher_delete = get_object_or_404(VoucherDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_delete, attr, value)
    voucher_delete.save()
    return voucher_delete


@router.delete('/voucher_deletes/{id}')
def delete_voucher_delete(request, id: int):
    voucher_delete = get_object_or_404(VoucherDelete, id=id)
    voucher_delete.delete()
    return {'success': True}


# VoucherBulkDelete endpoints
@router.get('/voucher_bulk_deletes', response=List[VoucherBulkDelete])
@paginate
def list_voucher_bulk_deletes(request):
    return VoucherBulkDelete.objects.all()


@router.get('/voucher_bulk_deletes/{id}', response=VoucherBulkDelete)
def get_voucher_bulk_delete(request, id: int):
    return get_object_or_404(VoucherBulkDelete, id=id)


@router.post('/voucher_bulk_deletes', response=VoucherBulkDelete)
def create_voucher_bulk_delete(request, payload: VoucherBulkDeleteCreate):
    data = payload.dict()
    voucher_bulk_delete = VoucherBulkDelete.objects.create(**data)
    return voucher_bulk_delete


@router.put('/voucher_bulk_deletes/{id}', response=VoucherBulkDelete)
def update_voucher_bulk_delete(request, id: int, payload: VoucherBulkDeleteUpdate):
    voucher_bulk_delete = get_object_or_404(VoucherBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_bulk_delete, attr, value)
    voucher_bulk_delete.save()
    return voucher_bulk_delete


@router.delete('/voucher_bulk_deletes/{id}')
def delete_voucher_bulk_delete(request, id: int):
    voucher_bulk_delete = get_object_or_404(VoucherBulkDelete, id=id)
    voucher_bulk_delete.delete()
    return {'success': True}


# VoucherUpdate endpoints
@router.get('/voucher_updates', response=List[VoucherUpdate])
@paginate
def list_voucher_updates(request):
    return VoucherUpdate.objects.all()


@router.get('/voucher_updates/{id}', response=VoucherUpdate)
def get_voucher_update(request, id: int):
    return get_object_or_404(VoucherUpdate, id=id)


@router.post('/voucher_updates', response=VoucherUpdate)
def create_voucher_update(request, payload: VoucherUpdateCreate):
    data = payload.dict()
    voucher_update = VoucherUpdate.objects.create(**data)
    return voucher_update


@router.put('/voucher_updates/{id}', response=VoucherUpdate)
def update_voucher_update(request, id: int, payload: VoucherUpdateUpdate):
    voucher_update = get_object_or_404(VoucherUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_update, attr, value)
    voucher_update.save()
    return voucher_update


@router.delete('/voucher_updates/{id}')
def delete_voucher_update(request, id: int):
    voucher_update = get_object_or_404(VoucherUpdate, id=id)
    voucher_update.delete()
    return {'success': True}


# VoucherAddCatalogues endpoints
@router.get('/voucher_add_cataloguess', response=List[VoucherAddCatalogues])
@paginate
def list_voucher_add_cataloguess(request):
    return VoucherAddCatalogues.objects.all()


@router.get('/voucher_add_cataloguess/{id}', response=VoucherAddCatalogues)
def get_voucher_add_catalogues(request, id: int):
    return get_object_or_404(VoucherAddCatalogues, id=id)


@router.post('/voucher_add_cataloguess', response=VoucherAddCatalogues)
def create_voucher_add_catalogues(request, payload: VoucherAddCataloguesCreate):
    data = payload.dict()
    voucher_add_catalogues = VoucherAddCatalogues.objects.create(**data)
    return voucher_add_catalogues


@router.put('/voucher_add_cataloguess/{id}', response=VoucherAddCatalogues)
def update_voucher_add_catalogues(request, id: int, payload: VoucherAddCataloguesUpdate):
    voucher_add_catalogues = get_object_or_404(VoucherAddCatalogues, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_add_catalogues, attr, value)
    voucher_add_catalogues.save()
    return voucher_add_catalogues


@router.delete('/voucher_add_cataloguess/{id}')
def delete_voucher_add_catalogues(request, id: int):
    voucher_add_catalogues = get_object_or_404(VoucherAddCatalogues, id=id)
    voucher_add_catalogues.delete()
    return {'success': True}


# VoucherRemoveCatalogues endpoints
@router.get('/voucher_remove_cataloguess', response=List[VoucherRemoveCatalogues])
@paginate
def list_voucher_remove_cataloguess(request):
    return VoucherRemoveCatalogues.objects.all()


@router.get('/voucher_remove_cataloguess/{id}', response=VoucherRemoveCatalogues)
def get_voucher_remove_catalogues(request, id: int):
    return get_object_or_404(VoucherRemoveCatalogues, id=id)


@router.post('/voucher_remove_cataloguess', response=VoucherRemoveCatalogues)
def create_voucher_remove_catalogues(request, payload: VoucherRemoveCataloguesCreate):
    data = payload.dict()
    voucher_remove_catalogues = VoucherRemoveCatalogues.objects.create(**data)
    return voucher_remove_catalogues


@router.put('/voucher_remove_cataloguess/{id}', response=VoucherRemoveCatalogues)
def update_voucher_remove_catalogues(request, id: int, payload: VoucherRemoveCataloguesUpdate):
    voucher_remove_catalogues = get_object_or_404(VoucherRemoveCatalogues, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(voucher_remove_catalogues, attr, value)
    voucher_remove_catalogues.save()
    return voucher_remove_catalogues


@router.delete('/voucher_remove_cataloguess/{id}')
def delete_voucher_remove_catalogues(request, id: int):
    voucher_remove_catalogues = get_object_or_404(VoucherRemoveCatalogues, id=id)
    voucher_remove_catalogues.delete()
    return {'success': True}


# DashboardEmbeddingToken endpoints
@router.get('/dashboard_embedding_tokens', response=List[DashboardEmbeddingToken])
@paginate
def list_dashboard_embedding_tokens(request):
    return DashboardEmbeddingToken.objects.all()


@router.get('/dashboard_embedding_tokens/{id}', response=DashboardEmbeddingToken)
def get_dashboard_embedding_token(request, id: int):
    return get_object_or_404(DashboardEmbeddingToken, id=id)


@router.post('/dashboard_embedding_tokens', response=DashboardEmbeddingToken)
def create_dashboard_embedding_token(request, payload: DashboardEmbeddingTokenCreate):
    data = payload.dict()
    dashboard_embedding_token = DashboardEmbeddingToken.objects.create(**data)
    return dashboard_embedding_token


@router.put('/dashboard_embedding_tokens/{id}', response=DashboardEmbeddingToken)
def update_dashboard_embedding_token(request, id: int, payload: DashboardEmbeddingTokenUpdate):
    dashboard_embedding_token = get_object_or_404(DashboardEmbeddingToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(dashboard_embedding_token, attr, value)
    dashboard_embedding_token.save()
    return dashboard_embedding_token


@router.delete('/dashboard_embedding_tokens/{id}')
def delete_dashboard_embedding_token(request, id: int):
    dashboard_embedding_token = get_object_or_404(DashboardEmbeddingToken, id=id)
    dashboard_embedding_token.delete()
    return {'success': True}


# ProductsExport endpoints
@router.get('/products_exports', response=List[ProductsExport])
@paginate
def list_products_exports(request):
    return ProductsExport.objects.all()


@router.get('/products_exports/{id}', response=ProductsExport)
def get_products_export(request, id: int):
    return get_object_or_404(ProductsExport, id=id)


@router.post('/products_exports', response=ProductsExport)
def create_products_export(request, payload: ProductsExportCreate):
    data = payload.dict()
    products_export = ProductsExport.objects.create(**data)
    return products_export


@router.put('/products_exports/{id}', response=ProductsExport)
def update_products_export(request, id: int, payload: ProductsExportUpdate):
    products_export = get_object_or_404(ProductsExport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(products_export, attr, value)
    products_export.save()
    return products_export


@router.delete('/products_exports/{id}')
def delete_products_export(request, id: int):
    products_export = get_object_or_404(ProductsExport, id=id)
    products_export.delete()
    return {'success': True}


# ExportError endpoints
@router.get('/export_errors', response=List[ExportError])
@paginate
def list_export_errors(request):
    return ExportError.objects.all()


@router.get('/export_errors/{id}', response=ExportError)
def get_export_error(request, id: int):
    return get_object_or_404(ExportError, id=id)


@router.post('/export_errors', response=ExportError)
def create_export_error(request, payload: ExportErrorCreate):
    data = payload.dict()
    export_error = ExportError.objects.create(**data)
    return export_error


@router.put('/export_errors/{id}', response=ExportError)
def update_export_error(request, id: int, payload: ExportErrorUpdate):
    export_error = get_object_or_404(ExportError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(export_error, attr, value)
    export_error.save()
    return export_error


@router.delete('/export_errors/{id}')
def delete_export_error(request, id: int):
    export_error = get_object_or_404(ExportError, id=id)
    export_error.delete()
    return {'success': True}


# ProductsImport endpoints
@router.get('/products_imports', response=List[ProductsImport])
@paginate
def list_products_imports(request):
    return ProductsImport.objects.all()


@router.get('/products_imports/{id}', response=ProductsImport)
def get_products_import(request, id: int):
    return get_object_or_404(ProductsImport, id=id)


@router.post('/products_imports', response=ProductsImport)
def create_products_import(request, payload: ProductsImportCreate):
    data = payload.dict()
    products_import = ProductsImport.objects.create(**data)
    return products_import


@router.put('/products_imports/{id}', response=ProductsImport)
def update_products_import(request, id: int, payload: ProductsImportUpdate):
    products_import = get_object_or_404(ProductsImport, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(products_import, attr, value)
    products_import.save()
    return products_import


@router.delete('/products_imports/{id}')
def delete_products_import(request, id: int):
    products_import = get_object_or_404(ProductsImport, id=id)
    products_import.delete()
    return {'success': True}


# ImportError endpoints
@router.get('/import_errors', response=List[ImportError])
@paginate
def list_import_errors(request):
    return ImportError.objects.all()


@router.get('/import_errors/{id}', response=ImportError)
def get_import_error(request, id: int):
    return get_object_or_404(ImportError, id=id)


@router.post('/import_errors', response=ImportError)
def create_import_error(request, payload: ImportErrorCreate):
    data = payload.dict()
    import_error = ImportError.objects.create(**data)
    return import_error


@router.put('/import_errors/{id}', response=ImportError)
def update_import_error(request, id: int, payload: ImportErrorUpdate):
    import_error = get_object_or_404(ImportError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(import_error, attr, value)
    import_error.save()
    return import_error


@router.delete('/import_errors/{id}')
def delete_import_error(request, id: int):
    import_error = get_object_or_404(ImportError, id=id)
    import_error.delete()
    return {'success': True}


# CheckoutAddPromoCode endpoints
@router.get('/checkout_add_promo_codes', response=List[CheckoutAddPromoCode])
@paginate
def list_checkout_add_promo_codes(request):
    return CheckoutAddPromoCode.objects.all()


@router.get('/checkout_add_promo_codes/{id}', response=CheckoutAddPromoCode)
def get_checkout_add_promo_code(request, id: int):
    return get_object_or_404(CheckoutAddPromoCode, id=id)


@router.post('/checkout_add_promo_codes', response=CheckoutAddPromoCode)
def create_checkout_add_promo_code(request, payload: CheckoutAddPromoCodeCreate):
    data = payload.dict()
    checkout_add_promo_code = CheckoutAddPromoCode.objects.create(**data)
    return checkout_add_promo_code


@router.put('/checkout_add_promo_codes/{id}', response=CheckoutAddPromoCode)
def update_checkout_add_promo_code(request, id: int, payload: CheckoutAddPromoCodeUpdate):
    checkout_add_promo_code = get_object_or_404(CheckoutAddPromoCode, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_add_promo_code, attr, value)
    checkout_add_promo_code.save()
    return checkout_add_promo_code


@router.delete('/checkout_add_promo_codes/{id}')
def delete_checkout_add_promo_code(request, id: int):
    checkout_add_promo_code = get_object_or_404(CheckoutAddPromoCode, id=id)
    checkout_add_promo_code.delete()
    return {'success': True}


# CheckoutError endpoints
@router.get('/checkout_errors', response=List[CheckoutError])
@paginate
def list_checkout_errors(request):
    return CheckoutError.objects.all()


@router.get('/checkout_errors/{id}', response=CheckoutError)
def get_checkout_error(request, id: int):
    return get_object_or_404(CheckoutError, id=id)


@router.post('/checkout_errors', response=CheckoutError)
def create_checkout_error(request, payload: CheckoutErrorCreate):
    data = payload.dict()
    checkout_error = CheckoutError.objects.create(**data)
    return checkout_error


@router.put('/checkout_errors/{id}', response=CheckoutError)
def update_checkout_error(request, id: int, payload: CheckoutErrorUpdate):
    checkout_error = get_object_or_404(CheckoutError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_error, attr, value)
    checkout_error.save()
    return checkout_error


@router.delete('/checkout_errors/{id}')
def delete_checkout_error(request, id: int):
    checkout_error = get_object_or_404(CheckoutError, id=id)
    checkout_error.delete()
    return {'success': True}


# CheckoutBillingAddressUpdate endpoints
@router.get('/checkout_billing_address_updates', response=List[CheckoutBillingAddressUpdate])
@paginate
def list_checkout_billing_address_updates(request):
    return CheckoutBillingAddressUpdate.objects.all()


@router.get('/checkout_billing_address_updates/{id}', response=CheckoutBillingAddressUpdate)
def get_checkout_billing_address_update(request, id: int):
    return get_object_or_404(CheckoutBillingAddressUpdate, id=id)


@router.post('/checkout_billing_address_updates', response=CheckoutBillingAddressUpdate)
def create_checkout_billing_address_update(request, payload: CheckoutBillingAddressUpdateCreate):
    data = payload.dict()
    checkout_billing_address_update = CheckoutBillingAddressUpdate.objects.create(**data)
    return checkout_billing_address_update


@router.put('/checkout_billing_address_updates/{id}', response=CheckoutBillingAddressUpdate)
def update_checkout_billing_address_update(request, id: int, payload: CheckoutBillingAddressUpdateUpdate):
    checkout_billing_address_update = get_object_or_404(CheckoutBillingAddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_billing_address_update, attr, value)
    checkout_billing_address_update.save()
    return checkout_billing_address_update


@router.delete('/checkout_billing_address_updates/{id}')
def delete_checkout_billing_address_update(request, id: int):
    checkout_billing_address_update = get_object_or_404(CheckoutBillingAddressUpdate, id=id)
    checkout_billing_address_update.delete()
    return {'success': True}


# CheckoutComplete endpoints
@router.get('/checkout_completes', response=List[CheckoutComplete])
@paginate
def list_checkout_completes(request):
    return CheckoutComplete.objects.all()


@router.get('/checkout_completes/{id}', response=CheckoutComplete)
def get_checkout_complete(request, id: int):
    return get_object_or_404(CheckoutComplete, id=id)


@router.post('/checkout_completes', response=CheckoutComplete)
def create_checkout_complete(request, payload: CheckoutCompleteCreate):
    data = payload.dict()
    checkout_complete = CheckoutComplete.objects.create(**data)
    return checkout_complete


@router.put('/checkout_completes/{id}', response=CheckoutComplete)
def update_checkout_complete(request, id: int, payload: CheckoutCompleteUpdate):
    checkout_complete = get_object_or_404(CheckoutComplete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_complete, attr, value)
    checkout_complete.save()
    return checkout_complete


@router.delete('/checkout_completes/{id}')
def delete_checkout_complete(request, id: int):
    checkout_complete = get_object_or_404(CheckoutComplete, id=id)
    checkout_complete.delete()
    return {'success': True}


# CheckoutConvertToNauticalQuoteOrder endpoints
@router.get('/checkout_convert_to_nautical_quote_orders', response=List[CheckoutConvertToNauticalQuoteOrder])
@paginate
def list_checkout_convert_to_nautical_quote_orders(request):
    return CheckoutConvertToNauticalQuoteOrder.objects.all()


@router.get('/checkout_convert_to_nautical_quote_orders/{id}', response=CheckoutConvertToNauticalQuoteOrder)
def get_checkout_convert_to_nautical_quote_order(request, id: int):
    return get_object_or_404(CheckoutConvertToNauticalQuoteOrder, id=id)


@router.post('/checkout_convert_to_nautical_quote_orders', response=CheckoutConvertToNauticalQuoteOrder)
def create_checkout_convert_to_nautical_quote_order(request, payload: CheckoutConvertToNauticalQuoteOrderCreate):
    data = payload.dict()
    checkout_convert_to_nautical_quote_order = CheckoutConvertToNauticalQuoteOrder.objects.create(**data)
    return checkout_convert_to_nautical_quote_order


@router.put('/checkout_convert_to_nautical_quote_orders/{id}', response=CheckoutConvertToNauticalQuoteOrder)
def update_checkout_convert_to_nautical_quote_order(request, id: int, payload: CheckoutConvertToNauticalQuoteOrderUpdate):
    checkout_convert_to_nautical_quote_order = get_object_or_404(CheckoutConvertToNauticalQuoteOrder, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_convert_to_nautical_quote_order, attr, value)
    checkout_convert_to_nautical_quote_order.save()
    return checkout_convert_to_nautical_quote_order


@router.delete('/checkout_convert_to_nautical_quote_orders/{id}')
def delete_checkout_convert_to_nautical_quote_order(request, id: int):
    checkout_convert_to_nautical_quote_order = get_object_or_404(CheckoutConvertToNauticalQuoteOrder, id=id)
    checkout_convert_to_nautical_quote_order.delete()
    return {'success': True}


# CheckoutCreate endpoints
@router.get('/checkout_creates', response=List[CheckoutCreate])
@paginate
def list_checkout_creates(request):
    return CheckoutCreate.objects.all()


@router.get('/checkout_creates/{id}', response=CheckoutCreate)
def get_checkout_create(request, id: int):
    return get_object_or_404(CheckoutCreate, id=id)


@router.post('/checkout_creates', response=CheckoutCreate)
def create_checkout_create(request, payload: CheckoutCreateCreate):
    data = payload.dict()
    checkout_create = CheckoutCreate.objects.create(**data)
    return checkout_create


@router.put('/checkout_creates/{id}', response=CheckoutCreate)
def update_checkout_create(request, id: int, payload: CheckoutCreateUpdate):
    checkout_create = get_object_or_404(CheckoutCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_create, attr, value)
    checkout_create.save()
    return checkout_create


@router.delete('/checkout_creates/{id}')
def delete_checkout_create(request, id: int):
    checkout_create = get_object_or_404(CheckoutCreate, id=id)
    checkout_create.delete()
    return {'success': True}


# CheckoutCustomerAttach endpoints
@router.get('/checkout_customer_attachs', response=List[CheckoutCustomerAttach])
@paginate
def list_checkout_customer_attachs(request):
    return CheckoutCustomerAttach.objects.all()


@router.get('/checkout_customer_attachs/{id}', response=CheckoutCustomerAttach)
def get_checkout_customer_attach(request, id: int):
    return get_object_or_404(CheckoutCustomerAttach, id=id)


@router.post('/checkout_customer_attachs', response=CheckoutCustomerAttach)
def create_checkout_customer_attach(request, payload: CheckoutCustomerAttachCreate):
    data = payload.dict()
    checkout_customer_attach = CheckoutCustomerAttach.objects.create(**data)
    return checkout_customer_attach


@router.put('/checkout_customer_attachs/{id}', response=CheckoutCustomerAttach)
def update_checkout_customer_attach(request, id: int, payload: CheckoutCustomerAttachUpdate):
    checkout_customer_attach = get_object_or_404(CheckoutCustomerAttach, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_customer_attach, attr, value)
    checkout_customer_attach.save()
    return checkout_customer_attach


@router.delete('/checkout_customer_attachs/{id}')
def delete_checkout_customer_attach(request, id: int):
    checkout_customer_attach = get_object_or_404(CheckoutCustomerAttach, id=id)
    checkout_customer_attach.delete()
    return {'success': True}


# CheckoutCustomerDetach endpoints
@router.get('/checkout_customer_detachs', response=List[CheckoutCustomerDetach])
@paginate
def list_checkout_customer_detachs(request):
    return CheckoutCustomerDetach.objects.all()


@router.get('/checkout_customer_detachs/{id}', response=CheckoutCustomerDetach)
def get_checkout_customer_detach(request, id: int):
    return get_object_or_404(CheckoutCustomerDetach, id=id)


@router.post('/checkout_customer_detachs', response=CheckoutCustomerDetach)
def create_checkout_customer_detach(request, payload: CheckoutCustomerDetachCreate):
    data = payload.dict()
    checkout_customer_detach = CheckoutCustomerDetach.objects.create(**data)
    return checkout_customer_detach


@router.put('/checkout_customer_detachs/{id}', response=CheckoutCustomerDetach)
def update_checkout_customer_detach(request, id: int, payload: CheckoutCustomerDetachUpdate):
    checkout_customer_detach = get_object_or_404(CheckoutCustomerDetach, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_customer_detach, attr, value)
    checkout_customer_detach.save()
    return checkout_customer_detach


@router.delete('/checkout_customer_detachs/{id}')
def delete_checkout_customer_detach(request, id: int):
    checkout_customer_detach = get_object_or_404(CheckoutCustomerDetach, id=id)
    checkout_customer_detach.delete()
    return {'success': True}


# CheckoutEmailUpdate endpoints
@router.get('/checkout_email_updates', response=List[CheckoutEmailUpdate])
@paginate
def list_checkout_email_updates(request):
    return CheckoutEmailUpdate.objects.all()


@router.get('/checkout_email_updates/{id}', response=CheckoutEmailUpdate)
def get_checkout_email_update(request, id: int):
    return get_object_or_404(CheckoutEmailUpdate, id=id)


@router.post('/checkout_email_updates', response=CheckoutEmailUpdate)
def create_checkout_email_update(request, payload: CheckoutEmailUpdateCreate):
    data = payload.dict()
    checkout_email_update = CheckoutEmailUpdate.objects.create(**data)
    return checkout_email_update


@router.put('/checkout_email_updates/{id}', response=CheckoutEmailUpdate)
def update_checkout_email_update(request, id: int, payload: CheckoutEmailUpdateUpdate):
    checkout_email_update = get_object_or_404(CheckoutEmailUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_email_update, attr, value)
    checkout_email_update.save()
    return checkout_email_update


@router.delete('/checkout_email_updates/{id}')
def delete_checkout_email_update(request, id: int):
    checkout_email_update = get_object_or_404(CheckoutEmailUpdate, id=id)
    checkout_email_update.delete()
    return {'success': True}


# CheckoutSetTransactionCurrency endpoints
@router.get('/checkout_set_transaction_currencys', response=List[CheckoutSetTransactionCurrency])
@paginate
def list_checkout_set_transaction_currencys(request):
    return CheckoutSetTransactionCurrency.objects.all()


@router.get('/checkout_set_transaction_currencys/{id}', response=CheckoutSetTransactionCurrency)
def get_checkout_set_transaction_currency(request, id: int):
    return get_object_or_404(CheckoutSetTransactionCurrency, id=id)


@router.post('/checkout_set_transaction_currencys', response=CheckoutSetTransactionCurrency)
def create_checkout_set_transaction_currency(request, payload: CheckoutSetTransactionCurrencyCreate):
    data = payload.dict()
    checkout_set_transaction_currency = CheckoutSetTransactionCurrency.objects.create(**data)
    return checkout_set_transaction_currency


@router.put('/checkout_set_transaction_currencys/{id}', response=CheckoutSetTransactionCurrency)
def update_checkout_set_transaction_currency(request, id: int, payload: CheckoutSetTransactionCurrencyUpdate):
    checkout_set_transaction_currency = get_object_or_404(CheckoutSetTransactionCurrency, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_set_transaction_currency, attr, value)
    checkout_set_transaction_currency.save()
    return checkout_set_transaction_currency


@router.delete('/checkout_set_transaction_currencys/{id}')
def delete_checkout_set_transaction_currency(request, id: int):
    checkout_set_transaction_currency = get_object_or_404(CheckoutSetTransactionCurrency, id=id)
    checkout_set_transaction_currency.delete()
    return {'success': True}


# CheckoutNoteUpdate endpoints
@router.get('/checkout_note_updates', response=List[CheckoutNoteUpdate])
@paginate
def list_checkout_note_updates(request):
    return CheckoutNoteUpdate.objects.all()


@router.get('/checkout_note_updates/{id}', response=CheckoutNoteUpdate)
def get_checkout_note_update(request, id: int):
    return get_object_or_404(CheckoutNoteUpdate, id=id)


@router.post('/checkout_note_updates', response=CheckoutNoteUpdate)
def create_checkout_note_update(request, payload: CheckoutNoteUpdateCreate):
    data = payload.dict()
    checkout_note_update = CheckoutNoteUpdate.objects.create(**data)
    return checkout_note_update


@router.put('/checkout_note_updates/{id}', response=CheckoutNoteUpdate)
def update_checkout_note_update(request, id: int, payload: CheckoutNoteUpdateUpdate):
    checkout_note_update = get_object_or_404(CheckoutNoteUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_note_update, attr, value)
    checkout_note_update.save()
    return checkout_note_update


@router.delete('/checkout_note_updates/{id}')
def delete_checkout_note_update(request, id: int):
    checkout_note_update = get_object_or_404(CheckoutNoteUpdate, id=id)
    checkout_note_update.delete()
    return {'success': True}


# CheckoutLineDelete endpoints
@router.get('/checkout_line_deletes', response=List[CheckoutLineDelete])
@paginate
def list_checkout_line_deletes(request):
    return CheckoutLineDelete.objects.all()


@router.get('/checkout_line_deletes/{id}', response=CheckoutLineDelete)
def get_checkout_line_delete(request, id: int):
    return get_object_or_404(CheckoutLineDelete, id=id)


@router.post('/checkout_line_deletes', response=CheckoutLineDelete)
def create_checkout_line_delete(request, payload: CheckoutLineDeleteCreate):
    data = payload.dict()
    checkout_line_delete = CheckoutLineDelete.objects.create(**data)
    return checkout_line_delete


@router.put('/checkout_line_deletes/{id}', response=CheckoutLineDelete)
def update_checkout_line_delete(request, id: int, payload: CheckoutLineDeleteUpdate):
    checkout_line_delete = get_object_or_404(CheckoutLineDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_line_delete, attr, value)
    checkout_line_delete.save()
    return checkout_line_delete


@router.delete('/checkout_line_deletes/{id}')
def delete_checkout_line_delete(request, id: int):
    checkout_line_delete = get_object_or_404(CheckoutLineDelete, id=id)
    checkout_line_delete.delete()
    return {'success': True}


# CheckoutLinesAdd endpoints
@router.get('/checkout_lines_adds', response=List[CheckoutLinesAdd])
@paginate
def list_checkout_lines_adds(request):
    return CheckoutLinesAdd.objects.all()


@router.get('/checkout_lines_adds/{id}', response=CheckoutLinesAdd)
def get_checkout_lines_add(request, id: int):
    return get_object_or_404(CheckoutLinesAdd, id=id)


@router.post('/checkout_lines_adds', response=CheckoutLinesAdd)
def create_checkout_lines_add(request, payload: CheckoutLinesAddCreate):
    data = payload.dict()
    checkout_lines_add = CheckoutLinesAdd.objects.create(**data)
    return checkout_lines_add


@router.put('/checkout_lines_adds/{id}', response=CheckoutLinesAdd)
def update_checkout_lines_add(request, id: int, payload: CheckoutLinesAddUpdate):
    checkout_lines_add = get_object_or_404(CheckoutLinesAdd, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_lines_add, attr, value)
    checkout_lines_add.save()
    return checkout_lines_add


@router.delete('/checkout_lines_adds/{id}')
def delete_checkout_lines_add(request, id: int):
    checkout_lines_add = get_object_or_404(CheckoutLinesAdd, id=id)
    checkout_lines_add.delete()
    return {'success': True}


# CheckoutLinesUpdate endpoints
@router.get('/checkout_lines_updates', response=List[CheckoutLinesUpdate])
@paginate
def list_checkout_lines_updates(request):
    return CheckoutLinesUpdate.objects.all()


@router.get('/checkout_lines_updates/{id}', response=CheckoutLinesUpdate)
def get_checkout_lines_update(request, id: int):
    return get_object_or_404(CheckoutLinesUpdate, id=id)


@router.post('/checkout_lines_updates', response=CheckoutLinesUpdate)
def create_checkout_lines_update(request, payload: CheckoutLinesUpdateCreate):
    data = payload.dict()
    checkout_lines_update = CheckoutLinesUpdate.objects.create(**data)
    return checkout_lines_update


@router.put('/checkout_lines_updates/{id}', response=CheckoutLinesUpdate)
def update_checkout_lines_update(request, id: int, payload: CheckoutLinesUpdateUpdate):
    checkout_lines_update = get_object_or_404(CheckoutLinesUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_lines_update, attr, value)
    checkout_lines_update.save()
    return checkout_lines_update


@router.delete('/checkout_lines_updates/{id}')
def delete_checkout_lines_update(request, id: int):
    checkout_lines_update = get_object_or_404(CheckoutLinesUpdate, id=id)
    checkout_lines_update.delete()
    return {'success': True}


# CheckoutRemovePromoCode endpoints
@router.get('/checkout_remove_promo_codes', response=List[CheckoutRemovePromoCode])
@paginate
def list_checkout_remove_promo_codes(request):
    return CheckoutRemovePromoCode.objects.all()


@router.get('/checkout_remove_promo_codes/{id}', response=CheckoutRemovePromoCode)
def get_checkout_remove_promo_code(request, id: int):
    return get_object_or_404(CheckoutRemovePromoCode, id=id)


@router.post('/checkout_remove_promo_codes', response=CheckoutRemovePromoCode)
def create_checkout_remove_promo_code(request, payload: CheckoutRemovePromoCodeCreate):
    data = payload.dict()
    checkout_remove_promo_code = CheckoutRemovePromoCode.objects.create(**data)
    return checkout_remove_promo_code


@router.put('/checkout_remove_promo_codes/{id}', response=CheckoutRemovePromoCode)
def update_checkout_remove_promo_code(request, id: int, payload: CheckoutRemovePromoCodeUpdate):
    checkout_remove_promo_code = get_object_or_404(CheckoutRemovePromoCode, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_remove_promo_code, attr, value)
    checkout_remove_promo_code.save()
    return checkout_remove_promo_code


@router.delete('/checkout_remove_promo_codes/{id}')
def delete_checkout_remove_promo_code(request, id: int):
    checkout_remove_promo_code = get_object_or_404(CheckoutRemovePromoCode, id=id)
    checkout_remove_promo_code.delete()
    return {'success': True}


# CheckoutPaymentCreate endpoints
@router.get('/checkout_payment_creates', response=List[CheckoutPaymentCreate])
@paginate
def list_checkout_payment_creates(request):
    return CheckoutPaymentCreate.objects.all()


@router.get('/checkout_payment_creates/{id}', response=CheckoutPaymentCreate)
def get_checkout_payment_create(request, id: int):
    return get_object_or_404(CheckoutPaymentCreate, id=id)


@router.post('/checkout_payment_creates', response=CheckoutPaymentCreate)
def create_checkout_payment_create(request, payload: CheckoutPaymentCreateCreate):
    data = payload.dict()
    checkout_payment_create = CheckoutPaymentCreate.objects.create(**data)
    return checkout_payment_create


@router.put('/checkout_payment_creates/{id}', response=CheckoutPaymentCreate)
def update_checkout_payment_create(request, id: int, payload: CheckoutPaymentCreateUpdate):
    checkout_payment_create = get_object_or_404(CheckoutPaymentCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_payment_create, attr, value)
    checkout_payment_create.save()
    return checkout_payment_create


@router.delete('/checkout_payment_creates/{id}')
def delete_checkout_payment_create(request, id: int):
    checkout_payment_create = get_object_or_404(CheckoutPaymentCreate, id=id)
    checkout_payment_create.delete()
    return {'success': True}


# CheckoutShippingAddressUpdate endpoints
@router.get('/checkout_shipping_address_updates', response=List[CheckoutShippingAddressUpdate])
@paginate
def list_checkout_shipping_address_updates(request):
    return CheckoutShippingAddressUpdate.objects.all()


@router.get('/checkout_shipping_address_updates/{id}', response=CheckoutShippingAddressUpdate)
def get_checkout_shipping_address_update(request, id: int):
    return get_object_or_404(CheckoutShippingAddressUpdate, id=id)


@router.post('/checkout_shipping_address_updates', response=CheckoutShippingAddressUpdate)
def create_checkout_shipping_address_update(request, payload: CheckoutShippingAddressUpdateCreate):
    data = payload.dict()
    checkout_shipping_address_update = CheckoutShippingAddressUpdate.objects.create(**data)
    return checkout_shipping_address_update


@router.put('/checkout_shipping_address_updates/{id}', response=CheckoutShippingAddressUpdate)
def update_checkout_shipping_address_update(request, id: int, payload: CheckoutShippingAddressUpdateUpdate):
    checkout_shipping_address_update = get_object_or_404(CheckoutShippingAddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_shipping_address_update, attr, value)
    checkout_shipping_address_update.save()
    return checkout_shipping_address_update


@router.delete('/checkout_shipping_address_updates/{id}')
def delete_checkout_shipping_address_update(request, id: int):
    checkout_shipping_address_update = get_object_or_404(CheckoutShippingAddressUpdate, id=id)
    checkout_shipping_address_update.delete()
    return {'success': True}


# CheckoutSellerShippingMethodsUpdate endpoints
@router.get('/checkout_seller_shipping_methods_updates', response=List[CheckoutSellerShippingMethodsUpdate])
@paginate
def list_checkout_seller_shipping_methods_updates(request):
    return CheckoutSellerShippingMethodsUpdate.objects.all()


@router.get('/checkout_seller_shipping_methods_updates/{id}', response=CheckoutSellerShippingMethodsUpdate)
def get_checkout_seller_shipping_methods_update(request, id: int):
    return get_object_or_404(CheckoutSellerShippingMethodsUpdate, id=id)


@router.post('/checkout_seller_shipping_methods_updates', response=CheckoutSellerShippingMethodsUpdate)
def create_checkout_seller_shipping_methods_update(request, payload: CheckoutSellerShippingMethodsUpdateCreate):
    data = payload.dict()
    checkout_seller_shipping_methods_update = CheckoutSellerShippingMethodsUpdate.objects.create(**data)
    return checkout_seller_shipping_methods_update


@router.put('/checkout_seller_shipping_methods_updates/{id}', response=CheckoutSellerShippingMethodsUpdate)
def update_checkout_seller_shipping_methods_update(request, id: int, payload: CheckoutSellerShippingMethodsUpdateUpdate):
    checkout_seller_shipping_methods_update = get_object_or_404(CheckoutSellerShippingMethodsUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_seller_shipping_methods_update, attr, value)
    checkout_seller_shipping_methods_update.save()
    return checkout_seller_shipping_methods_update


@router.delete('/checkout_seller_shipping_methods_updates/{id}')
def delete_checkout_seller_shipping_methods_update(request, id: int):
    checkout_seller_shipping_methods_update = get_object_or_404(CheckoutSellerShippingMethodsUpdate, id=id)
    checkout_seller_shipping_methods_update.delete()
    return {'success': True}


# CheckoutMarketplaceShippingMethodUpdate endpoints
@router.get('/checkout_marketplace_shipping_method_updates', response=List[CheckoutMarketplaceShippingMethodUpdate])
@paginate
def list_checkout_marketplace_shipping_method_updates(request):
    return CheckoutMarketplaceShippingMethodUpdate.objects.all()


@router.get('/checkout_marketplace_shipping_method_updates/{id}', response=CheckoutMarketplaceShippingMethodUpdate)
def get_checkout_marketplace_shipping_method_update(request, id: int):
    return get_object_or_404(CheckoutMarketplaceShippingMethodUpdate, id=id)


@router.post('/checkout_marketplace_shipping_method_updates', response=CheckoutMarketplaceShippingMethodUpdate)
def create_checkout_marketplace_shipping_method_update(request, payload: CheckoutMarketplaceShippingMethodUpdateCreate):
    data = payload.dict()
    checkout_marketplace_shipping_method_update = CheckoutMarketplaceShippingMethodUpdate.objects.create(**data)
    return checkout_marketplace_shipping_method_update


@router.put('/checkout_marketplace_shipping_method_updates/{id}', response=CheckoutMarketplaceShippingMethodUpdate)
def update_checkout_marketplace_shipping_method_update(request, id: int, payload: CheckoutMarketplaceShippingMethodUpdateUpdate):
    checkout_marketplace_shipping_method_update = get_object_or_404(CheckoutMarketplaceShippingMethodUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_marketplace_shipping_method_update, attr, value)
    checkout_marketplace_shipping_method_update.save()
    return checkout_marketplace_shipping_method_update


@router.delete('/checkout_marketplace_shipping_method_updates/{id}')
def delete_checkout_marketplace_shipping_method_update(request, id: int):
    checkout_marketplace_shipping_method_update = get_object_or_404(CheckoutMarketplaceShippingMethodUpdate, id=id)
    checkout_marketplace_shipping_method_update.delete()
    return {'success': True}


# CheckoutSellerShippingMethodsBulkUpdate endpoints
@router.get('/checkout_seller_shipping_methods_bulk_updates', response=List[CheckoutSellerShippingMethodsBulkUpdate])
@paginate
def list_checkout_seller_shipping_methods_bulk_updates(request):
    return CheckoutSellerShippingMethodsBulkUpdate.objects.all()


@router.get('/checkout_seller_shipping_methods_bulk_updates/{id}', response=CheckoutSellerShippingMethodsBulkUpdate)
def get_checkout_seller_shipping_methods_bulk_update(request, id: int):
    return get_object_or_404(CheckoutSellerShippingMethodsBulkUpdate, id=id)


@router.post('/checkout_seller_shipping_methods_bulk_updates', response=CheckoutSellerShippingMethodsBulkUpdate)
def create_checkout_seller_shipping_methods_bulk_update(request, payload: CheckoutSellerShippingMethodsBulkUpdateCreate):
    data = payload.dict()
    checkout_seller_shipping_methods_bulk_update = CheckoutSellerShippingMethodsBulkUpdate.objects.create(**data)
    return checkout_seller_shipping_methods_bulk_update


@router.put('/checkout_seller_shipping_methods_bulk_updates/{id}', response=CheckoutSellerShippingMethodsBulkUpdate)
def update_checkout_seller_shipping_methods_bulk_update(request, id: int, payload: CheckoutSellerShippingMethodsBulkUpdateUpdate):
    checkout_seller_shipping_methods_bulk_update = get_object_or_404(CheckoutSellerShippingMethodsBulkUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_seller_shipping_methods_bulk_update, attr, value)
    checkout_seller_shipping_methods_bulk_update.save()
    return checkout_seller_shipping_methods_bulk_update


@router.delete('/checkout_seller_shipping_methods_bulk_updates/{id}')
def delete_checkout_seller_shipping_methods_bulk_update(request, id: int):
    checkout_seller_shipping_methods_bulk_update = get_object_or_404(CheckoutSellerShippingMethodsBulkUpdate, id=id)
    checkout_seller_shipping_methods_bulk_update.delete()
    return {'success': True}


# CheckoutSellerShippingMethodsClear endpoints
@router.get('/checkout_seller_shipping_methods_clears', response=List[CheckoutSellerShippingMethodsClear])
@paginate
def list_checkout_seller_shipping_methods_clears(request):
    return CheckoutSellerShippingMethodsClear.objects.all()


@router.get('/checkout_seller_shipping_methods_clears/{id}', response=CheckoutSellerShippingMethodsClear)
def get_checkout_seller_shipping_methods_clear(request, id: int):
    return get_object_or_404(CheckoutSellerShippingMethodsClear, id=id)


@router.post('/checkout_seller_shipping_methods_clears', response=CheckoutSellerShippingMethodsClear)
def create_checkout_seller_shipping_methods_clear(request, payload: CheckoutSellerShippingMethodsClearCreate):
    data = payload.dict()
    checkout_seller_shipping_methods_clear = CheckoutSellerShippingMethodsClear.objects.create(**data)
    return checkout_seller_shipping_methods_clear


@router.put('/checkout_seller_shipping_methods_clears/{id}', response=CheckoutSellerShippingMethodsClear)
def update_checkout_seller_shipping_methods_clear(request, id: int, payload: CheckoutSellerShippingMethodsClearUpdate):
    checkout_seller_shipping_methods_clear = get_object_or_404(CheckoutSellerShippingMethodsClear, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_seller_shipping_methods_clear, attr, value)
    checkout_seller_shipping_methods_clear.save()
    return checkout_seller_shipping_methods_clear


@router.delete('/checkout_seller_shipping_methods_clears/{id}')
def delete_checkout_seller_shipping_methods_clear(request, id: int):
    checkout_seller_shipping_methods_clear = get_object_or_404(CheckoutSellerShippingMethodsClear, id=id)
    checkout_seller_shipping_methods_clear.delete()
    return {'success': True}


# CheckoutDelete endpoints
@router.get('/checkout_deletes', response=List[CheckoutDelete])
@paginate
def list_checkout_deletes(request):
    return CheckoutDelete.objects.all()


@router.get('/checkout_deletes/{id}', response=CheckoutDelete)
def get_checkout_delete(request, id: int):
    return get_object_or_404(CheckoutDelete, id=id)


@router.post('/checkout_deletes', response=CheckoutDelete)
def create_checkout_delete(request, payload: CheckoutDeleteCreate):
    data = payload.dict()
    checkout_delete = CheckoutDelete.objects.create(**data)
    return checkout_delete


@router.put('/checkout_deletes/{id}', response=CheckoutDelete)
def update_checkout_delete(request, id: int, payload: CheckoutDeleteUpdate):
    checkout_delete = get_object_or_404(CheckoutDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_delete, attr, value)
    checkout_delete.save()
    return checkout_delete


@router.delete('/checkout_deletes/{id}')
def delete_checkout_delete(request, id: int):
    checkout_delete = get_object_or_404(CheckoutDelete, id=id)
    checkout_delete.delete()
    return {'success': True}


# CheckoutAddPONumbers endpoints
@router.get('/checkout_add_po_numberss', response=List[CheckoutAddPONumbers])
@paginate
def list_checkout_add_po_numberss(request):
    return CheckoutAddPONumbers.objects.all()


@router.get('/checkout_add_po_numberss/{id}', response=CheckoutAddPONumbers)
def get_checkout_add_po_numbers(request, id: int):
    return get_object_or_404(CheckoutAddPONumbers, id=id)


@router.post('/checkout_add_po_numberss', response=CheckoutAddPONumbers)
def create_checkout_add_po_numbers(request, payload: CheckoutAddPONumbersCreate):
    data = payload.dict()
    checkout_add_po_numbers = CheckoutAddPONumbers.objects.create(**data)
    return checkout_add_po_numbers


@router.put('/checkout_add_po_numberss/{id}', response=CheckoutAddPONumbers)
def update_checkout_add_po_numbers(request, id: int, payload: CheckoutAddPONumbersUpdate):
    checkout_add_po_numbers = get_object_or_404(CheckoutAddPONumbers, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_add_po_numbers, attr, value)
    checkout_add_po_numbers.save()
    return checkout_add_po_numbers


@router.delete('/checkout_add_po_numberss/{id}')
def delete_checkout_add_po_numbers(request, id: int):
    checkout_add_po_numbers = get_object_or_404(CheckoutAddPONumbers, id=id)
    checkout_add_po_numbers.delete()
    return {'success': True}


# CheckoutRemovePONumbers endpoints
@router.get('/checkout_remove_po_numberss', response=List[CheckoutRemovePONumbers])
@paginate
def list_checkout_remove_po_numberss(request):
    return CheckoutRemovePONumbers.objects.all()


@router.get('/checkout_remove_po_numberss/{id}', response=CheckoutRemovePONumbers)
def get_checkout_remove_po_numbers(request, id: int):
    return get_object_or_404(CheckoutRemovePONumbers, id=id)


@router.post('/checkout_remove_po_numberss', response=CheckoutRemovePONumbers)
def create_checkout_remove_po_numbers(request, payload: CheckoutRemovePONumbersCreate):
    data = payload.dict()
    checkout_remove_po_numbers = CheckoutRemovePONumbers.objects.create(**data)
    return checkout_remove_po_numbers


@router.put('/checkout_remove_po_numberss/{id}', response=CheckoutRemovePONumbers)
def update_checkout_remove_po_numbers(request, id: int, payload: CheckoutRemovePONumbersUpdate):
    checkout_remove_po_numbers = get_object_or_404(CheckoutRemovePONumbers, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_remove_po_numbers, attr, value)
    checkout_remove_po_numbers.save()
    return checkout_remove_po_numbers


@router.delete('/checkout_remove_po_numberss/{id}')
def delete_checkout_remove_po_numbers(request, id: int):
    checkout_remove_po_numbers = get_object_or_404(CheckoutRemovePONumbers, id=id)
    checkout_remove_po_numbers.delete()
    return {'success': True}


# CheckoutLineAddNote endpoints
@router.get('/checkout_line_add_notes', response=List[CheckoutLineAddNote])
@paginate
def list_checkout_line_add_notes(request):
    return CheckoutLineAddNote.objects.all()


@router.get('/checkout_line_add_notes/{id}', response=CheckoutLineAddNote)
def get_checkout_line_add_note(request, id: int):
    return get_object_or_404(CheckoutLineAddNote, id=id)


@router.post('/checkout_line_add_notes', response=CheckoutLineAddNote)
def create_checkout_line_add_note(request, payload: CheckoutLineAddNoteCreate):
    data = payload.dict()
    checkout_line_add_note = CheckoutLineAddNote.objects.create(**data)
    return checkout_line_add_note


@router.put('/checkout_line_add_notes/{id}', response=CheckoutLineAddNote)
def update_checkout_line_add_note(request, id: int, payload: CheckoutLineAddNoteUpdate):
    checkout_line_add_note = get_object_or_404(CheckoutLineAddNote, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(checkout_line_add_note, attr, value)
    checkout_line_add_note.save()
    return checkout_line_add_note


@router.delete('/checkout_line_add_notes/{id}')
def delete_checkout_line_add_note(request, id: int):
    checkout_line_add_note = get_object_or_404(CheckoutLineAddNote, id=id)
    checkout_line_add_note.delete()
    return {'success': True}


# AttributeCreate endpoints
@router.get('/attribute_creates', response=List[AttributeCreate])
@paginate
def list_attribute_creates(request):
    return AttributeCreate.objects.all()


@router.get('/attribute_creates/{id}', response=AttributeCreate)
def get_attribute_create(request, id: int):
    return get_object_or_404(AttributeCreate, id=id)


@router.post('/attribute_creates', response=AttributeCreate)
def create_attribute_create(request, payload: AttributeCreateCreate):
    data = payload.dict()
    attribute_create = AttributeCreate.objects.create(**data)
    return attribute_create


@router.put('/attribute_creates/{id}', response=AttributeCreate)
def update_attribute_create(request, id: int, payload: AttributeCreateUpdate):
    attribute_create = get_object_or_404(AttributeCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_create, attr, value)
    attribute_create.save()
    return attribute_create


@router.delete('/attribute_creates/{id}')
def delete_attribute_create(request, id: int):
    attribute_create = get_object_or_404(AttributeCreate, id=id)
    attribute_create.delete()
    return {'success': True}


# AttributeDelete endpoints
@router.get('/attribute_deletes', response=List[AttributeDelete])
@paginate
def list_attribute_deletes(request):
    return AttributeDelete.objects.all()


@router.get('/attribute_deletes/{id}', response=AttributeDelete)
def get_attribute_delete(request, id: int):
    return get_object_or_404(AttributeDelete, id=id)


@router.post('/attribute_deletes', response=AttributeDelete)
def create_attribute_delete(request, payload: AttributeDeleteCreate):
    data = payload.dict()
    attribute_delete = AttributeDelete.objects.create(**data)
    return attribute_delete


@router.put('/attribute_deletes/{id}', response=AttributeDelete)
def update_attribute_delete(request, id: int, payload: AttributeDeleteUpdate):
    attribute_delete = get_object_or_404(AttributeDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_delete, attr, value)
    attribute_delete.save()
    return attribute_delete


@router.delete('/attribute_deletes/{id}')
def delete_attribute_delete(request, id: int):
    attribute_delete = get_object_or_404(AttributeDelete, id=id)
    attribute_delete.delete()
    return {'success': True}


# AttributeBulkDelete endpoints
@router.get('/attribute_bulk_deletes', response=List[AttributeBulkDelete])
@paginate
def list_attribute_bulk_deletes(request):
    return AttributeBulkDelete.objects.all()


@router.get('/attribute_bulk_deletes/{id}', response=AttributeBulkDelete)
def get_attribute_bulk_delete(request, id: int):
    return get_object_or_404(AttributeBulkDelete, id=id)


@router.post('/attribute_bulk_deletes', response=AttributeBulkDelete)
def create_attribute_bulk_delete(request, payload: AttributeBulkDeleteCreate):
    data = payload.dict()
    attribute_bulk_delete = AttributeBulkDelete.objects.create(**data)
    return attribute_bulk_delete


@router.put('/attribute_bulk_deletes/{id}', response=AttributeBulkDelete)
def update_attribute_bulk_delete(request, id: int, payload: AttributeBulkDeleteUpdate):
    attribute_bulk_delete = get_object_or_404(AttributeBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_bulk_delete, attr, value)
    attribute_bulk_delete.save()
    return attribute_bulk_delete


@router.delete('/attribute_bulk_deletes/{id}')
def delete_attribute_bulk_delete(request, id: int):
    attribute_bulk_delete = get_object_or_404(AttributeBulkDelete, id=id)
    attribute_bulk_delete.delete()
    return {'success': True}


# AttributeAssign endpoints
@router.get('/attribute_assigns', response=List[AttributeAssign])
@paginate
def list_attribute_assigns(request):
    return AttributeAssign.objects.all()


@router.get('/attribute_assigns/{id}', response=AttributeAssign)
def get_attribute_assign(request, id: int):
    return get_object_or_404(AttributeAssign, id=id)


@router.post('/attribute_assigns', response=AttributeAssign)
def create_attribute_assign(request, payload: AttributeAssignCreate):
    data = payload.dict()
    attribute_assign = AttributeAssign.objects.create(**data)
    return attribute_assign


@router.put('/attribute_assigns/{id}', response=AttributeAssign)
def update_attribute_assign(request, id: int, payload: AttributeAssignUpdate):
    attribute_assign = get_object_or_404(AttributeAssign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_assign, attr, value)
    attribute_assign.save()
    return attribute_assign


@router.delete('/attribute_assigns/{id}')
def delete_attribute_assign(request, id: int):
    attribute_assign = get_object_or_404(AttributeAssign, id=id)
    attribute_assign.delete()
    return {'success': True}


# AttributeUnassign endpoints
@router.get('/attribute_unassigns', response=List[AttributeUnassign])
@paginate
def list_attribute_unassigns(request):
    return AttributeUnassign.objects.all()


@router.get('/attribute_unassigns/{id}', response=AttributeUnassign)
def get_attribute_unassign(request, id: int):
    return get_object_or_404(AttributeUnassign, id=id)


@router.post('/attribute_unassigns', response=AttributeUnassign)
def create_attribute_unassign(request, payload: AttributeUnassignCreate):
    data = payload.dict()
    attribute_unassign = AttributeUnassign.objects.create(**data)
    return attribute_unassign


@router.put('/attribute_unassigns/{id}', response=AttributeUnassign)
def update_attribute_unassign(request, id: int, payload: AttributeUnassignUpdate):
    attribute_unassign = get_object_or_404(AttributeUnassign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_unassign, attr, value)
    attribute_unassign.save()
    return attribute_unassign


@router.delete('/attribute_unassigns/{id}')
def delete_attribute_unassign(request, id: int):
    attribute_unassign = get_object_or_404(AttributeUnassign, id=id)
    attribute_unassign.delete()
    return {'success': True}


# AttributeUpdate endpoints
@router.get('/attribute_updates', response=List[AttributeUpdate])
@paginate
def list_attribute_updates(request):
    return AttributeUpdate.objects.all()


@router.get('/attribute_updates/{id}', response=AttributeUpdate)
def get_attribute_update(request, id: int):
    return get_object_or_404(AttributeUpdate, id=id)


@router.post('/attribute_updates', response=AttributeUpdate)
def create_attribute_update(request, payload: AttributeUpdateCreate):
    data = payload.dict()
    attribute_update = AttributeUpdate.objects.create(**data)
    return attribute_update


@router.put('/attribute_updates/{id}', response=AttributeUpdate)
def update_attribute_update(request, id: int, payload: AttributeUpdateUpdate):
    attribute_update = get_object_or_404(AttributeUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_update, attr, value)
    attribute_update.save()
    return attribute_update


@router.delete('/attribute_updates/{id}')
def delete_attribute_update(request, id: int):
    attribute_update = get_object_or_404(AttributeUpdate, id=id)
    attribute_update.delete()
    return {'success': True}


# CustomAttributeAssign endpoints
@router.get('/custom_attribute_assigns', response=List[CustomAttributeAssign])
@paginate
def list_custom_attribute_assigns(request):
    return CustomAttributeAssign.objects.all()


@router.get('/custom_attribute_assigns/{id}', response=CustomAttributeAssign)
def get_custom_attribute_assign(request, id: int):
    return get_object_or_404(CustomAttributeAssign, id=id)


@router.post('/custom_attribute_assigns', response=CustomAttributeAssign)
def create_custom_attribute_assign(request, payload: CustomAttributeAssignCreate):
    data = payload.dict()
    custom_attribute_assign = CustomAttributeAssign.objects.create(**data)
    return custom_attribute_assign


@router.put('/custom_attribute_assigns/{id}', response=CustomAttributeAssign)
def update_custom_attribute_assign(request, id: int, payload: CustomAttributeAssignUpdate):
    custom_attribute_assign = get_object_or_404(CustomAttributeAssign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_attribute_assign, attr, value)
    custom_attribute_assign.save()
    return custom_attribute_assign


@router.delete('/custom_attribute_assigns/{id}')
def delete_custom_attribute_assign(request, id: int):
    custom_attribute_assign = get_object_or_404(CustomAttributeAssign, id=id)
    custom_attribute_assign.delete()
    return {'success': True}


# CustomAttributeUnassign endpoints
@router.get('/custom_attribute_unassigns', response=List[CustomAttributeUnassign])
@paginate
def list_custom_attribute_unassigns(request):
    return CustomAttributeUnassign.objects.all()


@router.get('/custom_attribute_unassigns/{id}', response=CustomAttributeUnassign)
def get_custom_attribute_unassign(request, id: int):
    return get_object_or_404(CustomAttributeUnassign, id=id)


@router.post('/custom_attribute_unassigns', response=CustomAttributeUnassign)
def create_custom_attribute_unassign(request, payload: CustomAttributeUnassignCreate):
    data = payload.dict()
    custom_attribute_unassign = CustomAttributeUnassign.objects.create(**data)
    return custom_attribute_unassign


@router.put('/custom_attribute_unassigns/{id}', response=CustomAttributeUnassign)
def update_custom_attribute_unassign(request, id: int, payload: CustomAttributeUnassignUpdate):
    custom_attribute_unassign = get_object_or_404(CustomAttributeUnassign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(custom_attribute_unassign, attr, value)
    custom_attribute_unassign.save()
    return custom_attribute_unassign


@router.delete('/custom_attribute_unassigns/{id}')
def delete_custom_attribute_unassign(request, id: int):
    custom_attribute_unassign = get_object_or_404(CustomAttributeUnassign, id=id)
    custom_attribute_unassign.delete()
    return {'success': True}


# InstanceAttributeUnassign endpoints
@router.get('/instance_attribute_unassigns', response=List[InstanceAttributeUnassign])
@paginate
def list_instance_attribute_unassigns(request):
    return InstanceAttributeUnassign.objects.all()


@router.get('/instance_attribute_unassigns/{id}', response=InstanceAttributeUnassign)
def get_instance_attribute_unassign(request, id: int):
    return get_object_or_404(InstanceAttributeUnassign, id=id)


@router.post('/instance_attribute_unassigns', response=InstanceAttributeUnassign)
def create_instance_attribute_unassign(request, payload: InstanceAttributeUnassignCreate):
    data = payload.dict()
    instance_attribute_unassign = InstanceAttributeUnassign.objects.create(**data)
    return instance_attribute_unassign


@router.put('/instance_attribute_unassigns/{id}', response=InstanceAttributeUnassign)
def update_instance_attribute_unassign(request, id: int, payload: InstanceAttributeUnassignUpdate):
    instance_attribute_unassign = get_object_or_404(InstanceAttributeUnassign, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(instance_attribute_unassign, attr, value)
    instance_attribute_unassign.save()
    return instance_attribute_unassign


@router.delete('/instance_attribute_unassigns/{id}')
def delete_instance_attribute_unassign(request, id: int):
    instance_attribute_unassign = get_object_or_404(InstanceAttributeUnassign, id=id)
    instance_attribute_unassign.delete()
    return {'success': True}


# AttributeError endpoints
@router.get('/attribute_errors', response=List[AttributeError])
@paginate
def list_attribute_errors(request):
    return AttributeError.objects.all()


@router.get('/attribute_errors/{id}', response=AttributeError)
def get_attribute_error(request, id: int):
    return get_object_or_404(AttributeError, id=id)


@router.post('/attribute_errors', response=AttributeError)
def create_attribute_error(request, payload: AttributeErrorCreate):
    data = payload.dict()
    attribute_error = AttributeError.objects.create(**data)
    return attribute_error


@router.put('/attribute_errors/{id}', response=AttributeError)
def update_attribute_error(request, id: int, payload: AttributeErrorUpdate):
    attribute_error = get_object_or_404(AttributeError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_error, attr, value)
    attribute_error.save()
    return attribute_error


@router.delete('/attribute_errors/{id}')
def delete_attribute_error(request, id: int):
    attribute_error = get_object_or_404(AttributeError, id=id)
    attribute_error.delete()
    return {'success': True}


# AttributeValueCreate endpoints
@router.get('/attribute_value_creates', response=List[AttributeValueCreate])
@paginate
def list_attribute_value_creates(request):
    return AttributeValueCreate.objects.all()


@router.get('/attribute_value_creates/{id}', response=AttributeValueCreate)
def get_attribute_value_create(request, id: int):
    return get_object_or_404(AttributeValueCreate, id=id)


@router.post('/attribute_value_creates', response=AttributeValueCreate)
def create_attribute_value_create(request, payload: AttributeValueCreateCreate):
    data = payload.dict()
    attribute_value_create = AttributeValueCreate.objects.create(**data)
    return attribute_value_create


@router.put('/attribute_value_creates/{id}', response=AttributeValueCreate)
def update_attribute_value_create(request, id: int, payload: AttributeValueCreateUpdate):
    attribute_value_create = get_object_or_404(AttributeValueCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value_create, attr, value)
    attribute_value_create.save()
    return attribute_value_create


@router.delete('/attribute_value_creates/{id}')
def delete_attribute_value_create(request, id: int):
    attribute_value_create = get_object_or_404(AttributeValueCreate, id=id)
    attribute_value_create.delete()
    return {'success': True}


# AttributeValueDelete endpoints
@router.get('/attribute_value_deletes', response=List[AttributeValueDelete])
@paginate
def list_attribute_value_deletes(request):
    return AttributeValueDelete.objects.all()


@router.get('/attribute_value_deletes/{id}', response=AttributeValueDelete)
def get_attribute_value_delete(request, id: int):
    return get_object_or_404(AttributeValueDelete, id=id)


@router.post('/attribute_value_deletes', response=AttributeValueDelete)
def create_attribute_value_delete(request, payload: AttributeValueDeleteCreate):
    data = payload.dict()
    attribute_value_delete = AttributeValueDelete.objects.create(**data)
    return attribute_value_delete


@router.put('/attribute_value_deletes/{id}', response=AttributeValueDelete)
def update_attribute_value_delete(request, id: int, payload: AttributeValueDeleteUpdate):
    attribute_value_delete = get_object_or_404(AttributeValueDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value_delete, attr, value)
    attribute_value_delete.save()
    return attribute_value_delete


@router.delete('/attribute_value_deletes/{id}')
def delete_attribute_value_delete(request, id: int):
    attribute_value_delete = get_object_or_404(AttributeValueDelete, id=id)
    attribute_value_delete.delete()
    return {'success': True}


# AttributeValueBulkCreate endpoints
@router.get('/attribute_value_bulk_creates', response=List[AttributeValueBulkCreate])
@paginate
def list_attribute_value_bulk_creates(request):
    return AttributeValueBulkCreate.objects.all()


@router.get('/attribute_value_bulk_creates/{id}', response=AttributeValueBulkCreate)
def get_attribute_value_bulk_create(request, id: int):
    return get_object_or_404(AttributeValueBulkCreate, id=id)


@router.post('/attribute_value_bulk_creates', response=AttributeValueBulkCreate)
def create_attribute_value_bulk_create(request, payload: AttributeValueBulkCreateCreate):
    data = payload.dict()
    attribute_value_bulk_create = AttributeValueBulkCreate.objects.create(**data)
    return attribute_value_bulk_create


@router.put('/attribute_value_bulk_creates/{id}', response=AttributeValueBulkCreate)
def update_attribute_value_bulk_create(request, id: int, payload: AttributeValueBulkCreateUpdate):
    attribute_value_bulk_create = get_object_or_404(AttributeValueBulkCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value_bulk_create, attr, value)
    attribute_value_bulk_create.save()
    return attribute_value_bulk_create


@router.delete('/attribute_value_bulk_creates/{id}')
def delete_attribute_value_bulk_create(request, id: int):
    attribute_value_bulk_create = get_object_or_404(AttributeValueBulkCreate, id=id)
    attribute_value_bulk_create.delete()
    return {'success': True}


# AttributeValueBulkDelete endpoints
@router.get('/attribute_value_bulk_deletes', response=List[AttributeValueBulkDelete])
@paginate
def list_attribute_value_bulk_deletes(request):
    return AttributeValueBulkDelete.objects.all()


@router.get('/attribute_value_bulk_deletes/{id}', response=AttributeValueBulkDelete)
def get_attribute_value_bulk_delete(request, id: int):
    return get_object_or_404(AttributeValueBulkDelete, id=id)


@router.post('/attribute_value_bulk_deletes', response=AttributeValueBulkDelete)
def create_attribute_value_bulk_delete(request, payload: AttributeValueBulkDeleteCreate):
    data = payload.dict()
    attribute_value_bulk_delete = AttributeValueBulkDelete.objects.create(**data)
    return attribute_value_bulk_delete


@router.put('/attribute_value_bulk_deletes/{id}', response=AttributeValueBulkDelete)
def update_attribute_value_bulk_delete(request, id: int, payload: AttributeValueBulkDeleteUpdate):
    attribute_value_bulk_delete = get_object_or_404(AttributeValueBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value_bulk_delete, attr, value)
    attribute_value_bulk_delete.save()
    return attribute_value_bulk_delete


@router.delete('/attribute_value_bulk_deletes/{id}')
def delete_attribute_value_bulk_delete(request, id: int):
    attribute_value_bulk_delete = get_object_or_404(AttributeValueBulkDelete, id=id)
    attribute_value_bulk_delete.delete()
    return {'success': True}


# AttributeValueUpdate endpoints
@router.get('/attribute_value_updates', response=List[AttributeValueUpdate])
@paginate
def list_attribute_value_updates(request):
    return AttributeValueUpdate.objects.all()


@router.get('/attribute_value_updates/{id}', response=AttributeValueUpdate)
def get_attribute_value_update(request, id: int):
    return get_object_or_404(AttributeValueUpdate, id=id)


@router.post('/attribute_value_updates', response=AttributeValueUpdate)
def create_attribute_value_update(request, payload: AttributeValueUpdateCreate):
    data = payload.dict()
    attribute_value_update = AttributeValueUpdate.objects.create(**data)
    return attribute_value_update


@router.put('/attribute_value_updates/{id}', response=AttributeValueUpdate)
def update_attribute_value_update(request, id: int, payload: AttributeValueUpdateUpdate):
    attribute_value_update = get_object_or_404(AttributeValueUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_value_update, attr, value)
    attribute_value_update.save()
    return attribute_value_update


@router.delete('/attribute_value_updates/{id}')
def delete_attribute_value_update(request, id: int):
    attribute_value_update = get_object_or_404(AttributeValueUpdate, id=id)
    attribute_value_update.delete()
    return {'success': True}


# AttributeValuesReorder endpoints
@router.get('/attribute_values_reorders', response=List[AttributeValuesReorder])
@paginate
def list_attribute_values_reorders(request):
    return AttributeValuesReorder.objects.all()


@router.get('/attribute_values_reorders/{id}', response=AttributeValuesReorder)
def get_attribute_values_reorder(request, id: int):
    return get_object_or_404(AttributeValuesReorder, id=id)


@router.post('/attribute_values_reorders', response=AttributeValuesReorder)
def create_attribute_values_reorder(request, payload: AttributeValuesReorderCreate):
    data = payload.dict()
    attribute_values_reorder = AttributeValuesReorder.objects.create(**data)
    return attribute_values_reorder


@router.put('/attribute_values_reorders/{id}', response=AttributeValuesReorder)
def update_attribute_values_reorder(request, id: int, payload: AttributeValuesReorderUpdate):
    attribute_values_reorder = get_object_or_404(AttributeValuesReorder, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(attribute_values_reorder, attr, value)
    attribute_values_reorder.save()
    return attribute_values_reorder


@router.delete('/attribute_values_reorders/{id}')
def delete_attribute_values_reorder(request, id: int):
    attribute_values_reorder = get_object_or_404(AttributeValuesReorder, id=id)
    attribute_values_reorder.delete()
    return {'success': True}


# AppCreate endpoints
@router.get('/app_creates', response=List[AppCreate])
@paginate
def list_app_creates(request):
    return AppCreate.objects.all()


@router.get('/app_creates/{id}', response=AppCreate)
def get_app_create(request, id: int):
    return get_object_or_404(AppCreate, id=id)


@router.post('/app_creates', response=AppCreate)
def create_app_create(request, payload: AppCreateCreate):
    data = payload.dict()
    app_create = AppCreate.objects.create(**data)
    return app_create


@router.put('/app_creates/{id}', response=AppCreate)
def update_app_create(request, id: int, payload: AppCreateUpdate):
    app_create = get_object_or_404(AppCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_create, attr, value)
    app_create.save()
    return app_create


@router.delete('/app_creates/{id}')
def delete_app_create(request, id: int):
    app_create = get_object_or_404(AppCreate, id=id)
    app_create.delete()
    return {'success': True}


# AppError endpoints
@router.get('/app_errors', response=List[AppError])
@paginate
def list_app_errors(request):
    return AppError.objects.all()


@router.get('/app_errors/{id}', response=AppError)
def get_app_error(request, id: int):
    return get_object_or_404(AppError, id=id)


@router.post('/app_errors', response=AppError)
def create_app_error(request, payload: AppErrorCreate):
    data = payload.dict()
    app_error = AppError.objects.create(**data)
    return app_error


@router.put('/app_errors/{id}', response=AppError)
def update_app_error(request, id: int, payload: AppErrorUpdate):
    app_error = get_object_or_404(AppError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_error, attr, value)
    app_error.save()
    return app_error


@router.delete('/app_errors/{id}')
def delete_app_error(request, id: int):
    app_error = get_object_or_404(AppError, id=id)
    app_error.delete()
    return {'success': True}


# AppUpdate endpoints
@router.get('/app_updates', response=List[AppUpdate])
@paginate
def list_app_updates(request):
    return AppUpdate.objects.all()


@router.get('/app_updates/{id}', response=AppUpdate)
def get_app_update(request, id: int):
    return get_object_or_404(AppUpdate, id=id)


@router.post('/app_updates', response=AppUpdate)
def create_app_update(request, payload: AppUpdateCreate):
    data = payload.dict()
    app_update = AppUpdate.objects.create(**data)
    return app_update


@router.put('/app_updates/{id}', response=AppUpdate)
def update_app_update(request, id: int, payload: AppUpdateUpdate):
    app_update = get_object_or_404(AppUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_update, attr, value)
    app_update.save()
    return app_update


@router.delete('/app_updates/{id}')
def delete_app_update(request, id: int):
    app_update = get_object_or_404(AppUpdate, id=id)
    app_update.delete()
    return {'success': True}


# AppDelete endpoints
@router.get('/app_deletes', response=List[AppDelete])
@paginate
def list_app_deletes(request):
    return AppDelete.objects.all()


@router.get('/app_deletes/{id}', response=AppDelete)
def get_app_delete(request, id: int):
    return get_object_or_404(AppDelete, id=id)


@router.post('/app_deletes', response=AppDelete)
def create_app_delete(request, payload: AppDeleteCreate):
    data = payload.dict()
    app_delete = AppDelete.objects.create(**data)
    return app_delete


@router.put('/app_deletes/{id}', response=AppDelete)
def update_app_delete(request, id: int, payload: AppDeleteUpdate):
    app_delete = get_object_or_404(AppDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_delete, attr, value)
    app_delete.save()
    return app_delete


@router.delete('/app_deletes/{id}')
def delete_app_delete(request, id: int):
    app_delete = get_object_or_404(AppDelete, id=id)
    app_delete.delete()
    return {'success': True}


# AppTokenCreate endpoints
@router.get('/app_token_creates', response=List[AppTokenCreate])
@paginate
def list_app_token_creates(request):
    return AppTokenCreate.objects.all()


@router.get('/app_token_creates/{id}', response=AppTokenCreate)
def get_app_token_create(request, id: int):
    return get_object_or_404(AppTokenCreate, id=id)


@router.post('/app_token_creates', response=AppTokenCreate)
def create_app_token_create(request, payload: AppTokenCreateCreate):
    data = payload.dict()
    app_token_create = AppTokenCreate.objects.create(**data)
    return app_token_create


@router.put('/app_token_creates/{id}', response=AppTokenCreate)
def update_app_token_create(request, id: int, payload: AppTokenCreateUpdate):
    app_token_create = get_object_or_404(AppTokenCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_token_create, attr, value)
    app_token_create.save()
    return app_token_create


@router.delete('/app_token_creates/{id}')
def delete_app_token_create(request, id: int):
    app_token_create = get_object_or_404(AppTokenCreate, id=id)
    app_token_create.delete()
    return {'success': True}


# AppTokenDelete endpoints
@router.get('/app_token_deletes', response=List[AppTokenDelete])
@paginate
def list_app_token_deletes(request):
    return AppTokenDelete.objects.all()


@router.get('/app_token_deletes/{id}', response=AppTokenDelete)
def get_app_token_delete(request, id: int):
    return get_object_or_404(AppTokenDelete, id=id)


@router.post('/app_token_deletes', response=AppTokenDelete)
def create_app_token_delete(request, payload: AppTokenDeleteCreate):
    data = payload.dict()
    app_token_delete = AppTokenDelete.objects.create(**data)
    return app_token_delete


@router.put('/app_token_deletes/{id}', response=AppTokenDelete)
def update_app_token_delete(request, id: int, payload: AppTokenDeleteUpdate):
    app_token_delete = get_object_or_404(AppTokenDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_token_delete, attr, value)
    app_token_delete.save()
    return app_token_delete


@router.delete('/app_token_deletes/{id}')
def delete_app_token_delete(request, id: int):
    app_token_delete = get_object_or_404(AppTokenDelete, id=id)
    app_token_delete.delete()
    return {'success': True}


# AppTokenVerify endpoints
@router.get('/app_token_verifys', response=List[AppTokenVerify])
@paginate
def list_app_token_verifys(request):
    return AppTokenVerify.objects.all()


@router.get('/app_token_verifys/{id}', response=AppTokenVerify)
def get_app_token_verify(request, id: int):
    return get_object_or_404(AppTokenVerify, id=id)


@router.post('/app_token_verifys', response=AppTokenVerify)
def create_app_token_verify(request, payload: AppTokenVerifyCreate):
    data = payload.dict()
    app_token_verify = AppTokenVerify.objects.create(**data)
    return app_token_verify


@router.put('/app_token_verifys/{id}', response=AppTokenVerify)
def update_app_token_verify(request, id: int, payload: AppTokenVerifyUpdate):
    app_token_verify = get_object_or_404(AppTokenVerify, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_token_verify, attr, value)
    app_token_verify.save()
    return app_token_verify


@router.delete('/app_token_verifys/{id}')
def delete_app_token_verify(request, id: int):
    app_token_verify = get_object_or_404(AppTokenVerify, id=id)
    app_token_verify.delete()
    return {'success': True}


# AppInstall endpoints
@router.get('/app_installs', response=List[AppInstall])
@paginate
def list_app_installs(request):
    return AppInstall.objects.all()


@router.get('/app_installs/{id}', response=AppInstall)
def get_app_install(request, id: int):
    return get_object_or_404(AppInstall, id=id)


@router.post('/app_installs', response=AppInstall)
def create_app_install(request, payload: AppInstallCreate):
    data = payload.dict()
    app_install = AppInstall.objects.create(**data)
    return app_install


@router.put('/app_installs/{id}', response=AppInstall)
def update_app_install(request, id: int, payload: AppInstallUpdate):
    app_install = get_object_or_404(AppInstall, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_install, attr, value)
    app_install.save()
    return app_install


@router.delete('/app_installs/{id}')
def delete_app_install(request, id: int):
    app_install = get_object_or_404(AppInstall, id=id)
    app_install.delete()
    return {'success': True}


# AppRetryInstall endpoints
@router.get('/app_retry_installs', response=List[AppRetryInstall])
@paginate
def list_app_retry_installs(request):
    return AppRetryInstall.objects.all()


@router.get('/app_retry_installs/{id}', response=AppRetryInstall)
def get_app_retry_install(request, id: int):
    return get_object_or_404(AppRetryInstall, id=id)


@router.post('/app_retry_installs', response=AppRetryInstall)
def create_app_retry_install(request, payload: AppRetryInstallCreate):
    data = payload.dict()
    app_retry_install = AppRetryInstall.objects.create(**data)
    return app_retry_install


@router.put('/app_retry_installs/{id}', response=AppRetryInstall)
def update_app_retry_install(request, id: int, payload: AppRetryInstallUpdate):
    app_retry_install = get_object_or_404(AppRetryInstall, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_retry_install, attr, value)
    app_retry_install.save()
    return app_retry_install


@router.delete('/app_retry_installs/{id}')
def delete_app_retry_install(request, id: int):
    app_retry_install = get_object_or_404(AppRetryInstall, id=id)
    app_retry_install.delete()
    return {'success': True}


# AppDeleteFailedInstallation endpoints
@router.get('/app_delete_failed_installations', response=List[AppDeleteFailedInstallation])
@paginate
def list_app_delete_failed_installations(request):
    return AppDeleteFailedInstallation.objects.all()


@router.get('/app_delete_failed_installations/{id}', response=AppDeleteFailedInstallation)
def get_app_delete_failed_installation(request, id: int):
    return get_object_or_404(AppDeleteFailedInstallation, id=id)


@router.post('/app_delete_failed_installations', response=AppDeleteFailedInstallation)
def create_app_delete_failed_installation(request, payload: AppDeleteFailedInstallationCreate):
    data = payload.dict()
    app_delete_failed_installation = AppDeleteFailedInstallation.objects.create(**data)
    return app_delete_failed_installation


@router.put('/app_delete_failed_installations/{id}', response=AppDeleteFailedInstallation)
def update_app_delete_failed_installation(request, id: int, payload: AppDeleteFailedInstallationUpdate):
    app_delete_failed_installation = get_object_or_404(AppDeleteFailedInstallation, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_delete_failed_installation, attr, value)
    app_delete_failed_installation.save()
    return app_delete_failed_installation


@router.delete('/app_delete_failed_installations/{id}')
def delete_app_delete_failed_installation(request, id: int):
    app_delete_failed_installation = get_object_or_404(AppDeleteFailedInstallation, id=id)
    app_delete_failed_installation.delete()
    return {'success': True}


# AppFetchManifest endpoints
@router.get('/app_fetch_manifests', response=List[AppFetchManifest])
@paginate
def list_app_fetch_manifests(request):
    return AppFetchManifest.objects.all()


@router.get('/app_fetch_manifests/{id}', response=AppFetchManifest)
def get_app_fetch_manifest(request, id: int):
    return get_object_or_404(AppFetchManifest, id=id)


@router.post('/app_fetch_manifests', response=AppFetchManifest)
def create_app_fetch_manifest(request, payload: AppFetchManifestCreate):
    data = payload.dict()
    app_fetch_manifest = AppFetchManifest.objects.create(**data)
    return app_fetch_manifest


@router.put('/app_fetch_manifests/{id}', response=AppFetchManifest)
def update_app_fetch_manifest(request, id: int, payload: AppFetchManifestUpdate):
    app_fetch_manifest = get_object_or_404(AppFetchManifest, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_fetch_manifest, attr, value)
    app_fetch_manifest.save()
    return app_fetch_manifest


@router.delete('/app_fetch_manifests/{id}')
def delete_app_fetch_manifest(request, id: int):
    app_fetch_manifest = get_object_or_404(AppFetchManifest, id=id)
    app_fetch_manifest.delete()
    return {'success': True}


# Manifest endpoints
@router.get('/manifests', response=List[Manifest])
@paginate
def list_manifests(request):
    return Manifest.objects.all()


@router.get('/manifests/{id}', response=Manifest)
def get_manifest(request, id: int):
    return get_object_or_404(Manifest, id=id)


@router.post('/manifests', response=Manifest)
def create_manifest(request, payload: ManifestCreate):
    data = payload.dict()
    manifest = Manifest.objects.create(**data)
    return manifest


@router.put('/manifests/{id}', response=Manifest)
def update_manifest(request, id: int, payload: ManifestUpdate):
    manifest = get_object_or_404(Manifest, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(manifest, attr, value)
    manifest.save()
    return manifest


@router.delete('/manifests/{id}')
def delete_manifest(request, id: int):
    manifest = get_object_or_404(Manifest, id=id)
    manifest.delete()
    return {'success': True}


# AppActivate endpoints
@router.get('/app_activates', response=List[AppActivate])
@paginate
def list_app_activates(request):
    return AppActivate.objects.all()


@router.get('/app_activates/{id}', response=AppActivate)
def get_app_activate(request, id: int):
    return get_object_or_404(AppActivate, id=id)


@router.post('/app_activates', response=AppActivate)
def create_app_activate(request, payload: AppActivateCreate):
    data = payload.dict()
    app_activate = AppActivate.objects.create(**data)
    return app_activate


@router.put('/app_activates/{id}', response=AppActivate)
def update_app_activate(request, id: int, payload: AppActivateUpdate):
    app_activate = get_object_or_404(AppActivate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_activate, attr, value)
    app_activate.save()
    return app_activate


@router.delete('/app_activates/{id}')
def delete_app_activate(request, id: int):
    app_activate = get_object_or_404(AppActivate, id=id)
    app_activate.delete()
    return {'success': True}


# AppDeactivate endpoints
@router.get('/app_deactivates', response=List[AppDeactivate])
@paginate
def list_app_deactivates(request):
    return AppDeactivate.objects.all()


@router.get('/app_deactivates/{id}', response=AppDeactivate)
def get_app_deactivate(request, id: int):
    return get_object_or_404(AppDeactivate, id=id)


@router.post('/app_deactivates', response=AppDeactivate)
def create_app_deactivate(request, payload: AppDeactivateCreate):
    data = payload.dict()
    app_deactivate = AppDeactivate.objects.create(**data)
    return app_deactivate


@router.put('/app_deactivates/{id}', response=AppDeactivate)
def update_app_deactivate(request, id: int, payload: AppDeactivateUpdate):
    app_deactivate = get_object_or_404(AppDeactivate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(app_deactivate, attr, value)
    app_deactivate.save()
    return app_deactivate


@router.delete('/app_deactivates/{id}')
def delete_app_deactivate(request, id: int):
    app_deactivate = get_object_or_404(AppDeactivate, id=id)
    app_deactivate.delete()
    return {'success': True}


# CreateCustomerToken endpoints
@router.get('/create_customer_tokens', response=List[CreateCustomerToken])
@paginate
def list_create_customer_tokens(request):
    return CreateCustomerToken.objects.all()


@router.get('/create_customer_tokens/{id}', response=CreateCustomerToken)
def get_create_customer_token(request, id: int):
    return get_object_or_404(CreateCustomerToken, id=id)


@router.post('/create_customer_tokens', response=CreateCustomerToken)
def create_create_customer_token(request, payload: CreateCustomerTokenCreate):
    data = payload.dict()
    create_customer_token = CreateCustomerToken.objects.create(**data)
    return create_customer_token


@router.put('/create_customer_tokens/{id}', response=CreateCustomerToken)
def update_create_customer_token(request, id: int, payload: CreateCustomerTokenUpdate):
    create_customer_token = get_object_or_404(CreateCustomerToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(create_customer_token, attr, value)
    create_customer_token.save()
    return create_customer_token


@router.delete('/create_customer_tokens/{id}')
def delete_create_customer_token(request, id: int):
    create_customer_token = get_object_or_404(CreateCustomerToken, id=id)
    create_customer_token.delete()
    return {'success': True}


# AuthError endpoints
@router.get('/auth_errors', response=List[AuthError])
@paginate
def list_auth_errors(request):
    return AuthError.objects.all()


@router.get('/auth_errors/{id}', response=AuthError)
def get_auth_error(request, id: int):
    return get_object_or_404(AuthError, id=id)


@router.post('/auth_errors', response=AuthError)
def create_auth_error(request, payload: AuthErrorCreate):
    data = payload.dict()
    auth_error = AuthError.objects.create(**data)
    return auth_error


@router.put('/auth_errors/{id}', response=AuthError)
def update_auth_error(request, id: int, payload: AuthErrorUpdate):
    auth_error = get_object_or_404(AuthError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(auth_error, attr, value)
    auth_error.save()
    return auth_error


@router.delete('/auth_errors/{id}')
def delete_auth_error(request, id: int):
    auth_error = get_object_or_404(AuthError, id=id)
    auth_error.delete()
    return {'success': True}


# CreateToken endpoints
@router.get('/create_tokens', response=List[CreateToken])
@paginate
def list_create_tokens(request):
    return CreateToken.objects.all()


@router.get('/create_tokens/{id}', response=CreateToken)
def get_create_token(request, id: int):
    return get_object_or_404(CreateToken, id=id)


@router.post('/create_tokens', response=CreateToken)
def create_create_token(request, payload: CreateTokenCreate):
    data = payload.dict()
    create_token = CreateToken.objects.create(**data)
    return create_token


@router.put('/create_tokens/{id}', response=CreateToken)
def update_create_token(request, id: int, payload: CreateTokenUpdate):
    create_token = get_object_or_404(CreateToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(create_token, attr, value)
    create_token.save()
    return create_token


@router.delete('/create_tokens/{id}')
def delete_create_token(request, id: int):
    create_token = get_object_or_404(CreateToken, id=id)
    create_token.delete()
    return {'success': True}


# AccountError endpoints
@router.get('/account_errors', response=List[AccountError])
@paginate
def list_account_errors(request):
    return AccountError.objects.all()


@router.get('/account_errors/{id}', response=AccountError)
def get_account_error(request, id: int):
    return get_object_or_404(AccountError, id=id)


@router.post('/account_errors', response=AccountError)
def create_account_error(request, payload: AccountErrorCreate):
    data = payload.dict()
    account_error = AccountError.objects.create(**data)
    return account_error


@router.put('/account_errors/{id}', response=AccountError)
def update_account_error(request, id: int, payload: AccountErrorUpdate):
    account_error = get_object_or_404(AccountError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_error, attr, value)
    account_error.save()
    return account_error


@router.delete('/account_errors/{id}')
def delete_account_error(request, id: int):
    account_error = get_object_or_404(AccountError, id=id)
    account_error.delete()
    return {'success': True}


# AuthURLGenerate endpoints
@router.get('/auth_url_generates', response=List[AuthURLGenerate])
@paginate
def list_auth_url_generates(request):
    return AuthURLGenerate.objects.all()


@router.get('/auth_url_generates/{id}', response=AuthURLGenerate)
def get_auth_url_generate(request, id: int):
    return get_object_or_404(AuthURLGenerate, id=id)


@router.post('/auth_url_generates', response=AuthURLGenerate)
def create_auth_url_generate(request, payload: AuthURLGenerateCreate):
    data = payload.dict()
    auth_url_generate = AuthURLGenerate.objects.create(**data)
    return auth_url_generate


@router.put('/auth_url_generates/{id}', response=AuthURLGenerate)
def update_auth_url_generate(request, id: int, payload: AuthURLGenerateUpdate):
    auth_url_generate = get_object_or_404(AuthURLGenerate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(auth_url_generate, attr, value)
    auth_url_generate.save()
    return auth_url_generate


@router.delete('/auth_url_generates/{id}')
def delete_auth_url_generate(request, id: int):
    auth_url_generate = get_object_or_404(AuthURLGenerate, id=id)
    auth_url_generate.delete()
    return {'success': True}


# TokenCreateSSO endpoints
@router.get('/token_create_ssos', response=List[TokenCreateSSO])
@paginate
def list_token_create_ssos(request):
    return TokenCreateSSO.objects.all()


@router.get('/token_create_ssos/{id}', response=TokenCreateSSO)
def get_token_create_sso(request, id: int):
    return get_object_or_404(TokenCreateSSO, id=id)


@router.post('/token_create_ssos', response=TokenCreateSSO)
def create_token_create_sso(request, payload: TokenCreateSSOCreate):
    data = payload.dict()
    token_create_sso = TokenCreateSSO.objects.create(**data)
    return token_create_sso


@router.put('/token_create_ssos/{id}', response=TokenCreateSSO)
def update_token_create_sso(request, id: int, payload: TokenCreateSSOUpdate):
    token_create_sso = get_object_or_404(TokenCreateSSO, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(token_create_sso, attr, value)
    token_create_sso.save()
    return token_create_sso


@router.delete('/token_create_ssos/{id}')
def delete_token_create_sso(request, id: int):
    token_create_sso = get_object_or_404(TokenCreateSSO, id=id)
    token_create_sso.delete()
    return {'success': True}


# RefreshToken endpoints
@router.get('/refresh_tokens', response=List[RefreshToken])
@paginate
def list_refresh_tokens(request):
    return RefreshToken.objects.all()


@router.get('/refresh_tokens/{id}', response=RefreshToken)
def get_refresh_token(request, id: int):
    return get_object_or_404(RefreshToken, id=id)


@router.post('/refresh_tokens', response=RefreshToken)
def create_refresh_token(request, payload: RefreshTokenCreate):
    data = payload.dict()
    refresh_token = RefreshToken.objects.create(**data)
    return refresh_token


@router.put('/refresh_tokens/{id}', response=RefreshToken)
def update_refresh_token(request, id: int, payload: RefreshTokenUpdate):
    refresh_token = get_object_or_404(RefreshToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(refresh_token, attr, value)
    refresh_token.save()
    return refresh_token


@router.delete('/refresh_tokens/{id}')
def delete_refresh_token(request, id: int):
    refresh_token = get_object_or_404(RefreshToken, id=id)
    refresh_token.delete()
    return {'success': True}


# VerifyToken endpoints
@router.get('/verify_tokens', response=List[VerifyToken])
@paginate
def list_verify_tokens(request):
    return VerifyToken.objects.all()


@router.get('/verify_tokens/{id}', response=VerifyToken)
def get_verify_token(request, id: int):
    return get_object_or_404(VerifyToken, id=id)


@router.post('/verify_tokens', response=VerifyToken)
def create_verify_token(request, payload: VerifyTokenCreate):
    data = payload.dict()
    verify_token = VerifyToken.objects.create(**data)
    return verify_token


@router.put('/verify_tokens/{id}', response=VerifyToken)
def update_verify_token(request, id: int, payload: VerifyTokenUpdate):
    verify_token = get_object_or_404(VerifyToken, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(verify_token, attr, value)
    verify_token.save()
    return verify_token


@router.delete('/verify_tokens/{id}')
def delete_verify_token(request, id: int):
    verify_token = get_object_or_404(VerifyToken, id=id)
    verify_token.delete()
    return {'success': True}


# DeactivateAllUserTokens endpoints
@router.get('/deactivate_all_user_tokenss', response=List[DeactivateAllUserTokens])
@paginate
def list_deactivate_all_user_tokenss(request):
    return DeactivateAllUserTokens.objects.all()


@router.get('/deactivate_all_user_tokenss/{id}', response=DeactivateAllUserTokens)
def get_deactivate_all_user_tokens(request, id: int):
    return get_object_or_404(DeactivateAllUserTokens, id=id)


@router.post('/deactivate_all_user_tokenss', response=DeactivateAllUserTokens)
def create_deactivate_all_user_tokens(request, payload: DeactivateAllUserTokensCreate):
    data = payload.dict()
    deactivate_all_user_tokens = DeactivateAllUserTokens.objects.create(**data)
    return deactivate_all_user_tokens


@router.put('/deactivate_all_user_tokenss/{id}', response=DeactivateAllUserTokens)
def update_deactivate_all_user_tokens(request, id: int, payload: DeactivateAllUserTokensUpdate):
    deactivate_all_user_tokens = get_object_or_404(DeactivateAllUserTokens, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(deactivate_all_user_tokens, attr, value)
    deactivate_all_user_tokens.save()
    return deactivate_all_user_tokens


@router.delete('/deactivate_all_user_tokenss/{id}')
def delete_deactivate_all_user_tokens(request, id: int):
    deactivate_all_user_tokens = get_object_or_404(DeactivateAllUserTokens, id=id)
    deactivate_all_user_tokens.delete()
    return {'success': True}


# PasswordRequestReset endpoints
@router.get('/password_request_resets', response=List[PasswordRequestReset])
@paginate
def list_password_request_resets(request):
    return PasswordRequestReset.objects.all()


@router.get('/password_request_resets/{id}', response=PasswordRequestReset)
def get_password_request_reset(request, id: int):
    return get_object_or_404(PasswordRequestReset, id=id)


@router.post('/password_request_resets', response=PasswordRequestReset)
def create_password_request_reset(request, payload: PasswordRequestResetCreate):
    data = payload.dict()
    password_request_reset = PasswordRequestReset.objects.create(**data)
    return password_request_reset


@router.put('/password_request_resets/{id}', response=PasswordRequestReset)
def update_password_request_reset(request, id: int, payload: PasswordRequestResetUpdate):
    password_request_reset = get_object_or_404(PasswordRequestReset, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(password_request_reset, attr, value)
    password_request_reset.save()
    return password_request_reset


@router.delete('/password_request_resets/{id}')
def delete_password_request_reset(request, id: int):
    password_request_reset = get_object_or_404(PasswordRequestReset, id=id)
    password_request_reset.delete()
    return {'success': True}


# AccountConfirm endpoints
@router.get('/account_confirms', response=List[AccountConfirm])
@paginate
def list_account_confirms(request):
    return AccountConfirm.objects.all()


@router.get('/account_confirms/{id}', response=AccountConfirm)
def get_account_confirm(request, id: int):
    return get_object_or_404(AccountConfirm, id=id)


@router.post('/account_confirms', response=AccountConfirm)
def create_account_confirm(request, payload: AccountConfirmCreate):
    data = payload.dict()
    account_confirm = AccountConfirm.objects.create(**data)
    return account_confirm


@router.put('/account_confirms/{id}', response=AccountConfirm)
def update_account_confirm(request, id: int, payload: AccountConfirmUpdate):
    account_confirm = get_object_or_404(AccountConfirm, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_confirm, attr, value)
    account_confirm.save()
    return account_confirm


@router.delete('/account_confirms/{id}')
def delete_account_confirm(request, id: int):
    account_confirm = get_object_or_404(AccountConfirm, id=id)
    account_confirm.delete()
    return {'success': True}


# PasswordSet endpoints
@router.get('/password_sets', response=List[PasswordSet])
@paginate
def list_password_sets(request):
    return PasswordSet.objects.all()


@router.get('/password_sets/{id}', response=PasswordSet)
def get_password_set(request, id: int):
    return get_object_or_404(PasswordSet, id=id)


@router.post('/password_sets', response=PasswordSet)
def create_password_set(request, payload: PasswordSetCreate):
    data = payload.dict()
    password_set = PasswordSet.objects.create(**data)
    return password_set


@router.put('/password_sets/{id}', response=PasswordSet)
def update_password_set(request, id: int, payload: PasswordSetUpdate):
    password_set = get_object_or_404(PasswordSet, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(password_set, attr, value)
    password_set.save()
    return password_set


@router.delete('/password_sets/{id}')
def delete_password_set(request, id: int):
    password_set = get_object_or_404(PasswordSet, id=id)
    password_set.delete()
    return {'success': True}


# PasswordChange endpoints
@router.get('/password_changes', response=List[PasswordChange])
@paginate
def list_password_changes(request):
    return PasswordChange.objects.all()


@router.get('/password_changes/{id}', response=PasswordChange)
def get_password_change(request, id: int):
    return get_object_or_404(PasswordChange, id=id)


@router.post('/password_changes', response=PasswordChange)
def create_password_change(request, payload: PasswordChangeCreate):
    data = payload.dict()
    password_change = PasswordChange.objects.create(**data)
    return password_change


@router.put('/password_changes/{id}', response=PasswordChange)
def update_password_change(request, id: int, payload: PasswordChangeUpdate):
    password_change = get_object_or_404(PasswordChange, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(password_change, attr, value)
    password_change.save()
    return password_change


@router.delete('/password_changes/{id}')
def delete_password_change(request, id: int):
    password_change = get_object_or_404(PasswordChange, id=id)
    password_change.delete()
    return {'success': True}


# EmailChangeRequest endpoints
@router.get('/email_change_requests', response=List[EmailChangeRequest])
@paginate
def list_email_change_requests(request):
    return EmailChangeRequest.objects.all()


@router.get('/email_change_requests/{id}', response=EmailChangeRequest)
def get_email_change_request(request, id: int):
    return get_object_or_404(EmailChangeRequest, id=id)


@router.post('/email_change_requests', response=EmailChangeRequest)
def create_email_change_request(request, payload: EmailChangeRequestCreate):
    data = payload.dict()
    email_change_request = EmailChangeRequest.objects.create(**data)
    return email_change_request


@router.put('/email_change_requests/{id}', response=EmailChangeRequest)
def update_email_change_request(request, id: int, payload: EmailChangeRequestUpdate):
    email_change_request = get_object_or_404(EmailChangeRequest, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_change_request, attr, value)
    email_change_request.save()
    return email_change_request


@router.delete('/email_change_requests/{id}')
def delete_email_change_request(request, id: int):
    email_change_request = get_object_or_404(EmailChangeRequest, id=id)
    email_change_request.delete()
    return {'success': True}


# EmailChangeConfirm endpoints
@router.get('/email_change_confirms', response=List[EmailChangeConfirm])
@paginate
def list_email_change_confirms(request):
    return EmailChangeConfirm.objects.all()


@router.get('/email_change_confirms/{id}', response=EmailChangeConfirm)
def get_email_change_confirm(request, id: int):
    return get_object_or_404(EmailChangeConfirm, id=id)


@router.post('/email_change_confirms', response=EmailChangeConfirm)
def create_email_change_confirm(request, payload: EmailChangeConfirmCreate):
    data = payload.dict()
    email_change_confirm = EmailChangeConfirm.objects.create(**data)
    return email_change_confirm


@router.put('/email_change_confirms/{id}', response=EmailChangeConfirm)
def update_email_change_confirm(request, id: int, payload: EmailChangeConfirmUpdate):
    email_change_confirm = get_object_or_404(EmailChangeConfirm, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(email_change_confirm, attr, value)
    email_change_confirm.save()
    return email_change_confirm


@router.delete('/email_change_confirms/{id}')
def delete_email_change_confirm(request, id: int):
    email_change_confirm = get_object_or_404(EmailChangeConfirm, id=id)
    email_change_confirm.delete()
    return {'success': True}


# AccountAddressCreate endpoints
@router.get('/account_address_creates', response=List[AccountAddressCreate])
@paginate
def list_account_address_creates(request):
    return AccountAddressCreate.objects.all()


@router.get('/account_address_creates/{id}', response=AccountAddressCreate)
def get_account_address_create(request, id: int):
    return get_object_or_404(AccountAddressCreate, id=id)


@router.post('/account_address_creates', response=AccountAddressCreate)
def create_account_address_create(request, payload: AccountAddressCreateCreate):
    data = payload.dict()
    account_address_create = AccountAddressCreate.objects.create(**data)
    return account_address_create


@router.put('/account_address_creates/{id}', response=AccountAddressCreate)
def update_account_address_create(request, id: int, payload: AccountAddressCreateUpdate):
    account_address_create = get_object_or_404(AccountAddressCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_address_create, attr, value)
    account_address_create.save()
    return account_address_create


@router.delete('/account_address_creates/{id}')
def delete_account_address_create(request, id: int):
    account_address_create = get_object_or_404(AccountAddressCreate, id=id)
    account_address_create.delete()
    return {'success': True}


# AccountAddressUpdate endpoints
@router.get('/account_address_updates', response=List[AccountAddressUpdate])
@paginate
def list_account_address_updates(request):
    return AccountAddressUpdate.objects.all()


@router.get('/account_address_updates/{id}', response=AccountAddressUpdate)
def get_account_address_update(request, id: int):
    return get_object_or_404(AccountAddressUpdate, id=id)


@router.post('/account_address_updates', response=AccountAddressUpdate)
def create_account_address_update(request, payload: AccountAddressUpdateCreate):
    data = payload.dict()
    account_address_update = AccountAddressUpdate.objects.create(**data)
    return account_address_update


@router.put('/account_address_updates/{id}', response=AccountAddressUpdate)
def update_account_address_update(request, id: int, payload: AccountAddressUpdateUpdate):
    account_address_update = get_object_or_404(AccountAddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_address_update, attr, value)
    account_address_update.save()
    return account_address_update


@router.delete('/account_address_updates/{id}')
def delete_account_address_update(request, id: int):
    account_address_update = get_object_or_404(AccountAddressUpdate, id=id)
    account_address_update.delete()
    return {'success': True}


# AccountAddressDelete endpoints
@router.get('/account_address_deletes', response=List[AccountAddressDelete])
@paginate
def list_account_address_deletes(request):
    return AccountAddressDelete.objects.all()


@router.get('/account_address_deletes/{id}', response=AccountAddressDelete)
def get_account_address_delete(request, id: int):
    return get_object_or_404(AccountAddressDelete, id=id)


@router.post('/account_address_deletes', response=AccountAddressDelete)
def create_account_address_delete(request, payload: AccountAddressDeleteCreate):
    data = payload.dict()
    account_address_delete = AccountAddressDelete.objects.create(**data)
    return account_address_delete


@router.put('/account_address_deletes/{id}', response=AccountAddressDelete)
def update_account_address_delete(request, id: int, payload: AccountAddressDeleteUpdate):
    account_address_delete = get_object_or_404(AccountAddressDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_address_delete, attr, value)
    account_address_delete.save()
    return account_address_delete


@router.delete('/account_address_deletes/{id}')
def delete_account_address_delete(request, id: int):
    account_address_delete = get_object_or_404(AccountAddressDelete, id=id)
    account_address_delete.delete()
    return {'success': True}


# AccountAddressSetDefault endpoints
@router.get('/account_address_set_defaults', response=List[AccountAddressSetDefault])
@paginate
def list_account_address_set_defaults(request):
    return AccountAddressSetDefault.objects.all()


@router.get('/account_address_set_defaults/{id}', response=AccountAddressSetDefault)
def get_account_address_set_default(request, id: int):
    return get_object_or_404(AccountAddressSetDefault, id=id)


@router.post('/account_address_set_defaults', response=AccountAddressSetDefault)
def create_account_address_set_default(request, payload: AccountAddressSetDefaultCreate):
    data = payload.dict()
    account_address_set_default = AccountAddressSetDefault.objects.create(**data)
    return account_address_set_default


@router.put('/account_address_set_defaults/{id}', response=AccountAddressSetDefault)
def update_account_address_set_default(request, id: int, payload: AccountAddressSetDefaultUpdate):
    account_address_set_default = get_object_or_404(AccountAddressSetDefault, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_address_set_default, attr, value)
    account_address_set_default.save()
    return account_address_set_default


@router.delete('/account_address_set_defaults/{id}')
def delete_account_address_set_default(request, id: int):
    account_address_set_default = get_object_or_404(AccountAddressSetDefault, id=id)
    account_address_set_default.delete()
    return {'success': True}


# AccountRegister endpoints
@router.get('/account_registers', response=List[AccountRegister])
@paginate
def list_account_registers(request):
    return AccountRegister.objects.all()


@router.get('/account_registers/{id}', response=AccountRegister)
def get_account_register(request, id: int):
    return get_object_or_404(AccountRegister, id=id)


@router.post('/account_registers', response=AccountRegister)
def create_account_register(request, payload: AccountRegisterCreate):
    data = payload.dict()
    account_register = AccountRegister.objects.create(**data)
    return account_register


@router.put('/account_registers/{id}', response=AccountRegister)
def update_account_register(request, id: int, payload: AccountRegisterUpdate):
    account_register = get_object_or_404(AccountRegister, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_register, attr, value)
    account_register.save()
    return account_register


@router.delete('/account_registers/{id}')
def delete_account_register(request, id: int):
    account_register = get_object_or_404(AccountRegister, id=id)
    account_register.delete()
    return {'success': True}


# AccountUpdate endpoints
@router.get('/account_updates', response=List[AccountUpdate])
@paginate
def list_account_updates(request):
    return AccountUpdate.objects.all()


@router.get('/account_updates/{id}', response=AccountUpdate)
def get_account_update(request, id: int):
    return get_object_or_404(AccountUpdate, id=id)


@router.post('/account_updates', response=AccountUpdate)
def create_account_update(request, payload: AccountUpdateCreate):
    data = payload.dict()
    account_update = AccountUpdate.objects.create(**data)
    return account_update


@router.put('/account_updates/{id}', response=AccountUpdate)
def update_account_update(request, id: int, payload: AccountUpdateUpdate):
    account_update = get_object_or_404(AccountUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_update, attr, value)
    account_update.save()
    return account_update


@router.delete('/account_updates/{id}')
def delete_account_update(request, id: int):
    account_update = get_object_or_404(AccountUpdate, id=id)
    account_update.delete()
    return {'success': True}


# AccountRequestDeletion endpoints
@router.get('/account_request_deletions', response=List[AccountRequestDeletion])
@paginate
def list_account_request_deletions(request):
    return AccountRequestDeletion.objects.all()


@router.get('/account_request_deletions/{id}', response=AccountRequestDeletion)
def get_account_request_deletion(request, id: int):
    return get_object_or_404(AccountRequestDeletion, id=id)


@router.post('/account_request_deletions', response=AccountRequestDeletion)
def create_account_request_deletion(request, payload: AccountRequestDeletionCreate):
    data = payload.dict()
    account_request_deletion = AccountRequestDeletion.objects.create(**data)
    return account_request_deletion


@router.put('/account_request_deletions/{id}', response=AccountRequestDeletion)
def update_account_request_deletion(request, id: int, payload: AccountRequestDeletionUpdate):
    account_request_deletion = get_object_or_404(AccountRequestDeletion, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_request_deletion, attr, value)
    account_request_deletion.save()
    return account_request_deletion


@router.delete('/account_request_deletions/{id}')
def delete_account_request_deletion(request, id: int):
    account_request_deletion = get_object_or_404(AccountRequestDeletion, id=id)
    account_request_deletion.delete()
    return {'success': True}


# AccountDelete endpoints
@router.get('/account_deletes', response=List[AccountDelete])
@paginate
def list_account_deletes(request):
    return AccountDelete.objects.all()


@router.get('/account_deletes/{id}', response=AccountDelete)
def get_account_delete(request, id: int):
    return get_object_or_404(AccountDelete, id=id)


@router.post('/account_deletes', response=AccountDelete)
def create_account_delete(request, payload: AccountDeleteCreate):
    data = payload.dict()
    account_delete = AccountDelete.objects.create(**data)
    return account_delete


@router.put('/account_deletes/{id}', response=AccountDelete)
def update_account_delete(request, id: int, payload: AccountDeleteUpdate):
    account_delete = get_object_or_404(AccountDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(account_delete, attr, value)
    account_delete.save()
    return account_delete


@router.delete('/account_deletes/{id}')
def delete_account_delete(request, id: int):
    account_delete = get_object_or_404(AccountDelete, id=id)
    account_delete.delete()
    return {'success': True}


# AddressCreate endpoints
@router.get('/address_creates', response=List[AddressCreate])
@paginate
def list_address_creates(request):
    return AddressCreate.objects.all()


@router.get('/address_creates/{id}', response=AddressCreate)
def get_address_create(request, id: int):
    return get_object_or_404(AddressCreate, id=id)


@router.post('/address_creates', response=AddressCreate)
def create_address_create(request, payload: AddressCreateCreate):
    data = payload.dict()
    address_create = AddressCreate.objects.create(**data)
    return address_create


@router.put('/address_creates/{id}', response=AddressCreate)
def update_address_create(request, id: int, payload: AddressCreateUpdate):
    address_create = get_object_or_404(AddressCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_create, attr, value)
    address_create.save()
    return address_create


@router.delete('/address_creates/{id}')
def delete_address_create(request, id: int):
    address_create = get_object_or_404(AddressCreate, id=id)
    address_create.delete()
    return {'success': True}


# AddressUpdate endpoints
@router.get('/address_updates', response=List[AddressUpdate])
@paginate
def list_address_updates(request):
    return AddressUpdate.objects.all()


@router.get('/address_updates/{id}', response=AddressUpdate)
def get_address_update(request, id: int):
    return get_object_or_404(AddressUpdate, id=id)


@router.post('/address_updates', response=AddressUpdate)
def create_address_update(request, payload: AddressUpdateCreate):
    data = payload.dict()
    address_update = AddressUpdate.objects.create(**data)
    return address_update


@router.put('/address_updates/{id}', response=AddressUpdate)
def update_address_update(request, id: int, payload: AddressUpdateUpdate):
    address_update = get_object_or_404(AddressUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_update, attr, value)
    address_update.save()
    return address_update


@router.delete('/address_updates/{id}')
def delete_address_update(request, id: int):
    address_update = get_object_or_404(AddressUpdate, id=id)
    address_update.delete()
    return {'success': True}


# AddressDelete endpoints
@router.get('/address_deletes', response=List[AddressDelete])
@paginate
def list_address_deletes(request):
    return AddressDelete.objects.all()


@router.get('/address_deletes/{id}', response=AddressDelete)
def get_address_delete(request, id: int):
    return get_object_or_404(AddressDelete, id=id)


@router.post('/address_deletes', response=AddressDelete)
def create_address_delete(request, payload: AddressDeleteCreate):
    data = payload.dict()
    address_delete = AddressDelete.objects.create(**data)
    return address_delete


@router.put('/address_deletes/{id}', response=AddressDelete)
def update_address_delete(request, id: int, payload: AddressDeleteUpdate):
    address_delete = get_object_or_404(AddressDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_delete, attr, value)
    address_delete.save()
    return address_delete


@router.delete('/address_deletes/{id}')
def delete_address_delete(request, id: int):
    address_delete = get_object_or_404(AddressDelete, id=id)
    address_delete.delete()
    return {'success': True}


# AddressSetDefault endpoints
@router.get('/address_set_defaults', response=List[AddressSetDefault])
@paginate
def list_address_set_defaults(request):
    return AddressSetDefault.objects.all()


@router.get('/address_set_defaults/{id}', response=AddressSetDefault)
def get_address_set_default(request, id: int):
    return get_object_or_404(AddressSetDefault, id=id)


@router.post('/address_set_defaults', response=AddressSetDefault)
def create_address_set_default(request, payload: AddressSetDefaultCreate):
    data = payload.dict()
    address_set_default = AddressSetDefault.objects.create(**data)
    return address_set_default


@router.put('/address_set_defaults/{id}', response=AddressSetDefault)
def update_address_set_default(request, id: int, payload: AddressSetDefaultUpdate):
    address_set_default = get_object_or_404(AddressSetDefault, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(address_set_default, attr, value)
    address_set_default.save()
    return address_set_default


@router.delete('/address_set_defaults/{id}')
def delete_address_set_default(request, id: int):
    address_set_default = get_object_or_404(AddressSetDefault, id=id)
    address_set_default.delete()
    return {'success': True}


# CustomerCreate endpoints
@router.get('/customer_creates', response=List[CustomerCreate])
@paginate
def list_customer_creates(request):
    return CustomerCreate.objects.all()


@router.get('/customer_creates/{id}', response=CustomerCreate)
def get_customer_create(request, id: int):
    return get_object_or_404(CustomerCreate, id=id)


@router.post('/customer_creates', response=CustomerCreate)
def create_customer_create(request, payload: CustomerCreateCreate):
    data = payload.dict()
    customer_create = CustomerCreate.objects.create(**data)
    return customer_create


@router.put('/customer_creates/{id}', response=CustomerCreate)
def update_customer_create(request, id: int, payload: CustomerCreateUpdate):
    customer_create = get_object_or_404(CustomerCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customer_create, attr, value)
    customer_create.save()
    return customer_create


@router.delete('/customer_creates/{id}')
def delete_customer_create(request, id: int):
    customer_create = get_object_or_404(CustomerCreate, id=id)
    customer_create.delete()
    return {'success': True}


# CustomerUpdate endpoints
@router.get('/customer_updates', response=List[CustomerUpdate])
@paginate
def list_customer_updates(request):
    return CustomerUpdate.objects.all()


@router.get('/customer_updates/{id}', response=CustomerUpdate)
def get_customer_update(request, id: int):
    return get_object_or_404(CustomerUpdate, id=id)


@router.post('/customer_updates', response=CustomerUpdate)
def create_customer_update(request, payload: CustomerUpdateCreate):
    data = payload.dict()
    customer_update = CustomerUpdate.objects.create(**data)
    return customer_update


@router.put('/customer_updates/{id}', response=CustomerUpdate)
def update_customer_update(request, id: int, payload: CustomerUpdateUpdate):
    customer_update = get_object_or_404(CustomerUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customer_update, attr, value)
    customer_update.save()
    return customer_update


@router.delete('/customer_updates/{id}')
def delete_customer_update(request, id: int):
    customer_update = get_object_or_404(CustomerUpdate, id=id)
    customer_update.delete()
    return {'success': True}


# CustomerDelete endpoints
@router.get('/customer_deletes', response=List[CustomerDelete])
@paginate
def list_customer_deletes(request):
    return CustomerDelete.objects.all()


@router.get('/customer_deletes/{id}', response=CustomerDelete)
def get_customer_delete(request, id: int):
    return get_object_or_404(CustomerDelete, id=id)


@router.post('/customer_deletes', response=CustomerDelete)
def create_customer_delete(request, payload: CustomerDeleteCreate):
    data = payload.dict()
    customer_delete = CustomerDelete.objects.create(**data)
    return customer_delete


@router.put('/customer_deletes/{id}', response=CustomerDelete)
def update_customer_delete(request, id: int, payload: CustomerDeleteUpdate):
    customer_delete = get_object_or_404(CustomerDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customer_delete, attr, value)
    customer_delete.save()
    return customer_delete


@router.delete('/customer_deletes/{id}')
def delete_customer_delete(request, id: int):
    customer_delete = get_object_or_404(CustomerDelete, id=id)
    customer_delete.delete()
    return {'success': True}


# CustomerBulkDelete endpoints
@router.get('/customer_bulk_deletes', response=List[CustomerBulkDelete])
@paginate
def list_customer_bulk_deletes(request):
    return CustomerBulkDelete.objects.all()


@router.get('/customer_bulk_deletes/{id}', response=CustomerBulkDelete)
def get_customer_bulk_delete(request, id: int):
    return get_object_or_404(CustomerBulkDelete, id=id)


@router.post('/customer_bulk_deletes', response=CustomerBulkDelete)
def create_customer_bulk_delete(request, payload: CustomerBulkDeleteCreate):
    data = payload.dict()
    customer_bulk_delete = CustomerBulkDelete.objects.create(**data)
    return customer_bulk_delete


@router.put('/customer_bulk_deletes/{id}', response=CustomerBulkDelete)
def update_customer_bulk_delete(request, id: int, payload: CustomerBulkDeleteUpdate):
    customer_bulk_delete = get_object_or_404(CustomerBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(customer_bulk_delete, attr, value)
    customer_bulk_delete.save()
    return customer_bulk_delete


@router.delete('/customer_bulk_deletes/{id}')
def delete_customer_bulk_delete(request, id: int):
    customer_bulk_delete = get_object_or_404(CustomerBulkDelete, id=id)
    customer_bulk_delete.delete()
    return {'success': True}


# StaffCreate endpoints
@router.get('/staff_creates', response=List[StaffCreate])
@paginate
def list_staff_creates(request):
    return StaffCreate.objects.all()


@router.get('/staff_creates/{id}', response=StaffCreate)
def get_staff_create(request, id: int):
    return get_object_or_404(StaffCreate, id=id)


@router.post('/staff_creates', response=StaffCreate)
def create_staff_create(request, payload: StaffCreateCreate):
    data = payload.dict()
    staff_create = StaffCreate.objects.create(**data)
    return staff_create


@router.put('/staff_creates/{id}', response=StaffCreate)
def update_staff_create(request, id: int, payload: StaffCreateUpdate):
    staff_create = get_object_or_404(StaffCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(staff_create, attr, value)
    staff_create.save()
    return staff_create


@router.delete('/staff_creates/{id}')
def delete_staff_create(request, id: int):
    staff_create = get_object_or_404(StaffCreate, id=id)
    staff_create.delete()
    return {'success': True}


# StaffError endpoints
@router.get('/staff_errors', response=List[StaffError])
@paginate
def list_staff_errors(request):
    return StaffError.objects.all()


@router.get('/staff_errors/{id}', response=StaffError)
def get_staff_error(request, id: int):
    return get_object_or_404(StaffError, id=id)


@router.post('/staff_errors', response=StaffError)
def create_staff_error(request, payload: StaffErrorCreate):
    data = payload.dict()
    staff_error = StaffError.objects.create(**data)
    return staff_error


@router.put('/staff_errors/{id}', response=StaffError)
def update_staff_error(request, id: int, payload: StaffErrorUpdate):
    staff_error = get_object_or_404(StaffError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(staff_error, attr, value)
    staff_error.save()
    return staff_error


@router.delete('/staff_errors/{id}')
def delete_staff_error(request, id: int):
    staff_error = get_object_or_404(StaffError, id=id)
    staff_error.delete()
    return {'success': True}


# StaffUpdate endpoints
@router.get('/staff_updates', response=List[StaffUpdate])
@paginate
def list_staff_updates(request):
    return StaffUpdate.objects.all()


@router.get('/staff_updates/{id}', response=StaffUpdate)
def get_staff_update(request, id: int):
    return get_object_or_404(StaffUpdate, id=id)


@router.post('/staff_updates', response=StaffUpdate)
def create_staff_update(request, payload: StaffUpdateCreate):
    data = payload.dict()
    staff_update = StaffUpdate.objects.create(**data)
    return staff_update


@router.put('/staff_updates/{id}', response=StaffUpdate)
def update_staff_update(request, id: int, payload: StaffUpdateUpdate):
    staff_update = get_object_or_404(StaffUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(staff_update, attr, value)
    staff_update.save()
    return staff_update


@router.delete('/staff_updates/{id}')
def delete_staff_update(request, id: int):
    staff_update = get_object_or_404(StaffUpdate, id=id)
    staff_update.delete()
    return {'success': True}


# StaffDelete endpoints
@router.get('/staff_deletes', response=List[StaffDelete])
@paginate
def list_staff_deletes(request):
    return StaffDelete.objects.all()


@router.get('/staff_deletes/{id}', response=StaffDelete)
def get_staff_delete(request, id: int):
    return get_object_or_404(StaffDelete, id=id)


@router.post('/staff_deletes', response=StaffDelete)
def create_staff_delete(request, payload: StaffDeleteCreate):
    data = payload.dict()
    staff_delete = StaffDelete.objects.create(**data)
    return staff_delete


@router.put('/staff_deletes/{id}', response=StaffDelete)
def update_staff_delete(request, id: int, payload: StaffDeleteUpdate):
    staff_delete = get_object_or_404(StaffDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(staff_delete, attr, value)
    staff_delete.save()
    return staff_delete


@router.delete('/staff_deletes/{id}')
def delete_staff_delete(request, id: int):
    staff_delete = get_object_or_404(StaffDelete, id=id)
    staff_delete.delete()
    return {'success': True}


# StaffBulkDelete endpoints
@router.get('/staff_bulk_deletes', response=List[StaffBulkDelete])
@paginate
def list_staff_bulk_deletes(request):
    return StaffBulkDelete.objects.all()


@router.get('/staff_bulk_deletes/{id}', response=StaffBulkDelete)
def get_staff_bulk_delete(request, id: int):
    return get_object_or_404(StaffBulkDelete, id=id)


@router.post('/staff_bulk_deletes', response=StaffBulkDelete)
def create_staff_bulk_delete(request, payload: StaffBulkDeleteCreate):
    data = payload.dict()
    staff_bulk_delete = StaffBulkDelete.objects.create(**data)
    return staff_bulk_delete


@router.put('/staff_bulk_deletes/{id}', response=StaffBulkDelete)
def update_staff_bulk_delete(request, id: int, payload: StaffBulkDeleteUpdate):
    staff_bulk_delete = get_object_or_404(StaffBulkDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(staff_bulk_delete, attr, value)
    staff_bulk_delete.save()
    return staff_bulk_delete


@router.delete('/staff_bulk_deletes/{id}')
def delete_staff_bulk_delete(request, id: int):
    staff_bulk_delete = get_object_or_404(StaffBulkDelete, id=id)
    staff_bulk_delete.delete()
    return {'success': True}


# UserAvatarUpdate endpoints
@router.get('/user_avatar_updates', response=List[UserAvatarUpdate])
@paginate
def list_user_avatar_updates(request):
    return UserAvatarUpdate.objects.all()


@router.get('/user_avatar_updates/{id}', response=UserAvatarUpdate)
def get_user_avatar_update(request, id: int):
    return get_object_or_404(UserAvatarUpdate, id=id)


@router.post('/user_avatar_updates', response=UserAvatarUpdate)
def create_user_avatar_update(request, payload: UserAvatarUpdateCreate):
    data = payload.dict()
    user_avatar_update = UserAvatarUpdate.objects.create(**data)
    return user_avatar_update


@router.put('/user_avatar_updates/{id}', response=UserAvatarUpdate)
def update_user_avatar_update(request, id: int, payload: UserAvatarUpdateUpdate):
    user_avatar_update = get_object_or_404(UserAvatarUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_avatar_update, attr, value)
    user_avatar_update.save()
    return user_avatar_update


@router.delete('/user_avatar_updates/{id}')
def delete_user_avatar_update(request, id: int):
    user_avatar_update = get_object_or_404(UserAvatarUpdate, id=id)
    user_avatar_update.delete()
    return {'success': True}


# UserAvatarDelete endpoints
@router.get('/user_avatar_deletes', response=List[UserAvatarDelete])
@paginate
def list_user_avatar_deletes(request):
    return UserAvatarDelete.objects.all()


@router.get('/user_avatar_deletes/{id}', response=UserAvatarDelete)
def get_user_avatar_delete(request, id: int):
    return get_object_or_404(UserAvatarDelete, id=id)


@router.post('/user_avatar_deletes', response=UserAvatarDelete)
def create_user_avatar_delete(request, payload: UserAvatarDeleteCreate):
    data = payload.dict()
    user_avatar_delete = UserAvatarDelete.objects.create(**data)
    return user_avatar_delete


@router.put('/user_avatar_deletes/{id}', response=UserAvatarDelete)
def update_user_avatar_delete(request, id: int, payload: UserAvatarDeleteUpdate):
    user_avatar_delete = get_object_or_404(UserAvatarDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_avatar_delete, attr, value)
    user_avatar_delete.save()
    return user_avatar_delete


@router.delete('/user_avatar_deletes/{id}')
def delete_user_avatar_delete(request, id: int):
    user_avatar_delete = get_object_or_404(UserAvatarDelete, id=id)
    user_avatar_delete.delete()
    return {'success': True}


# UserBulkSetActive endpoints
@router.get('/user_bulk_set_actives', response=List[UserBulkSetActive])
@paginate
def list_user_bulk_set_actives(request):
    return UserBulkSetActive.objects.all()


@router.get('/user_bulk_set_actives/{id}', response=UserBulkSetActive)
def get_user_bulk_set_active(request, id: int):
    return get_object_or_404(UserBulkSetActive, id=id)


@router.post('/user_bulk_set_actives', response=UserBulkSetActive)
def create_user_bulk_set_active(request, payload: UserBulkSetActiveCreate):
    data = payload.dict()
    user_bulk_set_active = UserBulkSetActive.objects.create(**data)
    return user_bulk_set_active


@router.put('/user_bulk_set_actives/{id}', response=UserBulkSetActive)
def update_user_bulk_set_active(request, id: int, payload: UserBulkSetActiveUpdate):
    user_bulk_set_active = get_object_or_404(UserBulkSetActive, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(user_bulk_set_active, attr, value)
    user_bulk_set_active.save()
    return user_bulk_set_active


@router.delete('/user_bulk_set_actives/{id}')
def delete_user_bulk_set_active(request, id: int):
    user_bulk_set_active = get_object_or_404(UserBulkSetActive, id=id)
    user_bulk_set_active.delete()
    return {'success': True}


# PermissionGroupCreate endpoints
@router.get('/permission_group_creates', response=List[PermissionGroupCreate])
@paginate
def list_permission_group_creates(request):
    return PermissionGroupCreate.objects.all()


@router.get('/permission_group_creates/{id}', response=PermissionGroupCreate)
def get_permission_group_create(request, id: int):
    return get_object_or_404(PermissionGroupCreate, id=id)


@router.post('/permission_group_creates', response=PermissionGroupCreate)
def create_permission_group_create(request, payload: PermissionGroupCreateCreate):
    data = payload.dict()
    permission_group_create = PermissionGroupCreate.objects.create(**data)
    return permission_group_create


@router.put('/permission_group_creates/{id}', response=PermissionGroupCreate)
def update_permission_group_create(request, id: int, payload: PermissionGroupCreateUpdate):
    permission_group_create = get_object_or_404(PermissionGroupCreate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(permission_group_create, attr, value)
    permission_group_create.save()
    return permission_group_create


@router.delete('/permission_group_creates/{id}')
def delete_permission_group_create(request, id: int):
    permission_group_create = get_object_or_404(PermissionGroupCreate, id=id)
    permission_group_create.delete()
    return {'success': True}


# PermissionGroupError endpoints
@router.get('/permission_group_errors', response=List[PermissionGroupError])
@paginate
def list_permission_group_errors(request):
    return PermissionGroupError.objects.all()


@router.get('/permission_group_errors/{id}', response=PermissionGroupError)
def get_permission_group_error(request, id: int):
    return get_object_or_404(PermissionGroupError, id=id)


@router.post('/permission_group_errors', response=PermissionGroupError)
def create_permission_group_error(request, payload: PermissionGroupErrorCreate):
    data = payload.dict()
    permission_group_error = PermissionGroupError.objects.create(**data)
    return permission_group_error


@router.put('/permission_group_errors/{id}', response=PermissionGroupError)
def update_permission_group_error(request, id: int, payload: PermissionGroupErrorUpdate):
    permission_group_error = get_object_or_404(PermissionGroupError, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(permission_group_error, attr, value)
    permission_group_error.save()
    return permission_group_error


@router.delete('/permission_group_errors/{id}')
def delete_permission_group_error(request, id: int):
    permission_group_error = get_object_or_404(PermissionGroupError, id=id)
    permission_group_error.delete()
    return {'success': True}


# PermissionGroupUpdate endpoints
@router.get('/permission_group_updates', response=List[PermissionGroupUpdate])
@paginate
def list_permission_group_updates(request):
    return PermissionGroupUpdate.objects.all()


@router.get('/permission_group_updates/{id}', response=PermissionGroupUpdate)
def get_permission_group_update(request, id: int):
    return get_object_or_404(PermissionGroupUpdate, id=id)


@router.post('/permission_group_updates', response=PermissionGroupUpdate)
def create_permission_group_update(request, payload: PermissionGroupUpdateCreate):
    data = payload.dict()
    permission_group_update = PermissionGroupUpdate.objects.create(**data)
    return permission_group_update


@router.put('/permission_group_updates/{id}', response=PermissionGroupUpdate)
def update_permission_group_update(request, id: int, payload: PermissionGroupUpdateUpdate):
    permission_group_update = get_object_or_404(PermissionGroupUpdate, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(permission_group_update, attr, value)
    permission_group_update.save()
    return permission_group_update


@router.delete('/permission_group_updates/{id}')
def delete_permission_group_update(request, id: int):
    permission_group_update = get_object_or_404(PermissionGroupUpdate, id=id)
    permission_group_update.delete()
    return {'success': True}


# PermissionGroupDelete endpoints
@router.get('/permission_group_deletes', response=List[PermissionGroupDelete])
@paginate
def list_permission_group_deletes(request):
    return PermissionGroupDelete.objects.all()


@router.get('/permission_group_deletes/{id}', response=PermissionGroupDelete)
def get_permission_group_delete(request, id: int):
    return get_object_or_404(PermissionGroupDelete, id=id)


@router.post('/permission_group_deletes', response=PermissionGroupDelete)
def create_permission_group_delete(request, payload: PermissionGroupDeleteCreate):
    data = payload.dict()
    permission_group_delete = PermissionGroupDelete.objects.create(**data)
    return permission_group_delete


@router.put('/permission_group_deletes/{id}', response=PermissionGroupDelete)
def update_permission_group_delete(request, id: int, payload: PermissionGroupDeleteUpdate):
    permission_group_delete = get_object_or_404(PermissionGroupDelete, id=id)
    for attr, value in payload.dict(exclude_unset=True).items():
        setattr(permission_group_delete, attr, value)
    permission_group_delete.save()
    return permission_group_delete


@router.delete('/permission_group_deletes/{id}')
def delete_permission_group_delete(request, id: int):
    permission_group_delete = get_object_or_404(PermissionGroupDelete, id=id)
    permission_group_delete.delete()
    return {'success': True}


"""
Federation @key directive
"""
directive @key(
  fields: FieldSet!
  resolvable: Boolean = true
) repeatable on OBJECT | INTERFACE

"""
Federation @requires directive
"""
directive @requires(fields: FieldSet!) on FIELD_DEFINITION

"""
Federation @provides directive
"""
directive @provides(fields: FieldSet!) on FIELD_DEFINITION

"""
Federation @external directive
"""
directive @external on OBJECT | FIELD_DEFINITION

"""
Federation @shareable directive
"""
directive @shareable repeatable on FIELD_DEFINITION | OBJECT

"""
Federation @extends directive
"""
directive @extends on OBJECT | INTERFACE

"""
Federation @override directive
"""
directive @override(from: String!) on FIELD_DEFINITION

"""
Federation @inaccessible directive
"""
directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ENUM | ENUM_VALUE | SCALAR | INPUT_OBJECT | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION

"""
Federation @tag directive
"""
directive @tag on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

"""
Federation @composeDirective directive
"""
directive @composeDirective(name: String!) on SCHEMA

"""
Federation @interfaceObject directive
"""
directive @interfaceObject repeatable on OBJECT

"""
Federation @authenticated directive
"""
directive @authenticated on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

"""
Federation @requiresScopes directive
"""
directive @requiresScopes(
  scopes: [[federation__Scope!]!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

"""
Federation @policy directive
"""
directive @policy(
  policies: [[federation__Policy!]!]!
) on FIELD_DEFINITION | OBJECT | INTERFACE | SCALAR | ENUM

"""
Custom Decimal implementation.

Returns Decimal as a float in the API,
parses float to the Decimal on the way back
("float -> string -> Decimal" so as not to lose precision).
"""
scalar Decimal

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  """
  Look up an email template by ID.
  """
  emailTemplate(
    """
    ID of an email template
    """
    id: ID!
  ): EmailTemplate

  """
  Preview a template rendered.
  """
  emailTemplatePreview(
    """
    ID of an email template.
    """
    id: ID!

    """
    Rendered content to be previewed.
    """
    content: String!
  ): EmailTemplatePreview

  """
  List of email templates.
  """
  emailTemplates(
    """
    Filtering options for email templates.
    """
    filter: EmailTemplateFilterInput

    """
    Sort email templates.
    """
    sortBy: EmailTemplateSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): EmailTemplateCountableConnection

  """
  List of the wishlist items by name.
  """
  wishlistItemsByName(
    """
    Filtering options for wishlist items.
    """
    filter: WishlistItemInputFilter

    """
    Wishlist Name
    """
    wishlistName: String!

    """
    Sort wishlist items.
    """
    sortBy: WishlistItemSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WishlistItemCountableConnection

  """
  Look up a webhook by ID.
  """
  webhook(
    """
    ID of the webhook.
    """
    id: ID!
  ): Webhook

  """
  List of all available webhook events.
  """
  webhookEvents: [WebhookEvent!]!

  """
  Retrieve a sample payload for a given webhook event based on real data. It can be useful for some integrations where sample payload is required.
  """
  webhookSamplePayload(
    """
    Name of the requested event type.
    """
    eventType: WebhookSampleEventTypeEnum!
  ): JSONString @deprecated(reason: "This will be removed on February 6, 2025.")

  """
  List of webhook event logs.
  """
  webhookEventLogs(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WebhookEventLogCountableConnection

  """
  List of webhook jobs
  """
  webhookJobs(
    """
    Filtering options for webhook jobs
    """
    filter: WebhookJobFilterInput

    """
    Sort webhook jobs
    """
    sortBy: WebhookJobSortingInput

    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WebhookJobCountableConnection

  """
  Look up a warehouse by ID.
  """
  warehouse(
    """
    ID of an warehouse
    """
    id: ID!
  ): Warehouse

  """
  List of warehouses.
  """
  warehouses(
    filter: WarehouseFilterInput
    sortBy: WarehouseSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WarehouseCountableConnection

  """
  Look up a stock by ID
  """
  stock(
    """
    ID of an warehouse
    """
    id: ID!
  ): Stock

  """
  List of stocks.
  """
  stocks(
    filter: StockFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): StockCountableConnection

  """
  Return information about content.
  """
  content(
    """
    ID of content.
    """
    id: ID

    """
    The content's slug.
    """
    slug: String
  ): Content!

  """
  Return information about content for the editor.
  """
  contentDraft(
    """
    ID of content.
    """
    id: ID

    """
    The content's slug.
    """
    slug: String
  ): Content!

  """
  List of the content.
  """
  contentList(
    """
    Filtering options for content.
    """
    filter: ContentFilterInput

    """
    Sort content.
    """
    sortBy: ContentSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ContentCountableConnection

  """
  Return information about media.
  """
  media(
    """
    ID of media.
    """
    id: ID
  ): Media!

  """
  List of the media.
  """
  mediaList(
    """
    Filtering options for media.
    """
    filter: MediaFilterInput

    """
    Sort media.
    """
    sortBy: MediaSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): MediaCountableConnection

  """
  Look up a tenant by ID.
  """
  tenant(
    """
    ID of a tenant.
    """
    id: ID!
  ): Tenant

  """
  List of tenants.
  """
  tenants(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): TenantCountableConnection

  """
  Return information about the shop.
  """
  shop: Shop!

  """
  Returns analytics ID (e.g. Google Tag ID).
  """
  analyticsId: String

  """
  If set, the custom storefront domain
  """
  customStorefrontDomain: CustomDomain

  """
  Look up a shipping zone by ID.
  """
  shippingZone(
    """
    ID of the shipping zone.
    """
    id: ID!
  ): ShippingZone

  """
  List of the shop's shipping zones.
  """
  shippingZones(
    filter: ShippingZoneFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ShippingZoneCountableConnection

  """
  Look up seller by global ID
  """
  seller(
    """
    Global ID of the seller
    """
    id: ID

    """
    PK of seller
    """
    number: ID

    """
    Tax ID of seller
    """
    taxId: String
    slug: String
  ): Seller

  """
  Look up seller by slug
  """
  sellerBySlug(slug: String): PublicSeller

  """
  List of sellers
  """
  sellers(
    """
    Filtering options for sellers
    """
    filter: SellerFilterInput

    """
    Sort sellers
    """
    sortBy: SellerSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): SellerCountableConnection
  sellerUser(
    """
    Global ID of the seller-user mapping
    """
    id: ID

    """
    Email of the user in the seller-user mapping
    """
    email: String
  ): SellerUserType
  sellerUsers(
    """
    Email of the user in the seller-user mapping
    """
    email: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): SellerUserTypeCountableConnection
  userSellers(
    """
    Email of the user
    """
    email: String
  ): [SellerUserType!]
  sellerEvents(
    """
    ID of seller to get events for
    """
    seller: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): SellerEventTypeCountableConnection
  allowedOwners(
    query: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): UserCountableConnection
  availablePlans(
    query: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AgreementCountableConnection
  sellerListCards(period: ReportingPeriod!, identifier: ID): SellerCards
  sellerDetailCards(
    period: ReportingPeriod!
    identifier: ID!
  ): SellerDetailCards

  """
  Number of new sellers created in given period.
  """
  newSellers(period: ReportingPeriod!): Int

  """
  Number of orders placed by sellers in given period.
  """
  sellerOrders(period: ReportingPeriod!, identifier: ID): Int

  """
  Return the total commissions earned across all sellers for the given period.
  """
  sellerCommissions(period: ReportingPeriod!, identifier: ID): Money

  """
  Look up an refund by ID.
  """
  refund(
    """
    ID of a refund.
    """
    id: ID!
  ): Refund

  """
  List of refunds.
  """
  refunds(
    """
    Filtering options for refunds.
    """
    filter: RefundFilterInput

    """
    Sort refunds.
    """
    sortBy: RefundSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): RefundCountableConnection

  """
  Look up digital content by ID.
  """
  digitalContent(
    """
    ID of the digital content.
    """
    id: ID!
  ): DigitalContent

  """
  List of digital content.
  """
  digitalContents(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): DigitalContentCountableConnection

  """
  Unfiltered and unpaginated list of the shop's categories.
  """
  allCategories: [Category!]

  """
  List of the shop's categories.
  """
  categories(
    """
    Filtering options for categories.
    """
    filter: CategoryFilterInput

    """
    Sort categories.
    """
    sortBy: CategorySortingInput

    """
    Filter categories by the nesting level in the category tree.
    """
    level: Int

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CategoryCountableConnection

  """
  Look up a category by ID or slug.
  """
  category(
    """
    ID of the category.
    """
    id: ID

    """
    Slug of the category
    """
    slug: String
  ): Category

  """
  Look up a collection by ID.
  """
  collection(
    """
    ID of the collection.
    """
    id: ID

    """
    Slug of the collection
    """
    slug: String
  ): Collection

  """
  List of the shop's collections.
  """
  collections(
    """
    Filtering options for collections.
    """
    filter: CollectionFilterInput

    """
    Sort collections.
    """
    sortBy: CollectionSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CollectionCountableConnection

  """
  Look up a product by ID.
  """
  product(
    """
    ID of the product.
    """
    id: ID

    """
    Slug of the product
    """
    slug: String

    """
    Seller global id to filter by
    """
    identifier: ID
  ): Product

  """
  List of the shop's products.
  """
  products(
    """
    Filtering options for products.
    """
    filter: ProductFilterInput

    """
    Sort products.
    """
    sortBy: ProductOrder

    """
    MPO only filter: allows seeing products on behalf of a particular seller.
    """
    identifier: ID

    """
    Microsite ID to filter by
    """
    microsite: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  Look up a product type by ID.
  """
  productType(
    """
    ID of the product type.
    """
    id: ID!
  ): ProductType

  """
  List of the shop's product types.
  """
  productTypes(
    """
    Filtering options for product types.
    """
    filter: ProductTypeFilterInput

    """
    Sort product types.
    """
    sortBy: ProductTypeSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductTypeCountableConnection

  """
  Look up a product variant by ID or Nautical Stock Number (NSN).
  """
  productVariant(
    """
    ID of the product variant.
    """
    id: ID

    """
    Nautical Stock Number of the product variant.
    """
    nsn: String
  ): ProductVariant

  """
  List of product variants.
  """
  productVariants(
    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Filtering options for product variant.
    """
    filter: ProductVariantFilterInput

    """
    Sort variants.
    """
    sortBy: VariantSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductVariantCountableConnection

  """
  List of top selling products.
  """
  reportProductSales(
    """
    Span of time.
    """
    period: ReportingPeriod!

    """
    Seller global id to filter by.
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductVariantCountableConnection

  """
  Look up a price book by ID.
  """
  priceBook(
    """
    ID of a price book.
    """
    id: ID!
  ): PriceBook

  """
  List of price books.
  """
  priceBooks(
    """
    Filtering options for price books.
    """
    filter: PriceBookFilterInput

    """
    Sort price books.
    """
    sortBy: PriceBookSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookCountableConnection

  """
  List of price book variants in.
  """
  priceBookVariants(
    """
    Price book ID to filter variants.
    """
    priceBookId: ID!

    """
    Variant ID to filter variants.
    """
    variantId: ID

    """
    Filtering options for price book variants .
    """
    filter: PriceBookVariantFilterInput

    """
    Sort price book variants in.
    """
    sortBy: PriceBookVariantSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookVariantCountableConnection

  """
  List of price book products.
  """
  priceBookProducts(
    """
    Price book ID to filter products.
    """
    priceBookId: ID!

    """
    Product ID to filter products from.
    """
    productId: ID

    """
    Filtering options for price book products.
    """
    filter: PriceBookProductFilterInput

    """
    Sort price book products.
    """
    sortBy: PriceBookProductSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookProductCountableConnection

  """
  List of price book product types.
  """
  priceBookProductTypes(
    """
    Price book ID to filter products.
    """
    priceBookId: ID!

    """
    Product type ID to filter product types.
    """
    productTypeId: ID

    """
    Filtering options for price book product types.
    """
    filter: PriceBookProductTypeFilterInput

    """
    Sort price book product types.
    """
    sortBy: PriceBookProductTypeSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookProductTypeCountableConnection

  """
  List of price book variants in history table.
  """
  priceBookVariantsHistory(
    """
    Price book ID to filter variants from history table.
    """
    priceBookId: ID!

    """
    Variant ID to filter variants from history table.
    """
    variantId: ID!

    """
    Filtering options for price book variants from history table.
    """
    filter: PriceBookVariantHistoryFilterInput

    """
    Sort price book variants in history table.
    """
    sortBy: PriceBookVariantHistorySortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookVariantHistoryCountableConnection

  """
  List of price book products in history table.
  """
  priceBookProductsHistory(
    """
    Price book ID to filter products in history table.
    """
    priceBookId: ID!

    """
    Product ID to filter products from history table.
    """
    productId: ID!

    """
    Filtering options for price book products in history table.
    """
    filter: PriceBookProductHistoryFilterInput

    """
    Sort price book products in history table.
    """
    sortBy: PriceBookProductHistorySortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookProductHistoryCountableConnection

  """
  List of price book product types in history tables.
  """
  priceBookProductTypesHistory(
    """
    Price book ID to filter products in history tables.
    """
    priceBookId: ID!

    """
    Product type ID to filter product types from history table.
    """
    productTypeId: ID!

    """
    Filtering options for price book product types in history tables.
    """
    filter: PriceBookProductTypeHistoryFilterInput

    """
    Sort price book product types in history tables.
    """
    sortBy: PriceBookProductTypeHistorySortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PriceBookProductTypeHistoryCountableConnection

  """
  Look up users attached to a price book by ID.
  """
  priceBookUsers(
    """
    Sort price book users.
    """
    sortBy: UserSortingInput

    """
    ID of a price book.
    """
    priceBookId: ID!

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): UserCountableConnection

  """
  Look up a plugin by ID.
  """
  plugin(
    """
    ID of the plugin.
    """
    id: ID!

    """
    ID of the seller
    """
    seller: ID
  ): Plugin

  """
  List of plugins.
  """
  plugins(
    """
    Filtering options for plugins.
    """
    filter: PluginFilterInput

    """
    Sort plugins.
    """
    sortBy: PluginSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PluginCountableConnection

  """
  Get customer tax certificates by user ID.
  """
  customerTaxCertificates(
    """
    ID of the customer to query tax certificates for.
    """
    id: ID!
  ): [TaxCertificate!]

  """
  List of third party products
  """
  thirdPartyProducts(
    """
    Third-party source name
    """
    source: String!
  ): GenericScalar

  """
  Get third party product in form we can use for import
  """
  importThirdPartyProduct(
    """
    Third-party source name
    """
    source: String!

    """
    ID of the third party product to import
    """
    id: ID!
  ): GenericScalar

  """
  List of plugins that are available as product import sources
  """
  availableImportSources: [Plugin!]

  """
  Look up a catalog import process by ID.
  """
  catalogImportProcess(
    """
    ID of the catalog import process.
    """
    id: ID!
  ): CatalogImportProcess

  """
  List of catalog import processes.
  """
  catalogImportProcesses(
    """
    Filtering options for catalog import processes.
    """
    filter: CatalogImportProcessFilterInput

    """
    Sort catalog import processes.
    """
    sortBy: CatalogImportProcessSortInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CatalogImportProcessCountableConnection

  """
  List of tax exempt code supported by Avalara. Required permission: MANAGE_MARKETPLACE. Note: doesn't support app auth.
  """
  taxExemptCodes: [TaxExemptCode!]

  """
  All forms available on Typeform
  """
  typeformForms(
    """
    Page number of requested page of typeform forms
    """
    page: Int

    """
    Search term to use when retrieving typeform forms
    """
    search: String
  ): TypeformForms

  """
  Form details for specified form_id
  """
  typeformForm(
    """
    ID of the form to get details for.
    """
    id: ID
  ): TypeformForm

  """
  Get the flows associated with a particular plugin and seller
  """
  pluginFlows(
    """
    ID of the plugin.
    """
    id: ID!

    """
    ID of the seller.
    """
    seller: ID
  ): [Flow!]

  """
  Get client secret if necessary for frontend configuration.
  """
  getClientSecret(
    """
    ID of the gateway
    """
    gateway: ID!

    """
    Payment data for client if required
    """
    paymentInformation: StripeClientPaymentData!
  ): GenericScalar

  """
  List of active payment gateways that have payouts enabled.
  """
  getPayoutGateways: [PaymentGateway!]

  """
  List of Avalara calls.
  """
  avalaraRequestLogs(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AvalaraRequestLogCountableConnection

  """
  List of checkout events.
  """
  checkoutEvents(
    """
    Filtering options for checkout events.
    """
    filter: CheckoutEventFilterInput

    """
    Sort checkout events.
    """
    sortBy: CheckoutEventSortInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CheckoutEventCountableConnection

  """
  Look up a payout by ID.
  """
  payout(
    """
    ID of the payout
    """
    id: ID!
  ): Payout

  """
  List of payouts.
  """
  payouts(
    """
    Filtering options for payouts.
    """
    filter: PayoutFilterInput

    """
    Sorting options for payouts.
    """
    sortBy: PayoutSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PayoutCountableConnection

  """
  Look up a vendor payout by ID.
  """
  vendorPayout(
    """
    ID of the vendor payout.
    """
    id: ID!
  ): VendorPayout
  vendorPayouts(
    """
    End of the period to filter results
    """
    endDate: Date

    """
    Payout ID
    """
    payoutId: ID
  ): VendorPayoutReport
  vendorPayoutList(
    """
    Vendor type of the payout
    """
    vendorType: String
      @deprecated(reason: "This will be removed on February 1, 2025.")

    """
    Vendor ID
    """
    vendorId: ID
  ): SingleVendorPayoutReport

  """
  Look up a payment by ID.
  """
  payment(
    """
    ID of the payment.
    """
    id: ID!
  ): Payment

  """
  List of payments.
  """
  payments(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PaymentCountableConnection

  """
  Look up a page by ID or slug.
  """
  page(
    """
    ID of the page.
    """
    id: ID

    """
    The slug of the page.
    """
    slug: String
  ): Page

  """
  List of the shop's pages.
  """
  pages(
    """
    Sort pages.
    """
    sortBy: PageSortingInput

    """
    Filtering options for pages.
    """
    filter: PageFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): PageCountableConnection

  """
  List of activity events to display on homepage (at the moment it only contains order-events).
  """
  homepageEvents(
    """
    Global ID of a seller to filter to
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderEventCountableConnection

  """
  List of activity events to display on homepage (at the moment it only contains nautical-order-events).
  """
  marketplaceHomepageEvents(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderEventCountableConnection

  """
  Look up an order by ID.
  """
  order(
    """
    ID of an order.
    """
    id: ID!
  ): Order

  """
  Look up nautical order by ID.
  """
  nauticalOrder(
    """
    ID of a nautical order.
    """
    id: ID!
  ): NauticalOrder

  """
  List of orders.
  """
  orders(
    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for orders. Orders may be filtered by order number, seller company name, seller email, customer first and/or last name, customer email, customer company name, discount name, order line product name, variant name, variant sku, invoice number, and variant stock number.
    """
    filter: OrderFilterInput

    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderCountableConnection

  """
  List of Nautical orders.
  """
  nauticalOrders(
    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for orders. Orders may be filtered by marketplace order number, seller order number, seller company name, seller email, customer first and/or last name, customer email, customer company name, discount name, order line product name, variant name, variant sku, variant stock number, purchase order number, invoice number, and payment charge status.
    """
    filter: NauticalOrderFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderCountableConnection

  """
  List of draft orders.
  """
  draftOrders(
    """
    Sort draft orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for draft orders.
    """
    filter: OrderDraftFilterInput

    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderCountableConnection

  """
  List of draft orders.
  """
  nauticalDraftOrders(
    """
    Sort draft orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for draft orders.
    """
    filter: NauticalOrderDraftFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderCountableConnection

  """
  List of quote orders.
  """
  nauticalQuoteOrders(
    """
    Sort quote orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for nautical quote orders.
    """
    filter: NauticalOrderQuoteFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderCountableConnection

  """
  Look up a nautical quote order by token
  """
  nauticalQuoteOrderByToken(
    """
    The Nautical quote order token
    """
    token: NauticalUUID!
  ): NauticalOrder

  """
  List of quote orders.
  """
  quoteOrders(
    """
    Sort quote orders.
    """
    sortBy: OrderSortingInput

    """
    Filtering options for quote orders.
    """
    filter: OrderQuoteFilterInput

    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderCountableConnection

  """
  Return the total sales amount from a specific period.
  """
  ordersTotal(
    """
    Seller global id to filter by
    """
    identifier: ID

    """
    A period of time.
    """
    period: ReportingPeriod
  ): TaxedMoney

  """
  Return the total sales amount from a specific period.
  """
  nauticalOrdersTotal(
    """
    A period of time.
    """
    period: ReportingPeriod
  ): TaxedMoney

  """
  Look up an order by token.
  """
  orderByToken(
    """
    The order's token.
    """
    token: NauticalUUID!
  ): Order

  """
  Look up a nautical order by token
  """
  nauticalOrderByToken(
    """
    The Nautical order token
    """
    token: NauticalUUID!
  ): NauticalOrder

  """
  List of fulfillments.
  """
  returns(
    """
    Seller global id to filter by
    """
    identifier: ID

    """
    Filtering options for return fulfillments.
    """
    filter: ReturnFulfillmentFilterInput

    """
    Sort return fulfillments.
    """
    sortBy: ReturnFulfillmentSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): FulfillmentCountableConnection
  optimizedHome(
    """
    True if getting marketplace view
    """
    isMarketplace: Boolean!

    """
    Vendor identifier to scope data to
    """
    identifier: ID

    """
    Start date to filter cards and order data
    """
    startDate: Date!

    """
    End date to filter cards and order data
    """
    endDate: Date!
  ): OptimizedHome

  """
  Return requested nautical configuration item
  """
  nauticalConfiguration(
    """
    Name of the configuration item to retrieve
    """
    configurationName: String!
  ): NauticalConfiguration

  """
  Return all nautical configuration items
  """
  nauticalConfigurationList: [NauticalConfiguration!]

  """
  Look up a microsite by ID or slug
  """
  microsite(
    """
    ID of the microsite.
    """
    id: ID

    """
    Slug of the microsite
    """
    slug: String
  ): Microsite
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  List of microsites
  """
  microsites(
    """
    Filtering options for microsites
    """
    filter: MicrositeFilterInput

    """
    Sort microsites
    """
    sortBy: MicrositeSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): MicrositeCountableConnection
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Look up microsite by vendor ID
  """
  vendorMicrosite(
    """
    ID of vendor to fetch microsite for.
    """
    id: ID!
  ): Microsite
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Look up a navigation menu by ID or name.
  """
  menu(
    """
    ID of the menu.
    """
    id: ID

    """
    The menu's name.
    """
    name: String

    """
    The menu's slug.
    """
    slug: String
  ): Menu

  """
  List of the storefront's menus.
  """
  menus(
    """
    Sort menus.
    """
    sortBy: MenuSortingInput

    """
    Filtering options for menus.
    """
    filter: MenuFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): MenuCountableConnection

  """
  Look up a menu item by ID.
  """
  menuItem(
    """
    ID of the menu item.
    """
    id: ID!
  ): MenuItem

  """
  List of the storefronts's menu items.
  """
  menuItems(
    """
    Sort menus items.
    """
    sortBy: MenuItemSortingInput

    """
    Filtering options for menu items.
    """
    filter: MenuItemFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): MenuItemCountableConnection

  """
  Return configuration for the marketplace.
  """
  marketplaceConfiguration: MarketplaceConfiguration!

  """
  Currencies available to the marketplace.
  """
  currencies: [NauticalCurrency!]!

  """
  Countries available to the marketplace.
  """
  countries: [CountryDisplay!]!

  """
  List of email logs.
  """
  emailLogs(
    """
    Filtering options for email logs.
    """
    filter: EmailEventFilterInput

    """
    Sort email logs.
    """
    sortBy: EmailEventSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): EmailEventCountableConnection

  """
  Search Locations
  """
  locationSearch(
    """
    Location search query
    """
    searchData: String!
  ): [LocationSuggestion!]
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Geocode locations
  """
  locationGeocode(
    """
    Location geocode query, required=True
    """
    locationData: String
  ): [Coordinates!]
    @deprecated(reason: "Locations will be removed on November 28, 2024.")
  insightsOrdersCustomerSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!
  ): InReportOrderCustomerSummaryType
  insightsOrdersSellerSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!
  ): InReportOrderSellerSummaryType
  insightsOrdersMarketplaceSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Period dimension such as DAY, WEEK, MONTH, QUARTER, YEAR
    """
    dimension: InsightDimensionEnum = MONTH
  ): InReportOrderMarketplaceSummaryType
  insightsMarketplacePayoutsSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!
  ): InReportMarketplacePayoutsSummaryType
  insightsMarketplaceTaxSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Period dimension such as DAY, WEEK, MONTH, QUARTER, YEAR
    """
    dimension: InsightDimensionEnum = YEAR
  ): InReportMarketplaceTaxSummaryType
  insightsMarketplaceTaxesByCountry(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!
  ): InReportMarketplaceTaxesByCountryType
  insightsMarketplaceTaxesByCountryArea(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!
  ): InReportMarketplaceTaxesByCountryType
  insightsTopPerformingProducts(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    Seller ID to filter results
    """
    identifier: ID

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Total number of products to list
    """
    limit: Int = 25

    """
    Top or worst performing
    """
    perspective: PerformancePerspective!
  ): InReportTopPerformingProductsType
  insightsTopPerformingCategories(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    Seller ID to filter results
    """
    identifier: ID

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Total number of products to list
    """
    limit: Int = 25

    """
    Top or worst performing
    """
    perspective: PerformancePerspective!
  ): InReportTopPerformingCategoriesType
  insightsMarketplacePaymentsSummary(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Total number of products to list
    """
    limit: Int = 25

    """
    Period dimension such as DAY, WEEK, MONTH, QUARTER, YEAR
    """
    dimension: InsightDimensionEnum = DAY
  ): InReportMarketplacePaymentsSummaryType
  dashboardOrdersSummary(
    """
    ID of seller for filtering
    """
    identifier: ID

    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Period dimension such as MONTH, QUARTER, YEAR
    """
    dimension: String
  ): DashboardOrdersSummaryType
  dashboardTopSellerPerformance(
    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Period dimension such as DAY, WEEK, MONTH, QUARTER, YEAR
    """
    dimension: String
  ): DashboardTopSellerPerformanceType
  dashboardGraph(
    """
    ID of seller for filtering
    """
    identifier: ID

    """
    Beginning of the period to filter results
    """
    startDate: Date!

    """
    End of the period to filter results
    """
    endDate: Date!

    """
    Period dimension such as MONTH, QUARTER, YEAR
    """
    dimension: String
  ): DashboardGraphType

  """
  List of the fonts for the storefront.
  """
  fontList(
    """
    Filtering options for fonts for storefront.
    """
    filter: ContentFilterInput

    """
    Sort fonts for storefront.
    """
    sortBy: ContentSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): FontCountableConnection

  """
  List of journal entries in the ledger system.
  """
  journalEntries(
    """
    Filtering options for journal entries.
    """
    filter: JournalEntryFilterInput

    """
    Sorting options for journal entries.
    """
    sortBy: JournalEntrySortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): JournalEntryCountableConnection

  """
  List of ledgers in the system
  """
  ledgers(
    """
    Filtering options for ledgers.
    """
    filter: LedgerEntryFilterInput

    """
    Sorting options for ledgers.
    """
    sortBy: LedgerSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): LedgerCountableConnection

  """
  Look up a sale by ID.
  """
  sale(
    """
    ID of the sale.
    """
    id: ID!
  ): Sale

  """
  List of the shop's sales.
  """
  sales(
    """
    Filtering options for sales.
    """
    filter: SaleFilterInput

    """
    Sort sales.
    """
    sortBy: SaleSortingInput

    """
    Search sales by name, value or type.
    """
    query: String

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): SaleCountableConnection

  """
  Look up a voucher by ID.
  """
  voucher(
    """
    ID of the voucher.
    """
    id: ID!
  ): Voucher

  """
  List of the shop's vouchers.
  """
  vouchers(
    """
    Filtering options for vouchers.
    """
    filter: VoucherFilterInput

    """
    Sort voucher.
    """
    sortBy: VoucherSortingInput

    """
    Search vouchers by name or code.
    """
    query: String

    """
    ID of product to filter vouchers on
    """
    productId: ID

    """
    ID of variant to filter vouchers on
    """
    variantId: ID

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): VoucherCountableConnection
  designerdata(name: String): DesignerDataType
  designerdatalist: [DesignerDataType!]!

  """
  Token nexessary for connecting to the embedded integration platform
  """
  integrationEmbeddingToken: String

  """
  Look up a export file by ID.
  """
  exportFile(
    """
    ID of the export file job.
    """
    id: ID!
  ): ExportFile

  """
  List of export files.
  """
  exportFiles(
    """
    Filtering options for export files.
    """
    filter: ExportFileFilterInput

    """
    Sort export files.
    """
    sortBy: ExportFileSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ExportFileCountableConnection

  """
  List of all tax rates available from tax gateway.
  """
  taxTypes: [TaxType!]!

  """
  Look up a checkout by token.
  """
  checkout(
    """
    The checkout's token.
    """
    token: NauticalUUID
  ): Checkout

  """
  List of checkouts.
  """
  checkouts(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CheckoutCountableConnection

  """
  Look up a checkout line by ID.
  """
  checkoutLine(
    """
    ID of the checkout line.
    """
    id: ID
  ): CheckoutLine

  """
  List of checkout lines.
  """
  checkoutLines(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CheckoutLineCountableConnection

  """
  List of the shop's attributes.
  """
  attributes(
    """
    Filtering options for attributes.
    """
    filter: AttributeFilterInput

    """
    Sorting options for attributes.
    """
    sortBy: AttributeSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AttributeCountableConnection

  """
  Look up an attribute by ID.
  """
  attribute(
    """
    ID of the attribute.
    """
    id: ID!
  ): Attribute

  """
  List of the available custom field templates.
  """
  customFieldTemplates: [CustomFieldTemplate!]!

  """
  Look up a custom field template by ID or Content Type.
  """
  customFieldTemplate(
    """
    ID of the custom field template.
    """
    id: ID

    """
    Model of the custom field template.
    """
    contentType: CustomFieldTemplateEnum
  ): CustomFieldTemplate

  """
  List of all apps installations
  """
  appsInstallations: [AppInstallation!]!

  """
  List of the apps.
  """
  apps(
    """
    Filtering options for apps.
    """
    filter: AppFilterInput

    """
    Sort apps.
    """
    sortBy: AppSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AppCountableConnection

  """
  Look up a app by ID.
  """
  app(
    """
    ID of the app.
    """
    id: ID!
  ): App

  """
  Look up a marketplace agreement by ID or slug.
  """
  agreement(
    """
    ID of the marketplace agreement.
    """
    id: ID

    """
    The slug of the marketplace agreement.
    """
    slug: String
  ): Agreement

  """
  List of the marketplace agreements.
  """
  agreements(
    """
    Sort marketplace agreements.
    """
    sortBy: AgreementOrder

    """
    Filtering options for marketplace agreements.
    """
    filter: AgreementFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AgreementCountableConnection

  """
  Look up what agreement a seller is attached to for the current date
  """
  sellerAgreement(
    """
    ID of the seller to search for their agreement
    """
    id: ID
  ): AgreementSellers

  """
  Look up agreement history for a seller
  """
  sellerAgreements(
    """
    ID of the seller to search for their agreement
    """
    id: ID!
  ): [AgreementSellers!]!

  """
  Returns address validation rules.
  """
  addressValidationRules(
    """
    Two-letter ISO 3166-1 country code.
    """
    countryCode: CountryCode!

    """
    Designation of a region, province or state.
    """
    countryArea: String

    """
    City or a town name.
    """
    city: String

    """
    Sublocality like a district.
    """
    cityArea: String
  ): AddressValidationData!

  """
  Look up an address by ID.
  """
  address(
    """
    ID of an address.
    """
    id: ID!
  ): Address

  """
  List of the shop's customers.
  """
  customers(
    """
    Filtering options for customers.
    """
    filter: CustomerFilterInput

    """
    Sort customers.
    """
    sortBy: UserSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): UserCountableConnection!

  """
  List of permission groups.
  """
  permissionGroups(
    """
    Filtering options for permission groups.
    """
    filter: PermissionGroupFilterInput

    """
    Sort permission groups.
    """
    sortBy: PermissionGroupSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): GroupCountableConnection!

  """
  Look up permission group by ID.
  """
  permissionGroup(
    """
    ID of the group.
    """
    id: ID!
  ): Group

  """
  Return the currently authenticated user.
  """
  me: User

  """
  List of the shop's staff users.
  """
  staffUsers(
    """
    Filtering options for staff users.
    """
    filter: StaffUserInput

    """
    ID of seller to scope staff to
    """
    seller: ID

    """
    Sort staff users.
    """
    sortBy: UserSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): UserCountableConnection!

  """
  Look up a user by ID.
  """
  user(
    """
    ID of the user.
    """
    id: ID!
  ): User

  """
  Look up user by email.
  """
  userByEmail(
    """
    Email address of the user.
    """
    email: String!
  ): User
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}

"""
Represents an email template.
"""
type EmailTemplate implements Node {
  """
  The ID of the object
  """
  id: ID!
  title: String!
  subject: String!
  senderEmailAddress: String
  content: String
  defaultContent: String
  renderedContent: String
  description: String
  isCustom: Boolean!
  isActive: Boolean!
  isEditable: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The recipient type of the email template
  """
  recipientType: RecipientTypeEnum!

  """
  The event type associated with the email template
  """
  eventType: EventTypeEnum!
}

"""
An object with an ID
"""
interface Node {
  """
  The ID of the object
  """
  id: ID!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"""
Represents the recipient type for an email template.
"""
enum RecipientTypeEnum {
  CUSTOMER
  SELLER_PRIMARY_CONTACT
  STAFF_MEMBER_MARKETPLACE
  STAFF_MEMBER_SELLER
  STAFF_MEMBER_MARKETPLACE_OR_SELLER
}

"""
An enumeration.
"""
enum EventTypeEnum {
  account_confirmation
  account_password_reset
  account_change_email_request
  account_change_email_confirm
  account_delete
  account_set_customer_password
  invoice_ready
  order_confirmation
  order_fulfillment_confirmation
  order_fulfillment_denied
  order_fulfillment_update
  order_canceled
  partial_order_cancel
  order_refund_confirmation
  pending_quote
  account_set_staff_password
  csv_export_products_success
  csv_export_failed
  staff_order_confirmation
  account_staff_reset_password
  vendor_payout_confirmation
  pending_seller
  updated_status
  seller_status_pending
  seller_status_approved
  seller_status_declined
  seller_status_paused
  seller_agreement_accepted
  seller_agreement_not_accepted
  import_catalog_failed
  import_catalog_success
  account_activate_request
  account_activated
  account_deactivated
  pending_order
  pending_customer
  quote_requested
}

"""
Represents an email template preview.
"""
type EmailTemplatePreview {
  """
  ID of the email template
  """
  id: ID

  """
  The content of the email template
  """
  renderedContent: String
}

type EmailTemplateCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [EmailTemplateCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type EmailTemplateCountableEdge {
  """
  The item at the end of the edge.
  """
  node: EmailTemplate!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Filter input class for email templates.
"""
input EmailTemplateFilterInput {
  title: String
  recipientType: RecipientTypeEnum
  eventType: EventTypeEnum
}

input EmailTemplateSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort email templates by the selected field.
  """
  field: EmailTemplateSortField!
}

enum OrderDirection {
  """
  Specifies an ascending sort order.
  """
  ASC

  """
  Specifies a descending sort order.
  """
  DESC
}

enum EmailTemplateSortField {
  """
  Sort email template by title.
  """
  TITLE

  """
  Sort email template by subject.
  """
  SUBJECT

  """
  Sort email template by recipient type.
  """
  RECIPIENT_TYPE
}

type WishlistItemCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [WishlistItemCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type WishlistItemCountableEdge {
  """
  The item at the end of the edge.
  """
  node: WishlistItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Wishlist item.
"""
type WishlistItem implements Node {
  """
  The ID of the object
  """
  id: ID!
  wishlist: Wishlist!
  product: Product
  variant: ProductVariant
  note: String
  expiryDate: DateTime
  quantity: Int!

  """
  Requested price for the WishlistItem.
  """
  requestedPrice: Money
}

"""
Wishlist item.
"""
type Wishlist implements Node {
  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!
  name: String!
  isDefault: Boolean!
  user: User

  """
  List of the wishlist's items.
  """
  items(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WishlistItemCountableConnection
}

"""
Represents user data.
"""
type User implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  lastLogin: DateTime

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  externalId: String
  externalSource: String
  externalPayoutAccountId: String
  externalPayoutSource: UserExternalPayoutSource
  externalPayoutOnboardingUrl: String
  companyName: String!
  email: String!
  firstName: String!
  lastName: String!
  isStaff: Boolean!
  isActive: Boolean!

  """
  A note about the customer.
  """
  note: String
  dateJoined: DateTime!
  lastStatusChangedAt: DateTime
  defaultShippingAddress: Address
  defaultBillingAddress: Address
  personalPhone: String
  taxExemptCode: String
  vatIdentificationNumber: String

  """
  List of all user's addresses.
  """
  addresses: [Address!]!

  """
  Returns the last open checkout of this user.
  """
  checkout: Checkout

  """
  List of user's orders.
  """
  orders(
    """
    Filtering options for orders.
    """
    filter: CustomerOrderFilterInput

    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderCountableConnection

  """
  List of user's quote seller orders.
  """
  quoteOrders(
    """
    Filtering options for orders.
    """
    filter: CustomerOrderFilterInput

    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): OrderCountableConnection
  numOrders: Int

  """
  List of user's nautical orders.
  """
  nauticalOrders(
    """
    Filtering options for orders.
    """
    filter: CustomerNauticalOrderFilterInput

    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderCountableConnection

  """
  List of user's nautical quote orders.
  """
  nauticalQuoteOrders(
    """
    Filtering options for orders.
    """
    filter: CustomerNauticalOrderFilterInput

    """
    Sort orders.
    """
    sortBy: OrderSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): NauticalOrderCountableConnection

  """
  List of user's permissions.
  """
  userPermissions: [UserPermission!]!

  """
  List of user's permission groups.
  """
  permissionGroups: [Group!]!

  """
  List of user's permission groups which user can manage.
  """
  editableGroups: [Group!]!
  avatar(
    """
    Size of the avatar.
    """
    size: Int
  ): Image

  """
  List of events associated with the user.
  """
  events: [CustomerEvent!]!

  """
  List of stored payment sources.
  """
  storedPaymentSources: [PaymentSource!]!

  """
  Wishlist items of the user default wishlist
  """
  wishlist(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WishlistItemCountableConnection

  """
  Wishlists of the user
  """
  wishlists(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): WishlistCountableConnection
  seller: Seller
  isAssignable: Boolean

  """
  List of documents associated with the user.
  """
  documents: [Document!]!

  """
  Returns values of price book the user is added to
  """
  priceBook: PriceBook

  """
  If null, then the environment isn't set and they don't have dashboard reporting enabled
  """
  dashboardEmbeddingToken: String

  """
  List of custom fields assigned to this product.
  """
  customFields: [SelectedAttribute!]!
}

interface ObjectWithMetadata {
  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

type MetadataItem {
  """
  Key of a metadata item.
  """
  key: String!

  """
  Value of a metadata item.
  """
  value: String!
}

"""
An enumeration.
"""
enum UserExternalPayoutSource {
  """
  nautical.payments.stripe
  """
  NAUTICAL_PAYMENTS_STRIPE

  """
  nautical.payments.paypal
  """
  NAUTICAL_PAYMENTS_PAYPAL

  """
  nautical.payments.trolley
  """
  NAUTICAL_PAYMENTS_TROLLEY
}

"""
Represents user address data.
"""
type Address implements Node {
  """
  The ID of the object
  """
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!

  """
  Shop's default country.
  """
  country: CountryDisplay!
  countryArea: String!
  phone: String

  """
  Address is user's default shipping address.
  """
  isDefaultShippingAddress: Boolean

  """
  Address is user's default billing address.
  """
  isDefaultBillingAddress: Boolean
}

type CountryDisplay {
  """
  Country code.
  """
  code: String!

  """
  Country name.
  """
  country: String!

  """
  List of required address fields for the country.
  """
  requiredFields: [String!]

  """
  List of allowed country area choices for this country.
  """
  allowedCountryAreas: [String!]
    @deprecated(
      reason: "Use detailedAllowedCountryAreas instead which returns the code for each area as well. This field will be removed after December 31, 2024."
    )

  """
  List of allowed country area choices including codes
  """
  detailedAllowedCountryAreas: [CountryArea!]!
}

type CountryArea {
  """
  Country area code
  """
  code: String!

  """
  Country area name
  """
  name: String!
}

"""
Checkout object.
"""
type Checkout implements Node & ObjectWithMetadata {
  created: DateTime!
  lastChange: DateTime!
  user: User
  quantity: Int!
  billingAddress: Address
  shippingAddress: Address
  note: String!

  """
  Transaction currency.
  """
  currency: String!
  discount: Money
  discountName: String
  translatedDiscountName: String
  voucherCode: String
  poNumbers: [String!]

  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Available shipping methods for marketplace-fulfilled items in this checkout.
  """
  availableMarketplaceShippingMethods: [ShippingMethod!]!

  """
  Available shipping methods for each seller in this checkout.
  """
  availableShippingMethodsBySeller: [MultiSellerShippingMethod!]!

  """
  Applicable volume discounts
  """
  applicableVolumeDiscounts: Money
  applicableVolumeDiscountsBySeller: [SellerVolumeDiscount!]!

  """
  List of available payment gateways.
  """
  availablePaymentGateways: [PaymentGateway!]!

  """
  Email of a customer.
  """
  email: String!

  """
  Returns True, if checkout requires shipping.
  """
  isShippingRequired: Boolean!

  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLine!]!

  """
  The price of the shipping, with all the taxes included.
  """
  shippingPrice: TaxedMoney!

  """
  The price of the checkout before shipping, with taxes included.
  """
  subtotalPrice: TaxedMoney!

  """
  The checkout's token.
  """
  token: NauticalUUID!

  """
  The sum of the the checkout line prices, with all the taxes,shipping costs, and discounts included.
  """
  totalPrice: TaxedMoney!

  """
  Discount Type if voucher is applied
  """
  discountType: VoucherTypeEnum

  """
  A list of structured checkout shipping methods.
  """
  shippingMethods: [CheckoutSellerShipping!]!

  """
  Shipping discount for this order
  """
  shippingSaleDiscount: Money!

  """
  Shipping method for this order.
  """
  marketplaceShippingMethod: ShippingMethod

  """
  The price of the marketplace shipping.
  """
  marketplaceShippingPrice: TaxedMoney!
}

"""
Represents amount of money in specific currency.
"""
type Money {
  """
  The 3-letter ISO currency code, such as USD or EUR.
  """
  currency: String!

  "\n        The monetary amount in the smallest denomination of the currency.\n\n        For currencies that support 2 decimal places, e.g. USD, $12.45 would\n        be returned in this field as 1245.\n\n        For currencies that support 3 decimal places, e.g. KWD, KD 5.124 would\n        be returned in this field as 5124.\n\n        For currencies that do not support decimal places, e.g. JPY, ¥500 would\n        be returned in this field as 500.\n\n        For a full list of 3 decimal and 0 decimal currencies, reference the\n        Nautical guide.\n        "
  baseAmount: BigInt!
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

"""
Shipping method are the methods you'll use to get customer's orders to them. They are directly exposed to the customers.
"""
type ShippingMethod implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  name: String!
  price: Money
  minimumOrderPrice: Money
  maximumOrderPrice: Money
  minimumOrderWeight: Weight
  maximumOrderWeight: Weight

  """
  Type of the shipping method.
  """
  type: ShippingMethodTypeEnum

  """
  Deprecated: This field will always return False and will be removed soon.
  """
  requiresSecondaryAddress: Boolean
}

"""
Represents weight value in a specific weight unit.
"""
type Weight {
  """
  Weight unit.
  """
  unit: WeightUnitsEnum!

  """
  Weight value.
  """
  value: Float!
}

"""
An enumeration.
"""
enum WeightUnitsEnum {
  KG
  LB
  OZ
  G
}

enum ShippingMethodTypeEnum {
  """
  Price based shipping
  """
  PRICE

  """
  Weight based shipping
  """
  WEIGHT
}

type MultiSellerShippingMethod {
  seller: Int
    @deprecated(
      reason: "Use sellerId instead. This will be removed on December 31, 2024."
    )
  sellerId: ID!
  sellerName: String!
  value: [ShippingMethod!]!
}

type SellerVolumeDiscount {
  seller: Int
  volumeDiscount: Money
}

"""
Available payment gateway backend with configuration necessary to setup client.
"""
type PaymentGateway {
  """
  Payment gateway name.
  """
  name: String!

  """
  Payment gateway ID.
  """
  id: ID!

  """
  Payment gateway client configuration.
  """
  config: [GatewayConfigLine!]!

  """
  Payment gateway supported currencies.
  """
  currencies: [String!]!
}

"""
Payment gateway client configuration key and value pair.
"""
type GatewayConfigLine {
  """
  Gateway config key.
  """
  field: String!

  """
  Gateway config value for key.
  """
  value: String
}

"""
Represents an item in the checkout.
"""
type CheckoutLine implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  isLinePriceOverridden: Boolean!
  unitPriceOverriddenNote: String
  note: String
  variant: ProductVariant!
  quantity: Int!
  sale: Sale

  """
  The sum of the checkout line price, taxes and discounts.
  """
  totalPrice: TaxedMoney!

  """
  Indicates whether the item need to be delivered.
  """
  requiresShipping: Boolean

  """
  User info on the seller's underlying owner.
  """
  seller: SellerType

  """
  The unit price of line which is the discounted price after pricebooks and sale application
  """
  discountedUnitPrice: TaxedMoney!

  """
  Price of the single item in the checkout line before sales.
  """
  originalUnitPrice: TaxedMoney!
}

"""
Represents a version of a product such as different size or color.
"""
type ProductVariant implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  descriptionHtml: String!
  externalId: String
  externalSource: String
  seoTitle: String
  seoDescription: String
  sku: String
  name: String!
  nauticalStockNumber: String!
  status: ProductVariantStatus!
  subStatus: ProductVariantSubStatus!
  currency: String
  product: Product!
  trackInventory: Boolean!
  weight: Weight
  seller: Seller

  """
  The datetime when this variant will become available. This field may contain a past, future date or can be empty (so it is always published if isPublished is true)
  """
  publishedAt: DateTime

  """
  Whether the product variant is published.
  """
  isPublished: Boolean!
  overrideCurrency: Boolean!
  requiresQuote: Boolean!
  allowBackorders: Boolean

  """
  indicates whether we allow overriding the unit_price of variants in checkout and draft, quote order lines
  """
  isPriceOverrideAllowed: Boolean!
  isShippingRequired: Boolean!
  isDigital: Boolean!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Base price of a product variant. This field is restricted for admins. Use the pricing field to get the public price for customers.
  """
  price: Money

  """
  Lists the storefront variant's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: VariantPricingInfo

  """
  Whether this variant is visible on the buyer side or not
  """
  isVisible: Boolean!

  """
  Product variant size info.
  """
  size: VariantSize

  """
  List of attributes assigned to this variant.
  """
  attributes: [SelectedAttribute!]!

  """
  List of custom fields assigned to this product.
  """
  customFields: [SelectedAttribute!]!

  """
  Cost price of the variant.
  """
  costPrice: Money

  """
  Gross margin percentage value.
  """
  margin: Int

  """
  Total quantity ordered.
  """
  quantityOrdered: Int
  features: [VariantFeature!]
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  List of product variant images. When 'strict_product_image_handling' is enabled:- Display only the images owned by the product variant owner.
  """
  images: [ProductImage!]

  """
  List the product images available for assignment to a variant.When the 'strict_product_image_handling' is enabled:- Only display images owned by the product variant owner.
  """
  availableImages: [ProductImage!]

  """
  Digital content for the product variant.
  """
  digitalContent: DigitalContent

  """
  Stocks for the product variant.
  """
  stocks(
    """
    Two-letter ISO 3166-1 country code.
    """
    countryCode: CountryCode
  ): [Stock!]

  """
  Quantity of a product available for sale in one checkout.
  """
  quantityAvailable(
    """
    Two-letter ISO 3166-1 country code. When provided, the exact quantity from a warehouse operating in shipping zones that contain this country will be returned. Otherwise, it will return the maximum quantity from all shipping zones.
    """
    countryCode: CountryCode
  ): Int!
  netRevenue: Float
  grossRevenue: Float

  """
  Variant sort order in the specific collection. Make sense only as a part of the parent 'collections' query.
  """
  sortOrderInCollection: Int

  """
  List of documents associated with the product variant.
  """
  documents: [Document!]

  """
  List of stock events associated with the variant.
  """
  stockEvents: [StockEvent!]

  """
  List of sales associated with the product.
  """
  sales: [Sale!]!

  """
  List of vouchers associated with the product.
  """
  vouchers: [Voucher!]!
}

"""
An enumeration.
"""
enum ProductVariantStatus {
  """
  Draft
  """
  DRAFT

  """
  Active
  """
  ACTIVE
}

"""
An enumeration.
"""
enum ProductVariantSubStatus {
  """
  In review
  """
  IN_REVIEW

  """
  Declined
  """
  DECLINED

  """
  Approved
  """
  APPROVED
}

"""
Represents an individual item for sale in the storefront.
"""
type Product implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  publicationDate: Date
  description: String!
  descriptionHtml: String!
  externalId: String
  externalSource: String
  seller: Seller

  """
  Manufacturer Product Number
  """
  mpn: String

  """
  Brand of the product
  """
  brand: String

  """
  Manufacturer of the product
  """
  manufacturer: String

  """
  Product model code
  """
  model: String
  seoTitle: String
  seoDescription: String
  productType: ProductType
  name: String!
  slug: String!
  category: Category
  currency: String!
  updatedAt: DateTime
  createdAt: DateTime!
  chargeTaxes: Boolean!
  weight: Weight
  availableForPurchase: Date
  visibleInListings: Boolean!
  defaultVariant: ProductVariant
  overridePrice: Boolean!
  overrideCurrency: Boolean!
  status: ProductStatus!
  subStatus: ProductSubStatus!

  """
  indicates whether we allow overriding the unit_price of variants in checkout and draft, quote order lines
  """
  isPriceOverrideAllowed: Boolean!
  isShippingRequired: Boolean!
  isDigital: Boolean!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  The main thumbnail for a product.
  """
  thumbnail(
    """
    Size of thumbnail.
    """
    size: Int
  ): Image

  """
  Lists the storefront product's pricing, the current price and discounts, only meant for displaying.
  """
  pricing: ProductPricingInfo

  """
  Whether the product is in stock and visible or not.
  """
  isAvailable: Boolean

  """
  The price of the cheapest variant (including discounts).
  """
  minimalVariantPrice: Money

  """
  A type of tax. Assigned by enabled tax gateway
  """
  taxType: TaxType

  """
  List of attributes assigned to this product.
  """
  attributes: [SelectedAttribute!]!

  """
  List of custom fields assigned to this product.
  """
  customFields: [SelectedAttribute!]!
  purchaseCost: MoneyRange
  margin: Margin

  """
  Get a single product image by ID.
  """
  imageById(
    """
    ID of a product image.
    """
    id: ID
  ): ProductImage

  """
  List of variants for the product.
  """
  variants: [ProductVariant!]

  """
  List of images for the product. With enabled ``strict_product_image_handling``- shows only images that are owned by product owner
  """
  images: [ProductImage!]

  """
  Countable edges of images for the product
  """
  countableImages(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductImageCountableConnection

  """
  List of collections for the product.
  """
  collections: [Collection!]

  """
  Whether the product is available for purchase.
  """
  isAvailableForPurchase: Boolean

  """
  Product sort order in the specific collection or in microsite. Make sense only as a part of the parent 'collection(s)' or 'microsite(s)' queries.
  """
  sortOrder: Int

  """
  Whether the product is published.
  """
  isPublished: Boolean!
  features: [ProductFeature!]
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  List of all product's locations.
  """
  locations: [Location!]
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Products origin location.
  """
  originLocation: Location
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Products destination location.
  """
  destinationLocation: Location
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Products primary location.
  """
  primaryLocation: Location
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Product stock stats combining all variants in all warehouses. Requires MANAGE_PRODUCTS permission.
  """
  warehousesStats: [WarehouseStats!]

  """
  List of actions that can be performed based on the current state of the product.
  """
  actions: [ProductAction!]

  """
  List of documents associated with the product.
  """
  documents: [Document!]!

  """
  List of sales associated with the product.
  """
  sales: [Sale!]!

  """
  List of vouchers associated with the product.
  """
  vouchers: [Voucher!]!

  """
  The product's sorting priority weight in query results. A larger value indicates a higher priority. This field can be used in both ascending and descending sorting methods.
  """
  sortPriorityWeight: Decimal

  """
  List of logs for product status changes.
  """
  productStatusLogs: [ProductStatusLog!]
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

type Seller implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  companyName: String!
  slug: String!
  logo(
    """
    Size of the avatar.
    """
    size: Int
  ): Image
  status: SellerStatus!
  banner(
    """
    Size of the banner.
    """
    size: Int
  ): Image
  products(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection!
  variants(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductVariantCountableConnection!
  externalPayoutAccountId: String
  externalPayoutSource: SellerExternalPayoutSource
  externalPayoutOnboardingUrl: String
  isMarketplaceSeller: Boolean!
  identification: [String!]

  """
  List of all addresses for this seller.
  """
  addresses: [Address!]
  defaultShippingAddress: Address
  defaultBillingAddress: Address

  """
  Owner (user) of the seller.
  """
  owner: User
  defaultCurrency: String!
  fulfilledByMarketplace: Boolean!
  sellerusers(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): SellerUserTypeCountableConnection!
  events(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): SellerEventTypeCountableConnection!

  """
  Seller checklist to complete.
          Can be empty in case when this user do not have access to see checklist
  """
  checklists: [SellerOnboardingChecklist!]

  """
  Application for the seller.
  """
  application: SellerApplication
  payouts(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): VendorPayoutCountableConnection!
  shippingZones(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ShippingZoneCountableConnection!
  orders(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection!
  sellerAgreements(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): AgreementSellersCountableConnection!
  warehouses(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): WarehouseCountableConnection!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Agreement for the seller.
  """
  agreement: Agreement

  """
  Date seller acknowledged their existing agreement.
  """
  agreementAcknowledged: DateTime
  canUseInStorefront: Boolean

  """
  Microsite of the seller.
  """
  microsite: Microsite
  pk: Int
  externalPayoutStatus: Boolean
  externalPayoutSchedule: String
  agreementDecisionReason: String
  storeDescription: String

  """
  List of documents associated with the seller.
  """
  documents: [Document!]

  """
  Date on which this seller was most recently approved if they
          have been at all, null if their status is anything else
  """
  approvedDate: DateTime

  """
  Date on which the first product of this seller was created, null
          if no product has been created
  """
  firstProductCreatedDate: DateTime

  """
  Date on which the first order for this seller was made, null
          if no order has been created
  """
  firstOrderPlacedDate: DateTime
  created: DateTime!
  updated: DateTime!
  accountSetupTasksAreDone: Boolean
}

"""
Represents an image.
"""
type Image {
  """
  The URL of the image.
  """
  url: String!

  """
  Alt text for an image.
  """
  alt: String
}

"""
An enumeration.
"""
enum SellerStatus {
  """
  Applying
  """
  APPLYING

  """
  Pending
  """
  PENDING

  """
  Approved
  """
  APPROVED

  """
  Declined
  """
  DECLINED

  """
  Paused
  """
  PAUSED

  """
  Suspended
  """
  SUSPENDED

  """
  Banned
  """
  BANNED

  """
  Deactivated
  """
  DEACTIVATED
}

type ProductCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ProductCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProductCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Product!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type ProductVariantCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ProductVariantCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProductVariantCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ProductVariant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
An enumeration.
"""
enum SellerExternalPayoutSource {
  """
  nautical.payments.stripe
  """
  NAUTICAL_PAYMENTS_STRIPE

  """
  nautical.payments.paypal
  """
  NAUTICAL_PAYMENTS_PAYPAL

  """
  nautical.payments.trolley
  """
  NAUTICAL_PAYMENTS_TROLLEY
}

type SellerUserTypeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [SellerUserTypeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type SellerUserTypeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: SellerUserType!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type SellerUserType implements Node {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!
  seller: Seller!
  user: User!
  isDefault: Boolean!
}

"""
Represents a Tenant in a multi-tenant deployment
"""
type Tenant implements Node {
  """
  The ID of the object
  """
  id: ID!
  name: String!
  isActive: Boolean!
}

type SellerEventTypeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [SellerEventTypeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type SellerEventTypeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: SellerEventType!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
History log of the seller.
"""
type SellerEventType implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime

  """
  Seller event type.
  """
  type: SellerEventsEnum

  """
  User who performed the action.
  """
  user: User
  parameters: JSONString
  status: String
  message: String

  """
  Seller who events relate to.
  """
  seller: Seller
}

enum SellerEventsEnum {
  """
  The seller was created
  """
  SELLER_CREATED

  """
  Seller status was updated
  """
  SELLER_STATUS_CHANGED

  """
  The seller was deleted
  """
  SELLER_DELETED

  """
  A note was added to the seller
  """
  SELLER_NOTE_ADDED
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type SellerOnboardingChecklist implements Node {
  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: Tenant!
  seller: Seller!
  position: Int!
  title: String!
  description: String!

  """
  Trigger, when this checklist will be marked as done. Can be None in case when user should manually mark this checklist as completed.
  """
  completeOn: SellerChecklistCompletionTriggersEnum
  completedAt: DateTime
}

enum SellerChecklistCompletionTriggersEnum {
  """
  Payout Account Created
  """
  PAYOUT_ACCOUNT_CREATED

  """
  First Warehouse Created
  """
  FIRST_WAREHOUSE_CREATED

  """
  First Product Created
  """
  FIRST_PRODUCT_CREATED

  """
  First Shipping Zone Created
  """
  FIRST_SHIPPING_ZONE_CREATED

  """
  Page Setup in Store
  """
  PAGE_SETUP_IN_STORE

  """
  Invite Staff
  """
  INVITE_STAFF
}

type SellerApplication implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!
  checkpoint: SellerApplicationCheckpoint!

  """
  Misc. data submitted by the seller.
  """
  formData: JSONString!

  """
  Seller associated with the application.
  """
  seller: Seller!
  submittedAt: DateTime

  """
  The ID of the object
  """
  id: ID!
}

"""
An enumeration.
"""
enum SellerApplicationCheckpoint {
  """
  Welcome
  """
  WELCOME

  """
  User Info
  """
  USER_INFO

  """
  Business Info
  """
  BUSINESS_INFO

  """
  Business Statements
  """
  BUSINESS_STATEMENTS

  """
  Business Structure
  """
  BUSINESS_STRUCTURE

  """
  Tin
  """
  TIN

  """
  Address
  """
  ADDRESS

  """
  Business Sell
  """
  BUSINESS_SELL

  """
  Complete
  """
  COMPLETE
}

type VendorPayoutCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [VendorPayoutCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VendorPayoutCountableEdge {
  """
  The item at the end of the edge.
  """
  node: VendorPayout!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type VendorPayout implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  tenant: Tenant!
  created: DateTime!
  updated: DateTime!
  gateway: String!
  payout: Payout!
  seller: Seller
  currency: String!
  average: Decimal!
  discounts: Decimal!
  net: Decimal!
  shipping: Decimal!
  volumeDiscounts: Decimal!
  commission: Decimal!
  feeAmount: Decimal!
  fees: Money!
  payoutAmount: Decimal!
  payable: Money!
  included: Boolean!
  status: VendorPayoutStatus!
  statusMessage: String
  adjustmentAmount: Decimal!
  adjustment: Money!
  refundAmount: Decimal!
  refund: Money!

  """
  """
  ledgerVersion: BigInt!

  """
  List of events associated with the vendor payout (sorted from newest to latest)
  """
  events(
    """
    Optional filter by event types
    """
    eventTypes: [VendorPayoutEventsEnum!]
  ): [VendorPayoutEvent!]!
  orders(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): OrderCountableConnection!
  refundLines(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): RefundLineCountableConnection!
  commissionMoney: Money!
  discountsMoney: Money!
  netSales: Money!
  shippingMoney: Money!
  subtotal: Money!
  total: Money!
}

type Payout implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  tenant: Tenant!
  created: String!
  updated: DateTime!
  startDate: Date
  endDate: String!
  status: PayoutStatus!
  name: String
  currency: String!
  vendorPayouts(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): VendorPayoutCountableConnection!
  vendors: Int!
  netSales: Money!
  discounts: Money!
  shipping: Money!
  commission: Money!
  fees: Money!
  refunds: Money!
  adjustments: Money!
  payout: Money!
}

"""
An enumeration.
"""
enum PayoutStatus {
  """
  Draft
  """
  DRAFT

  """
  Paid
  """
  PAID

  """
  Archived
  """
  ARCHIVED

  """
  Locked
  """
  LOCKED

  """
  Error
  """
  ERROR
}

"""
An enumeration.
"""
enum VendorPayoutStatus {
  """
  Paid
  """
  PAID

  """
  Unpaid
  """
  UNPAID

  """
  Error
  """
  ERROR
}

"""
History log of the vendor payout.
"""
type VendorPayoutEvent implements Node {
  """
  The ID of the object
  """
  id: ID!
  parameters: JSONString!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime!

  """
  Date when event happened at in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date when event was update at in ISO 8601 format(in case, if event supports updates, for example, NOTE_ADDED).
  """
  updatedAt: DateTime!

  """
  Vendor payout event type.
  """
  type: VendorPayoutEventsEnum!

  """
  User who performed the action.
  """
  user: User

  """
  Content of the event.
  """
  message: String
}

enum VendorPayoutEventsEnum {
  """
  The vendor payout was created.
  """
  VENDOR_PAYOUT_CREATED

  """
  The vendor payout was updated.
  """
  VENDOR_PAYOUT_UPDATED

  """
  Vendor payout status was updated.
  """
  VENDOR_PAYOUT_STATUS_UPDATED

  """
  A note was added to the vendor payout
  """
  NOTE_ADDED

  """
  The vendor payout email was sent.
  """
  VENDOR_PAYOUT_EMAIL_SENT
}

type OrderCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [OrderCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type OrderCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Order!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents an order in the shop.
"""
type Order implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  externalId: String
  externalSource: String
  orderSource: OrderOrderSource!

  """
  Seller this order belongs to
  """
  seller: Seller
  created: DateTime!
  updated: DateTime

  """
  Order status
  """
  status: OrderStatus!
  subStatus: OrderSubStatus
  user: User
  languageCode: String!
  trackingClientId: String!
  billingAddress: Address
  shippingAddress: Address
  vatCode: String!
  euInvoiceMessaging: String
  vatIdentificationNumber: String
  mpVatIdentificationNumber: String
  currency: String!
  shippingMethod: ShippingMethod
  shippingMethodName: String

  """
  Total price of shipping.
  """
  shippingPrice: TaxedMoney

  """
  Indicates that the shipping price is set manually by user rather than taken from a related shipping method.
  """
  isShippingPriceOverridden: Boolean!
  token: String!
  voucher: Voucher
  discount: Money
  discountName: String
  translatedDiscountName: String
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight

  """
  Data time when the order was imported from another platform.
  """
  importedAt: DateTime

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  List of shipments for the order.
  """
  fulfillments: [Fulfillment!]!
  fees: [OrderFee!]

  """
  List of order lines.
  """
  lines: [OrderLine!]!

  """
  List of sub-statuses that can be changed to based on current state of the order
  """
  allowedSubStatuses: [OrderSubStatusEnum!]

  """
  Shipping methods that can be used with this order.
  """
  availableShippingMethods: [ShippingMethod!]

  """
  List of order invoices.
  """
  invoices: [Invoice!]

  """
  User-friendly number of an order.
  """
  number: String

  """
  User-friendly number of the marketplace order this order belongs to.
  """
  marketplaceOrderNumber: String

  """
  Informs if an order is fully paid.
  """
  isPaid: Boolean

  """
  Internal payment status.
  """
  paymentStatus: PaymentChargeStatusEnum!

  """
  User-friendly payment status.
  """
  paymentStatusDisplay: String!

  """
  Total amount of the order.
  """
  total: TaxedMoney

  """
  Original total amount of the order.
  """
  originalTotal: TaxedMoney

  """
  The sum of line prices not including shipping.
  """
  subtotal: TaxedMoney

  """
  User-friendly order status.
  """
  statusDisplay: String

  """
  Informs whether a draft order can be finalized (turned into a regular order).
  """
  canFinalize: Boolean!

  """
  List of events associated with the order.
  """
  events: [OrderEvent!]

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Returns True, if order requires shipping.
  """
  isShippingRequired: Boolean!

  """
  Order payout status.
  """
  payoutStatus: OrderPayoutStatusEnum

  """
  Summary of all payouts of this order
  """
  payoutsSummary(
    """
    Order payout status.
    """
    payoutStatus: PayoutStatusEnum
  ): [OrderPayoutSummary!]!

  """
  Remaining available balance to be paid out.
  """
  availablePayoutBalance: Money

  """
  Seller commission for the order
  """
  sellerCommission: Money

  """
  Volume discount for the order
  """
  volumeDiscount: TaxedMoney
    @deprecated(reason: "This will be removed on February 1, 2025.")

  """
  Validation status for the order
  """
  validationStatus: [ValidationStatus!]

  """
  Determines if seller is the only seller on the related nautical order. Note: if nautical order doesn't exist - will return None.
  """
  isOnlySellerOnNauticalOrder: Boolean

  """
  Marketplace order that this seller order belongs to.
  """
  marketplaceOrder: NauticalOrder

  """
  Latest vendor payout this order is in
  """
  vendorPayout: VendorPayout
    @deprecated(
      reason: "This will be removed on January 15, 2025. Use the more accurate vendorPayouts field instead."
    )

  """
  All vendor payouts that contain this order
  """
  vendorPayouts: [VendorPayout!]
}

"""
An enumeration.
"""
enum OrderOrderSource {
  """
  checkout
  """
  CHECKOUT

  """
  draft
  """
  DRAFT

  """
  quote
  """
  QUOTE

  """
  manual
  """
  MANUAL

  """
  external
  """
  EXTERNAL
}

"""
An enumeration.
"""
enum OrderStatus {
  DRAFT
  QUOTE
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  DELIVERED
  CANCELED
  RETURN_REQUESTED
  RETURN_AUTHORIZED
  RETURN_DECLINED
  RETURN_CANCELLED
  RETURN_COMPLETE
}

"""
An enumeration.
"""
enum OrderSubStatus {
  """
  In Review
  """
  IN_REVIEW

  """
  Quote Requested
  """
  QUOTE_REQUESTED

  """
  Awaiting Payment
  """
  AWAITING_PAYMENT

  """
  Complete
  """
  COMPLETE
}

"""
Represents a monetary value with taxes. In cases where taxes were not applied, net and gross values will be equal.
"""
type TaxedMoney {
  """
  Currency code.
  """
  currency: String!

  """
  Amount of money including taxes.
  """
  gross: Money!

  """
  Amount of money without taxes.
  """
  net: Money!

  """
  Amount of taxes.
  """
  tax: Money!
}

"""
Vouchers allow giving discounts to particular customers on categories, collections, or specific products or variants. They can be used during checkout by providing valid voucher codes.
"""
type Voucher implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Determines a type of voucher.
  """
  type: VoucherTypeEnum!
  name: String
  code: String!
  usageLimit: Int
  used: Int!
  startDate: DateTime!
  endDate: DateTime
  applyOncePerOrder: Boolean!
  applyOncePerCustomer: Boolean!

  """
  Determines a type of discount for voucher - value or percentage
  """
  discountValueType: DiscountValueTypeEnum!
  discountValue: Decimal!
  currency: String!
  minSpent: Money
  minCheckoutItemsQuantity: Int

  """
  List of categories this voucher applies to.
  """
  categories(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CategoryCountableConnection

  """
  List of collections this voucher applies to.
  """
  collections(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CollectionCountableConnection

  """
  List of products this voucher applies to.
  """
  products(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  List of variants this voucher applies to.
  """
  variants(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductVariantCountableConnection

  """
  List of countries available for the shipping voucher.
  """
  countries: [CountryDisplay!]!
}

"""
An enumeration.
"""
enum VoucherTypeEnum {
  SHIPPING
  ENTIRE_ORDER
  SPECIFIC_PRODUCT
}

"""
An enumeration.
"""
enum DiscountValueTypeEnum {
  FIXED
  PERCENTAGE
}

type CategoryCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CategoryCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CategoryCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Category!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a single category of products. Categories allow to organize products in a tree-hierarchies which can be used for navigation in the storefront.
"""
type Category implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  description: String!
  descriptionHtml: String!
  externalId: String
  externalSource: String
  seoTitle: String
  seoDescription: String
  name: String!
  slug: String!
  parent: Category
  allowProductAssignment: Boolean!
  level: Int!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  List of ancestors of the category.
  """
  ancestors(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CategoryCountableConnection

  """
  List of products in the category and ancestor categories. This information preferable to request only for a single category details query.
  """
  products(
    """
    Filtering options for products.
    """
    filter: ProductFilterInput

    """
    Sort products.
    """
    sortBy: ProductOrder

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  List of children of the category.
  """
  children(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CategoryCountableConnection
  backgroundImage(
    """
    Size of the image.
    """
    size: Int
  ): Image

  """
  List providing entire parent-to-child lineage of categories leading to current category
  """
  trailingBreadcrumbs: [Category!]

  """
  List of custom fields assigned to this category.
  """
  customFields: [SelectedAttribute!]!
}

input ProductFilterInput {
  isPublished: Boolean
  collections: [ID]
  categories: [ID]
  hasCategory: Boolean
  isSimple: Boolean
  attributes: [AttributeInput!]
  customFields: [AttributeInput!]
  dates: CustomDateRangeInput
  stockAvailability: StockAvailability
  productType: ID
  stocks: ProductStockFilterInput
  search: String
  sellers: [ID]
  subStatus: ProductSubStatusEnum
  slug: [String!]
  brand: [String!]
  features: FeatureFilterInput
  price: PriceRangeInput
  minimalPrice: PriceRangeInput
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  publicationDate: DateRangeInput
  inCircle: [RadiusSearchInput!]
  productTypes: [ID]
  advancedSearch: ProductSearchInput
  ids: [ID]
  isStaff: Boolean
  mpn: String
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

input AttributeInput {
  """
  Internal representation of an attribute name.
  """
  slug: String!

  """
  Internal representation of a value (unique per attribute).
  """
  values: [String!]

  """
  How the "values" are interpreted
  """
  condition: AttributeFilterConnector = OR

  """
  How this filter clause interacts with previous attribute filter clauses. The value for the first element in the list of attribute filters is ignored and has no practical value.
  """
  connector: AttributeFilterConnector = OR
}

enum AttributeFilterConnector {
  AND
  OR
}

input CustomDateRangeInput {
  Pickup: DateRangeInput
  Dropoff: DateRangeInput
}

input DateRangeInput {
  """
  Start date.
  """
  gte: Date

  """
  End date.
  """
  lte: Date
}

enum StockAvailability {
  IN_STOCK
  OUT_OF_STOCK
}

input ProductStockFilterInput {
  warehouseIds: [ID!]
  quantity: IntRangeInput = null
}

input IntRangeInput {
  """
  Value greater than or equal to.
  """
  gte: Int

  """
  Value less than or equal to.
  """
  lte: Int
}

enum ProductSubStatusEnum {
  """
  In review
  """
  IN_REVIEW

  """
  Declined
  """
  DECLINED

  """
  Approved
  """
  APPROVED
}

"""
When changed, please update related typing (search by FeatureFilterTypedDict)
"""
input FeatureFilterInput {
  connector: FeatureFilterConnector!
  operations: [FeatureFilterOperation!]
}

enum FeatureFilterConnector {
  AND
  OR
}

"""
When changed, please update related typing (search by FeatureFilterOperationTypingDict)
"""
input FeatureFilterOperation {
  """
  Key for which to search values for in features.
  """
  name: String!

  """
  String to search by any value for in metadata. Use null or empty list to return all results where features with `name` key exists
  """
  values: [String!]
  condition: FeatureFilterOperationCondition!
}

enum FeatureFilterOperationCondition {
  AND
  OR
}

input PriceRangeInput {
  """
  Price greater than or equal to.
  """
  gte: Float

  """
  Price less than or equal to.
  """
  lte: Float
}

input DateTimeRangeInput {
  """
  Start date.
  """
  gte: DateTime

  """
  End date.
  """
  lte: DateTime
}

input RadiusSearchInput {
  """
  Location type to filter by
  """
  locationType: LocationTypeEnum!

  """
  Longitude of the center point
  """
  lon: Float

  """
  Latitude of the center point
  """
  lat: Float

  """
  Radius to search within
  """
  radius: Int!

  """
  Distance unit for radius (KM or MI)
  """
  unit: DistanceUnit!
}

enum LocationTypeEnum {
  """
  Primary
  """
  PRIMARY

  """
  Origin
  """
  ORIGIN

  """
  Destination
  """
  DESTINATION
}

enum DistanceUnit {
  KM
  MI
}

input ProductSearchInput {
  """
  Search term.
  """
  searchTerm: String!

  """
  List of fields to search on
          (if not provided, only searches name by default).
  """
  searchFields: [ProductSearchFieldEnum!]
}

enum ProductSearchFieldEnum {
  NAME
  BRAND
  MANUFACTURER
  MPN
  MODEL
  SELLER_NAME
  CATEGORY_NAME
  NSN
  SKU
  VARIANT_NAME
  PRODUCT_ATTRIBUTE_NAME
  PRODUCT_ATTRIBUTE_VALUE_NAME
  PRODUCT_ATTRIBUTE_VALUE_VALUE
  VARIANT_ATTRIBUTE_NAME
  VARIANT_ATTRIBUTE_VALUE_NAME
  VARIANT_ATTRIBUTE_VALUE_VALUE
  DESCRIPTION
}

input MetadataFilterInput {
  """
  Key for which to search values for in metadata.
  """
  key: String!

  """
  String to search Values for in metadata.
  """
  valueSearchTerm: String!
}

input ProductOrder {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort product by the selected attribute's values.
  Note: this doesn't take translations into account yet.
  """
  attributeId: ID

  """
  Sort products by the selected field.
  """
  field: ProductOrderField
}

enum ProductOrderField {
  """
  Sort products by name.
  """
  NAME

  """
  Sort products by sku.
  """
  SKU

  """
  Sort products by price.
  """
  PRICE

  """
  Sort products by a minimal price of a product's variant.
  """
  MINIMAL_PRICE

  """
  Sort products by update date.
  """
  DATE

  """
  Sort products by create date.
  """
  CREATED

  """
  Sort products by type.
  """
  TYPE

  """
  Sort products by publication status.
  """
  PUBLISHED

  """
  Sort products by publication date.
  """
  PUBLICATION_DATE

  """
  Sort products by seller.
  """
  SELLER

  """
  Sort products by category.
  """
  CATEGORY

  """
  Sort products by sub status.
  """
  SUB_STATUS

  """
  Sort products by sort priority weight.
  """
  SORT_PRIORITY_WEIGHT

  """
  Sort products by brand.
  """
  BRAND

  """
  Sort products by manufacturer.
  """
  MANUFACTURER

  """
  Sort products by external id.
  """
  EXTERNAL_ID

  """
  Sort products by external source.
  """
  EXTERNAL_SOURCE
}

"""
Represents a selected attribute and values.
"""
type SelectedAttribute {
  """
  Name of an attribute displayed in the interface.
  """
  attribute: Attribute!

  """
  Values of an attribute.
  """
  values: [AttributeValue!]!

  """
  True if the selected attribute is provided by a product type or custom field template, false if the selection comes from a manual assignment instead of a template.
  """
  templated: Boolean
}

"""
Custom attribute of a product. Attributes can be assigned to products and variants at the product type level.
"""
type Attribute implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  externalId: String
  externalSource: String
  productTypes(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductTypeCountableConnection!
  productVariantTypes(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductTypeCountableConnection!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  The input type to use for entering attribute values in the dashboard.
  """
  inputType: AttributeInputTypeEnum!

  """
  Name of an attribute displayed in the interface.
  """
  name: String!

  """
  Internal representation of an attribute name.
  """
  slug: String!

  """
  List of all product types that are using this attribute
  """
  allProductTypes: [ProductType!]!

  """
  List of attribute's values.
  """
  values: [AttributeValue!]!

  """
  Whether the attribute requires values to be passed or not.
  """
  valueRequired: Boolean!

  """
  Whether the attribute should be visible or not in storefront.
  """
  visibleInStorefront: Boolean!

  """
  Whether the attribute can be filtered in storefront.
  """
  filterableInStorefront: Boolean!

  """
  Whether the attribute can be filtered in dashboard.
  """
  filterableInDashboard: Boolean!

  """
  Whether the attribute can be displayed in the admin product list.
  """
  availableInGrid: Boolean!

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int!

  """
  ID of the Seller that created the Product Type, or null if Marketplace Operator
  """
  createdBy: Seller
}

type ProductTypeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ProductTypeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProductTypeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ProductType!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a type of product. It defines what attributes are available to products of this type.
"""
type ProductType implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  externalId: String

  """
  External source from which the product type is imported.
  """
  externalSource: String
  name: String!
  slug: String!
  isShippingRequired: Boolean!
  isDigital: Boolean!
  weight: Weight

  """
  indicates whether we allow overriding the unit_price of variants in checkout and draft, quote order lines
  """
  isPriceOverrideAllowed: Boolean!
  createdBy: Seller

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  List of products of this type.
  """
  products(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  A type of tax. Assigned by enabled tax gateway
  """
  taxType: TaxType

  """
  Variant attributes of that product type.
  """
  variantAttributes: [Attribute!]!

  """
  Legacy indicator, always true.
  """
  hasVariants: Boolean

  """
  Product attributes of that product type.
  """
  productAttributes: [Attribute!]!
  availableAttributes(
    filter: AttributeFilterInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): AttributeCountableConnection

  """
  Product features of this product type.
  """
  productFeatures: [ProductTypeProductFeature!]!
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Variant features of this product type.
  """
  variantFeatures: [ProductTypeVariantFeature!]!
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Brand of the product
  """
  model: String
}

"""
Representation of tax types fetched from tax gateway.
"""
type TaxType {
  """
  Description of the tax type.
  """
  description: String

  """
  External tax code used to identify given tax group.
  """
  taxCode: String
}

type AttributeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [AttributeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AttributeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Attribute!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input AttributeFilterInput {
  valueRequired: Boolean
  isVariantOnly: Boolean
  visibleInStorefront: Boolean
  filterableInStorefront: Boolean
  filterableInDashboard: Boolean
  availableInGrid: Boolean
  search: String
  ids: [ID]
  inCollection: ID
  inProductSearch: String
  inVariantSearch: String
  inMicrosite: ID
  inCategory: ID

  """
  if True: returns attributes that have a product
          or variant associated with it, False: returns attributes that
          have NO variant or product associated to it
  """
  hasAssignedProductOrVariant: Boolean
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  showExternal: Boolean
}

"""
Represents a single product feature as part of a product type feature template.
"""
type ProductTypeProductFeature implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  tenant: Tenant!

  """
  The type that we expect to render the feature's values as.
  """
  featureType: FeatureTypeEnum!
  name: String!
  description: String!

  """
  Available options for this product feature
  """
  options: [String!]
  productType: ProductType!
  productFeatures(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductFeatureCountableConnection!
}

enum FeatureTypeEnum {
  """
  Dropdown
  """
  DROPDOWN

  """
  Multi Select
  """
  MULTISELECT

  """
  Text
  """
  TEXT
}

type ProductFeatureCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ProductFeatureCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProductFeatureCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ProductFeature!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a single product feature.
"""
type ProductFeature implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  deletedAt: DateTime
  deletedByUser: User
  deletedByApp: App
  deletionBatchUuid: UUID
  tenant: Tenant!

  """
  The type that we expect to render the feature's values as.
  """
  featureType: FeatureTypeEnum!
  name: String!
  description: String!

  """
  Available options for this product feature
  """
  options: [String!]
  product: Product!
  productTypeFeature: ProductTypeProductFeature
}

"""
Represents app data.
"""
type App implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  Name of the app.
  """
  name: String

  """
  The date and time when the app was created.
  """
  created: DateTime

  """
  Determine if app will be set active or not.
  """
  isActive: Boolean

  """
  List of the app's permissions.
  """
  permissions: [Permission!]

  """
  User associated with this app.
  """
  user: User

  """
  Last 4 characters of the tokens.
  """
  tokens: [AppToken!]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Type of the app.
  """
  type: AppTypeEnum

  """
  List of webhooks assigned to this app.
  """
  webhooks: [Webhook!]

  """
  Description of this app.
  """
  aboutApp: String

  """
  Description of the data privacy defined for this app.
  """
  dataPrivacy: String

  """
  Url to details about the privacy policy on the app owner page.
  """
  dataPrivacyUrl: String

  """
  Homepage of the app.
  """
  homepageUrl: String

  """
  Support page for the app.
  """
  supportUrl: String

  """
  Url to iframe with the configuration for the app.
  """
  configurationUrl: String

  """
  Url to iframe with the app.
  """
  appUrl: String

  """
  Version number of the app.
  """
  version: String

  """
  Bearer token used to authenticate by thirdparty app.
  """
  accessToken: String
}

"""
Represents a permission object in a friendly form.
"""
type Permission {
  """
  Internal code for permission.
  """
  code: PermissionEnum!

  """
  Describe action(s) allowed to do by permission.
  """
  name: String!
}

"""
An enumeration.
"""
enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_PERMISSIONS
  MANAGE_APPS
  MANAGE_DISCOUNTS
  MANAGE_DOCUMENTS
  MANAGE_EMAILS
  MANAGE_PLUGINS
  MANAGE_PRICEBOOKS
  MANAGE_STOREFRONTS
  MANAGE_MENUS
  MANAGE_ORDERS
  MANAGE_DRAFT_AND_QUOTE_ORDERS
  MANAGE_FULFILLMENTS
  MANAGE_PAGES
  MANAGE_PRODUCTS
  MANAGE_INVENTORY
  MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES
  MANAGE_SHIPPING
  MANAGE_SETTINGS
  MANAGE_TRANSLATIONS
  MANAGE_CHECKOUTS
  MANAGE_AGREEMENTS
  MANAGE_MARKETPLACE
  MANAGE_MARKETPLACE_CONFIGURATION
  MANAGE_MICROSITES
  MANAGE_PAYOUTS
  MANAGE_PAYMENTS
  MANAGE_REFUNDS
  MANAGE_COLLECTIONS
}

"""
Represents token data.
"""
type AppToken implements Node {
  """
  Name of the authenticated token.
  """
  name: String!

  """
  Last 4 characters of the token.
  """
  authToken: String!

  """
  The ID of the object
  """
  id: ID!
}

enum AppTypeEnum {
  """
  local
  """
  LOCAL

  """
  thirdparty
  """
  THIRDPARTY
}

"""
Webhook.
"""
type Webhook implements Node {
  name: String!
  targetUrl: String!
  isActive: Boolean!
  secretKey: String
  connectionString: String
  queueName: String

  """
  The ID of the object
  """
  id: ID!

  """
  List of webhook events.
  """
  events: [WebhookEvent!]!
  app: App!
}

"""
Webhook event.
"""
type WebhookEvent {
  """
  Internal name of the event type.
  """
  eventType: WebhookEventTypeEnum!

  """
  Display name of the event.
  """
  name: String!
}

"""
An enumeration.
"""
enum WebhookEventTypeEnum {
  ANY_EVENTS
  AGREEMENT_CREATED
  AGREEMENT_DELETED
  AGREEMENT_UPDATED
  CATEGORY_CREATED
  CATEGORY_DELETED
  CATEGORY_UPDATED
  CHECKOUT_CREATED
  CHECKOUT_UPDATED
  COLLECTION_CREATED
  COLLECTION_DELETED
  COLLECTION_UPDATED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  CUSTOMER_DELETED
  FULFILLMENT_CREATED
  INVOICE_DELETED
  INVOICE_REQUESTED
  INVOICE_SENT
  MICROSITE_CREATED
  MICROSITE_UPDATED
  NAUTICAL_ORDER_CANCELLED
  NAUTICAL_ORDER_CREATED
  NAUTICAL_ORDER_FULFILLED
  NAUTICAL_ORDER_FULLY_PAID
  NAUTICAL_ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_CREATED
  ORDER_FULFILLED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  PAYMENT_CREATED
  PAYMENT_UPDATED
  PAYOUT_CREATED
  PAYOUT_UPDATED
  PAYOUT_DELETED
  PRICE_BOOK_CREATED
  PRICE_BOOK_UPDATED
  PRODUCT_CREATED
  PRODUCT_DELETED
  PRODUCT_UPDATED
  REFUND_CREATED
  REFUND_DELETED
  REFUND_UPDATED
  SELLER_CREATED
  SELLER_UPDATED
  SELLER_AGREEMENT_ACKNOWLEDGED
  SELLER_AGREEMENT_DECLINED
  VARIANT_CREATED
  VARIANT_DELETED
  VARIANT_UPDATED
  STOCK_CREATED
  STOCK_DELETED
  STOCK_UPDATED
  STOCK_ALLOCATED
  STOCK_DEALLOCATED
  VENDOR_PAYOUT_CREATED
  VENDOR_PAYOUT_UPDATED
  WAREHOUSE_CREATED
  WAREHOUSE_DELETED
  WAREHOUSE_UPDATED
}

"""
Leverages the internal Python implementation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
Represents a single variant feature as part of a product type feature template.
"""
type ProductTypeVariantFeature implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  tenant: Tenant!

  """
  The type that we expect to render the feature's values as.
  """
  featureType: FeatureTypeEnum!
  name: String!
  description: String!

  """
  Available options for this variant feature
  """
  options: [String!]
  productType: ProductType!
  variantFeatures(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): VariantFeatureCountableConnection!
}

type VariantFeatureCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [VariantFeatureCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VariantFeatureCountableEdge {
  """
  The item at the end of the edge.
  """
  node: VariantFeature!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a single variant feature.
"""
type VariantFeature implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  tenant: Tenant!

  """
  The type that we expect to render the feature's values as.
  """
  featureType: FeatureTypeEnum!
  name: String!
  description: String!

  """
  Available options for this variant feature
  """
  options: [String!]
  variant: ProductVariant!
  productTypeFeature: ProductTypeVariantFeature
}

enum AttributeInputTypeEnum {
  """
  Dropdown
  """
  DROPDOWN

  """
  Multi Select
  """
  MULTISELECT

  """
  Date
  """
  DATE

  """
  Date Time
  """
  DATE_TIME

  """
  Rich Text
  """
  RICH_TEXT

  """
  Plain Text
  """
  PLAIN_TEXT

  """
  Reference
  """
  REFERENCE

  """
  Money
  """
  MONEY

  """
  Boolean
  """
  BOOLEAN

  """
  Numeric
  """
  NUMERIC

  """
  File
  """
  FILE

  """
  Swatch
  """
  SWATCH
}

"""
Represents a value of an attribute.
"""
type AttributeValue implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  tenant: Tenant!

  """
  Name of a value displayed in the interface.
  """
  name: String!

  """
  Supporting information like color, links, etc.
  """
  value: String!

  """
  Internal representation of a value (unique per attribute).
  """
  slug: String!
  attribute: Attribute!

  """
  Populated if the attribute has date-time input_type, represent actual datetime for filtering
  """
  dateTime: DateTime
  plainText: String!
  richText: String!
  currency: String!
  amount: Decimal!
  money: Money
  reference: String!
  boolean: Boolean!
  file: File
  fileUrl: String

  """
  Populated if the attribute has date input_type, represent actual date for filtering
  """
  date: Date

  """
  Type of value (used only when `value` field is set).
  """
  type: AttributeValueType

  """
  The input type to use for entering attribute values in the dashboard.
  """
  inputType: AttributeInputTypeEnum!
}

"""
Represents an uploaded file.
"""
type File {
  """
  The URL of the file.
  """
  url: String!
}

enum AttributeValueType {
  COLOR
  GRADIENT
  URL
  STRING
}

type CollectionCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CollectionCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CollectionCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Collection!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a collection of products.
"""
type Collection implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  publicationDate: Date

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  description: String!
  descriptionHtml: String!
  seoTitle: String
  seoDescription: String
  isVisible: Boolean!
  name: String!
  slug: String!

  """
  List of products in this collection.
  """
  products(
    """
    Filtering options for products.
    """
    filter: ProductFilterInput

    """
    Sort products.
    """
    sortBy: ProductOrder

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  List of variants in this collection.
  """
  variants(
    """
    Filtering options for variants.
    """
    filter: ProductVariantFilterInput

    """
    Sort variants.
    """
    sortBy: VariantSortingInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductVariantCountableConnection
  backgroundImage(
    """
    Size of the image.
    """
    size: Int
  ): Image

  """
  Whether the collection is published.
  """
  isPublished: Boolean!

  """
  Collection type.
  """
  type: CollectionTypeEnum

  """
  List of custom fields assigned to this collection.
  """
  customFields: [SelectedAttribute!]!

  """
  List of sales associated with the collection.
  """
  sales: [Sale!]!

  """
  List of vouchers associated with the collection.
  """
  vouchers: [Voucher!]!

  """
  Displays if this collection is on sale
  """
  onSale: Boolean
}

input ProductVariantFilterInput {
  search: String
  sku: [String!]
  nsn: [String!]
  subStatus: ProductVariantSubStatusEnum
  categories: [ID]
  price: PriceRangeInput
  productTypes: [ID]
  collections: [ID]
  isPublished: Boolean
  stockAvailability: StockAvailability
  attributes: [AttributeInput!]
  customFields: [AttributeInput!]
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  features: FeatureFilterInput
  advancedSearch: ProductVariantSearchInput
  ids: [ID]
  productIds: [ID]
  isStaff: Boolean
  sellers: [ID]
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
}

enum ProductVariantSubStatusEnum {
  """
  In review
  """
  IN_REVIEW

  """
  Declined
  """
  DECLINED

  """
  Approved
  """
  APPROVED
}

input ProductVariantSearchInput {
  """
  Search term.
  """
  searchTerm: String!

  """
  List of fields to search on
          (if not provided, only searches name by default).
  """
  searchFields: [ProductVariantSearchFieldEnum!]
}

enum ProductVariantSearchFieldEnum {
  PRIMARY_KEY
  NAME
  PRODUCT_NAME
  CATEGORY_NAME
  SKU
  NSN
  VARIANT_ATTRIBUTE_NAME
  VARIANT_ATTRIBUTE_VALUE_NAME
  VARIANT_ATTRIBUTE_VALUE_VALUE
  DESCRIPTION
}

input VariantSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort variant by the selected parent product's attribute's values.
  Note: this doesn't take translations into account yet.
  """
  attributeId: ID

  """
  Sort variants by the selected field.
  """
  field: VariantSortField
}

enum VariantSortField {
  """
  Sort variants by name.
  """
  NAME

  """
  Sort variants by sku.
  """
  SKU

  """
  Sort variants by price.
  """
  PRICE

  """
  Sort variants by create date.
  """
  CREATED

  """
  Sort variants by update date.
  """
  UPDATED

  """
  Sort variants by type.
  """
  TYPE

  """
  Sort variants by seller.
  """
  SELLER

  """
  Sort variants by sub status.
  """
  SUB_STATUS

  """
  Sort variants by variant id using rules for "int" values.
              In the database, ID is an integer. In the API, it's converted
              to a base64 encoded string. By sorting by ID (by the integer ID values),
              and returning the queryset back to the API consumer in such order,
              this allows the API consumer to convert the base64 encoded string back
              into an integer and view the list in sorted order by integer ID values.
              E.g. This is useful for the `Variant ID` column in the Variants List Page
              of the Dashboard, which shows the base64 decoded values (the integer values)
              of the variant IDs.
              .
  """
  VARIANT_ID

  """
  Sort variants by category.
  """
  CATEGORY

  """
  Sort variants by brand.
  """
  BRAND

  """
  Sort variants by manufacturer.
  """
  MANUFACTURER

  """
  Sort variants by external id.
  """
  EXTERNAL_ID

  """
  Sort variants by external source.
  """
  EXTERNAL_SOURCE
}

enum CollectionTypeEnum {
  """
  Product
  """
  PRODUCT

  """
  Variant
  """
  VARIANT
}

"""
Sales allow creating discounts for categories, collections, products, or variants and are visible to all the customers.
"""
type Sale implements Node {
  """
  The ID of the object
  """
  id: ID!
  name: String!

  """
  Type of discount
  """
  type: DiscountValueTypeEnum!
  value: Decimal!
  startDate: DateTime!
  endDate: DateTime
  currency: String!
  minSpent: Money
  minCheckoutItemsQuantity: Int!

  """
  List of categories this sale applies to.
  """
  categories(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CategoryCountableConnection

  """
  List of collections this sale applies to.
  """
  collections(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CollectionCountableConnection

  """
  List of products this sale applies to.
  """
  products(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection

  """
  List of variants this sale applies to.
  """
  variants(
    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductVariantCountableConnection

  """
  Determines a type of sale.
  """
  saleType: SaleTypeEnum!
}

"""
An enumeration.
"""
enum SaleTypeEnum {
  SHIPPING
  SPECIFIC_PRODUCT
}

"""
Represents order fulfillment.
"""
type Fulfillment implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  fulfillmentOrder: Int!
  relatedTo: Fulfillment
  order: Order!

  """
  Nautical order via order mapping
  """
  nauticalOrder: NauticalOrder
  status: FulfillmentStatus!

  """
  Fulfillment tracking company
  """
  trackingCompany: String

  """
  Fulfillment tracking number
  """
  trackingNumber: String

  """
  Fulfillment tracking url
  """
  trackingUrl: String
  shippingLabelUrl: String
  created: DateTime!
  updated: DateTime!

  """
  User who made the fulfillment. Requires MANAGE_STAFF permission.
  """
  user: User

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  List of lines for the fulfillment.
  """
  lines: [FulfillmentLine!]

  """
  Seller who made the fulfillment.
  """
  seller: Seller

  """
  User-friendly fulfillment status.
  """
  statusDisplay: String

  """
  Warehouse from fulfillment was fulfilled.
  """
  warehouse: Warehouse

  """
  Sum of quantities across all lines.
  """
  totalLinesQuantity: Int

  """
  Total price across all quantities across all lines.
  """
  totalLinesMoney: Money!

  """
  List of custom fields assigned to this fulfillment.
  """
  customFields: [SelectedAttribute!]!
}

"""
Represents a nautical order in the shop.
"""
type NauticalOrder implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  externalId: String
  externalSource: String
  orderSource: NauticalOrderOrderSource!
  created: DateTime!
  updated: DateTime

  """
  Order status
  """
  status: NauticalOrderStatus!
  subStatus: NauticalOrderSubStatus
  user: User
  languageCode: String!
  trackingClientId: String!
  billingAddress: Address
  shippingAddress: Address
  currency: String!

  """
  Indicates that the marketplace shipping price is set manually by user rather than taken from a related shipping method.
  """
  isMarketplaceShippingPriceOverridden: Boolean!

  """
  Total price of shipping.
  """
  shippingPrice: TaxedMoney
  euInvoiceMessaging: String
  vatIdentificationNumber: String
  mpVatIdentificationNumber: String
  token: String!
  voucher: Voucher
  shippingDiscount: Money
  discount: Money
  discountName: String
  translatedDiscountName: String
  displayGrossPrices: Boolean!
  customerNote: String!
  weight: Weight

  """
  Data time when the order was imported from another platform.
  """
  importedAt: DateTime
  poNumbers: [String!]

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Available shipping methods for the order.
  """
  availableMarketplaceShippingMethods: [ShippingMethod!]

  """
  List of seller shipments for the order.
  """
  sellerFulfillments: [Fulfillment!]!

  """
  List of sub-statuses that can be changed to based on current state of the order
  """
  allowedSubStatuses: [OrderSubStatusEnum!]

  """
  List
  """
  sellerUnfulfilled: [OrderLine!]!

  """
  List of nautical order lines.
  """
  lines: [NauticalOrderLine!]!

  """
  List of actions that can be performed in the current state of an order.
  """
  actions: [OrderAction!]!

  """
  Available shipping methods for each seller in this order. Note: this field designed for 'nauticalOrder(:id)' query.
  """
  availableShippingMethodsBySeller: [MultiSellerShippingMethod!]

  """
  List of order invoices.
  """
  invoices: [Invoice!]

  """
  User-friendly number of an order.
  """
  number: String

  """
  Informs if an order is fully paid.
  """
  isPaid: Boolean

  """
  Internal payment status.
  """
  paymentStatus: PaymentChargeStatusEnum!

  """
  User-friendly payment status.
  """
  paymentStatusDisplay: String!

  """
  List of payments for the order.
  """
  payments: [Payment!]

  """
  Total amount of the order.
  """
  total: TaxedMoney

  """
  The sum of line prices not including shipping.
  """
  subtotal: TaxedMoney

  """
  User-friendly order status.
  """
  statusDisplay: String

  """
  Informs whether a draft order can be finalized (turned into a regular order).
  """
  canFinalize: Boolean!

  """
  Validation status for the order
  """
  validationStatus: [ValidationStatus!]

  """
  Amount authorized for the order across all payments.
  """
  totalAuthorized: Money

  """
  Amount captured for the order across all payments.
  """
  totalCaptured: Money

  """
  Amount refunded for the order across all payments.
  """
  totalRefunded: Money

  """
  List of events associated with the order.
  """
  events: [NauticalOrderEvent!]

  """
  The difference between the paid and the order total amount.
  """
  totalBalance(
    """
    Should the balance be returned positive or negative.
    """
    positive: Boolean
  ): Money!

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Returns True, if order requires shipping.
  """
  isShippingRequired: Boolean!

  """
  Volume discount for the nautical order
  """
  volumeDiscount: TaxedMoney
    @deprecated(reason: "This will be removed on February 1, 2025.")
  shippingMethodName: String!

  """
  List of all the vendor orders connected to this marketplace order.
  """
  subOrders: [Order!]

  """
  List of all the refunds for this marketplace order.
  """
  refunds: [Refund!]

  """
  Total price of shipping for this order.
  """
  marketplaceShippingPrice: TaxedMoney!

  """
  Shipping method for this order.
  """
  marketplaceShippingMethod: ShippingMethod

  """
  Name of the shipping method for this order.
  """
  marketplaceShippingMethodName: String
}

"""
An enumeration.
"""
enum NauticalOrderOrderSource {
  """
  checkout
  """
  CHECKOUT

  """
  draft
  """
  DRAFT

  """
  quote
  """
  QUOTE

  """
  manual
  """
  MANUAL

  """
  external
  """
  EXTERNAL
}

"""
An enumeration.
"""
enum NauticalOrderStatus {
  DRAFT
  QUOTE
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  DELIVERED
  CANCELED
  RETURN_REQUESTED
  RETURN_AUTHORIZED
  RETURN_DECLINED
  RETURN_CANCELLED
  RETURN_COMPLETE
}

"""
An enumeration.
"""
enum NauticalOrderSubStatus {
  """
  In Review
  """
  IN_REVIEW

  """
  Quote Requested
  """
  QUOTE_REQUESTED

  """
  Awaiting Payment
  """
  AWAITING_PAYMENT

  """
  Complete
  """
  COMPLETE
}

enum OrderSubStatusEnum {
  """
  In Review
  """
  IN_REVIEW

  """
  Quote Requested
  """
  QUOTE_REQUESTED

  """
  Awaiting Payment
  """
  AWAITING_PAYMENT

  """
  Complete
  """
  COMPLETE
}

"""
Represents order line of particular order.
"""
type OrderLine implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  isLinePriceOverridden: Boolean!
  unitPriceOverriddenNote: String
  note: String
  productName: String!
  variantName: String!
  productSku: String
  isShippingRequired: Boolean!
  quantityFulfilled: Int!
  quantityDeclined: Int!
  digitalContentUrl: DigitalContentUrl

  """
  The seller order for this line
  """
  order: Order!

  """
  The nautical order line for this seller order line
  """
  nauticalOrderLine: NauticalOrderLine!

  """
  The main thumbnail for the ordered product.
  """
  thumbnail(
    """
    Size of thumbnail.
    """
    size: Int
  ): Image

  """
  Price of the single item in the order line.
  """
  unitPrice: TaxedMoney

  """
  Price of the order line.
  """
  totalPrice: TaxedMoney

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all.
  """
  variant: ProductVariant

  """
  Product name in the customer's language.
  """
  translatedProductName: String!

  """
  Variant name in the customer's language.
  """
  translatedVariantName: String!

  """
  List of allocations across warehouses.
  """
  allocations: [Allocation!]

  """
  The pricebook, if any, that changed the price of this line.
  """
  priceBook: PriceBook

  """
  The number of items ordered on this order line.
  """
  quantityOrdered: Int!

  """
  The number of unfulfilled items refunded on this order line.
  """
  unfulfilledQuantityRefunded: Int!

  """
  The number of fulfilled items refunded on this order line.
  """
  fulfilledQuantityRefunded: Int!
}

type DigitalContentUrl implements Node {
  content: DigitalContent!
  created: DateTime!
  downloadNum: Int!

  """
  The ID of the object
  """
  id: ID!

  """
  URL for digital content.
  """
  url: String

  """
  UUID of digital content.
  """
  token: NauticalUUID!
}

type DigitalContent implements Node & ObjectWithMetadata {
  useDefaultSettings: Boolean!
  automaticFulfillment: Boolean!
  productVariant: ProductVariant!

  """
  The URL of file to download.
  """
  contentFile: String
  maxDownloads: Int
  urlValidDays: Int

  """
  List of URLs for the digital variant.
  """
  urls: [DigitalContentUrl!]

  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

scalar NauticalUUID

"""
Represents order line of particular order.
"""
type NauticalOrderLine implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  isLinePriceOverridden: Boolean!
  unitPriceOverriddenNote: String
  note: String
  productName: String!
  variantName: String!
  productSku: String
  isShippingRequired: Boolean!
  digitalContentUrl: DigitalContentUrl

  """
  The main thumbnail for the ordered product.
  """
  thumbnail(
    """
    Size of thumbnail.
    """
    size: Int
  ): Image

  """
  Price of the single item in the order line.
  """
  unitPrice: TaxedMoney

  """
  Price of the order line.
  """
  totalPrice: TaxedMoney

  """
  A purchased product variant. Note: this field may be null if the variant has been removed from stock at all.
  """
  variant: ProductVariant

  """
  Product name in the customer's language
  """
  translatedProductName: String!

  """
  Variant name in the customer's language
  """
  translatedVariantName: String!

  """
  The pricebook, if any, that changed the price of this line
  """
  priceBook: PriceBook

  """
  The related orderline attached to the connected seller order
  """
  sellerOrderline: OrderLine

  """
  The number of items ordered on this order line
  """
  quantityOrdered: Int!

  """
  The sale, if any, that changed the price of this line
  """
  sale: Sale

  """
  Amount the total price for this line has been been reduced by a sale
  """
  saleDiscount: Money

  """
  Amount the total price for this line has been been reduced by a voucher
  """
  voucherDiscount: Money

  """
  Price of the single item in the order line before sales
  """
  originalUnitPrice: TaxedMoney

  """
  Price of the single item in the order line after sales
  """
  discountedUnitPrice: TaxedMoney
}

"""
Variants, Product and types can be attached to the PriceBook and based on thecorresponding value, cost can be increased or decreased.
"""
type PriceBook implements Node & ObjectWithMetadata {
  description: String!
  descriptionHtml: String!

  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Name of PriceBook
  """
  name: String!

  """
  Determines if the PriceBook is active
  """
  deleted: Boolean!

  """
  List of variants for the price book.
  """
  priceBookVariants: [PriceBookVariant!]

  """
  List of products for the price book.
  """
  priceBookProducts: [PriceBookProduct!]

  """
  List of product types for the price book.
  """
  priceBookProductTypes: [PriceBookProductType!]

  """
  Number of variants mapped to this price book
  """
  numberOfProducts: Int!

  """
  Number of variants mapped to this price book
  """
  numberOfProductTypes: Int!

  """
  Number of variants mapped to this price book
  """
  numberOfVariants: Int!
}

"""
Variants added to the PriceBook
"""
type PriceBookVariant implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook!
  variant: ProductVariant!
  valueType: PriceBookVariantValueType!
  currency: String!

  """
  Amount to decrease or increase for the variant if type selected is override orpercentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the variant's price if type selected is fixed
  """
  percentage: Float!
}

"""
An enumeration.
"""
enum PriceBookVariantValueType {
  """
  Override
  """
  OVERRIDE

  """
  Adjust Percentage
  """
  ADJUST_PERCENTAGE

  """
  Adjust Fixed
  """
  ADJUST_FIXED
}

"""
Products added to the PriceBook
"""
type PriceBookProduct implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook!
  product: Product!
  valueType: PriceBookProductValueType!
  currency: String!

  """
  Amount to decrease or increase for the variants of the product if type selected isoverride or percentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the product's variants price if type selectedis fixed.
  """
  percentage: Float!
}

"""
An enumeration.
"""
enum PriceBookProductValueType {
  """
  adjust_percentage
  """
  ADJUST_PERCENTAGE

  """
  adjust_fixed
  """
  ADJUST_FIXED
}

"""
Product types added to the PriceBook
"""
type PriceBookProductType implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook!
  productType: ProductType!
  valueType: PriceBookProductTypeValueType!
  currency: String!

  """
  Amount to decrease or increase for the variants of the product type if type selectedis override or percentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the product type's variants price if typeselected is fixed.
  """
  percentage: Float!
}

"""
An enumeration.
"""
enum PriceBookProductTypeValueType {
  """
  adjust_percentage
  """
  ADJUST_PERCENTAGE

  """
  adjust_fixed
  """
  ADJUST_FIXED
}

"""
Represents allocation.
"""
type Allocation implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Quantity allocated for orders.
  """
  quantity: Int!

  """
  The warehouse were items were allocated.
  """
  warehouse: Warehouse!
}

"""
Represents warehouse.
"""
type Warehouse implements Node & ObjectWithMetadata {
  externalId: String
  externalSource: String

  """
  The ID of the object
  """
  id: ID!
  name: String!
  slug: String!
  companyName: String!
  shippingZones(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ShippingZoneCountableConnection!
  address: Address!
  email: String!
  seller: Seller!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

type ShippingZoneCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ShippingZoneCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ShippingZoneCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ShippingZone!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a shipping zone in the shop. Zones are the concept used only for grouping shipping methods in the dashboard, and are never exposed to the customers directly.
"""
type ShippingZone implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  name: String!
  seller: Seller!

  """
  List of warehouses for shipping zone.
  """
  warehouses: [Warehouse!]!

  """
  Lowest and highest prices for the shipping.
  """
  priceRange: MoneyRange!

  """
  List of countries available for the method.
  """
  countries: [CountryDisplay!]!

  """
  List of shipping methods available for orders shipped to countries within this shipping zone.
  """
  shippingMethods: [ShippingMethod!]!

  """
  List of country areas this shipping zone is limited to.
  """
  countryAreas: [ShippingZoneCountryArea!]!
}

"""
Represents a range of amounts of money.
"""
type MoneyRange {
  """
  Lower bound of a price range.
  """
  start: Money

  """
  Upper bound of a price range.
  """
  stop: Money
}

"""
Represents a state/province/region within a country that a shipping zone is limited to.
"""
type ShippingZoneCountryArea implements Node {
  """
  The ID of the object
  """
  id: ID!
  country: CountryDisplay!
  countryArea: CountryArea!
}

enum OrderAction {
  """
  Represents the capture action.
  """
  CAPTURE

  """
  Represents a mark-as-paid action.
  """
  MARK_AS_PAID

  """
  Represents a refund action.
  """
  REFUND

  """
  Represents a void action.
  """
  VOID
}

"""
Represents an Invoice.
"""
type Invoice implements ObjectWithMetadata & Job & Node {
  """
  The ID of the object
  """
  id: ID!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Job status.
  """
  status: JobStatusEnum!
  number: String!
  externalUrl: String
  isValid: Boolean!
  isEditable: Boolean!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!

  """
  Job message.
  """
  message: String

  """
  URL to download an invoice.
  """
  url: String
}

interface Job {
  """
  Job status.
  """
  status: JobStatusEnum!

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!

  """
  Job message.
  """
  message: String
}

enum JobStatusEnum {
  """
  Pending
  """
  PENDING

  """
  Processing
  """
  PROCESSING

  """
  Success
  """
  SUCCESS

  """
  Failed
  """
  FAILED

  """
  Deleted
  """
  DELETED
}

"Represents possible statuses of a payment.\n\n    The following statuses are possible:\n    - NOT_CHARGED - no funds were take off the customer founding source yet.\n    - PARTIALLY_CHARGED - funds were taken off the customer's funding source,\n    partly covering the payment amount.\n    - FULLY_CHARGED - funds were taken off the customer founding source,\n    partly or completely covering the payment amount.\n    - PARTIALLY_REFUNDED - part of charged funds were returned to the customer.\n    - FULLY_REFUNDED - all charged funds were returned to the customer.\n    "
enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PENDING
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
  REFUSED
  CANCELLED
  VOIDED
}

"""
Represents a payment of a given type.
"""
type Payment implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  checkout: Checkout
  nauticalOrder: NauticalOrder
  paymentMethodType: String!
  paymentMethodToken: String
  customerIpAddress: String

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Internal payment status.
  """
  chargeStatus: PaymentChargeStatusEnum!

  """
  List of actions that can be performed in the current state of a payment.
  """
  actions: [OrderAction!]!

  """
  Total amount of the payment.
  """
  total: Money

  """
  Total amount captured for this payment.
  """
  capturedAmount: Money

  """
  List of all transactions within this payment.
  """
  transactions: [Transaction!]

  """
  Maximum amount of money that can be captured.
  """
  availableCaptureAmount: Money

  """
  Maximum amount of money that can be refunded.
  """
  availableRefundAmount: Money

  """
  The details of the card used for this payment.
  """
  creditCard: CreditCard
}

"""
An object representing a single payment.
"""
type Transaction implements Node {
  """
  The ID of the object
  """
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: String

  """
  Total amount of the transaction.
  """
  amount: Money
}

"""
An enumeration.
"""
enum TransactionKind {
  """
  Authorization
  """
  AUTH

  """
  Capture
  """
  CAPTURE

  """
  Capture failed
  """
  CAPTURE_FAILED

  """
  Action to confirm
  """
  ACTION_TO_CONFIRM

  """
  Void
  """
  VOID

  """
  Pending
  """
  PENDING

  """
  Refund
  """
  REFUND

  """
  Refund in progress
  """
  REFUND_ONGOING

  """
  Refund failed
  """
  REFUND_FAILED

  """
  Refund reversed
  """
  REFUND_REVERSED

  """
  Confirm
  """
  CONFIRM

  """
  Cancel
  """
  CANCEL

  """
  Created
  """
  CREATED
}

type CreditCard {
  """
  Card brand.
  """
  brand: String!

  """
  First 4 digits of the card number.
  """
  firstDigits: String

  """
  Last 4 digits of the card number.
  """
  lastDigits: String!

  """
  Two-digit number representing the card’s expiration month.
  """
  expMonth: Int

  """
  Four-digit number representing the card’s expiration year.
  """
  expYear: Int
}

type ValidationStatus {
  message: String
  code: String
  variant: ID
}

"""
History log of the order.
"""
type NauticalOrderEvent implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime!

  """
  Order event type.
  """
  type: OrderEventsEnum!

  """
  User who performed the action.
  """
  user: User

  """
  Content of the event.
  """
  message: String

  """
  Email of the customer.
  """
  email: String

  """
  Type of an email sent to the customer.
  """
  emailType: OrderEventsEmailsEnum

  """
  Amount of money.
  """
  amount: Float

  """
  The payment ID from the payment gateway.
  """
  paymentId: String

  """
  The payment gateway of the payment.
  """
  paymentGateway: String

  """
  Number of items.
  """
  quantity: Int

  """
  Composed ID of the Fulfillment.
  """
  composedId: String

  """
  User-friendly number of an order.
  """
  orderNumber: String

  """
  Number of an invoice related to the order.
  """
  invoiceNumber: String

  """
  List of oversold lines names.
  """
  oversoldItems: [String!]

  """
  The concerned lines.
  """
  lines: [NauticalOrderEventOrderLineObject!]

  """
  The warehouse were items were restocked.
  """
  warehouse: Warehouse
}

enum OrderEventsEnum {
  """
  Order was confirmed
  """
  CONFIRMED

  """
  The draft order was created
  """
  DRAFT_CREATED

  """
  The quote order was created
  """
  QUOTE_CREATED

  """
  The draft order was updated
  """
  DRAFT_UPDATED

  """
  The quote order was updated
  """
  QUOTE_UPDATED

  """
  Some products were added to the order
  """
  ADDED_PRODUCTS

  """
  Some products were removed from the order
  """
  REMOVED_PRODUCTS

  """
  Some products were added to the draft order
  """
  DRAFT_ADDED_PRODUCTS

  """
  Some products were removed from the draft order
  """
  DRAFT_REMOVED_PRODUCTS

  """
  Some products were added to the quote order
  """
  QUOTE_ADDED_PRODUCTS

  """
  Some products were removed from the quote order
  """
  QUOTE_REMOVED_PRODUCTS

  """
  The order was placed
  """
  PLACED

  """
  The draft order was placed
  """
  PLACED_FROM_DRAFT

  """
  The quote order was placed
  """
  PLACED_FROM_QUOTE

  """
  The draft order was placed with oversold items
  """
  OVERSOLD_ITEMS

  """
  The order was canceled
  """
  CANCELED

  """
  The order was manually marked as fully paid
  """
  ORDER_MARKED_AS_PAID

  """
  The order was manually marked as delivered
  """
  ORDER_MARKED_AS_DELIVERED

  """
  The order was fully paid
  """
  ORDER_FULLY_PAID

  """
  The address from the placed order was updated
  """
  UPDATED_ADDRESS

  """
  The email was sent
  """
  EMAIL_SENT

  """
  The order payout status was manually changed
  """
  PAYOUT_STATUS_MANUALLY_CHANGED

  """
  The payment was authorized
  """
  PAYMENT_AUTHORIZED

  """
  The payment was captured
  """
  PAYMENT_CAPTURED

  """
  The payment was refunded
  """
  PAYMENT_REFUNDED

  """
  The payment was voided
  """
  PAYMENT_VOIDED

  """
  The payment was failed
  """
  PAYMENT_FAILED

  """
  Notification from external service
  """
  EXTERNAL_SERVICE_NOTIFICATION

  """
  An invoice was requested
  """
  INVOICE_REQUESTED

  """
  An invoice was generated
  """
  INVOICE_GENERATED

  """
  An invoice was updated
  """
  INVOICE_UPDATED

  """
  An invoice was sent
  """
  INVOICE_SENT

  """
  A fulfillment was canceled
  """
  FULFILLMENT_CANCELED

  """
  The items of the fulfillment were restocked
  """
  FULFILLMENT_RESTOCKED_ITEMS

  """
  Some items were fulfilled
  """
  FULFILLMENT_FULFILLED_ITEMS

  """
  Some items had fulfillment declined
  """
  FULFILLMENT_DECLINED_ITEMS

  """
  The fulfillment's tracking code was updated
  """
  TRACKING_UPDATED

  """
  A note was added to the order
  """
  NOTE_ADDED

  """
  A line unit price was overridden
  """
  LINE_PRICE_OVERRIDDEN

  """
  An unknown order event containing a message
  """
  OTHER

  """
  A refund receipt was generated
  """
  REFUND_RECEIPT_GENERATED

  """
  A return was requested for the order
  """
  RETURN_REQUESTED

  """
  A return request was authorized for the order
  """
  RETURN_AUTHORIZED

  """
  A return request was declined for the order
  """
  RETURN_DECLINED

  """
  A return request was received for the order
  """
  RETURN_RECEIVED

  """
  A return request was cancelled for the order
  """
  RETURN_CANCELLED

  """
  A return has been completed for the order
  """
  RETURN_COMPLETE
}

enum OrderEventsEmailsEnum {
  """
  The order confirmed email was sent
  """
  CONFIRMED

  """
  The payment confirmation email was sent
  """
  PAYMENT_CONFIRMATION

  """
  The shipping confirmation email was sent
  """
  SHIPPING_CONFIRMATION

  """
  The fulfillment tracking code email was sent
  """
  TRACKING_UPDATED

  """
  The order placement confirmation email was sent
  """
  ORDER_CONFIRMATION

  """
  The order cancel confirmation email was sent
  """
  ORDER_CANCEL

  """
  The order refund confirmation email was sent
  """
  ORDER_REFUND

  """
  The fulfillment confirmation email was sent
  """
  FULFILLMENT_CONFIRMATION

  """
  fulfillment_denied
  """
  FULFILLMENT_DENIED

  """
  The email containing the digital links was sent
  """
  DIGITAL_LINKS

  """
  The partial order cancel confirmation email was sent
  """
  PARTIAL_ORDER_CANCEL

  """
  The marketplace operator order notification email was sent
  """
  MPO_ORDER_NOTIFICATION

  """
  The quote email was sent
  """
  QUOTE_SENT

  """
  The quote request email was sent to the marketplace operator
  """
  QUOTE_REQUESTED
}

type NauticalOrderEventOrderLineObject {
  """
  The variant quantity.
  """
  quantity: Int

  """
  The order line.
  """
  orderLine: NauticalOrderLine

  """
  The variant name.
  """
  itemName: String
}

"""
Represents a refund scoped to an nautical order, a seller order, or a seller order line
"""
type Refund implements Node & ObjectWithMetadata {
  createdAt: DateTime!
  updatedAt: DateTime!
  description: String!
  descriptionHtml: String!

  """
  The ID of the object
  """
  id: ID!
  lines(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): RefundLineCountableConnection!
  payments(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): RefundPaymentCountableConnection!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  The buyer who is receiving the refund. This may be NULL in the case of refunds issued against anonymous orders
  """
  buyer: User

  """
  Optional external ID which can be used to synchronize Nautical refunds to data in an external system
  """
  externalId: String

  """
  Human readable name of the refund
  """
  name: String!

  """
  The order that this refund is against
  """
  order: NauticalOrder!

  """
  Status of the refund
  """
  status: RefundStatusEnum!

  """
  Unique UUID associated with the refund
  """
  token: String!

  """
  Type of the refund: manual or order line. An order line refund is scoped to either an OrderLine or an Order with the lineType of Shipping. A manual refund is scoped either to a BuyerOrder or a SellerOrder with any lineType besides Shipping
  """
  refundType: RefundTypeEnum!
}

type RefundLineCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [RefundLineCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type RefundLineCountableEdge {
  """
  The item at the end of the edge.
  """
  node: RefundLine!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a refund line
"""
type RefundLine implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The ID of the object
  """
  id: ID!

  """
  Indicates who is paying for the cost of this refund line
  """
  chargedTo: RefundChargeToEnum!

  """
  Currency code that this refund line is in
  """
  currency: String!

  """
  How does this refund line apply to the original order
  """
  lineScope: RefundLineScopeEnum!

  """
  How is this refund line amount calculated
  """
  lineType: RefundLineTypeEnum!

  """
  If configured as a percentage refund, this is the percentage of the scope value that is to be refunded. This is in the range [0. 100]
  """
  percentage: Float!

  """
  If configured as a quantity based refund, this is the number of fulfilled units refunded.
  """
  quantityFulfilled: Int!

  """
  If configured as a quantity based refund, this is the number of unfulfilled units refunded.
  """
  quantityUnfulfilled: Int!

  """
  The refund this refund line is contained in
  """
  refund: Refund!

  """
  The scope that this refund line applies to
  """
  refundScope: RefundScope!

  """
  The total for this refund line
  """
  total: TaxedMoney!
}

enum RefundChargeToEnum {
  """
  Marketplace
  """
  MARKETPLACE

  """
  Seller
  """
  SELLER
}

enum RefundLineScopeEnum {
  """
  Buyer Order
  """
  BUYERORDER

  """
  Order Line
  """
  ORDERLINE

  """
  Seller Order
  """
  SELLERORDER
}

enum RefundLineTypeEnum {
  ENTIRE_SCOPE
  FIXED_AMOUNT
  PARTIAL_QUANTITY
  PERCENTAGE
  SHIPPING
  TAX
}

union RefundScope = NauticalOrder | Order | OrderLine

type RefundPaymentCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [RefundPaymentCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type RefundPaymentCountableEdge {
  """
  The item at the end of the edge.
  """
  node: RefundPayment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a refund payment
"""
type RefundPayment implements Node {
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The ID of the object
  """
  id: ID!

  """
  How this payment is made
  """
  paymentType: RefundPaymentTypeEnum!

  """
  The refund this refund line is contained in
  """
  refund: Refund!

  """
  The reverse payment
  """
  refundMethod: RefundMethod!
}

enum RefundPaymentTypeEnum {
  """
  Transaction
  """
  TRANSACTION

  """
  Voucher
  """
  VOUCHER
}

union RefundMethod = Transaction | Voucher

enum RefundStatusEnum {
  """
  Requested
  """
  REQUESTED

  """
  Canceled
  """
  CANCELED

  """
  Declined
  """
  DECLINED

  """
  Approved
  """
  APPROVED

  """
  Processing
  """
  PROCESSING

  """
  Failed
  """
  FAILED

  """
  Paid
  """
  PAID

  """
  Locked
  """
  LOCKED

  """
  Settled
  """
  SETTLED
}

enum RefundTypeEnum {
  """
  Manual Refund
  """
  MANUALREFUND

  """
  Order Line Refund
  """
  ORDERLINEREFUND
}

"""
An enumeration.
"""
enum FulfillmentStatus {
  """
  Fulfilled
  """
  FULFILLED

  """
  Canceled
  """
  CANCELED

  """
  Returned
  """
  RETURNED

  """
  Declined
  """
  DECLINED

  """
  Return requested
  """
  RETURN_REQUESTED

  """
  Return authorized
  """
  RETURN_AUTHORIZED

  """
  Return declined
  """
  RETURN_DECLINED

  """
  Return received
  """
  RETURN_RECEIVED

  """
  Return complete
  """
  RETURN_COMPLETE

  """
  Return cancelled
  """
  RETURN_CANCELLED
}

"""
Represents line of the fulfillment.
"""
type FulfillmentLine implements Node {
  """
  The ID of the object
  """
  id: ID!
  quantity: Int!
  orderLine: OrderLine

  """
  Reason customer requested item return.
  """
  returnReason: String
}

"""
Extra fee associated with an order
"""
type OrderFee implements Node {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!
  order: Order

  """
  Currency of the fee.
  """
  currency: NauticalCurrency!
  transactionAmount: Decimal!

  """
  Transaction currency of the fee.
  """
  transactionCurrency: NauticalCurrency!
  transactionFee: Money
  domiciledAmount: Decimal!
  domiciledFee: Money

  """
  Source fee type.
  """
  source: SourceFeeEnum
  name: String!
  notes: String!
  data: JSONString!
}

type NauticalCurrency {
  code: String!
}

enum SourceFeeEnum {
  """
  Agreement Fees
  """
  AGREEMENT_FEES

  """
  Manual Order Fee
  """
  MANUAL_ORDER_FEE
}

"""
History log of the order.
"""
type OrderEvent implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime!

  """
  Order event type.
  """
  type: OrderEventsEnum

  """
  User who performed the action.
  """
  user: User

  """
  Content of the event.
  """
  message: String

  """
  Email of the customer.
  """
  email: String

  """
  Type of an email sent to the customer.
  """
  emailType: OrderEventsEmailsEnum

  """
  Amount of money.
  """
  amount: Float

  """
  The payment ID from the payment gateway.
  """
  paymentId: String

  """
  The payment gateway of the payment.
  """
  paymentGateway: String

  """
  Number of items.
  """
  quantity: Int

  """
  Composed ID of the Fulfillment.
  """
  composedId: String

  """
  User-friendly number of an order.
  """
  orderNumber: String

  """
  Number of an invoice related to the order.
  """
  invoiceNumber: String

  """
  List of oversold lines names.
  """
  oversoldItems: [String!]

  """
  The concerned lines.
  """
  lines: [OrderEventOrderLineObject!]

  """
  The lines fulfilled.
  """
  fulfilledItems: [FulfillmentLine!]

  """
  The warehouse were items were restocked.
  """
  warehouse: Warehouse
}

type OrderEventOrderLineObject {
  """
  The variant quantity.
  """
  quantity: Int

  """
  The order line.
  """
  orderLine: OrderLine

  """
  The variant name.
  """
  itemName: String
}

enum OrderPayoutStatusEnum {
  """
  Not ready
  """
  NOT_READY

  """
  Not paid
  """
  NOT_PAID

  """
  Ready for payout
  """
  READY_FOR_PAYOUT

  """
  Pending final payout
  """
  PENDING_FINAL_PAYOUT
    @deprecated(reason: "This will be removed on February 26, 2025")

  """
  Paid out
  """
  PAID_OUT

  """
  Partially paid out
  """
  PARTIALLY_PAID_OUT

  """
  Error
  """
  ERROR
}

type OrderPayoutSummary {
  """
  Commissions that affected the payout
  """
  commissions: Money!

  """
  Discounts that affected payouts
  """
  discounts: Money!

  """
  Fees that affect the payout
  """
  fees: Money!

  """
  Refunds that affected the payout
  """
  refunds: Money!

  """
  Commissions that were reduced as a result of refunds
  """
  refundsCommission: Money!

  """
  Sales in the payout
  """
  sales: Money!

  """
  Shipping in the payout
  """
  shipping: Money!

  """
  Total for this payout
  """
  total: Money!

  """
  Vendor Payout associated with this data
  """
  vendorPayout: VendorPayout!
}

enum PayoutStatusEnum {
  """
  Draft
  """
  DRAFT

  """
  Paid
  """
  PAID

  """
  Archived
  """
  ARCHIVED

  """
  Locked
  """
  LOCKED

  """
  Error
  """
  ERROR
}

type AgreementSellersCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [AgreementSellersCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AgreementSellersCountableEdge {
  """
  The item at the end of the edge.
  """
  node: AgreementSellers!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A seller agreement mapping
"""
type AgreementSellers implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!
  seller: Seller!
  acknowledgedOn: DateTime
  plan: Agreement
  effectiveAt: DateTime!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

"""
A marketplace agreement created, edited and maintianed in the dashboard
"""
type Agreement implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  publicationDate: Date
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  contentHtml: String!
  tenant: Tenant!
  seoTitle: String
  seoDescription: String
  slug: String!
  title: String!

  """
  Commission type
  """
  commissionType: CommissionTypeEnum!
    @deprecated(
      reason: "Markup commissions will be removed on January 23, 2025."
    )
  defaultCommission: Decimal!

  """
  Markup commission type
  """
  markupCommissionType: MarkupCommissionTypeEnum!
    @deprecated(
      reason: "Markup commissions will be removed on January 23, 2025."
    )

  """
  If a markup commission is selected, this is the amount of the commission.
  """
  markupCommissionValue: Decimal
    @deprecated(
      reason: "Markup commissions will be removed on January 23, 2025."
    )
  isActive: Boolean

  """
  List of granular commissions associated with the agreement.
  """
  granularCommissions: [AgreementCommission!]!
  sellerAgreements(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): AgreementSellersCountableConnection!

  """
  List of extra fees associated with the agreement.
  """
  fees: [AgreementFees!]!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

enum CommissionTypeEnum {
  """
  Gross Price Commission
  """
  MARKETPLACE

  """
  Markup Commission
  """
  WHOLESALE

  """
  Absolute Price Commission
  """
  DROPSHIPPING
}

enum MarkupCommissionTypeEnum {
  """
  Percentage
  """
  PERCENTAGE
}

"""
An agreement commission
"""
type AgreementCommission implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!
  commission: Decimal!
  agreement: Agreement!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  instance: Category
}

"""
Extra fees associated with an agreement
"""
type AgreementFees implements Node {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!
  agreement: Agreement!

  """
  type of fee
  """
  feeType: FeeType!

  """
  Scope of the fee
  """
  feeScope: FeeScope!

  """
  Fee value in domiciled currency
  """
  feeValue: Decimal!
  feeName: String!
}

"""
An enumeration.
"""
enum FeeType {
  PERCENTAGE
  FIXED
}

"""
An enumeration.
"""
enum FeeScope {
  LINE
  TOTAL
}

type WarehouseCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [WarehouseCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type WarehouseCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Warehouse!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a microsite of products.
"""
type Microsite implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  publicationDate: Date
  description: String!
  descriptionHtml: String!
  seoTitle: String
  seoDescription: String
  name: String!
  slug: String!
  footerText: String
  seller: Seller

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  List of products in this microsite.
  """
  products(
    """
    Filtering options for products.
    """
    filter: ProductFilterInput

    """
    Sort products.
    """
    sortBy: ProductOrder

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): ProductCountableConnection
  bannerImage(
    """
    Size of the image.
    """
    size: Int
  ): Image
  logoImage(
    """
    Size of the image.
    """
    size: Int
  ): Image

  """
  Whether the microsite is published.
  """
  isPublished: Boolean!
}

"""
Document
"""
type Document {
  """
  Global ID of the Document.
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  tenant: Tenant!
  file: String!
  name: String!
  description: String!
  fileExtension: String!
  fileContentType: String

  """
  File size in bytes.
  """
  fileSize: FileSize

  """
  The URL of file to download.
  """
  url: String
}

"""
Represents amount of bytes in common formats.
"""
type FileSize {
  """
  File size in bytes.
  """
  bytes: BigInt

  """
  File size in kilobytes.
  """
  kilobytes: Decimal

  """
  File size in megabytes.
  """
  megabytes: Decimal
}

"""
An enumeration.
"""
enum ProductStatus {
  """
  Draft
  """
  DRAFT

  """
  Active
  """
  ACTIVE
}

"""
An enumeration.
"""
enum ProductSubStatus {
  """
  In review
  """
  IN_REVIEW

  """
  Declined
  """
  DECLINED

  """
  Approved
  """
  APPROVED
}

"""
Represents availability of a product in the storefront.
"""
type ProductPricingInfo {
  """
  Whether it is in sale or not.
  """
  onSale: Boolean!

  """
  The discount amount if in sale (null otherwise).
  """
  discount: TaxedMoney!

  """
  The discount amount in the local currency.
  """
  discountLocalCurrency: TaxedMoney!

  """
  The discounted price range of the product variants.
  """
  priceRange: TaxedMoneyRange!

  """
  The undiscounted price range of the product variants.
  """
  priceRangeUndiscounted: TaxedMoneyRange!

  """
  The discounted price range of the product variants in the local currency.
  """
  priceRangeLocalCurrency: TaxedMoneyRange!

  """
  The undiscounted price range of the product variants in the local currency.
  """
  priceRangeUndiscountedLocalCurrency: TaxedMoneyRange!
}

"""
Represents a range of monetary values.
"""
type TaxedMoneyRange {
  """
  Lower bound of a price range.
  """
  start: TaxedMoney

  """
  Upper bound of a price range.
  """
  stop: TaxedMoney
}

type Margin {
  start: Int
  stop: Int
}

"""
Represents a product image.
"""
type ProductImage implements Node {
  """
  The ID of the object
  """
  id: ID!
  sortOrder: Int
  externalId: String
  externalSource: String
  alt: String!

  """
  The URL of the image.
  """
  url(
    """
    Size of the image.
    """
    size: Int
  ): String!
}

type ProductImageCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ProductImageCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ProductImageCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ProductImage!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents location data.
"""
type Location implements Node {
  """
  The ID of the object
  """
  id: ID!
  lon: Float
  lat: Float

  """
  Type of the location for tagging primary, origin or destination type location.
  """
  locationType: LocationTypeEnum

  """
  Kind of the location for tagging business, residential or auction kind location.
  """
  locationKind: LocationKindEnum
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!

  """
  Shop's default country.
  """
  country: CountryDisplay!
  countryArea: String!
  phone: String
}

enum LocationKindEnum {
  """
  Business
  """
  BUSINESS

  """
  Residential
  """
  RESIDENTIAL

  """
  Auction
  """
  AUCTION
}

"""
Product stock stats for a specific warehouse including all variants
"""
type WarehouseStats {
  """
  Warehouse ID
  """
  warehouseId: ID!

  """
  Total quantity of variants stocks associated with the warehouse (including allocated).
  """
  quantity: Int!

  """
  Quantity of variants stocks at the warehouse that has been allocated to orders.
  """
  quantityAllocated: Int!

  """
  Quantity of variants stocks at the warehouse that is available for purchase.
  """
  quantityAvailable: Int!
}

enum ProductAction {
  """
  Represents a product that was declined master product status.
  """
  DECLINED

  """
  Represents a product that was approved for master product status.
  """
  APPROVED
}

"""
Represents logs for each product state change.
"""
type ProductStatusLog implements Node & ObjectWithMetadata {
  """
  The user who updated the product status.
  """
  user: User

  """
  The sub status of the product.
  """
  subStatus: ProductSubStatusEnum

  """
  The reason for the sub status of the product.
  """
  subStatusReason: String

  """
  The date and time the product state was created.
  """
  createdAt: DateTime

  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
}

"""
Represents availability of a variant in the storefront.
"""
type VariantPricingInfo {
  """
  Whether it is in sale or not.
  """
  onSale: Boolean!

  """
  The discount amount if in sale (null otherwise).
  """
  discount: TaxedMoney!

  """
  The discount amount in the local currency.
  """
  discountLocalCurrency: TaxedMoney!

  """
  The price, with any discount subtracted.
  """
  price: TaxedMoney!

  """
  The price without any discount.
  """
  priceUndiscounted: TaxedMoney!

  """
  The discounted price in the local currency.
  """
  priceLocalCurrency: TaxedMoney!

  """
  The price without any discounts in the local currency.
  """
  priceUndiscountedLocalCurrency: TaxedMoney!
}

"""
Represents a size info.
"""
type VariantSize {
  length: Decimal
  width: Decimal
  height: Decimal

  """
  Size units for length, width and height.
  """
  sizeUnits: DistanceUnitsEnum
}

enum DistanceUnitsEnum {
  """
  Inch
  """
  INCH

  """
  Foot
  """
  FT

  """
  Yard
  """
  YD

  """
  Mile
  """
  ML

  """
  Millimeter
  """
  MM

  """
  Centimeter
  """
  CM

  """
  Meter
  """
  M

  """
  Kilometer
  """
  KM
}

"""
Represents stock.
"""
type Stock implements Node {
  warehouse: Warehouse!
  productVariant: ProductVariant!

  """
  Total amount of variant stock located at the warehouse.
  """
  quantity: Int!

  """
  If backorders are enabled for the marketplace and variant, this is the number of backordered items permitted before the variant is marked as out of stock. This is a negative number or zero. quantity available is not permitted to go below this number.
  """
  outOfStockThreshold: Int

  """
  Amount of variant stock at the warehouse that has been allocated to an order.
  """
  quantityAllocated: Int!

  """
  The ID of the object
  """
  id: ID!

  """
  Amount of variant stock at the warehouse that is available for purchase and is not allocated to an order. This is equal to the difference between quantity and quantity_allocated.
  """
  quantityAvailable: Int!
}

"""
An enumeration.
"""
enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

"""
History log of the variant stock.
"""
type StockEvent implements Node {
  """
  The ID of the object
  """
  id: ID!
  date: DateTime!
  type: StockEventType!
  stock: Stock
  parameters: JSONString!

  """
  Returns a user who created this event.
  """
  user: User
}

"""
An enumeration.
"""
enum StockEventType {
  """
  Stock was created
  """
  STOCK_CREATED

  """
  Stock was updated
  """
  STOCK_UPDATED

  """
  Stock was deleted
  """
  STOCK_DELETED

  """
  Stock was allocated
  """
  STOCK_ALLOCATED

  """
  Stock was deallocated
  """
  STOCK_DEALLOCATED
}

type SellerType implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  pk: Int
  companyName: String
  owner: UserType
}

type UserType implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  firstName: String
  lastName: String
  email: String
  defaultShippingAddress: AddressType
}

type AddressType implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!
  firstName: String
  lastName: String
  streetAddress1: String
  streetAddress2: String
  city: String
  postalCode: String
  country: String
  countryArea: String
  phone: String
}

"""
Represents an shipping method for a particular seller on a checkout.
"""
type CheckoutSellerShipping implements Node {
  tenant: Tenant!

  """
  The ID of the object
  """
  id: ID!
  seller: Seller!
  shippingMethod: ShippingMethod!
  isPriceOverridden: Boolean!

  """
  Overridden by a staff user amount stored in the checkout currency (if is_price_overridden is true).
  """
  priceOverrideAmount: Decimal!
}

input CustomerOrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum!]
  status: [OrderStatusFilter!]
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  source: [OrderSourceFilter!]
  isHistorical: Boolean
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
  payoutStatus: [OrderPayoutStatusEnum!]
  vendorPayouts: [ID]
  payouts: [ID]
}

enum OrderStatusFilter {
  READY_TO_FULFILL
  READY_TO_CAPTURE
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  DELIVERED
  CANCELED
}

enum OrderSourceFilter {
  CHECKOUT
  DRAFT
  QUOTE
  MANUAL
  EXTERNAL
}

enum OfferOrderSubStatusFilter {
  OFFER_APPROVED
  OFFER_CANCELLED
  OFFER_CREATED
  OFFER_EXPIRED
  OFFER_NEGOTIATING
  OFFER_REJECTED
}

input OrderSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort orders by the selected field.
  """
  field: OrderSortField!
}

enum OrderSortField {
  """
  Sort orders by number.
  """
  NUMBER

  """
  Sort orders by creation date.
  """
  CREATION_DATE

  """
  Sort orders by update date.
  """
  UPDATE_DATE

  """
  Sort orders by customer.
  """
  CUSTOMER

  """
  Sort orders by payment.
  """
  PAYMENT

  """
  Sort orders by payment date.
  """
  PAYMENT_DATE

  """
  Sort orders by fulfillment status.
  """
  FULFILLMENT_STATUS

  """
  Sort orders by total.
  """
  TOTAL

  """
  Sort orders by po numbers.
  """
  PO_NUMBERS

  """
  Sort orders by external id.
  """
  EXTERNAL_ID

  """
  Sort orders by external source.
  """
  EXTERNAL_SOURCE
}

type NauticalOrderCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [NauticalOrderCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type NauticalOrderCountableEdge {
  """
  The item at the end of the edge.
  """
  node: NauticalOrder!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input CustomerNauticalOrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum!]
  status: [OrderStatusFilter!]
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  source: [OrderSourceFilter!]
  isHistorical: Boolean
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
}

type UserPermission {
  """
  Internal code for permission.
  """
  code: PermissionEnum!

  """
  Describe action(s) allowed to do by permission.
  """
  name: String!

  """
  List of user permission groups which contains this permission.
  """
  sourcePermissionGroups(
    """
    ID of user whose groups should be returned.
    """
    userId: ID
  ): [Group!]!
}

"""
Represents permission group data.
"""
type Group implements Node {
  """
  The ID of the object
  """
  id: ID!
  name: String!

  """
  List of group permissions
  """
  permissions: [Permission!]!

  """
  List of group users
  """
  users: [User!]!

  """
  True, if the currently authenticated user has rights to manage a group.
  """
  userCanManage: Boolean!
}

"""
History log of the customer.
"""
type CustomerEvent implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime

  """
  Customer event type.
  """
  type: CustomerEventsEnum

  """
  User who performed the action.
  """
  user: User

  """
  Content of the event.
  """
  message: String

  """
  Number of objects concerned by the event.
  """
  count: Int

  """
  The concerned order.
  """
  order: Order

  """
  The concerned order line.
  """
  orderLine: OrderLine

  """
  The concerned nautical order.
  """
  nauticalOrder: NauticalOrder
}

enum CustomerEventsEnum {
  """
  The account was created
  """
  ACCOUNT_CREATED

  """
  Password reset link was sent to the customer
  """
  PASSWORD_RESET_LINK_SENT

  """
  The account password was reset
  """
  PASSWORD_RESET

  """
  The user requested to change the account's email address.
  """
  EMAIL_CHANGED_REQUEST

  """
  The account password was changed
  """
  PASSWORD_CHANGED

  """
  The account email address was changed
  """
  EMAIL_CHANGED

  """
  An order was placed
  """
  PLACED_ORDER

  """
  A note was added
  """
  NOTE_ADDED_TO_ORDER

  """
  A digital good was downloaded
  """
  DIGITAL_LINK_DOWNLOADED

  """
  A customer was deleted
  """
  CUSTOMER_DELETED

  """
  A customer's name was edited
  """
  NAME_ASSIGNED

  """
  A customer's email address was edited
  """
  EMAIL_ASSIGNED

  """
  A note was added to the customer
  """
  NOTE_ADDED
}

"""
Represents a payment source stored for user in payment gateway, such as credit card.
"""
type PaymentSource {
  """
  Stored payment method ID.
  """
  id: String!

  """
  Payment gateway name.
  """
  gateway: String!

  """
  Stored credit card details if available.
  """
  creditCardInfo: CreditCard
}

type WishlistCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [WishlistCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type WishlistCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Wishlist!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input WishlistItemInputFilter {
  expiry: DateRangeInput
}

input WishlistItemSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort wishlist items by the selected field.
  """
  field: WishlistItemSortField!
}

enum WishlistItemSortField {
  """
  Sort wishlist items by created at.
  """
  CREATED_AT
}

"""
An enumeration.
"""
enum WebhookSampleEventTypeEnum {
  AGREEMENT_CREATED
  AGREEMENT_DELETED
  AGREEMENT_UPDATED
  CATEGORY_CREATED
  CATEGORY_DELETED
  CATEGORY_UPDATED
  CHECKOUT_CREATED
  CHECKOUT_UPDATED
  COLLECTION_CREATED
  COLLECTION_DELETED
  COLLECTION_UPDATED
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  CUSTOMER_DELETED
  FULFILLMENT_CREATED
  INVOICE_DELETED
  INVOICE_REQUESTED
  INVOICE_SENT
  MICROSITE_CREATED
  MICROSITE_UPDATED
  NAUTICAL_ORDER_CANCELLED
  NAUTICAL_ORDER_CREATED
  NAUTICAL_ORDER_FULFILLED
  NAUTICAL_ORDER_FULLY_PAID
  NAUTICAL_ORDER_UPDATED
  ORDER_CANCELLED
  ORDER_CREATED
  ORDER_FULFILLED
  ORDER_FULLY_PAID
  ORDER_UPDATED
  PAYMENT_CREATED
  PAYMENT_UPDATED
  PAYOUT_CREATED
  PAYOUT_UPDATED
  PAYOUT_DELETED
  PRICE_BOOK_CREATED
  PRICE_BOOK_UPDATED
  PRODUCT_CREATED
  PRODUCT_DELETED
  PRODUCT_UPDATED
  REFUND_CREATED
  REFUND_DELETED
  REFUND_UPDATED
  SELLER_CREATED
  SELLER_UPDATED
  SELLER_AGREEMENT_ACKNOWLEDGED
  SELLER_AGREEMENT_DECLINED
  VARIANT_CREATED
  VARIANT_DELETED
  VARIANT_UPDATED
  STOCK_CREATED
  STOCK_DELETED
  STOCK_UPDATED
  STOCK_ALLOCATED
  STOCK_DEALLOCATED
  VENDOR_PAYOUT_CREATED
  VENDOR_PAYOUT_UPDATED
  WAREHOUSE_CREATED
  WAREHOUSE_DELETED
  WAREHOUSE_UPDATED
}

type WebhookEventLogCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [WebhookEventLogCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type WebhookEventLogCountableEdge {
  """
  The item at the end of the edge.
  """
  node: WebhookEventLog!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
History log of all webhook events.
"""
type WebhookEventLog implements Node {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!

  """
  Created event time. Naming is used to keep consistent with OrderEvent/SellerEvent naming
  """
  date: DateTime!
  targetUrl: String
  eventType: String!

  """
  Expect a webhook_id only if direction is EMITTED
  """
  webhookId: String

  """
  Expect a generic webhook transaction id only if direction is EMITTED
  """
  transactionId: String
  appId: String
  pluginId: String
  payload: JSONString!
  error: String

  """
  Describes the direction of the logged webhook (RECEIVED or EMITTED)
  """
  direction: WebhookDirectionEnum
}

enum WebhookDirectionEnum {
  """
  Webhook has been received
  """
  RECEIVED

  """
  Webhook has been sent
  """
  EMITTED
}

type WebhookJobCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [WebhookJobCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type WebhookJobCountableEdge {
  """
  The item at the end of the edge.
  """
  node: WebhookJob!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents job data of incoming webhook.
"""
type WebhookJob implements Node & Job {
  """
  The ID of the object
  """
  id: ID!

  """
  Job status.
  """
  status: JobStatusEnum!

  """
  Job message.
  """
  message: String

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!
  tenant: Tenant!
  body: JSONString
  requestMeta: JSONString
  source: String
  type: GenericWebhookTransactionType
  vendorEntityLink: String
  marketplaceEntityLink: String
  seller: Seller
}

"""
An enumeration.
"""
enum GenericWebhookTransactionType {
  """
  A payload for order create was received
  """
  ORDER_CREATE

  """
  A payload for order update was received
  """
  ORDER_UPDATE

  """
  A payload for order cancel was received
  """
  ORDER_CANCEL

  """
  A payload for product create was received.
  """
  PRODUCT_CREATE

  """
  A payload for product update was received.
  """
  PRODUCT_UPDATE

  """
  A payload for product delete was received.
  """
  PRODUCT_DELETE

  """
  A payload for product inventory tracking update was received.
  """
  INVENTORY_TRACKING_UPDATE

  """
  A payload for stock create was received.
  """
  STOCK_CREATE

  """
  A payload for stock update was received.
  """
  STOCK_UPDATE

  """
  A payload for stock delete was received.
  """
  STOCK_DELETE

  """
  A payload for warehouse create was received.
  """
  WAREHOUSE_CREATE

  """
  A payload for warehouse update was received.
  """
  WAREHOUSE_UPDATE

  """
  A payload for warehouse delete was received.
  """
  WAREHOUSE_DELETE

  """
  A payload for fulfillment create was received.
  """
  FULFILLMENT_CREATE

  """
  A payload for fulfillment update was received.
  """
  FULFILLMENT_UPDATE

  """
  A paylod for customer create was received
  """
  CUSTOMER_CREATE

  """
  A payload for seller create was received
  """
  SELLER_CREATE

  """
  A payload for vehicles was received
  """
  VEHICLE_PAYLOAD

  """
  A payload for item shipment that was received
  """
  ITEM_SHIP_NOTIFY
}

input WebhookJobFilterInput {
  status: [WebhookJobStatus!]
  search: String
  source: [WebhookJobSource!]
  type: [WebhookJobType!]
  createdAt: DateTime
  created: DateRangeInput
}

enum WebhookJobStatus {
  SUCCESS
  FAILED
  PENDING
  DELETED
}

enum WebhookJobSource {
  DEFAULT
  SHOPIFY
}

enum WebhookJobType {
  ORDER_CREATE
  ORDER_UPDATE
}

input WebhookJobSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort webhook_jobs by the selected field.
  """
  field: WebhookJobSortField!
}

enum WebhookJobSortField {
  """
  Sort webhook jobs by source.
  """
  SOURCE

  """
  Sort webhook jobs by type.
  """
  TYPE

  """
  Sort webhook jobs by status.
  """
  STATUS

  """
  Sort webhook jobs by created at.
  """
  CREATED_AT
}

input WarehouseFilterInput {
  seller: ID
  search: String
  ids: [ID]
}

input WarehouseSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort warehouses by the selected field.
  """
  field: WarehouseSortField!
}

enum WarehouseSortField {
  """
  Sort warehouses by name.
  """
  NAME

  """
  Sort warehouses by external id.
  """
  EXTERNAL_ID

  """
  Sort warehouses by external source.
  """
  EXTERNAL_SOURCE
}

type StockCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [StockCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type StockCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Stock!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input StockFilterInput {
  quantity: Decimal
  search: String
}

"""
Content object.
"""
type Content implements Node {
  publicationDate: Date
  isPublished: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The ID of the object
  """
  id: ID!
  slug: String!
  isPage: Boolean!
  lockedBy: User
  lockExpiry: DateTime

  """
  Data of the latest published content version to render the view.
  """
  data: JSONString!

  """
  Data of the latest unpublished content version to render the editor view.
  """
  draftData: JSONString!

  """
  Revision number of the latest content version.
  """
  revision: Int!

  """
  Whether the content has an active draft.
  """
  hasActiveDraft: Boolean

  """
  Content page data.
  """
  contentPageData: ContentPageData
}

"""
Content page data.
"""
type ContentPageData implements Node {
  """
  SEO title for a content page.
  """
  seoTitle: String

  """
  SEO description for a content page.
  """
  seoDescription: String

  """
  The ID of the object
  """
  id: ID!
}

type ContentCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ContentCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ContentCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Content!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input ContentFilterInput {
  search: String
}

input ContentSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort content by the selected field.
  """
  field: ContentSortField!
}

enum ContentSortField {
  SLUG
  CREATED_AT
  UPDATED_AT
  LOCKED_BY
  LOCK_EXPIRY
  IS_PUBLISHED
}

"""
Media object.
"""
type Media implements Node {
  tenant: Tenant!

  """
  The ID of the object
  """
  id: ID!

  """
  Title of media object.
  """
  title: String!

  """
  Date and time media was created.
  """
  createdAt: String!
  image: Image

  """
  Alternate text for the image of media object.
  """
  alt: String!
}

type MediaCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [MediaCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type MediaCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Media!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input MediaFilterInput {
  search: String
}

input MediaSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort media by the selected field.
  """
  field: MediaSortField!
}

enum MediaSortField {
  TITLE
  CREATED_AT
}

type TenantCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [TenantCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type TenantCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Tenant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a shop resource containing general shop data and configuration.
"""
type Shop {
  """
  List of available payment gateways.
  """
  availablePaymentGateways(
    """
    A currency for which gateways will be returned.
    """
    currency: String
  ): [PaymentGateway!]!

  """
  Customer's geolocalization data.
  """
  geolocalization: Geolocalization

  """
  List of countries available in the shop.
  """
  countries(
    """
    A language code to return the translation for.
    """
    languageCode: LanguageCodeEnum
  ): [CountryDisplay!]!

  """
  List of supported currencies.
  """
  supportedCurrencies: [NauticalCurrency!]!

  """
  Shop's default country.
  """
  defaultCountry: CountryDisplay

  """
  Default shop's email sender's name.
  """
  defaultMailSenderName: String

  """
  Default shop's email sender's address.
  """
  defaultMailSenderAddress: String

  """
  Default shop's email support's address.
  """
  defaultMailSupportAddress: String

  """
  Shop's description.
  """
  description: String

  """
  Shop's domain data.
  """
  domain: Domain!

  """
  API url for the shop.
  """
  apiUrl: String

  """
  Dashboard url for the shop.
  """
  dashboardUrl: String

  """
  Whether the marketplace has enabled quote orders.
  """
  enableQuoteOrders: Boolean

  """
  Whether the marketplace has enabled offer orders.
  """
  enableOfferOrders: Boolean
    @deprecated(reason: "This will be removed on February 20, 2025.")

  """
  Shop's name.
  """
  name: String!

  """
  List of available permissions.
  """
  permissions: [Permission!]!

  """
  List of possible phone prefixes.
  """
  phonePrefixes: [String!]!

  """
  Include taxes in prices.
  """
  includeTaxesInPrices: Boolean!

  """
  Charge taxes on shipping.
  """
  chargeTaxesOnShipping: Boolean!

  """
  Enable inventory tracking.
  """
  trackInventoryByDefault: Boolean

  """
  Default weight unit.
  """
  defaultWeightUnit: WeightUnitsEnum

  """
  Enable automatic fulfillment for all digital products.
  """
  automaticFulfillmentDigitalProducts: Boolean

  """
  Default number of max downloads per digital content URL.
  """
  defaultDigitalMaxDownloads: Int

  """
  Default number of days which digital content URL will be valid.
  """
  defaultDigitalUrlValidDays: Int

  """
  Company address.
  """
  companyAddress: Address

  """
  URL of a view where customers can set their password.
  """
  customerSetPasswordUrl: String

  """
  Is authenticated user required for checkout.
  """
  loginForCheckout: Boolean

  """
  Is authenticated user required for to view product price information.
  """
  loginForPrice: Boolean

  """
  Gets active plugins.
  """
  activePlugins: [Plugin!]!

  """
  None if shop does not use Crisp, otherwise this contains Crisp Website ID.
  """
  crispWebsiteId: String
  geolocationEnabled: Boolean
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Determines whether seller products require approval
  """
  requireProductApproval: Boolean

  """
  The IANA timezone to use when displaying all dates and times
  """
  timezone: String!

  """
  The shop's active checkout theme.
  """
  checkoutTheme: CheckoutTheme

  """
  The shop's active storefront theme.
  """
  storefrontTheme: StorefrontTheme

  """
  The seller onboarding settings for the shop.
  """
  sellerOnboardingSettings: SellerOnboardingSettings
}

"""
Represents customers's geolocalization data.
"""
type Geolocalization {
  """
  Country of the user acquired by his IP address.
  """
  country: CountryDisplay
}

"""
An enumeration.
"""
enum LanguageCodeEnum {
  AR
  AZ
  BG
  BN
  CA
  CS
  DA
  DE
  EL
  EN
  ES
  ES_CO
  ET
  FA
  FI
  FR
  HI
  HU
  HY
  ID
  IS
  IT
  JA
  KA
  KM
  KO
  LT
  MN
  MY
  NB
  NL
  PL
  PT
  PT_BR
  RO
  RU
  SK
  SL
  SQ
  SR
  SV
  SW
  TA
  TH
  TR
  UK
  VI
  ZH_HANS
  ZH_HANT
}

"""
Represents shop's domain.
"""
type Domain {
  """
  The host name of the domain.
  """
  host: String!

  """
  Shop's absolute URL.
  """
  url: String!
}

"""
Plugin.
"""
type Plugin implements Node {
  id: ID!
  privateMetadata: JSONString!
  metadata: JSONString!
  company: String
  category: PluginConfigurationCategory
  descriptionShort: String!
  logoUrl: String
  created: DateTime!
  externalUrl: String
  supportUrl: String
  allowSellers: Boolean
  allowManyActivePluginsInCategory: Boolean!
  tenant: Tenant!
  identifier: String!
  name: String!
  description: String!
  active: Boolean!
  configuration: [ConfigurationItem!]
  defaultConfiguration: [ConfigurationItem!]
  supportSellerConfiguration: Boolean
  version: String!
}

"""
An enumeration.
"""
enum PluginConfigurationCategory {
  """
  Auth
  """
  AUTH

  """
  Fulfillment
  """
  FULFILLMENT

  """
  Ecommerce
  """
  ECOMMERCE

  """
  Data Connectivity
  """
  DATA_CONNECTIVITY

  """
  Order Extensions
  """
  ORDER_EXTENSIONS

  """
  Utility
  """
  UTILITY

  """
  Taxes
  """
  TAXES

  """
  Marketing
  """
  MARKETING

  """
  Locations
  """
  LOCATIONS

  """
  Payments
  """
  PAYMENTS
}

"""
Stores information about a single configuration field.
"""
type ConfigurationItem {
  """
  Name of the field.
  """
  name: String!

  """
  Current value of the field.
  """
  value: String

  """
  Type of the field.
  """
  type: ConfigurationTypeFieldEnum

  """
  Help text for the field.
  """
  helpText: String

  """
  Label for the field.
  """
  label: String

  """
  Options for the field.
  """
  options: [String!]
}

"""
An enumeration.
"""
enum ConfigurationTypeFieldEnum {
  STRING
  MULTILINE
  BOOLEAN
  SECRET
  SECRET_MULTILINE
  PASSWORD
  SINGLE_SELECT
  OUTPUT
}

"""
Represents a checkout page's options.
"""
type CheckoutTheme implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  URL of the confirmation page.
  """
  confirmationUrl: String!
}

"""
Represents a storefront's theme options.
"""
type StorefrontTheme implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Primary color in hex.
  """
  primaryColor: String

  """
  Background color in hex.
  """
  backgroundColor: String
  logo: Image
  faviconImage: Image

  """
  URL of the favicon.
  """
  faviconUrl: String

  """
  Font to be used on the storefront
  """
  font: Font

  """
  Font color in hex.
  """
  fontColor: String
}

"""
Font for a storefront.
"""
type Font implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Name of the font.
  """
  name: String

  """
  Slug of the font.
  """
  slug: String
}

"""
Represents seller onboarding settings from the MPO.
"""
type SellerOnboardingSettings implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Is the MPO accepting new sellers.
  """
  isAcceptingNewSellers: Boolean

  """
  Summary of the MP for sellers.
  """
  summary: String

  """
  Welcome message set by MP for sellers.
  """
  welcomeMessage: String

  """
  The fulfillment model used by the MP.
  """
  fulfillmentModel: String

  """
  A summary of required documents from sellers.
  """
  requiredDocuments: String

  """
  Text displayed when the MP is not accepting new sellers.
  """
  notAcceptingSellersMessage: String

  """
  Shows if the seller is allowed to import products.
  """
  isProductImportAllowed: Boolean
}

type CustomDomain implements Node {
  """
  The ID of the object
  """
  id: ID!
  domain: String!
  status: DomainStatusEnum!
  errorDetails: String!
  sslCertName: String!
}

"""
An enumeration.
"""
enum DomainStatusEnum {
  UNVERIFIED
  DNS_VERIFIED
  PROVISIONING
  PROVISIONED
  ERROR
  QUEUED_FOR_DELETION
  DELETING
  DELETED
}

input ShippingZoneFilterInput {
  seller: ID
  search: String
}

type PublicSeller implements Node {
  """
  The ID of the object
  """
  id: ID!
  companyName: String!
  slug: String!
  logo(
    """
    Size of the store's logo.
    """
    size: Int
  ): Image
  status: SellerStatus!
  banner(
    """
    Size of the store's banner.
    """
    size: Int
  ): Image
  storeDescription: String!
  products(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductCountableConnection!
  variants(
    offset: Int
    before: String
    after: String
    first: Int
    last: Int
  ): ProductVariantCountableConnection!
}

type SellerCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [SellerCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type SellerCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Seller!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input SellerFilterInput {
  status: [SellerStatusFilter!]
  search: String
  created: DateRangeInput
  storefront: Boolean
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

enum SellerStatusFilter {
  APPLYING
  PENDING
  APPROVED
  DECLINED
  SUSPENDED
  BANNED
  DEACTIVATED
  PAUSED
}

input SellerSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort sellers by the selected field.
  """
  field: SellerSortField!
}

enum SellerSortField {
  """
  Sort sellers by company name.
  """
  COMPANY_NAME

  """
  Sort sellers by owner.
  """
  OWNER

  """
  Sort sellers by status.
  """
  STATUS

  """
  Sort sellers by created.
  """
  CREATED
}

type UserCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type UserCountableEdge {
  """
  The item at the end of the edge.
  """
  node: User!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type AgreementCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [AgreementCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AgreementCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Agreement!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type SellerCards {
  newSellers: Int
  sellerOrders: Int
  sellerCommissions: Money
}

enum ReportingPeriod {
  TODAY
  THIS_MONTH
}

type SellerDetailCards {
  sellerOrders: Int
  sellerCommissions: Money
  sellerSales: TaxedMoney
}

type RefundCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [RefundCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type RefundCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Refund!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input RefundFilterInput {
  name: String
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  status: RefundStatusEnum
  buyer: String
  externalId: String
  token: String
}

input RefundSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort refunds by the selected field.
  """
  field: RefundSortField!
}

enum RefundSortField {
  """
  Sort refund by name.
  """
  NAME

  """
  Sort refund by created.
  """
  CREATED

  """
  Sort refund by updated.
  """
  UPDATED

  """
  Sort refund by status.
  """
  STATUS

  """
  Sort refund by buyer.
  """
  BUYER

  """
  Sort refund by external id.
  """
  EXTERNAL_ID

  """
  Sort refund by token.
  """
  TOKEN
}

type DigitalContentCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [DigitalContentCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type DigitalContentCountableEdge {
  """
  The item at the end of the edge.
  """
  node: DigitalContent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input CategoryFilterInput {
  search: String
  ids: [ID]
  customFields: [AttributeInput!]
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

input CategorySortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort categories by the selected field.
  """
  field: CategorySortField!
}

enum CategorySortField {
  """
  Sort categories by name.
  """
  NAME

  """
  Sort categories by product count.
  """
  PRODUCT_COUNT

  """
  Sort categories by subcategory count.
  """
  SUBCATEGORY_COUNT

  """
  Sort categories by external id.
  """
  EXTERNAL_ID

  """
  Sort categories by external source.
  """
  EXTERNAL_SOURCE
}

input CollectionFilterInput {
  published: CollectionPublished
  search: String
  ids: [ID]
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  isVisible: CollectionVisible
  customFields: [AttributeInput!]
}

enum CollectionPublished {
  PUBLISHED
  HIDDEN
}

enum CollectionVisible {
  VISIBLE
  HIDDEN
}

input CollectionSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort collections by the selected field.
  """
  field: CollectionSortField!
}

enum CollectionSortField {
  """
  Sort collections by name.
  """
  NAME

  """
  Sort collections by availability.
  """
  AVAILABILITY

  """
  Sort collections by product count.
  """
  PRODUCT_COUNT

  """
  Sort collections by publication date.
  """
  PUBLICATION_DATE
}

input ProductTypeFilterInput {
  search: String
  productType: ProductTypeEnum
  configurable: ProductTypeConfigurable
  ids: [ID]
  showExternal: Boolean
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

enum ProductTypeEnum {
  DIGITAL
  SHIPPABLE
}

enum ProductTypeConfigurable {
  CONFIGURABLE
  SIMPLE
}

input ProductTypeSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort product types by the selected field.
  """
  field: ProductTypeSortField!
}

enum ProductTypeSortField {
  """
  Sort products by name.
  """
  NAME

  """
  Sort products by type.
  """
  DIGITAL

  """
  Sort products by shipping.
  """
  SHIPPING_REQUIRED

  """
  Sort products by external id.
  """
  EXTERNAL_ID

  """
  Sort products by external source.
  """
  EXTERNAL_SOURCE
}

type PriceBookCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBook!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PriceBookFilterInput {
  search: String
  deleted: Boolean
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

input PriceBookSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebooks by the selected field.
  """
  field: PriceBookSortField!
}

enum PriceBookSortField {
  """
  Sort pricebook by name.
  """
  NAME
}

type PriceBookVariantCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookVariantCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookVariantCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookVariant!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PriceBookVariantFilterInput {
  search: String
}

input PriceBookVariantSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebook variants by the selected field.
  """
  field: PriceBookVariantSortField!
}

enum PriceBookVariantSortField {
  """
  Sort pricebook variant history by number.
  """
  NUMBER

  """
  Sort pricebook variant history by type.
  """
  TYPE

  """
  Sort pricebook variant history by price.
  """
  PRICE

  """
  Sort pricebook variant history by percentage.
  """
  PERCENTAGE
}

type PriceBookProductCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookProductCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookProductCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookProduct!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PriceBookProductFilterInput {
  search: String
}

input PriceBookProductSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebooks products by the selected field.
  """
  field: PriceBookProductSortField!
}

enum PriceBookProductSortField {
  """
  Sort pricebook product history by number.
  """
  NUMBER

  """
  Sort pricebook product history by type.
  """
  TYPE

  """
  Sort pricebook product history by price.
  """
  PRICE

  """
  Sort pricebook product history by percentage.
  """
  PERCENTAGE
}

type PriceBookProductTypeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookProductTypeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookProductTypeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookProductType!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PriceBookProductTypeFilterInput {
  search: String
}

input PriceBookProductTypeSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebooks products types by the selected field.
  """
  field: PriceBookProductTypeSortField!
}

enum PriceBookProductTypeSortField {
  """
  Sort pricebook product type history by number.
  """
  NUMBER

  """
  Sort pricebook product type history by type.
  """
  TYPE

  """
  Sort pricebook product type history by price.
  """
  PRICE

  """
  Sort pricebook product type history by percentage.
  """
  PERCENTAGE
}

type PriceBookVariantHistoryCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookVariantHistoryCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookVariantHistoryCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookVariantHistory!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Variants added to the PriceBook
"""
type PriceBookVariantHistory implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook
  variantId: Int!
  valueType: PriceBookVariantHistoryValueType!
  currency: String!
  createdAt: Date!

  """
  Amount to decrease or increase for the variant if type selected is override orpercentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the variant's price if type selected is fixed.
  """
  percentage: Float!

  """
  Determines if the variant attached to the pricebook is removed or deleted.
  """
  deleted: Boolean!
}

"""
An enumeration.
"""
enum PriceBookVariantHistoryValueType {
  """
  Override
  """
  OVERRIDE

  """
  Adjust Percentage
  """
  ADJUST_PERCENTAGE

  """
  Adjust Fixed
  """
  ADJUST_FIXED
}

input PriceBookVariantHistoryFilterInput {
  search: String
}

input PriceBookVariantHistorySortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebook variants history by the selected field.
  """
  field: PriceBookVariantHistorySortField!
}

enum PriceBookVariantHistorySortField {
  """
  Sort pricebook variant history by number.
  """
  NUMBER

  """
  Sort pricebook variant history by type.
  """
  TYPE

  """
  Sort pricebook variant history by price.
  """
  PRICE

  """
  Sort pricebook variant history by percentage.
  """
  PERCENTAGE

  """
  Sort pricebook variant history by creation date.
  """
  CREATION_DATE
}

type PriceBookProductHistoryCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookProductHistoryCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookProductHistoryCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookProductHistory!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Products added to the PriceBook
"""
type PriceBookProductHistory implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook
  productId: Int!
  valueType: PriceBookProductHistoryValueType!
  currency: String!
  createdAt: Date!

  """
  Amount to decrease or increase for the variants of the product if type selected isoverride or percentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the product's variants price if type selectedis fixed.
  """
  percentage: Float!

  """
  Determines if the product's variant attached to the pricebook is removed or deleted.
  """
  deleted: Boolean!
}

"""
An enumeration.
"""
enum PriceBookProductHistoryValueType {
  """
  adjust_percentage
  """
  ADJUST_PERCENTAGE

  """
  adjust_fixed
  """
  ADJUST_FIXED
}

input PriceBookProductHistoryFilterInput {
  search: String
}

input PriceBookProductHistorySortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebooks products history by the selected field.
  """
  field: PriceBookProductHistorySortField!
}

enum PriceBookProductHistorySortField {
  """
  Sort pricebook product history by number.
  """
  NUMBER

  """
  Sort pricebook product history by type.
  """
  TYPE

  """
  Sort pricebook product history by price.
  """
  PRICE

  """
  Sort pricebook product history by percentage.
  """
  PERCENTAGE

  """
  Sort pricebook product history by creation date.
  """
  CREATION_DATE
}

type PriceBookProductTypeHistoryCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PriceBookProductTypeHistoryCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PriceBookProductTypeHistoryCountableEdge {
  """
  The item at the end of the edge.
  """
  node: PriceBookProductTypeHistory!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Product types added to the PriceBook
"""
type PriceBookProductTypeHistory implements Node {
  """
  The ID of the object
  """
  id: ID!
  priceBook: PriceBook
  productTypeId: Int!
  valueType: PriceBookProductTypeHistoryValueType!
  currency: String!
  createdAt: Date!

  """
  Amount to decrease or increase for the variants of the product type if type selectedis override or percentage.
  """
  price: Money!

  """
  Percentage to decrease or increase for the product type's variants price if typeselected is fixed.
  """
  percentage: Float!

  """
  Determines if the product type's variant attached to the pricebook is removed ordeleted.
  """
  deleted: Boolean!
}

"""
An enumeration.
"""
enum PriceBookProductTypeHistoryValueType {
  """
  adjust_percentage
  """
  ADJUST_PERCENTAGE

  """
  adjust_fixed
  """
  ADJUST_FIXED
}

input PriceBookProductTypeHistoryFilterInput {
  search: String
}

input PriceBookProductTypeHistorySortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pricebooks products history by the selected field.
  """
  field: PriceBookProductTypeHistorySortField!
}

enum PriceBookProductTypeHistorySortField {
  """
  Sort pricebook product type history by number.
  """
  NUMBER

  """
  Sort pricebook product type history by type.
  """
  TYPE

  """
  Sort pricebook product type history by price.
  """
  PRICE

  """
  Sort pricebook product type history by percentage.
  """
  PERCENTAGE

  """
  Sort pricebook product type history by creation date.
  """
  CREATION_DATE
}

input UserSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort users by the selected field.
  """
  field: UserSortField!
}

enum UserSortField {
  """
  Sort users by first name.
  """
  FIRST_NAME

  """
  Sort users by last name.
  """
  LAST_NAME

  """
  Sort users by email.
  """
  EMAIL

  """
  Sort users by order count.
  """
  ORDER_COUNT

  """
  Sort users by vendor.
  """
  VENDOR

  """
  Sort users by company name.
  """
  COMPANY_NAME

  """
  Sort users by is active.
  """
  IS_ACTIVE

  """
  Sort users by external id.
  """
  EXTERNAL_ID

  """
  Sort users by external source.
  """
  EXTERNAL_SOURCE
}

type PluginCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PluginCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Plugin!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PluginFilterInput {
  active: Boolean
  search: String
  isPaymentGateway: Boolean
  seller: ID
}

input PluginSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort plugins by the selected field.
  """
  field: PluginSortField!
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

"""
Customer Tax Certificate information.
"""
type TaxCertificate {
  id: Int
  companyId: String
  signedDate: String
  expirationDate: String
  filename: String
  documentExists: Boolean
  downloadUrl: String
  valid: Boolean
  verified: Boolean
  exemptPercentage: String
  isSingleCertificate: Boolean
  exemptionNumber: String
  exemptionReasonName: String
  exemptionReasonId: Int
  status: String
  createdDate: String
  modifiedDate: String
  taxNumberType: String
  businessNumberType: String
  exposureZoneName: String
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

"""
Represents products import process from 3rd party service or integration.
"""
type CatalogImportProcess implements Node {
  status: CatalogImportProcessStatus!
  message: String
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  Main Celery task ID, that performs action. Can be equal to null, if the process is not started yet. Can be used to revoke running task.
  """
  taskId: String
  externalSource: String!
  finishedAt: DateTime

  """
  The user who triggered this import process.
  """
  createdBy: User

  """
  The seller for whom triggered this import process.
  """
  seller: Seller

  """
  Error message for failed imports.
  """
  internalNotes: String

  """
  The ID of the object
  """
  id: ID!

  """
  List of products in this collection.
  """
  records(
    """
    Filtering options for products.
    """
    filter: CatalogImportProcessLogRecordFilterInput

    """
    Sort products.
    """
    sortBy: CatalogImportProcessLogRecordSortInput

    """
    Return the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Return the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Return the first n elements from the list.
    """
    first: Int

    """
    Return the last n elements from the list.
    """
    last: Int
  ): CatalogImportProcessLogRecordCountableConnection
}

"""
An enumeration.
"""
enum CatalogImportProcessStatus {
  """
  Pending
  """
  PENDING

  """
  Processing
  """
  PROCESSING

  """
  Success
  """
  SUCCESS

  """
  Failed
  """
  FAILED

  """
  Deleted
  """
  DELETED
}

type CatalogImportProcessLogRecordCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CatalogImportProcessLogRecordCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CatalogImportProcessLogRecordCountableEdge {
  """
  The item at the end of the edge.
  """
  node: CatalogImportProcessLogRecord!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
History log of each record processed with catalog import process.
"""
type CatalogImportProcessLogRecord implements Node {
  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!

  """
  Celery task ID, that created this log
  """
  taskId: String
  objectId: String
  operation: CatalogImportProcessLogRecordOperation!

  """
  The name of a models which was processed with catalog import process.
  """
  relatedObjectName: String
}

"""
An enumeration.
"""
enum CatalogImportProcessLogRecordOperation {
  """
  Attribute Created
  """
  ATTRIBUTE_CREATED

  """
  Attribute Updated
  """
  ATTRIBUTE_UPDATED

  """
  Category Created
  """
  CATEGORY_CREATED

  """
  Category Updated
  """
  CATEGORY_UPDATED

  """
  Product Created
  """
  PRODUCT_CREATED

  """
  Product Updated
  """
  PRODUCT_UPDATED

  """
  Product Updated or Created
  """
  PRODUCT_UPDATED_OR_CREATED

  """
  Product Archived
  """
  PRODUCT_ARCHIVED

  """
  Product Type Created
  """
  PRODUCT_TYPE_CREATED

  """
  Product Type Updated
  """
  PRODUCT_TYPE_UPDATED

  """
  Warehouse Created
  """
  WAREHOUSE_CREATED

  """
  Warehouse Updated
  """
  WAREHOUSE_UPDATED
}

input CatalogImportProcessLogRecordFilterInput {
  taskId: String
  objectId: String
  operation: CatalogImportOperation
}

"""
An enumeration.
"""
enum CatalogImportOperation {
  ATTRIBUTE_CREATED
  ATTRIBUTE_UPDATED
  CATEGORY_CREATED
  CATEGORY_UPDATED
  PRODUCT_CREATED
  PRODUCT_UPDATED
  PRODUCT_UPDATED_OR_CREATED
  PRODUCT_ARCHIVED
  PRODUCT_TYPE_CREATED
  PRODUCT_TYPE_UPDATED
  WAREHOUSE_CREATED
  WAREHOUSE_UPDATED
}

input CatalogImportProcessLogRecordSortInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort catalog_import_processes_log_record by the selected field.
  """
  field: CatalogImportProcessLogRecordSortField!
}

enum CatalogImportProcessLogRecordSortField {
  """
  Sort users by created at.
  """
  CREATED_AT
}

type CatalogImportProcessCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CatalogImportProcessCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CatalogImportProcessCountableEdge {
  """
  The item at the end of the edge.
  """
  node: CatalogImportProcess!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input CatalogImportProcessFilterInput {
  createdBy: String
  seller: String
}

input CatalogImportProcessSortInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort catalog_import_processes by the selected field.
  """
  field: CatalogImportProcessSortField!
}

enum CatalogImportProcessSortField {
  """
  Sort users by created at.
  """
  CREATED_AT

  """
  Sort users by finished at.
  """
  FINISHED_AT
}

"""
Avalara support tax exemption.
"""
type TaxExemptCode {
  """
  Tax exempt code.
  """
  code: String!

  """
  Tax exempt codename.
  """
  name: String!

  """
  Tax exempt code description.
  """
  description: String!

  """
  List of available countries for tax exempt code.
  """
  validCountries: [String!]
}

"""
Information about all forms from Typeform.
"""
type TypeformForms {
  """
  Total number of items.
  """
  totalItems: Int

  """
  Number of pages
  """
  pageCount: Int

  """
  Type of the field.
  """
  items: [TypeformFormsItem!]
}

type TypeformFormsItem {
  Links: TypeformFormsItemLink
  id: String
  lastUpdatedAt: String
  self: TypeformFormsItemSelf
  theme: TypeformFormsItemSelf
  title: String
}

type TypeformFormsItemLink {
  display: String
}

type TypeformFormsItemSelf {
  href: String
}

type TypeformForm {
  id: String
  title: String
  language: String
  fields: [TypeformFormFields!]
  hidden: [String!]
}

type TypeformFormFields {
  attachment: TypeformFormAttachment
  fieldType: String
  id: String
  layout: TypeformFormLayout
  name: String
  options: [TypeformFormOption!]
  ref: String
  required: Boolean
  title: String
  properties: TypeformFormProperties
  type: String
}

type TypeformFormAttachment {
  type: String
  href: String
  properties: TypeformFormProperties
}

type TypeformFormProperties {
  description: String
  fields: [TypeformGroupProperties!]
}

type TypeformGroupProperties {
  id: String
  title: String
  ref: String
  type: String
}

type TypeformFormLayout {
  type: String
  placement: String
  attachment: TypeformFormAttachment
}

type TypeformFormOption {
  label: String
}

"""
Flow mapping for a plugin
"""
type Flow {
  id: ID!
  tenant: Tenant!
  identifier: String!
  seller: Seller
  process: FlowProcess!
  mapping: JSONString!
  formId: String!
}

"""
An enumeration.
"""
enum FlowProcess {
  """
  customer_creation
  """
  CUSTOMER_CREATION

  """
  seller_creation
  """
  SELLER_CREATION
}

input StripeClientPaymentData {
  amount: PositiveDecimal
  currency: String
  token: String
  billing: AddressInput
  shipping: AddressInput

  """
  The ID of the checkout this payment token will be used for
  """
  checkoutId: ID

  """
  The ID of the NauticalOrder this payment token will be used for
  """
  nauticalOrderId: ID
  customerEmail: String
  customerId: String

  """
  If the gateway requires it, the URL to redirect to after payment is complete.
  """
  returnUrl: String
  paymentMethodToken: String
}

"""
Positive Decimal scalar implementation.

Should be used in places where value must be positive.
"""
scalar PositiveDecimal

input AddressInput {
  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  Company or organization.
  """
  companyName: String

  """
  Address.
  """
  streetAddress1: String

  """
  Address.
  """
  streetAddress2: String

  """
  City.
  """
  city: String

  """
  District.
  """
  cityArea: String

  """
  Postal code.
  """
  postalCode: String

  """
  Country.
  """
  country: CountryCode

  """
  State or province.
  """
  countryArea: String

  """
  Phone number.
  """
  phone: String
}

type AvalaraRequestLogCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [AvalaraRequestLogCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AvalaraRequestLogCountableEdge {
  """
  The item at the end of the edge.
  """
  node: AvalaraRequestLog!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents products import process from 3rd party service or integration.
"""
type AvalaraRequestLog implements Node {
  createdAt: DateTime!
  requestUrl: String
  requestData: JSONString!
  responseData: JSONString!
  error: String

  """
  The ID of the object
  """
  id: ID!
}

type CheckoutEventCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CheckoutEventCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CheckoutEventCountableEdge {
  """
  The item at the end of the edge.
  """
  node: CheckoutEvent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents checkout event.
"""
type CheckoutEvent implements Node {
  tenant: Tenant!

  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!
  type: CheckoutEventType!
  checkoutId: String!
}

"""
An enumeration.
"""
enum CheckoutEventType {
  """
  Checkout started
  """
  CHECKOUT_STARTED

  """
  Shipping information entered
  """
  SHIPPING_INFORMATION_ENTERED

  """
  Payment information entered
  """
  PAYMENT_INFORMATION_ENTERED

  """
  Purchase
  """
  PURCHASE
}

input CheckoutEventFilterInput {
  createdAt: DateTimeRangeInput
  type: [CheckoutEventType!]
}

input CheckoutEventSortInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort checkout_events by the selected field.
  """
  field: CheckoutEventSortField!
}

enum CheckoutEventSortField {
  """
  Sort checkout events by created at.
  """
  CREATED_AT

  """
  Sort checkout events by type.
  """
  TYPE
}

type PayoutCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PayoutCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PayoutCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Payout!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PayoutFilterInput {
  status: [PayoutStatusFilter!]
  search: String
  created: DateRangeInput
  netSales: PriceRangeInput
}

enum PayoutStatusFilter {
  paid
  draft
  archived
  locked
}

input PayoutSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort payouts by the selected field.
  """
  field: PayoutSortField!
}

enum PayoutSortField {
  """
  Sort payouts by report.
  """
  REPORT

  """
  Sort payouts by end date.
  """
  END_DATE

  """
  Sort payouts by created.
  """
  CREATED

  """
  Sort payouts by status.
  """
  STATUS
}

type VendorPayoutReport {
  included: VendorPayoutReportSubset
  excluded: VendorPayoutReportSubset
}

type VendorPayoutReportSubset {
  category: String
  columns: [ColumnObjectType!]
  filters: [FilterObjectType!]
  summary: OrderVendorSummaryType
  report: [OrderVendorReportType!]
  title: String
}

type ColumnObjectType {
  """
  Display label for the column.
  """
  display: String!

  """
  Type which describes recommended format (how displaying value to users) for returned values for the column.
  p.s.
  Returned format (in our API) of the values itself described in a type of the 'report' field.
  """
  fieldType: String!

  """
  The name of the column field in the query input.
  """
  name: String!

  """
  Recommended ordering number for this column.
  """
  order: Int!
}

type FilterObjectType {
  """
  Display label for the filter.
  """
  display: String!

  """
  Expected arbitrary type indicator of field as a string, e.g 'Date', 'Integer', 'Money', or 'String' (only used as a guideline for formatting insights)
  """
  fieldType: String!

  """
  The name of the filter field in the query input.
  """
  name: String!

  """
  Optional placeholder for the filter.
  """
  placeholder: String!

  """
  Is this filter required in the query input or not.
  """
  required: Boolean!

  """
  Transferred value for the filter.
  """
  value: String
}

type OrderVendorSummaryType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  vendors: Int
  adjustments: Decimal
  penalties: Decimal
  refunds: Decimal
  fees: Decimal
}

type OrderVendorReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  vendorId: Int
  vendor: Vendor
  vendorPayout: VendorPayout
  adjustments: Decimal
  penalties: Decimal
  refunds: Decimal
  fees: Decimal
}

union Vendor = Seller | User

type SingleVendorPayoutReport {
  payouts: [SingleVendorReportType!]
  summary: SingleVendorSummaryType
}

type SingleVendorReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Decimal
  adjustments: Decimal
  penalties: Decimal
  refunds: Decimal
  fees: Decimal
  startDate: String
  endDate: String
  payoutEndDate: String
  status: String
  vendorPayout: VendorPayout
}

type SingleVendorSummaryType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  adjustments: Decimal
  penalties: Decimal
  refunds: Decimal
  fees: Decimal
}

type PaymentCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PaymentCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Payment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
A static page that can be manually added by a shop operator through the dashboard.
"""
type Page implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!
  publicationDate: Date
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  contentHtml: String!
  seoTitle: String
  seoDescription: String
  slug: String!
  title: String!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Whether the page is published.
  """
  isPublished: Boolean!
}

type PageCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [PageCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type PageCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Page!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PageSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort pages by the selected field.
  """
  field: PageSortField!
}

enum PageSortField {
  """
  Sort pages by title.
  """
  TITLE

  """
  Sort pages by slug.
  """
  SLUG

  """
  Sort pages by visibility.
  """
  VISIBILITY

  """
  Sort pages by creation date.
  """
  CREATION_DATE

  """
  Sort pages by publication date.
  """
  PUBLICATION_DATE
}

input PageFilterInput {
  search: String
}

type OrderEventCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [OrderEventCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type OrderEventCountableEdge {
  """
  The item at the end of the edge.
  """
  node: OrderEvent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type NauticalOrderEventCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [NauticalOrderEventCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type NauticalOrderEventCountableEdge {
  """
  The item at the end of the edge.
  """
  node: NauticalOrderEvent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input OrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum!]
  status: [OrderStatusFilter!]
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  source: [OrderSourceFilter!]
  isHistorical: Boolean
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
  payoutStatus: [OrderPayoutStatusEnum!]
  vendorPayouts: [ID]
  payouts: [ID]
}

input NauticalOrderFilterInput {
  paymentStatus: [PaymentChargeStatusEnum!]
  status: [OrderStatusFilter!]
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  source: [OrderSourceFilter!]
  isHistorical: Boolean
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
}

input OrderDraftFilterInput {
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  isHistorical: Boolean
  source: [OrderSourceFilter!]
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
}

input NauticalOrderDraftFilterInput {
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  isHistorical: Boolean
  source: [OrderSourceFilter!]
  subStatus: [OfferOrderSubStatusFilter!]
    @deprecated(reason: "This will be removed on Feb 1, 2025")
}

input NauticalOrderQuoteFilterInput {
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  isHistorical: Boolean
  subStatus: [QuoteOrderSubStatusFilter!]
  source: [OrderSourceFilter!]
}

enum QuoteOrderSubStatusFilter {
  IN_REVIEW
  QUOTE_REQUESTED
  AWAITING_PAYMENT
}

input OrderQuoteFilterInput {
  customer: String
  created: DateRangeInput
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
  ids: [ID]
  search: String
  isHistorical: Boolean
  subStatus: [QuoteOrderSubStatusFilter!]
  source: [OrderSourceFilter!]
}

type FulfillmentCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [FulfillmentCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type FulfillmentCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Fulfillment!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input ReturnFulfillmentFilterInput {
  status: [FulfillmentStatusFilter!]
  customer: String
  created: DateRangeInput
  search: String
}

enum FulfillmentStatusFilter {
  FULFILLED
  CANCELED
  RETURNED
  DECLINED
  RETURN_REQUESTED
  RETURN_AUTHORIZED
  RETURN_DECLINED
  RETURN_RECEIVED
  RETURN_COMPLETE
  RETURN_CANCELLED
}

input ReturnFulfillmentSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort fulfillments by the selected field.
  """
  field: ReturnFulfillmentSortField!
}

enum ReturnFulfillmentSortField {
  """
  Sort return fulfillments by number.
  """
  NUMBER

  """
  Sort return fulfillments by tracking number.
  """
  TRACKING_NUMBER

  """
  Sort return fulfillments by creation date.
  """
  CREATION_DATE

  """
  Sort return fulfillments by customer.
  """
  CUSTOMER

  """
  Sort return fulfillments by items.
  """
  ITEMS

  """
  Sort return fulfillments by price.
  """
  PRICE

  """
  Sort return fulfillments by return status.
  """
  RETURN_STATUS
}

type OptimizedHome {
  sales: TaxedMoney
  orders: Int
  toFulfill: Int
  toCapture: Int
  outOfStock: Int
  topProducts: [ProductVariant!]!
  sellerActivities: [OrderEvent!]!
  marketplaceActivities: [NauticalOrderEvent!]!
}

"""
Represents a nautical configuration resource.
"""
type NauticalConfiguration {
  """
  Primary key name of the configuration item
  """
  configurationName: String

  """
  Whether the configuration item is active or not
  """
  configurationValue: Boolean

  """
  Date of the configuration item
  """
  configurationValueDatetime: DateTime

  """
  String value of the configuration item
  """
  configurationValueString: String
}

type MicrositeCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [MicrositeCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type MicrositeCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Microsite!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input MicrositeFilterInput {
  published: MicrositePublished
  search: String
  ids: [ID]
  metadata: MetadataFilterInput
  privateMetadata: MetadataFilterInput
}

enum MicrositePublished {
  PUBLISHED
  HIDDEN
}

input MicrositeSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort microsites by the selected field.
  """
  field: MicrositeSortField!
}

enum MicrositeSortField {
  """
  Sort microsites by name.
  """
  NAME

  """
  Sort microsites by availability.
  """
  AVAILABILITY

  """
  Sort microsites by product count.
  """
  PRODUCT_COUNT

  """
  Sort microsites by publication date.
  """
  PUBLICATION_DATE
}

"""
Represents a single menu - an object that is used to help navigate through the store.
"""
type Menu implements Node {
  """
  The ID of the object
  """
  id: ID!
  name: String!
  slug: String!
  items: [MenuItem!]!
}

"""
Represents a single item of the related menu. Can store categories, collection or pages.
"""
type MenuItem implements Node {
  """
  The ID of the object
  """
  id: ID!
  menu: Menu!
  name: String!
  parent: MenuItem
  category: Category
  collection: Collection
  page: Page
  level: Int!
  children: [MenuItem!]!

  """
  URL to the menu item.
  """
  url: String
}

type MenuCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [MenuCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type MenuCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Menu!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input MenuSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort menus by the selected field.
  """
  field: MenuSortField!
}

enum MenuSortField {
  """
  Sort menus by name.
  """
  NAME

  """
  Sort menus by items count.
  """
  ITEMS_COUNT
}

input MenuFilterInput {
  search: String
  slug: [String!]
}

type MenuItemCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [MenuItemCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type MenuItemCountableEdge {
  """
  The item at the end of the edge.
  """
  node: MenuItem!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input MenuItemSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort menu items by the selected field.
  """
  field: MenuItemsSortField!
}

enum MenuItemsSortField {
  """
  Sort menu items by name.
  """
  NAME
}

input MenuItemFilterInput {
  search: String
}

"""
Represents a marketplace configuration resource.
"""
type MarketplaceConfiguration {
  tenant: Tenant!
  id: UUID!
  marketplaceName: String!
  requireProductApproval: Boolean!
  requireProductTypes: Boolean!

  """
  Determines payout status transformation strategy
  """
  payoutAutomationStrategy: MarketplaceConfigurationPayoutAutomationStrategyEnum

  """
  Determines domiciled currency
  """
  domiciledCurrency: MarketplaceConfigurationCurrencyEnum!

  """
  Supported currencies for the marketplace
  """
  supportedCurrencies: [String!]!

  """
  The default country for the marketplace.
  """
  defaultCountry: String!

  """
  Supported countries for the marketplace
  """
  supportedCountries: [String!]!
  sellerCanSendQuote: Boolean!

  """
  Determines scope for checking duplicated variant attribute sets
  """
  variantUniqueness: VariantUniquenessEnum

  """
  Returns list of default checklists for seller.
  """
  defaultSellerChecklists: [DefaultSellerChecklist!]!
  enableStockAllocationForQuotes: Boolean!
  enableStockAllocationForOffers: Boolean
    @deprecated(
      reason: "This will be removed on February 20, 2025 and will return false until then"
    )
  enableStockAllocationForDrafts: Boolean!
  validateStockOnOrderPaymentCreation: Boolean!

  """
  IANA timezone to display datetime fields in the marketplace
  """
  timezone: String!
  enableBackorders: Boolean!

  """
  Determines when revenue is accrued to the marketplace and sellers
  """
  revenueAccrualStrategy: RevenueAccrualStrategyEnum
    @deprecated(reason: "This will be removed on February 20, 2025.")

  """
  Determines whether shipping methods are available based on marketplace checkout total or seller totals
  """
  availableShippingStrategy: AvailableShippingStrategyEnum
  attributeTemplateStrategy: MarketplaceConfigurationAttributeTemplateStrategy!

  """
  Determines the fulfillment model for the marketplace
  """
  fulfillmentModel: FulfillmentModelEnum!

  """
  Default weight unit.
  """
  defaultWeightUnit: WeightUnitsEnum
  automaticFulfillmentDigitalProducts: Boolean!
  defaultDigitalMaxDownloads: Int
  defaultDigitalUrlValidDays: Int
  trackInventoryByDefault: Boolean!
  description: String!
  name: String!

  """
  Company address.
  """
  companyAddress: Address

  """
  Default shop's email sender's name.
  """
  defaultMailSenderName: String

  """
  Default shop's email sender's address.
  """
  defaultMailSenderAddress: String

  """
  Default shop's email support's address.
  """
  defaultMailSupportAddress: String

  """
  URL of a view where customers can set their password.
  """
  customerSetPasswordUrl: String
  includeTaxesInPrices: Boolean!
  chargeTaxesOnShipping: Boolean!
}

enum MarketplaceConfigurationPayoutAutomationStrategyEnum {
  """
  Completely Manually controlled Payout Status
  """
  MANUAL

  """
  Ready for payout when status is paid and fulfilled
  """
  AUTOMATED_BY_FULFILLMENT
}

enum MarketplaceConfigurationCurrencyEnum {
  """
  United Arab Emirates Dirham
  """
  AED

  """
  Afghan Afghani
  """
  AFN

  """
  Albanian Lek
  """
  ALL

  """
  Armenian Dram
  """
  AMD

  """
  Netherlands Antillean Guilder
  """
  ANG

  """
  Angolan Kwanza
  """
  AOA

  """
  Argentine Peso
  """
  ARS

  """
  Australian Dollar
  """
  AUD

  """
  Aruban Florin
  """
  AWG

  """
  Azerbaijani Manat
  """
  AZN

  """
  Bosnia-Herzegovina Convertible Mark
  """
  BAM

  """
  Barbadian Dollar
  """
  BBD

  """
  Bangladeshi Taka
  """
  BDT

  """
  Bulgarian Lev
  """
  BGN

  """
  Bahraini Dinar
  """
  BHD

  """
  Burundian Franc
  """
  BIF

  """
  Bermudan Dollar
  """
  BMD

  """
  Brunei Dollar
  """
  BND

  """
  Bolivian Boliviano
  """
  BOB

  """
  Brazilian Real
  """
  BRL

  """
  Bahamian Dollar
  """
  BSD

  """
  Bitcoin
  """
  BTC

  """
  Bhutanese Ngultrum
  """
  BTN

  """
  Botswanan Pula
  """
  BWP

  """
  Belarusian Ruble
  """
  BYN

  """
  Belarusian Ruble (pre-2016)
  """
  BYR

  """
  Belize Dollar
  """
  BZD

  """
  Canadian Dollar
  """
  CAD

  """
  Congolese Franc
  """
  CDF

  """
  Swiss Franc
  """
  CHF

  """
  Chilean Unit of Account (UF)
  """
  CLF

  """
  Chilean Peso
  """
  CLP

  """
  Chinese Yuan (Offshore)
  """
  CNH

  """
  Chinese Yuan
  """
  CNY

  """
  Colombian Peso
  """
  COP

  """
  Costa Rican Colón
  """
  CRC

  """
  Cuban Convertible Peso
  """
  CUC

  """
  Cuban Peso
  """
  CUP

  """
  Cape Verdean Escudo
  """
  CVE

  """
  Czech Republic Koruna
  """
  CZK

  """
  Djiboutian Franc
  """
  DJF

  """
  Danish Krone
  """
  DKK

  """
  Dominican Peso
  """
  DOP

  """
  Algerian Dinar
  """
  DZD

  """
  Estonian Kroon
  """
  EEK

  """
  Egyptian Pound
  """
  EGP

  """
  Eritrean Nakfa
  """
  ERN

  """
  Ethiopian Birr
  """
  ETB

  """
  Euro
  """
  EUR

  """
  Fijian Dollar
  """
  FJD

  """
  Falkland Islands Pound
  """
  FKP

  """
  British Pound Sterling
  """
  GBP

  """
  Georgian Lari
  """
  GEL

  """
  Guernsey Pound
  """
  GGP

  """
  Ghanaian Cedi
  """
  GHS

  """
  Gibraltar Pound
  """
  GIP

  """
  Gambian Dalasi
  """
  GMD

  """
  Guinean Franc
  """
  GNF

  """
  Guatemalan Quetzal
  """
  GTQ

  """
  Guyanaese Dollar
  """
  GYD

  """
  Hong Kong Dollar
  """
  HKD

  """
  Honduran Lempira
  """
  HNL

  """
  Croatian Kuna
  """
  HRK

  """
  Haitian Gourde
  """
  HTG

  """
  Hungarian Forint
  """
  HUF

  """
  Indonesian Rupiah
  """
  IDR

  """
  Israeli New Sheqel
  """
  ILS

  """
  Manx pound
  """
  IMP

  """
  Indian Rupee
  """
  INR

  """
  Iraqi Dinar
  """
  IQD

  """
  Iranian Rial
  """
  IRR

  """
  Icelandic Króna
  """
  ISK

  """
  Jersey Pound
  """
  JEP

  """
  Jamaican Dollar
  """
  JMD

  """
  Jordanian Dinar
  """
  JOD

  """
  Japanese Yen
  """
  JPY

  """
  Kenyan Shilling
  """
  KES

  """
  Kyrgystani Som
  """
  KGS

  """
  Cambodian Riel
  """
  KHR

  """
  Comorian Franc
  """
  KMF

  """
  North Korean Won
  """
  KPW

  """
  South Korean Won
  """
  KRW

  """
  Kuwaiti Dinar
  """
  KWD

  """
  Cayman Islands Dollar
  """
  KYD

  """
  Kazakhstani Tenge
  """
  KZT

  """
  Laotian Kip
  """
  LAK

  """
  Lebanese Pound
  """
  LBP

  """
  Sri Lankan Rupee
  """
  LKR

  """
  Liberian Dollar
  """
  LRD

  """
  Lesotho Loti
  """
  LSL

  """
  Libyan Dinar
  """
  LYD

  """
  Moroccan Dirham
  """
  MAD

  """
  Moldovan Leu
  """
  MDL

  """
  Malagasy Ariary
  """
  MGA

  """
  Macedonian Denar
  """
  MKD

  """
  Myanma Kyat
  """
  MMK

  """
  Mongolian Tugrik
  """
  MNT

  """
  Macanese Pataca
  """
  MOP

  """
  Mauritanian Ouguiya (pre-2018)
  """
  MRO

  """
  Mauritanian Ouguiya
  """
  MRU

  """
  Maltese Lira
  """
  MTL

  """
  Mauritian Rupee
  """
  MUR

  """
  Maldivian Rufiyaa
  """
  MVR

  """
  Malawian Kwacha
  """
  MWK

  """
  Mexican Peso
  """
  MXN

  """
  Malaysian Ringgit
  """
  MYR

  """
  Mozambican Metical
  """
  MZN

  """
  Namibian Dollar
  """
  NAD

  """
  Nigerian Naira
  """
  NGN

  """
  Nicaraguan Córdoba
  """
  NIO

  """
  Norwegian Krone
  """
  NOK

  """
  Nepalese Rupee
  """
  NPR

  """
  New Zealand Dollar
  """
  NZD

  """
  Omani Rial
  """
  OMR

  """
  Panamanian Balboa
  """
  PAB

  """
  Peruvian Nuevo Sol
  """
  PEN

  """
  Papua New Guinean Kina
  """
  PGK

  """
  Philippine Peso
  """
  PHP

  """
  Pakistani Rupee
  """
  PKR

  """
  Polish Zloty
  """
  PLN

  """
  Paraguayan Guarani
  """
  PYG

  """
  Qatari Rial
  """
  QAR

  """
  Romanian Leu
  """
  RON

  """
  Serbian Dinar
  """
  RSD

  """
  Russian Ruble
  """
  RUB

  """
  Rwandan Franc
  """
  RWF

  """
  Saudi Riyal
  """
  SAR

  """
  Solomon Islands Dollar
  """
  SBD

  """
  Seychellois Rupee
  """
  SCR

  """
  Sudanese Pound
  """
  SDG

  """
  Swedish Krona
  """
  SEK

  """
  Singapore Dollar
  """
  SGD

  """
  Saint Helena Pound
  """
  SHP

  """
  Sierra Leonean Leone
  """
  SLL

  """
  Somali Shilling
  """
  SOS

  """
  Surinamese Dollar
  """
  SRD

  """
  South Sudanese Pound
  """
  SSP

  """
  São Tomé and Príncipe Dobra (pre-2018)
  """
  STD

  """
  São Tomé and Príncipe Dobra
  """
  STN

  """
  Salvadoran Colón
  """
  SVC

  """
  Syrian Pound
  """
  SYP

  """
  Swazi Lilangeni
  """
  SZL

  """
  Thai Baht
  """
  THB

  """
  Tajikistani Somoni
  """
  TJS

  """
  Turkmenistani Manat
  """
  TMT

  """
  Tunisian Dinar
  """
  TND

  """
  Tongan Paʻanga
  """
  TOP

  """
  Turkish Lira
  """
  TRY

  """
  Trinidad and Tobago Dollar
  """
  TTD

  """
  New Taiwan Dollar
  """
  TWD

  """
  Tanzanian Shilling
  """
  TZS

  """
  Ukrainian Hryvnia
  """
  UAH

  """
  Ugandan Shilling
  """
  UGX

  """
  United States Dollar
  """
  USD

  """
  Uruguayan Peso
  """
  UYU

  """
  Uzbekistan Som
  """
  UZS

  """
  Venezuelan Bolívar Fuerte
  """
  VEF

  """
  Vietnamese Dong
  """
  VND

  """
  Vanuatu Vatu
  """
  VUV

  """
  Samoan Tala
  """
  WST

  """
  CFA Franc BEAC
  """
  XAF

  """
  Silver (troy ounce)
  """
  XAG

  """
  Gold (troy ounce)
  """
  XAU

  """
  East Caribbean Dollar
  """
  XCD

  """
  Special Drawing Rights
  """
  XDR

  """
  CFA Franc BCEAO
  """
  XOF

  """
  Palladium Ounce
  """
  XPD

  """
  CFP Franc
  """
  XPF

  """
  Platinum Ounce
  """
  XPT

  """
  Yemeni Rial
  """
  YER

  """
  South African Rand
  """
  ZAR

  """
  Zambian Kwacha (pre-2013)
  """
  ZMK

  """
  Zambian Kwacha
  """
  ZMW
}

enum VariantUniquenessEnum {
  """
  Disable any uniqueness check for variant attribute sets
  """
  DISABLED_UNIQUE_CHECKING

  """
  Check for duplicated variant attribute sets within a seller, duplicated variants may still exist globally (pre-product)
  """
  UNIQUE_PER_SELLER

  """
  Check for duplicated variant attribute sets globally (per-product), duplicated variants may not exist in the system
  """
  UNIQUE_PER_MARKETPLACE
}

type DefaultSellerChecklist {
  title: String!
  description: String!
  completeOn: SellerChecklistCompletionTriggersEnum
  isEnabled: Boolean!
}

enum RevenueAccrualStrategyEnum {
  """
  Accrue revenue to the marketplace and sellers when orders are fulfilled.
  """
  FULFILLMENT

  """
  Accrue all revenue to the marketplace and sellers when orders are placed.
  """
  ORDER_PLACEMENT
}

enum AvailableShippingStrategyEnum {
  """
  Available shipping methods per seller are calculated using only the line totals for the seller.
  """
  SELLER_LINES

  """
  Available shipping methods per seller are calculated using every line total, not just the sellers' lines.
  """
  MARKETPLACE_LINES
}

"""
An enumeration.
"""
enum MarketplaceConfigurationAttributeTemplateStrategy {
  """
  Assigned attributes may only come from templates (ProductType for PIM-specific attribute usage or CustomFieldTemplate for custom field attribute usage), no non-templated attribute assignment is allowed
  """
  STRICT

  """
  Assigned attributes may come from BOTH attribute templates and non-templated attribute assignments
  """
  FLEXIBLE
}

enum FulfillmentModelEnum {
  """
  Fulfilled by marketplace
  """
  FULFILLED_BY_MARKETPLACE

  """
  Fulfilled by seller
  """
  FULFILLED_BY_SELLER

  """
  Hybrid
  """
  HYBRID
}

type EmailEventCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [EmailEventCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type EmailEventCountableEdge {
  """
  The item at the end of the edge.
  """
  node: EmailEvent!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
History log of all emails.
"""
type EmailEvent implements Node {
  """
  The ID of the object
  """
  id: ID!
  tenant: Tenant!

  """
  Created event time. Naming is used to keep consistent with OrderEvent/SellerEvent naming
  """
  date: DateTime!
  fromEmail: String!
  toEmails: [String!]
  bccEmails: [String!]
  ccEmails: [String!]
  messageType: EmailEventMessageType!

  """
  Plugin id (Plugin.PLUGIN_ID attribute) of email plugin
  """
  emailPluginId: String!
  template: String
  payload: JSONString!
  error: String
}

"""
An enumeration.
"""
enum EmailEventMessageType {
  """
  Account Confirmation
  """
  ACCOUNT_CONFIRMATION

  """
  Account Password Reset
  """
  ACCOUNT_PASSWORD_RESET

  """
  Account Change Email Request
  """
  ACCOUNT_CHANGE_EMAIL_REQUEST

  """
  Account Change Email Confirm
  """
  ACCOUNT_CHANGE_EMAIL_CONFIRM

  """
  Account Delete
  """
  ACCOUNT_DELETE

  """
  Account Set Customer Password
  """
  ACCOUNT_SET_CUSTOMER_PASSWORD

  """
  Invoice Ready
  """
  INVOICE_READY

  """
  Order Confirmation
  """
  ORDER_CONFIRMATION

  """
  Order Fulfillment Confirmation
  """
  ORDER_FULFILLMENT_CONFIRMATION

  """
  Order Fulfillment Denied
  """
  ORDER_FULFILLMENT_DENIED

  """
  Order Fulfillment Update
  """
  ORDER_FULFILLMENT_UPDATE

  """
  Order Canceled
  """
  ORDER_CANCELED

  """
  Partial Order Cancel
  """
  PARTIAL_ORDER_CANCEL

  """
  Order Refund Confirmation
  """
  ORDER_REFUND_CONFIRMATION

  """
  Pending Quote
  """
  PENDING_QUOTE

  """
  Account Set Staff Password
  """
  ACCOUNT_SET_STAFF_PASSWORD

  """
  Csv Export Products Success
  """
  CSV_EXPORT_PRODUCTS_SUCCESS

  """
  Csv Export Failed
  """
  CSV_EXPORT_FAILED

  """
  Staff Order Confirmation
  """
  STAFF_ORDER_CONFIRMATION

  """
  Account Staff Reset Password
  """
  ACCOUNT_STAFF_RESET_PASSWORD

  """
  Vendor Payout Confirmation
  """
  VENDOR_PAYOUT_CONFIRMATION

  """
  Pending Seller
  """
  PENDING_SELLER

  """
  Updated Status
  """
  UPDATED_STATUS

  """
  Seller Status Pending
  """
  SELLER_STATUS_PENDING

  """
  Seller Status Approved
  """
  SELLER_STATUS_APPROVED

  """
  Seller Status Declined
  """
  SELLER_STATUS_DECLINED

  """
  Seller Status Paused
  """
  SELLER_STATUS_PAUSED

  """
  Seller Agreement Accepted
  """
  SELLER_AGREEMENT_ACCEPTED

  """
  Seller Agreement Not Accepted
  """
  SELLER_AGREEMENT_NOT_ACCEPTED

  """
  Import Catalog Failed
  """
  IMPORT_CATALOG_FAILED

  """
  Import Catalog Success
  """
  IMPORT_CATALOG_SUCCESS

  """
  Account Activate Request
  """
  ACCOUNT_ACTIVATE_REQUEST

  """
  Account Activated
  """
  ACCOUNT_ACTIVATED

  """
  Account Deactivated
  """
  ACCOUNT_DEACTIVATED

  """
  Pending Order
  """
  PENDING_ORDER

  """
  Pending Customer
  """
  PENDING_CUSTOMER

  """
  Quote Requested
  """
  QUOTE_REQUESTED
}

input EmailEventFilterInput {
  fromEmail: String
  toEmail: String
  date: DateTimeRangeInput
  messageType: [NotifyEventTypeEnum!]
}

enum NotifyEventTypeEnum {
  """
  Account Confirmation
  """
  ACCOUNT_CONFIRMATION

  """
  Account Password Reset
  """
  ACCOUNT_PASSWORD_RESET

  """
  Account Change Email Request
  """
  ACCOUNT_CHANGE_EMAIL_REQUEST

  """
  Account Change Email Confirm
  """
  ACCOUNT_CHANGE_EMAIL_CONFIRM

  """
  Account Delete
  """
  ACCOUNT_DELETE

  """
  Account Set Customer Password
  """
  ACCOUNT_SET_CUSTOMER_PASSWORD

  """
  Invoice Ready
  """
  INVOICE_READY

  """
  Order Confirmation
  """
  ORDER_CONFIRMATION

  """
  Order Fulfillment Confirmation
  """
  ORDER_FULFILLMENT_CONFIRMATION

  """
  Order Fulfillment Denied
  """
  ORDER_FULFILLMENT_DENIED

  """
  Order Fulfillment Update
  """
  ORDER_FULFILLMENT_UPDATE

  """
  Order Canceled
  """
  ORDER_CANCELED

  """
  Partial Order Cancel
  """
  PARTIAL_ORDER_CANCEL

  """
  Order Refund Confirmation
  """
  ORDER_REFUND_CONFIRMATION

  """
  Pending Quote
  """
  PENDING_QUOTE

  """
  Account Set Staff Password
  """
  ACCOUNT_SET_STAFF_PASSWORD

  """
  Csv Export Products Success
  """
  CSV_EXPORT_PRODUCTS_SUCCESS

  """
  Csv Export Failed
  """
  CSV_EXPORT_FAILED

  """
  Staff Order Confirmation
  """
  STAFF_ORDER_CONFIRMATION

  """
  Account Staff Reset Password
  """
  ACCOUNT_STAFF_RESET_PASSWORD

  """
  Vendor Payout Confirmation
  """
  VENDOR_PAYOUT_CONFIRMATION

  """
  Pending Seller
  """
  PENDING_SELLER

  """
  Updated Status
  """
  UPDATED_STATUS

  """
  Seller Status Pending
  """
  SELLER_STATUS_PENDING

  """
  Seller Status Approved
  """
  SELLER_STATUS_APPROVED

  """
  Seller Status Declined
  """
  SELLER_STATUS_DECLINED

  """
  Seller Status Paused
  """
  SELLER_STATUS_PAUSED

  """
  Seller Agreement Accepted
  """
  SELLER_AGREEMENT_ACCEPTED

  """
  Seller Agreement Not Accepted
  """
  SELLER_AGREEMENT_NOT_ACCEPTED

  """
  Import Catalog Failed
  """
  IMPORT_CATALOG_FAILED

  """
  Import Catalog Success
  """
  IMPORT_CATALOG_SUCCESS

  """
  Account Activate Request
  """
  ACCOUNT_ACTIVATE_REQUEST

  """
  Account Activated
  """
  ACCOUNT_ACTIVATED

  """
  Account Deactivated
  """
  ACCOUNT_DEACTIVATED

  """
  Pending Order
  """
  PENDING_ORDER

  """
  Pending Customer
  """
  PENDING_CUSTOMER

  """
  Quote Requested
  """
  QUOTE_REQUESTED
}

input EmailEventSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort email_logs by the selected field.
  """
  field: EmailEventSortField!
}

enum EmailEventSortField {
  """
  Sort return email_logs by date.
  """
  DATE
}

"""
Response when searching for a location using the location_search endpoint
"""
type LocationSuggestion {
  """
  label to give autocomplete suggestions when searching for locations
  """
  label: String!

  """
  Address suggested for the provided location
  """
  address: Address
}

"""
Latitude and longitude coordinates as returned from the geocode endpoint.
"""
type Coordinates {
  """
  label given to the response specified as part of the search string
  """
  label: String
  latitude: Decimal
  longitude: Decimal
}

type InReportOrderCustomerSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: OrderSellerSummaryType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [OrderCustomerReportType!]
}

type OrderSellerSummaryType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  sellers: Float
}

type OrderCustomerReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  userId: Int
  user: User
}

type InReportOrderSellerSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: OrderSellerSummaryType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [OrderSellerReportType!]
}

type OrderSellerReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  sellerId: Int
  seller: Seller
}

type InReportOrderMarketplaceSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: OrderSellerSummaryType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [OrderMarketplaceReportType!]
}

type OrderMarketplaceReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  dimension: Date
}

enum InsightDimensionEnum {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

type InReportMarketplacePayoutsSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: OrderSellerSummaryType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [OrderSellerReportType!]
}

type InReportMarketplaceTaxSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: AbstractOrderSellerReportType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [MarketplaceTaxReportType!]
}

type AbstractOrderSellerReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
}

type MarketplaceTaxReportType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  dimension: Date
}

type InReportMarketplaceTaxesByCountryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: AbstractOrderSellerReportType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [MarketplaceTaxReportByLocaleType!]
}

type MarketplaceTaxReportByLocaleType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  billingAddress_Country: String
  billingAddress_CountryArea: String
  countryArea: String
  country: String
  countryName: String
  countryAreaName: String
  countryState: CountryState
}

type CountryState {
  area: String
  areaName: String
  country: String
  countryName: String
}

type InReportTopPerformingProductsType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: AbstractProductVariantType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [ProductVariantReportType!]
}

type AbstractProductVariantType {
  totals: Int
  grossRevenue: Float
  quantityOrdered: Int
  avgPriceGrossAmount: Float
  maxPriceGrossAmount: Float
  minPriceGrossAmount: Float
  revenue: Float
  avgPrice: Float
  maxPrice: Float
  minPrice: Float
}

type ProductVariantReportType {
  totals: Int
  grossRevenue: Float
  quantityOrdered: Int
  avgPriceGrossAmount: Float
  maxPriceGrossAmount: Float
  minPriceGrossAmount: Float
  revenue: Float
  avgPrice: Float
  maxPrice: Float
  minPrice: Float

  """
  Product ID as a number.
  """
  productId: Int!

  """
  Related product object.
  """
  product: Product!

  """
  Product variant name.
  """
  name: String!

  """
  Product variant ID.
  """
  id: ID!
}

enum PerformancePerspective {
  TOP
  WORST
}

type InReportTopPerformingCategoriesType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: AbstractProductVariantType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [ProductCategoryReportType!]
}

type ProductCategoryReportType {
  totals: Int
  grossRevenue: Float
  quantityOrdered: Int
  avgPriceGrossAmount: Float
  maxPriceGrossAmount: Float
  minPriceGrossAmount: Float
  revenue: Float
  avgPrice: Float
  maxPrice: Float
  minPrice: Float
  product_CategoryId: Int
  category: Category
}

type InReportMarketplacePaymentsSummaryType {
  """
  Category of the metric.
  """
  category: String!

  """
  Title of the metric.
  """
  title: String!

  """
  Description of main columns in report and summary. Note: report and summary can contain additional columns.
  """
  columns: [ColumnObjectType!]

  """
  Info about applied filters.
  """
  filters: [FilterObjectType!]

  """
  Total summary for selected period.
  """
  summary: AbstractPaymentsType!

  """
  Report where each row represent aggregated, by selected (in filters) dimension, summary.
  """
  report: [PaymentsDayReportType!]
}

type AbstractPaymentsType {
  payments: Int
  totalAuthorized: Float
  captured: Float
  average: Float
}

type PaymentsDayReportType {
  payments: Int
  totalAuthorized: Float
  captured: Float
  average: Float
  dimension: Date
  chargeStatus: String
}

type DashboardOrdersSummaryType {
  filters: [FilterObjectType!]
  current: AbstractOrderSellerReportType
  previous: AbstractOrderSellerReportType
  deltas: OrderSummaryDeltaDataType
  ordersToFulfill: Int
  paymentsToProcess: Int
  returnsToProcess: Int
  pendingReviews: Int
  pendingPayouts: Int
}

type OrderSummaryDeltaDataType {
  percent: AbstractPercentReportType
  values: AbstractOrderSellerReportType
}

type AbstractPercentReportType {
  gross: Float
  orders: Float
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Float
}

type DashboardTopSellerPerformanceType {
  filters: [FilterObjectType!]
  current: [DashboardSellerOrderPerformanceType!]
  previous: [DashboardSellerOrderPerformanceType!]
}

type DashboardSellerOrderPerformanceType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  sellerId: Int
  seller: Seller
}

type DashboardGraphType {
  filters: [FilterObjectType!]
  graph: [GraphDataType!]
}

type GraphDataType {
  gross: Float
  orders: Int
  net: Float
  shipping: Float
  average: Float
  taxes: Float
  discounts: Float
  volumeDiscounts: Float
    @deprecated(reason: "This will be removed on February 1, 2025.")
  revenue: Float
  totals: Int
  commission: Float
  payout: Float
  dimension: DateTime
}

type FontCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [FontCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type FontCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Font!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type JournalEntryCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [JournalEntryCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type JournalEntryCountableEdge {
  """
  The item at the end of the edge.
  """
  node: JournalEntry!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

"""
Represents a journal entry in the system
"""
type JournalEntry implements Node & ObjectWithMetadata {
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The ID of the object
  """
  id: ID!
  description: String!
  fulfillmentLine: FulfillmentLine
  nauticalOrder: NauticalOrder
  order: Order
  orderLine: OrderLine
  payment: Payment
  refund: Refund
  refundLine: RefundLine
  vendorPayout: VendorPayout

  """
  Type of the journal entry
  """
  type: JournalEntryTypeEnum!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Ledger entries for this journal entry
  """
  ledgerEntries: [LedgerEntry!]!
}

"""
An enumeration.
"""
enum JournalEntryTypeEnum {
  ADJUSTMENT
  COMMISSION
  DISCOUNT
  FEES
  ORDER_ACCRUED
  ORDER_CANCELLED
  ORDER_DECLINE_FULFILLMENT
  ORDER_PLACED
  PAYMENT_CAPTURED
  PAYOUT
  PAYOUT_ADJUSTMENT
  REFUND_COMMISSION
  REFUND_ORDER
  SHIPPING_ACCRUED
}

"""
Represents a ledger entry in the system
"""
type LedgerEntry implements Node & ObjectWithMetadata {
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  The ID of the object
  """
  id: ID!
  journalEntry: JournalEntry!
  ledger: Ledger!

  """
  """
  ledgerVersion: BigInt!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Amount of this ledger entry
  """
  amount: Money!

  """
  Balance of the corresponding ledger when this entry was inserted.
  """
  ledgerBalance: Money!
}

"""
Represents a ledger in the system
"""
type Ledger implements Node & ObjectWithMetadata {
  """
  The ID of the object
  """
  id: ID!

  """
  Ledger account type
  """
  accountType: LedgerAccountTypeEnum!

  """
  Balance of the ledger
  """
  balance: Money!
  seller: Seller

  """
  Type of the ledger
  """
  type: LedgerTypeEnum!

  """
  """
  version: BigInt!

  """
  List of private metadata items.Requires proper staff permissions to access.
  """
  privateMetadata: [MetadataItem!]!

  """
  List of public metadata items. Can be accessed without permissions.
  """
  metadata: [MetadataItem!]!

  """
  Buyer for this ledger
  """
  buyer: User
}

"""
An enumeration.
"""
enum LedgerAccountTypeEnum {
  ASSET
  CONTRA_ASSET
  CONTRA_LIABILITY
  CONTRA_REVENUE
  EXPENSE
  LIABILITY
  REVENUE
}

"""
An enumeration.
"""
enum LedgerTypeEnum {
  CUSTOMER_RECEIVABLE
  DEFERRED_DISCOUNTS
  DEFERRED_SALES_REVENUE
  DEFERRED_SHIPPING_REVENUE
  FOREIGN_EXCHANGE
  FUNDS_PAYMENTS
  GUEST_CUSTOMER_RECEIVABLE
  MARKETPLACE_COMMISSION
  MARKETPLACE_DISCOUNTS
  MARKETPLACE_FEES
  REFUNDS
  SALES_TAX
  SELLER_DISCOUNTS
  SELLER_PAYABLE
  SELLER_PAYOUT_DISBURSEMENT
}

input JournalEntryFilterInput {
  type: JournalEntryTypeEnum
  createdAt: DateTimeRangeInput
  fulfillmentLineIds: [ID]
  nauticalOrderIds: [ID]
  orderIds: [ID]
  orderLineIds: [ID]
  paymentIds: [ID]
  refundLineIds: [ID]
  vendorPayoutIds: [ID]
}

input JournalEntrySortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort journal_entries by the selected field.
  """
  field: JournalEntrySortField!
}

enum JournalEntrySortField {
  """
  Sort journal entries by date.
  """
  DATE

  """
  Sort journal entries by type.
  """
  TYPE
}

type LedgerCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [LedgerCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type LedgerCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Ledger!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input LedgerEntryFilterInput {
  type: LedgerTypeEnum
  sellerIds: [ID]
}

input LedgerSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort ledgers by the selected field.
  """
  field: LedgerSortField!
}

enum LedgerSortField {
  """
  Sort ledgers by balance.
  """
  BALANCE

  """
  Sort ledgers by type.
  """
  TYPE
}

type SaleCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [SaleCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type SaleCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Sale!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input SaleFilterInput {
  status: [DiscountStatusEnum!]
  saleType: DiscountValueTypeEnum
  started: DateTimeRangeInput
  search: String
}

enum DiscountStatusEnum {
  ACTIVE
  EXPIRED
  SCHEDULED
}

input SaleSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort sales by the selected field.
  """
  field: SaleSortField!
}

enum SaleSortField {
  """
  Sort sales by name.
  """
  NAME

  """
  Sort sales by start date.
  """
  START_DATE

  """
  Sort sales by end date.
  """
  END_DATE

  """
  Sort sales by value.
  """
  VALUE

  """
  Sort sales by type.
  """
  TYPE
}

type VoucherCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [VoucherCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type VoucherCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Voucher!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input VoucherFilterInput {
  status: [DiscountStatusEnum!]
  timesUsed: IntRangeInput
  discountType: [VoucherDiscountType!]
  started: DateTimeRangeInput
  search: String
}

enum VoucherDiscountType {
  FIXED
  PERCENTAGE
  SHIPPING
}

input VoucherSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort vouchers by the selected field.
  """
  field: VoucherSortField!
}

enum VoucherSortField {
  """
  Sort vouchers by code.
  """
  CODE

  """
  Sort vouchers by start date.
  """
  START_DATE

  """
  Sort vouchers by end date.
  """
  END_DATE

  """
  Sort vouchers by value.
  """
  VALUE

  """
  Sort vouchers by type.
  """
  TYPE

  """
  Sort vouchers by usage limit.
  """
  USAGE_LIMIT

  """
  Sort vouchers by minimum spent amount.
  """
  MINIMUM_SPENT_AMOUNT
}

type DesignerDataType {
  tenant: Tenant!
  id: ID!
  name: String!
  jsonContent: JSONString!
}

"""
Represents a job data of exported file.
"""
type ExportFile implements Node & Job {
  """
  The ID of the object
  """
  id: ID!
  user: User
  app: App

  """
  Job status.
  """
  status: JobStatusEnum!

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!

  """
  Job message.
  """
  message: String

  """
  The URL of field to download.
  """
  url: String

  """
  List of events associated with the export.
  """
  events: [ExportEvent!]
}

"""
History log of export file.
"""
type ExportEvent implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime!

  """
  Export event type.
  """
  type: ExportEventsEnum!

  """
  User who performed the action.
  """
  user: User

  """
  App which performed the action.
  """
  app: App

  """
  Content of the event.
  """
  message: String!
}

enum ExportEventsEnum {
  """
  Data export was started.
  """
  EXPORT_PENDING

  """
  Data export was completed successfully.
  """
  EXPORT_SUCCESS

  """
  Data export failed.
  """
  EXPORT_FAILED

  """
  Export file was deleted.
  """
  EXPORT_DELETED

  """
  Email with link to download file was sent to the customer.
  """
  EXPORTED_FILE_SENT

  """
  Email with info that export failed was sent to the customer.
  """
  EXPORT_FAILED_INFO_SENT
}

type ExportFileCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [ExportFileCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type ExportFileCountableEdge {
  """
  The item at the end of the edge.
  """
  node: ExportFile!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input ExportFileFilterInput {
  createdAt: DateTimeRangeInput
  updatedAt: DateTimeRangeInput
  status: JobStatusEnum
  user: String
  app: String
}

input ExportFileSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort export file by the selected field.
  """
  field: ExportFileSortField!
}

enum ExportFileSortField {
  """
  Sort export file by status.
  """
  STATUS

  """
  Sort export file by created at.
  """
  CREATED_AT

  """
  Sort export file by updated at.
  """
  UPDATED_AT
}

type CheckoutCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CheckoutCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CheckoutCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Checkout!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

type CheckoutLineCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [CheckoutLineCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type CheckoutLineCountableEdge {
  """
  The item at the end of the edge.
  """
  node: CheckoutLine!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input AttributeSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort attributes by the selected field.
  """
  field: AttributeSortField!
}

enum AttributeSortField {
  """
  Sort attributes by name
  """
  NAME

  """
  Sort attributes by slug
  """
  SLUG

  """
  Sort attributes by external ID
  """
  EXTERNAL_ID

  """
  Sort attributes by external source
  """
  EXTERNAL_SOURCE

  """
  Sort attributes by the value required flag
  """
  VALUE_REQUIRED

  """
  Sort attributes by the variant only flag
  """
  IS_VARIANT_ONLY

  """
  Sort attributes by visibility in the storefront
  """
  VISIBLE_IN_STOREFRONT

  """
  Sort attributes by the filterable in storefront flag
  """
  FILTERABLE_IN_STOREFRONT

  """
  Sort attributes by the filterable in dashboard flag
  """
  FILTERABLE_IN_DASHBOARD

  """
  Sort attributes by their position in storefront
  """
  STOREFRONT_SEARCH_POSITION

  """
  Sort attributes based on whether they can be displayed or not in a product grid.
  """
  AVAILABLE_IN_GRID
}

"""
Represents a type of custom field set. It defines what attributes are available to instances of this type.
"""
type CustomFieldTemplate implements Node {
  """
  The ID of the object
  """
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  """
  Content type of custom field type in human-readable format.
  """
  contentType: CustomFieldTemplateEnum

  """
  Custom attributes for the custom field template.
  """
  customAttributes: [Attribute!]!
}

enum CustomFieldTemplateEnum {
  USER
  PRODUCT
  VARIANT
  CATEGORY
  COLLECTION
  FULFILLMENT
}

"""
Represents ongoing installation of app.
"""
type AppInstallation implements Node & Job {
  appName: String!
  manifestUrl: String!

  """
  The ID of the object
  """
  id: ID!

  """
  Job status.
  """
  status: JobStatusEnum!

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!

  """
  Job message.
  """
  message: String
}

type AppCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [AppCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type AppCountableEdge {
  """
  The item at the end of the edge.
  """
  node: App!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input AppFilterInput {
  search: String
  isActive: Boolean
  type: AppTypeEnum
}

input AppSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort apps by the selected field.
  """
  field: AppSortField!
}

enum AppSortField {
  """
  Sort apps by name.
  """
  NAME

  """
  Sort apps by creation date.
  """
  CREATION_DATE
}

input AgreementOrder {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort marketplace agreements by the selected field.
  """
  field: AgreementSortField
}

enum AgreementSortField {
  """
  Sort agreements by title.
  """
  TITLE

  """
  Sort agreements by slug.
  """
  SLUG

  """
  Sort agreements by visibility.
  """
  VISIBILITY

  """
  Sort agreements by creation date.
  """
  CREATION_DATE

  """
  Sort agreements by publication date.
  """
  PUBLICATION_DATE
}

input AgreementFilterInput {
  search: String
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String!]
  requiredFields: [String!]
  upperFields: [String!]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue!]
  cityType: String
  cityChoices: [ChoiceValue!]
  cityAreaType: String
  cityAreaChoices: [ChoiceValue!]
  postalCodeType: String
  postalCodeMatchers: [String!]
  postalCodeExamples: [String!]
  postalCodePrefix: String
}

type ChoiceValue {
  raw: String
  verbose: String
}

input CustomerFilterInput {
  dateJoined: DateRangeInput
  isActive: Boolean
  moneySpent: PriceRangeInput
  numberOfOrders: IntRangeInput
  placedOrders: DateRangeInput
  search: String
  customFields: [AttributeInput!]
}

type GroupCountableConnection {
  """
  Pagination data for this connection.
  """
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!

  """
  A total count of items in the collection.
  """
  totalCount: Int
}

type GroupCountableEdge {
  """
  The item at the end of the edge.
  """
  node: Group!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

input PermissionGroupFilterInput {
  search: String
}

input PermissionGroupSortingInput {
  """
  Specifies the direction in which to sort products.
  """
  direction: OrderDirection!

  """
  Sort permission group by the selected field.
  """
  field: PermissionGroupSortField!
}

enum PermissionGroupSortField {
  """
  Sort permission group accounts by name.
  """
  NAME
}

input StaffUserInput {
  status: StaffMemberStatus
  search: String
  customFields: [AttributeInput!]
  isUserActive: Boolean
}

enum StaffMemberStatus {
  ACTIVE
  DEACTIVATED
}

union _Entity =
    WishlistItem
  | Wishlist
  | User
  | Address
  | ProductVariant
  | Product
  | Category
  | ProductType
  | App
  | Collection
  | Microsite
  | ProductImage
  | Location
  | ProductStatusLog
  | Group
  | CatalogImportProcess
  | CatalogImportProcessLogRecord

scalar _Any

type _Service {
  sdl: String
}

type Mutation {
  """
  EmailTemplate update mutation.
  """
  emailTemplateUpdate(
    """
    ID of the email template to update.
    """
    id: ID!

    """
    Fields to update on the email template.
    """
    input: EmailTemplateUpdateInput!
  ): EmailTemplateUpdate

  """
  Update a tenant
  """
  tenantUpdate(
    id: ID!

    """
    Fields required to create Tenant
    """
    input: TenantUpdateInput!
  ): TenantUpdate

  """
  Add or attach a document to any allowed entity (note: consider to use DocumentAttach for 'attach' action). Must only receive one of either file or document_id in input.
  """
  documentAdd(
    """
    Optional description to update the document with.
    """
    description: String

    """
    Used when uploading a new document or file in a multipart request that does not exist in the system already. Supported file types: image/vnd.dwg, image/jpeg, text/comma-separated-values, application/acad, image/tiff, application/zip, application/vnd.oasis.opendocument.text, application/pdf, application/x-rar-compressed, image/x-eps, application/x-tif, text/rtf, image/heif, application/x-zip-compressed, image/gif, application/jpg, image/x-tiff, application/x-dxf, application/gzipped, application/excel, application/x-pdf, application/rtf, application/msword, application/acrobat, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, drawing/dwg, application/x-rar, text/x-pdf, image/svg+xml, application/vnd.oasis.opendocument.presentation, drawing/x-dwf, application/vnd.ms-excel, image/svg, image/jpg, application/x-eps, image/webp, application/x-tiff, application/vnd.oasis.opendocument.spreadsheet, image/bmp, image/x-ms-bmp, application/dxf, drawing/x-dwg, application/tif, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/x-csv, application/vnd.openxmlformats-officedocument.presentationml.presentation, text/x-comma-separated-values, text/svg-xml, application/csv, application/tiff, image/png, image/x-dxf, text/pdf, image/x-bmp, image/heic-sequence, application/eps, image/heif-sequence, image/x-dwg, application/vnd.ms-powerpoint, application/svg+xml, application/gzip-compressed, application/gzip, image/tif, application/vnd.ms-word, application/x-dwg, application/vnd.pdf, application/x-rtf, application/x-tar, application/x-jpg, application/x-gzip, text/svg, application/dwg, image/x-tif, text/x-csv, image/heic, text/plain, pplication/vnd.rar, application/vnd.openxmlformats-officedocument.presentationml.slideshow, text/csv, application/x-acad, application/postscript, image/eps, image/dxf, application/x-autocad.
    """
    file: Upload!

    """
    Target instance ID to attach a document to; currently supports Product, ProductVariant, Seller and User IDs.
    """
    relatedObjectId: ID!
  ): DocumentAdd

  """
  Updates an existing document.
  """
  documentUpdate(
    """
    ID of a document to update.
    """
    id: ID!

    """
    Fields required to update a document.
    """
    input: DocumentUpdateInput!
  ): DocumentUpdate

  """
  Attach a document to any allowed entities.
  """
  documentAttach(
    """
    Used when attaching an existing document in the system to a new instance.
    """
    documentId: ID!

    """
    List of instance IDs to attach a document to, currently supports Product, ProductVariant, Seller, and User IDs.
    """
    ids: [ID!]!
  ): DocumentAttach

  """
  Delete or detach a document. Must only receive one of either target_ids or delete = True in input.
  """
  documentRemove(
    """
    True if you want to delete this document from the system entirely,
                defaults to False. This will automatically detach the document from every instance
                it was attached to in the system.
    """
    delete: Boolean = false

    """
    ID of the document to remove.
    """
    id: ID!

    """
    Optional list of IDs of target entities to detach this document from
    """
    targetIds: [ID!]
  ): DocumentRemove

  """
  Updates nautical configuration.
  """
  nauticalConfigurationUpdate(
    input: [NauticalConfigurationInputItem!]
  ): NauticalConfigurationUpdate

  """
  Updates marketplace configuration.
  """
  marketplaceConfigurationUpdate(
    """
    Fields required to update marketplace configuration.
    """
    input: MarketplaceConfigurationInput!
  ): MarketplaceConfigurationUpdate

  """
  Creates a new payout.
  """
  payoutCreate(
    """
    Fields required to create a payout.
    """
    input: PayoutCreateInput!
  ): PayoutCreate

  """
  Update vendor payouts connected to the given payout with adjustments and penalties
  """
  payoutUpdate(
    id: ID

    """
    Fields required to update a payout
    """
    input: PayoutUpdateInput
  ): PayoutUpdate

  """
  Deletes a draft payout
  """
  payoutDelete(
    """
    ID of a payout to delete.
    """
    id: ID!
  ): PayoutDelete

  """
  Modifies the status of a payout
  """
  payoutStatusUpdate(
    """
    Fields required to update a payout status.
    """
    id: ID!
    input: PayoutStatusInput
  ): PayoutStatusUpdate

  """
  Modifies the dates of a payout
  """
  payoutDatesUpdate(
    """
    ID of the payout to update.
    """
    id: ID!

    """
    Fields required to update a payout date range.
    """
    input: PayoutDatesInput!
  ): PayoutDatesUpdate

  """
  Archive payouts.
  """
  payoutBulkArchive(
    """
    List of payout IDs to archive.
    """
    ids: [ID!]!
  ): PayoutBulkArchive

  """
  Creates a VendorPayout for the specified seller in the payout if it does not already exist.
  """
  vendorPayoutCreate(
    """
    ID of the payout to create the VendorPayout in. Must be in a draft state
    """
    payoutId: ID!

    """
    ID of the seller to create the payout against
    """
    sellerId: ID!
  ): VendorPayoutCreate

  """
  Modifies the status of a vendor payout
  """
  vendorPayoutStatusUpdate(
    """
    Fields required to update a vendor payout status.
    """
    id: ID!
    input: VendorPayoutStatusInput!
  ): VendorPayoutStatusUpdate

  """
  Include vendor payouts.
  """
  vendorPayoutsBulkInclude(
    """
    List of vendor payout IDs to include.
    """
    ids: [ID!]!
  ): VendorPayoutsBulkInclude

  """
  Exclude vendor payouts.
  """
  vendorPayoutsBulkExclude(
    """
    List of vendor payout IDs to exclude.
    """
    ids: [ID!]!
  ): VendorPayoutsBulkExclude

  """
  Process vendor payouts.
  """
  vendorPayoutsBulkProcess(
    """
    Gateway to use for bulk vendor payout processing
    """
    gateway: ID!

    """
    List of vendor payout IDs to process.
    """
    ids: [ID]!
  ): VendorPayoutsBulkProcess

  """
  Adds note to the vendor payout.
  """
  vendorPayoutNoteAdd(
    """
    Fields required to create a note for the vendor payout.
    """
    input: VendorPayoutAddNoteInput!

    """
    ID of the vendor payout to add a note for.
    """
    vendorPayoutId: ID!
  ): VendorPayoutNoteAdd

  """
  Edit a message in even from the vendor payout.
  """
  vendorPayoutNoteUpdate(
    """
    ID of the vendor payout event.
    """
    id: ID!

    """
    Fields required to update a note for the vendor payout.
    """
    input: VendorPayoutUpdateNoteInput!
  ): VendorPayoutNoteUpdate

  """
  Creates a new wishlist
  """
  wishlistCreate(
    """
    Fields required to create a wishlist.
    """
    input: WishlistInput!
  ): WishlistCreate

  """
  Creates a new wishlist for any buyer if requestor is MPO
  """
  wishlistCreateForBuyer(
    """
    Fields required to create a wishlist for another buyer
    """
    input: WishlistBuyerInput!
  ): WishlistCreateForBuyer

  """
  Update a wishlist
  """
  wishlistUpdate(
    """
    ID of the wishlist to update.
    """
    id: ID!

    """
    Fields required to update a wishlist.
    """
    input: WishlistInput!
  ): WishlistUpdate

  """
  Update a wishlist
  """
  wishlistDelete(
    """
    ID of the wishlist to delete.
    """
    id: ID!
  ): WishlistDelete

  """
  Set default wishlist for the user.
  """
  wishlistSetDefault(
    """
    ID of the target wishlist which should be set as default for the user.
    """
    wishlistId: ID!
  ): WishlistSetDefault

  """
  Update a wishlist item
  """
  wishlistItemUpdate(
    """
    ID of the wishlist item to update.
    """
    id: ID!

    """
    Fields that can be updated in the wishlist item
    """
    input: WishlistItemUpdateInput!
  ): WishlistItemUpdate

  """
  Add product to the current user's or target user's wishlist.
  """
  wishlistAddProduct(
    """
    The ID of the product.
    """
    productId: ID!

    """
    ID of the target user (available only for MPO). If not provided, the product will be added to the requester's wishlist.
    """
    userId: ID

    """
    ID of the target wishlist. If not provided, the product will be added to the default wishlist.
    """
    wishlistId: ID
  ): WishlistAddProduct

  """
  Remove product from the current user's wishlist.
  """
  wishlistRemoveProduct(
    """
    The ID of the product.
    """
    productId: ID!

    """
    ID of the target user (available only for MPO). If not provided, the product will be added to the requester's wishlist.
    """
    userId: ID

    """
    ID of the target wishlist. If not provided, the product will be added to the default wishlist.
    """
    wishlistId: ID
  ): WishlistRemoveProduct

  """
  Add product variant to the current user's wishlist.
  """
  wishlistAddVariant(
    """
    ID of the target user (available only for MPO). If not provided, the variant will be added to the requester's wishlist.
    """
    userId: ID

    """
    The ID of the product variant.
    """
    variantId: ID!

    """
    ID of the target wishlist. If not provided, the product will be added to the default wishlist.
    """
    wishlistId: ID
  ): WishlistAddProductVariant

  """
  Remove product variant from the current user's wishlist.
  """
  wishlistRemoveVariant(
    """
    ID of the target user (available only for MPO). If not provided, the variant will be added to the requester's wishlist.
    """
    userId: ID

    """
    The ID of the product variant.
    """
    variantId: ID!

    """
    ID of the target wishlist. If not provided, the product will be added to the default wishlist.
    """
    wishlistId: ID
  ): WishlistRemoveProductVariant

  """
  Adds products to a microsite.
  """
  micrositeAddProducts(
    """
    ID of a microsite.
    """
    micrositeId: ID!

    """
    List of product IDs.
    """
    products: [ID!]!
  ): MicrositeAddProducts
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Creates a new microsite.
  """
  micrositeCreate(
    """
    Fields required to create a microsite.
    """
    input: MicrositeCreateInput!
  ): MicrositeCreate
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Deletes a microsite.
  """
  micrositeDelete(
    """
    ID of a microsite to delete.
    """
    id: ID!
  ): MicrositeDelete
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Reorder the products of a microsite.
  """
  micrositeReorderProducts(
    """
    ID of a microsite.
    """
    micrositeId: ID!

    """
    The microsite products position operations.
    """
    moves: [MoveProductInput!]!
  ): MicrositeReorderProducts
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Deletes microsites.
  """
  micrositeBulkDelete(
    """
    List of microsite IDs to delete.
    """
    ids: [ID!]!
  ): MicrositeBulkDelete
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Publish microsites.
  """
  micrositeBulkPublish(
    """
    List of microsites IDs to (un)publish.
    """
    ids: [ID!]!

    """
    Determine if microsites will be published or not.
    """
    isPublished: Boolean!
  ): MicrositeBulkPublish
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Remove products from a microsite.
  """
  micrositeRemoveProducts(
    """
    ID of a microsite.
    """
    micrositeId: ID!

    """
    List of product IDs.
    """
    products: [ID!]!
  ): MicrositeRemoveProducts
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Updates a microsite.
  """
  micrositeUpdate(
    """
    ID of a microsite to update.
    """
    id: ID!

    """
    Fields required to update a microsite.
    """
    input: MicrositeInput!
  ): MicrositeUpdate
    @deprecated(reason: "Microsites will be removed on January 2, 2025.")

  """
  Creates a new agreement.
  """
  agreementCreate(
    """
    Fields required to create a agreement.
    """
    input: AgreementInput!
  ): AgreementCreate

  """
  Deletes a agreement.
  """
  agreementDelete(
    """
    ID of a agreement to delete.
    """
    id: ID!
  ): AgreementDelete

  """
  Deletes agreements.
  """
  agreementBulkDelete(
    """
    List of agreement IDs to delete.
    """
    ids: [ID!]!
  ): AgreementBulkDelete

  """
  Publish agreements.
  """
  agreementBulkPublish(
    """
    List of agreement IDs to (un)publish.
    """
    ids: [ID!]!

    """
    Determine if agreements will be published or not.
    """
    isPublished: Boolean!
  ): AgreementBulkPublish

  """
  Updates an existing agreement.
  """
  agreementUpdate(
    """
    ID of a agreement to update.
    """
    id: ID!

    """
    Fields required to update a agreement.
    """
    input: AgreementInput!
  ): AgreementUpdate

  """
  Creates a new agreement fee.
  """
  agreementFeeCreate(
    """
    Fields required to create a new agreement fee.
    """
    input: AgreementFeeInput
  ): AgreementFeeCreate

  """
  Deletes an agreement fee.
  """
  agreementFeeDelete(
    """
    ID of a agreement fee to delete.
    """
    id: ID!
  ): AgreementFeeDelete

  """
  Creates a new agreement commission.
  """
  agreementCommissionCreate(
    """
    Fields required to create a agreement commission.
    """
    input: AgreementCommissionCreateInput!
  ): AgreementCommissionCreate

  """
  Deletes an agreement commission.
  """
  agreementCommissionDelete(
    """
    ID of the agreement commission to delete.
    """
    id: ID!
  ): AgreementCommissionDelete

  """
  Acknowledge the seller agreement for seller id
  """
  sellerAgreementAcknowledge(
    """
    ID of the seller acknowledging the agreement
    """
    id: ID!
    input: SellerAgreementAcknowledgeInput
  ): SellerAgreementAcknowledge

  """
  Decline the seller agreement for seller id
  """
  sellerAgreementDecline(
    """
    ID of the seller declining the agreement
    """
    id: ID!
    input: SellerAgreementDeclineInput
  ): SellerAgreementDecline

  """
  Creates a new seller agreement mapping.
  """
  sellerAgreementAssign(
    """
    Fields required to create a seller agreement mapping
    """
    input: SellerAgreementInput!
  ): SellerAgreementAssign

  """
  Deletes a seller agreement mapping.
  """
  sellerAgreementDelete(
    """
    ID of seller agreement mapping to delete
    """
    id: ID!
  ): SellerAgreementDelete

  """
  Create new Seller and a new staff user and assign created user as Seller owner.
  """
  sellerWithOwnerCreate(
    """
    Billing address of seller and user.
    """
    defaultBillingAddress: AddressInput

    """
    Shipping address of seller and user.
    """
    defaultShippingAddress: AddressInput

    """
    Fields required to create a seller.
    """
    seller: DetailedSellerInput!

    """
    Fields required to create a staff user.
    """
    user: SellerOwnerCreateInput!
  ): SellerWithOwnerCreate

  """
  Create seller data.
  """
  sellerDataCreate(input: SellerInput!): SellerDataCreate

  """
  Allows [re-]assign a user to a seller
  """
  sellerUserMappingCreate(input: SellerUserInput!): SellerUserMappingCreate

  """
  Updates a sellers status and override information
  """
  sellerDataUpdate(id: ID!, input: SellerUpdateInput!): SellerDataUpdate

  """
  Create seller note.
  """
  sellerNoteCreate(input: SellerNoteInput!): SellerNoteCreate

  """
  Create a seller logo. Only for MP Admin, MP Staff, or the seller. This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  sellerLogoUpdate(
    """
    Represents an image file in a multipart request
    """
    image: Upload!
    seller: ID
  ): SellerLogoUpdate

  """
  Deletes a seller logo. Only for MP Admin, MP Staff, or the seller.
  """
  sellerLogoDelete(
    """
    ID of the seller to delete logo for
    """
    id: ID!
  ): SellerLogoDelete

  """
  Create a seller banner.This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  sellerBannerUpdate(
    """
    Represents an image file in a multipart request
    """
    banner: Upload!
    seller: ID!
  ): SellerBannerUpdate

  """
  Create a seller banner.This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  sellerBannerDelete(
    """
    ID of the seller to delete banner for
    """
    id: ID!
  ): SellerBannerDelete

  """
  Creates seller address.
  """
  sellerAddressCreate(
    """
    Fields required to create address.
    """
    input: AddressInput!

    """
    ID of a seller to create address for.
    """
    sellerId: ID!
  ): SellerAddressCreate

  """
  Updates an address.
  """
  sellerAddressUpdate(
    """
    ID of the address to update.
    """
    id: ID!

    """
    Fields required to update the address.
    """
    input: AddressInput!
  ): SellerAddressUpdate

  """
  Deletes an address.
  """
  sellerAddressDelete(
    """
    ID of the address to delete.
    """
    id: ID!
  ): SellerAddressDelete

  """
  Sets a default address for the given user.
  """
  sellerAddressSetDefault(
    """
    ID of the address.
    """
    addressId: ID!

    """
    ID of the seller to change the address for.
    """
    sellerId: ID!

    """
    The type of address.
    """
    type: AddressTypeEnum!
  ): SellerAddressSetDefault

  """
  Removes the user owner from a seller (including user's membership in the seller)
  """
  sellerOwnerDelete(sellerId: ID!): SellerOwnerDelete

  """
  Create seller shell.
  """
  sellerShellCreate(name: String!): SellerShellCreate

  """
  Updates settings for the given seller.
  """
  sellerSettingsUpdate(
    id: ID!
    input: SellerSettingsUpdateInput!
  ): SellerSettingsUpdate

  """
  Marks manually one checklist item as completed.
  """
  sellerOnboardingChecklistComplete(
    """
    Checklist ID
    """
    id: ID = null

    """
    Boolean is it completed or not. Default value is True
    """
    isCompleted: Boolean = true
  ): SellerOnboardingChecklistComplete

  """
  Updates application for the given seller.
  """
  sellerApplicationUpdate(
    """
    Seller ID.
    """
    id: ID!
    input: SellerApplicationUpdateInput!
  ): SellerApplicationUpdate

  """
  Create designer data.
  """
  designerDataCreate(input: DesignerDataInput!): DesignerDataCreate

  """
  Update existing designer data.
  """
  designerDataUpdate(
    input: DesignerDataInput
    name: String!
  ): DesignerDataUpdate

  """
  Creates a new webhook subscription.
  """
  webhookCreate(
    """
    Fields required to create a webhook.
    """
    input: WebhookCreateInput!
  ): WebhookCreate

  """
  Deletes a webhook subscription.
  """
  webhookDelete(
    """
    ID of a webhook to delete.
    """
    id: ID!
  ): WebhookDelete

  """
  Updates a webhook subscription.
  """
  webhookUpdate(
    """
    ID of a webhook to update.
    """
    id: ID!

    """
    Fields required to update a webhook.
    """
    input: WebhookUpdateInput!
  ): WebhookUpdate

  """
  Creates new warehouse.
  """
  warehouseCreate(
    """
    Fields required to create warehouse.
    """
    input: WarehouseCreateInput!
  ): WarehouseCreate

  """
  Updates given warehouse.
  """
  warehouseUpdate(
    """
    ID of a warehouse to update.
    """
    id: ID!

    """
    Fields required to update warehouse.
    """
    input: WarehouseUpdateInput!
  ): WarehouseUpdate

  """
  Deletes selected warehouse.
  """
  warehouseDelete(
    """
    ID of a warehouse to delete.
    """
    id: ID!
  ): WarehouseDelete

  """
  Creates a content page data object.
  """
  contentPageDataCreate(
    """
    Fields required to create content page data.
    """
    input: ContentPageDataCreateInput!
  ): ContentPageDataCreate

  """
  Updates a content page data object.
  """
  contentPageDataUpdate(
    """
    ID of the content page data to update.
    """
    id: ID!

    """
    Fields to updated content page data.
    """
    input: ContentPageDataUpdateInput!
  ): ContentPageDataUpdate

  """
  Creates a new content object.
  """
  contentCreate(
    """
    Fields required to create blank page content.
    """
    input: ContentCreateInput!
  ): ContentCreate

  """
  Auto saves a content object.
  """
  contentSave(
    """
    Id of the content we want to auto save.
    """
    id: ID!

    """
    Fields required to save content.
    """
    input: ContentSaveInput!
  ): ContentSave

  """
  Discards the latest changes of a content object.
  """
  contentDiscard(
    """
    Id of the content we want to discard.
    """
    id: ID!
  ): ContentDiscard

  """
  Publishes a content object.
  """
  contentPublish(
    """
    Id of the content we want to publish.
    """
    id: ID!

    """
    Fields required to publish content.
    """
    input: ContentPublishInput!
  ): ContentPublish

  """
  Deletes a voucher.
  """
  contentDelete(
    """
    ID of a content to delete.
    """
    id: ID!
  ): ContentDelete

  """
  Duplicate an existing content object.
  """
  contentDuplicate(
    """
    Id of the content we want to duplicate.
    """
    id: ID!

    """
    Fields required to create new page content.
    """
    input: ContentDuplicateInput!
  ): ContentDuplicate

  """
  Creates a new media object.
  """
  mediaCreate(
    """
    Fields required to create media.
    """
    input: MediaCreateInput!
  ): MediaCreate

  """
  Update a media object.
  """
  mediaUpdate(
    """
    ID of a media object to update.
    """
    id: ID!

    """
    Fields required to update a media object.
    """
    input: MediaUpdateInput!
  ): MediaUpdate

  """
  Deletes medias.
  """
  mediaBulkDelete(
    """
    List of media IDs to delete.
    """
    ids: [ID!]!
  ): MediaBulkDelete

  """
  Updates site domain of the shop.
  """
  shopDomainUpdate(
    """
    Fields required to update site.
    """
    input: SiteDomainInput
  ): ShopDomainUpdate
    @deprecated(reason: "This will be removed on November 28, 2024.")

  """
  Updates shop settings.
  """
  shopSettingsUpdate(
    """
    Fields required to update shop settings.
    """
    input: ShopSettingsInput!
  ): ShopSettingsUpdate
    @deprecated(
      reason: "This will be removed on November 28, 2024. Use marketplaceConfigurationUpdate instead."
    )

  """
  Fetch tax rates.
  """
  shopFetchTaxRates: ShopFetchTaxRates

  """
  Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
  """
  shopAddressUpdate(
    """
    Fields required to update shop address.
    """
    input: AddressInput
  ): ShopAddressUpdate
    @deprecated(
      reason: "This will be removed on November 28, 2024. Use marketplaceConfigurationUpdate instead."
    )

  """
  Create a new checkout theme.
  """
  checkoutThemeCreate(
    """
    Fields required to create a new checkout theme.
    """
    input: CheckoutThemeCreateInput!
  ): CheckoutThemeCreate

  """
  Update a checkout theme.
  """
  checkoutThemeUpdate(
    """
    ID of a checkout theme to update.
    """
    id: ID!

    """
    Fields required to update a checkout theme.
    """
    input: CheckoutThemeInput!
  ): CheckoutThemeUpdate

  """
  Creates a custom domain
  """
  customDomainCreate(input: CustomDomainCreateInput!): CustomDomainCreate

  """
  Deletes a custom domain
  """
  customDomainDelete(
    """
    ID of the domain to delete
    """
    id: ID!
  ): CustomDomainDelete

  """
  Create a new storefront theme.
  """
  storefrontThemeCreate(
    """
    Fields required to create a new storefront theme.
    """
    input: StorefrontThemeInput!
  ): StorefrontThemeCreate

  """
  Update a storefront theme.
  """
  storefrontThemeUpdate(
    """
    ID of a storefront theme to update.
    """
    id: ID!

    """
    Fields required to update a storefront theme.
    """
    input: StorefrontThemeInput!
  ): StorefrontThemeUpdate

  """
  Create new seller onboarding settings.
  """
  sellerOnboardingSettingsCreate(
    """
    Fields required to create seller onboarding settings.
    """
    input: SellerOnboardingSettingsCreateInput!
  ): SellerOnboardingSettingsCreate

  """
  Update seller onboarding settings.
  """
  sellerOnboardingSettingsUpdate(
    """
    ID of seller onboarding settings to update.
    """
    id: ID!

    """
    Fields required to update seller onboarding settings.
    """
    input: SellerOnboardingSettingsUpdateInput!
  ): SellerOnboardingSettingsUpdate

  """
  Creates a new shipping price.
  """
  shippingPriceCreate(
    """
    Fields required to create a shipping price.
    """
    input: ShippingPriceInput!
  ): ShippingPriceCreate

  """
  Deletes a shipping price.
  """
  shippingPriceDelete(
    """
    ID of a shipping price to delete.
    """
    id: ID!
  ): ShippingPriceDelete

  """
  Deletes shipping prices.
  """
  shippingPriceBulkDelete(
    """
    List of shipping price IDs to delete.
    """
    ids: [ID!]!
  ): ShippingPriceBulkDelete

  """
  Updates a new shipping price.
  """
  shippingPriceUpdate(
    """
    ID of a shipping price to update.
    """
    id: ID!

    """
    Fields required to update a shipping price.
    """
    input: ShippingPriceInput!
  ): ShippingPriceUpdate

  """
  Creates a new shipping zone.
  """
  shippingZoneCreate(
    """
    Fields required to create a shipping zone.
    """
    input: ShippingZoneCreateInput!
  ): ShippingZoneCreate

  """
  Deletes a shipping zone.
  """
  shippingZoneDelete(
    """
    ID of a shipping zone to delete.
    """
    id: ID!
  ): ShippingZoneDelete

  """
  Deletes shipping zones.
  """
  shippingZoneBulkDelete(
    """
    List of shipping zone IDs to delete.
    """
    ids: [ID!]!
  ): ShippingZoneBulkDelete

  """
  Updates a new shipping zone.
  """
  shippingZoneUpdate(
    """
    ID of a shipping zone to update.
    """
    id: ID!

    """
    Fields required to update a shipping zone.
    """
    input: ShippingZoneUpdateInput!
  ): ShippingZoneUpdate

  """
  Creates a new refund.
  """
  refundCreate(
    """
    Fields required to create a refund.
    """
    input: RefundCreateInput!
  ): RefundCreate

  """
  Updates a refund.
  """
  refundUpdate(
    """
    Refund ID to update.
    """
    id: ID!

    """
    Fields required to create a refund.
    """
    input: RefundUpdateInput!
  ): RefundUpdate

  """
  Deletes all specified refunds. The refunds must be in the REQUESTED state to be able to be deleted
  """
  refundsDelete(
    """
    List of refund IDs to delete.
    """
    ids: [ID!]!
  ): RefundBulkDelete

  """
  Updates the status of all specified refunds. All refunds must be able to make the state transition for any of them to update
  """
  refundsChangeStatus(
    """
    List of refund IDs to change.
    """
    ids: [ID!]!

    """
    The new status to update the refunds to
    """
    status: RefundStatusEnum!
  ): RefundsChangeStatus

  """
  Adds a refund lines to the existing refund.
  """
  refundLinesAdd(
    """
    A list of refund lines.
    """
    lineItems: [RefundLineInput!]!

    """
    The ID of the refund.
    """
    refundId: ID!
  ): RefundLinesAdd

  """
  Update lines in a refund.
  """
  refundLinesUpdate(
    """
    A list of refund lines.
    """
    lineItems: [RefundLineUpdateInput!]!

    """
    The ID of the refund.
    """
    refundId: ID!
  ): RefundLinesUpdate

  """
  Deletes all specified refund lines.
  """
  refundLinesDelete(
    """
    List of refund line IDs to delete.
    """
    ids: [ID!]!

    """
    Refund ID whose lines are to be deleted.
    """
    refundId: ID!
  ): RefundLineBulkDelete

  """
  Add manual payments to a refund
  """
  refundPaymentsAdd(
    """
    List of payment objects
    """
    payments: [RefundPaymentInput!]!

    """
    ID of refund.
    """
    refund: ID!
  ): RefundPaymentsAdd

  """
  Update refund payments.
  """
  refundPaymentsUpdate(
    """
    List of refund payments to update
    """
    payments: [RefundPaymentUpdateInput!]!

    """
    ID of refund.
    """
    refund: ID!
  ): RefundPaymentsUpdate

  """
  Deletes specified refund payments. The refund must be in the PROCESSING state.
  """
  refundPaymentsDelete(
    """
    List of refund payments IDs to delete.
    """
    ids: [ID!]!

    """
    Refund ID whose payments are to be deleted.
    """
    refundId: ID!
  ): RefundPaymentsDelete

  """
  Creates a new price book.
  """
  priceBookCreate(
    """
    Fields required to create a price book.
    """
    input: PriceBookCreateInput!
  ): PriceBookCreate

  """
  Updates an existing price book.
  """
  priceBookUpdate(
    """
    ID of a price book to update.
    """
    id: ID!

    """
    Fields required to update a price book.
    """
    input: PriceBookUpdateInput!
  ): PriceBookUpdate

  """
  Deletes a price book.
  """
  priceBookDelete(
    """
    ID of a price book to delete.
    """
    id: ID!
  ): PriceBookDelete

  """
  Deletes price books.
  """
  priceBookBulkDelete(
    """
    List of price book IDs to delete.
    """
    ids: [ID!]!
  ): PriceBookBulkDelete

  """
  Add a variant to price book.
  """
  priceBookVariantCreate(
    """
    Fields required to add a price book variant.
    """
    input: PriceBookVariantCreateInput!
  ): PriceBookVariantCreate

  """
  Updates an existing price book variant.
  """
  priceBookVariantUpdate(
    """
    ID of a price book variant to update.
    """
    id: ID!

    """
    Fields required to update a price book variant.
    """
    input: PriceBookVariantUpdateInput!
  ): PriceBookVariantUpdate

  """
  Deletes a price book variant.
  """
  priceBookVariantDelete(
    """
    ID of a price book variant to delete.
    """
    id: ID!
  ): PriceBookVariantDelete

  """
  Deletes price book's variants.
  """
  priceBookVariantBulkDelete(
    """
    List of price book variant IDs to delete.
    """
    ids: [ID!]!
  ): PriceBookVariantBulkDelete

  """
  Add a product to price book.
  """
  priceBookProductCreate(
    """
    Fields required to add a price book product.
    """
    input: PriceBookProductCreateInput!
  ): PriceBookProductCreate

  """
  Updates an existing price book product.
  """
  priceBookProductUpdate(
    """
    ID of a price book product to update.
    """
    id: ID!

    """
    Fields required to update a price book product.
    """
    input: PriceBookProductUpdateInput!
  ): PriceBookProductUpdate

  """
  Deletes a price book product.
  """
  priceBookProductDelete(
    """
    ID of a price book product to delete.
    """
    id: ID!
  ): PriceBookProductDelete

  """
  Deletes price book's products.
  """
  priceBookProductBulkDelete(
    """
    List of price book product IDs to delete.
    """
    ids: [ID!]!
  ): PriceBookProductBulkDelete

  """
  Add a product type to price book.
  """
  priceBookProductTypeCreate(
    """
    Fields required to add a price book product type.
    """
    input: PriceBookProductTypeCreateInput!
  ): PriceBookProductTypeCreate

  """
  Updates an existing price book product type.
  """
  priceBookProductTypeUpdate(
    """
    ID of a price book product type to update.
    """
    id: ID!

    """
    Fields required to update a price book product type.
    """
    input: PriceBookProductTypeUpdateInput!
  ): PriceBookProductTypeUpdate

  """
  Deletes a price book product type.
  """
  priceBookProductTypeDelete(
    """
    ID of a price book product type to delete.
    """
    id: ID!
  ): PriceBookProductTypeDelete

  """
  Deletes price book's product types.
  """
  priceBookProductTypeBulkDelete(
    """
    List of price book product type IDs to delete.
    """
    ids: [ID!]!
  ): PriceBookProductTypeBulkDelete

  """
  Add a user to price book.
  """
  userAddToPriceBook(
    """
    Fields required to add a user to price book.
    """
    input: UserAddToPriceBookInput!
  ): UserAddToPriceBook

  """
  Removes a user from price book.
  """
  userRemoveFromPriceBook(
    """
    ID of user to be removed from price book.
    """
    id: ID!
  ): UserRemoveFromPriceBook

  """
  Creates a new category.
  """
  categoryCreate(
    """
    Fields required to create a category.
    """
    input: CategoryInput!

    """
    ID of the parent category. If empty, category will be top level category.
    """
    parent: ID
  ): CategoryCreate

  """
  Deletes a category.
  """
  categoryDelete(
    """
    ID of a category to delete.
    """
    id: ID!
  ): CategoryDelete

  """
  Deletes categories.
  """
  categoryBulkDelete(
    """
    List of category IDs to delete.
    """
    ids: [ID!]!
  ): CategoryBulkDelete

  """
  Updates a category.
  """
  categoryUpdate(
    """
    ID of a category to update.
    """
    id: ID!

    """
    Fields required to update a category.
    """
    input: CategoryInput!
  ): CategoryUpdate

  """
  Adds products to a collection.
  """
  collectionAddProducts(
    """
    ID of a collection.
    """
    collectionId: ID!

    """
    List of product IDs.
    """
    products: [ID!]!
  ): CollectionAddProducts

  """
  Adds variants to a collection.
  """
  collectionAddVariants(
    """
    ID of a collection.
    """
    collectionId: ID!

    """
    List of variants IDs.
    """
    variants: [ID!]!
  ): CollectionAddVariants

  """
  Creates a new collection.
  """
  collectionCreate(
    """
    Fields required to create a collection.
    """
    input: CollectionCreateInput!
  ): CollectionCreate

  """
  Deletes a collection.
  """
  collectionDelete(
    """
    ID of a collection to delete.
    """
    id: ID!
  ): CollectionDelete

  """
  Reorder the products of a collection.
  """
  collectionReorderProducts(
    """
    ID of a collection.
    """
    collectionId: ID!

    """
    The collection products position operations.
    """
    moves: [MoveProductInput!]!
  ): CollectionReorderProducts

  """
  Deletes collections.
  """
  collectionBulkDelete(
    """
    List of collection IDs to delete.
    """
    ids: [ID!]!
  ): CollectionBulkDelete

  """
  Publish collections.
  """
  collectionBulkPublish(
    """
    List of collections IDs to (un)publish.
    """
    ids: [ID!]!

    """
    Determine if collections will be published or not.
    """
    isPublished: Boolean!
  ): CollectionBulkPublish

  """
  Remove products from a collection.
  """
  collectionRemoveProducts(
    """
    ID of a collection.
    """
    collectionId: ID!

    """
    List of product IDs.
    """
    products: [ID!]!
  ): CollectionRemoveProducts

  """
  Remove variants from a collection.
  """
  collectionRemoveVariants(
    """
    ID of a collection.
    """
    collectionId: ID!

    """
    List of variant IDs.
    """
    variants: [ID!]!
  ): CollectionRemoveVariants

  """
  Updates a collection.
  """
  collectionUpdate(
    """
    ID of a collection to update.
    """
    id: ID!

    """
    Fields required to update a collection.
    """
    input: CollectionInput!
  ): CollectionUpdate

  """
  Creates a new product.
  """
  productCreate(
    """
    Fields required to create a product.
    """
    input: ProductCreateInput!
  ): ProductCreate

  """
  Deletes a product.
  """
  productDelete(
    """
    ID of a product to delete.
    """
    id: ID!
  ): ProductDelete

  """
  Deletes products.
  """
  productBulkDelete(
    """
    List of product IDs to delete.
    """
    ids: [ID!]!
  ): ProductBulkDelete

  """
  Publish products.
  """
  productBulkPublish(
    """
    List of products IDs to publish.
    """
    ids: [ID!]!

    """
    Determine if products will be published or not.
    """
    isPublished: Boolean!
  ): ProductBulkPublish

  """
  Update product category for multiple products
  """
  productBulkCategoryUpdate(
    """
    ID of category to update all products to
    """
    category: ID!

    """
    List of product IDs to update category for
    """
    ids: [ID!]!
  ): ProductBulkCategoryUpdate

  """
  Updates an existing product.
  """
  productUpdate(
    """
    ID of a product to update.
    """
    id: ID!

    """
    Fields required to update a product.
    """
    input: ProductInput!
  ): ProductUpdate

  """
  Set product availability for purchase date.
  """
  productSetAvailabilityForPurchase(
    """
    Determine if product should be available for purchase.
    """
    isAvailable: Boolean!

    """
    Id of product that availability for purchase should be changed.
    """
    productId: ID!

    """
    A start date from which a product will be available for purchase. When not set and isAvailable is set to True, the current day is assumed.
    """
    startDate: Date
  ): ProductSetAvailabilityForPurchase

  """
  Create a product image. If URL is present, image will be taken from provided URL. If no URL provided, then this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  productImageCreate(
    """
    Fields required to create a product image.
    """
    input: ProductImageCreateInput!
  ): ProductImageCreate

  """
  Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook.
  """
  productReorderVariants(
    """
    The list of variant reordering operations.
    """
    moves: [ReorderInput!]!

    """
    Id of product that variants order will be altered.
    """
    productId: ID!
  ): ProductReorderVariants

  """
  Deletes a product image.
  """
  productImageDelete(
    """
    ID of a product image to delete.
    """
    id: ID!
  ): ProductImageDelete

  """
  Deletes product images.
  """
  productImageBulkDelete(
    """
    List of product image IDs to delete.
    """
    ids: [ID!]!
  ): ProductImageBulkDelete

  """
  Changes ordering of the product image.
  """
  productImageReorder(
    """
    IDs of a product images in the desired order.
    """
    imagesIds: [ID!]!

    """
    Id of product that images order will be altered.
    """
    productId: ID!
  ): ProductImageReorder

  """
  Updates a product image.
  """
  productImageUpdate(
    """
    ID of a product image to update.
    """
    id: ID!

    """
    Fields required to update a product image.
    """
    input: ProductImageUpdateInput!
  ): ProductImageUpdate

  """
  Creates a new product type.
  """
  productTypeCreate(
    """
    Fields required to create a product type.
    """
    input: ProductTypeInput!
  ): ProductTypeCreate

  """
  Deletes a product type.
  """
  productTypeDelete(
    """
    ID of a product type to delete.
    """
    id: ID!
  ): ProductTypeDelete

  """
  Deletes product types.
  """
  productTypeBulkDelete(
    """
    List of product type IDs to delete.
    """
    ids: [ID!]!
  ): ProductTypeBulkDelete

  """
  Updates an existing product type.
  """
  productTypeUpdate(
    """
    ID of a product type to update.
    """
    id: ID!

    """
    Fields required to update a product type.
    """
    input: ProductTypeInput!
  ): ProductTypeUpdate

  """
  Reorder the attributes of a product type.
  """
  productTypeReorderAttributes(
    """
    The list of attribute reordering operations.
    """
    moves: [ReorderInput!]!

    """
    ID of a product type.
    """
    productTypeId: ID!

    """
    The attribute type to reorder.
    """
    type: AttributeTypeEnum!
  ): ProductTypeReorderAttributes

  """
  Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  digitalContentCreate(
    """
    Fields required to create a digital content.
    """
    input: DigitalContentUploadInput!

    """
    ID of a product variant to upload digital content.
    """
    variantId: ID!
  ): DigitalContentCreate

  """
  Remove digital content assigned to given variant.
  """
  digitalContentDelete(
    """
    ID of a product variant with digital content to remove.
    """
    variantId: ID!
  ): DigitalContentDelete

  """
  Update digital content.
  """
  digitalContentUpdate(
    """
    Fields required to update a digital content.
    """
    input: DigitalContentInput!

    """
    ID of a product variant with digital content to update.
    """
    variantId: ID!
  ): DigitalContentUpdate

  """
  Generate new URL to digital content.
  """
  digitalContentUrlCreate(
    """
    Fields required to create a new url.
    """
    input: DigitalContentUrlCreateInput!
  ): DigitalContentUrlCreate

  """
  Creates a new variant for a product.
  """
  productVariantCreate(
    """
    Fields required to create a product variant.
    """
    input: ProductVariantCreateInput!
  ): ProductVariantCreate

  """
  Deletes a product variant.
  """
  productVariantDelete(
    """
    ID of a product variant to delete.
    """
    id: ID!
  ): ProductVariantDelete

  """
  Creates product variants for a given product.
  """
  productVariantBulkCreate(
    """
    ID of the product to create the variants for.
    """
    product: ID!

    """
    Input list of product variants to create.
    """
    variants: [ProductVariantBulkCreateInput!]!
  ): ProductVariantBulkCreate

  """
  Deletes product variants.
  """
  productVariantBulkDelete(
    """
    List of product variant IDs to delete.
    """
    ids: [ID!]!
  ): ProductVariantBulkDelete

  """
  Creates stocks for product variant.
  """
  productVariantStocksCreate(
    """
    Input list of stocks to create.
    """
    stocks: [StockInput!]!

    """
    ID of a product variant for which stocks will be created.
    """
    variantId: ID!
  ): ProductVariantStocksCreate

  """
  Delete stocks from product variant.
  """
  productVariantStocksDelete(
    """
    ID of product variant for which stocks will be deleted.
    """
    variantId: ID!
    warehouseIds: [ID!]
  ): ProductVariantStocksDelete

  """
  Update stocks for product variant.
  """
  productVariantStocksUpdate(
    """
    Input list of stocks to create.
    """
    stocks: [StockInput!]!

    """
    ID of a product variant for which stocks will be created.
    """
    variantId: ID!
  ): ProductVariantStocksUpdate

  """
  Updates an existing variant for product.
  """
  productVariantUpdate(
    """
    ID of a product variant to update.
    """
    id: ID!

    """
    Fields required to update a product variant.
    """
    input: ProductVariantInput!
  ): ProductVariantUpdate

  """
  Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook.
  """
  productVariantSetDefault(
    """
    Id of a product that will have the default variant set.
    """
    productId: ID!

    """
    Id of a variant that will be set as default.
    """
    variantId: ID!
  ): ProductVariantSetDefault

  """
  Assign an image to a product variant.
  """
  productVariantImageAssign(
    """
    ID of a product image to assign to a variant.
    """
    imageId: ID!

    """
    Only for use by Marketplace Operator, if true then the image ownership will transfer to the seller that owns the variant it is being assigned to, if false or not provided then image ownership will not transfer.
    """
    transferImageOwnership: Boolean

    """
    ID of a product variant.
    """
    variantId: ID!
  ): ProductVariantImageAssign

  """
  Unassign an image from a product variant.
  """
  productVariantImageUnassign(
    """
    ID of a product image to unassign from a variant.
    """
    imageId: ID!

    """
    ID of a product variant.
    """
    variantId: ID!
  ): ProductVariantImageUnassign

  """
  Creates a new feature for either a product or a variant.
  """
  featureCreate(
    """
    Fields required to create a feature
    """
    input: FeatureCreateInput!
  ): FeatureCreate
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Updates a feature.
  """
  featureUpdate(
    """
    ID of a feature to update.
    """
    id: ID!

    """
    Input required to update a feature.
    """
    input: FeatureInput!
  ): FeatureUpdate
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Deletes a feature.
  """
  featureDelete(
    """
    ID of a feature to delete.
    """
    id: ID!
  ): FeatureDelete
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Creates a new product or variant feature on a product type.
  """
  productTypeFeatureCreate(
    """
    Fields required to create a feature for a product type.
    """
    input: ProductTypeFeatureCreateInput!
  ): ProductTypeFeatureCreate
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Updates a product or variant feature on a product type.
  """
  productTypeFeatureUpdate(
    """
    ID of the product type feature to update.
    """
    id: ID!

    """
    Fields required to update a feature for a product type.
    """
    input: ProductTypeFeatureInput!
  ): ProductTypeFeatureUpdate
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Deletes a product or variant feature on a product type.
  """
  productTypeFeatureDelete(
    """
    ID of the product type feature to delete.
    """
    id: ID!
  ): ProductTypeFeatureDelete
    @deprecated(reason: "Features will be removed on January 2, 2025.")

  """
  Create a new location for the product.
  """
  productLocationCreate(
    """
    Fields required to create location.
    """
    input: LocationInput!

    """
    ID of the product to create a location against. This field is required and will be updated to ``required=True`` after 2023-07-20.
    """
    productId: ID
  ): ProductLocationCreate
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Updates a location for a product.
  """
  productLocationUpdate(
    """
    Fields required to update location.
    """
    input: LocationInput!

    """
    ID of the location to update. This field is required and will be updated to ``required=True`` after 2023-07-20.
    """
    locationId: ID

    """
    ID of the product to update a location against. This field is required and will be updated to ``required=True`` after 2023-07-20.
    """
    productId: ID
  ): ProductLocationUpdate
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Delete a location for a product.
  """
  productLocationDelete(
    """
    ID of the location to delete. This field is required and will be updated to ``required=True`` after 2023-07-20.
    """
    locationId: ID

    """
    ID of the product to delete a location against. This field is required and will be updated to ``required=True`` after 2023-07-20.
    """
    productId: ID
  ): ProductLocationDelete
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Sets a location type.
  """
  productSetLocationType(
    """
    ID of the location to update
    """
    locationId: ID

    """
    ID of the product to update a location against
    """
    productId: ID

    """
    The type of location.
    """
    type: LocationTypeEnum!
  ): ProductSetLocationType
    @deprecated(reason: "Locations will be removed on November 28, 2024.")

  """
  Captures the authorized payment amount.
  """
  paymentCapture(
    """
    Transaction amount.
    """
    amount: PositiveDecimal

    """
    Payment ID.
    """
    paymentId: ID!
  ): PaymentCapture

  """
  Voids the authorized payment.
  """
  paymentVoid(
    """
    Payment ID.
    """
    paymentId: ID!
  ): PaymentVoid

  """
  Creates a new page.
  """
  pageCreate(
    """
    Fields required to create a page.
    """
    input: PageInput!
  ): PageCreate

  """
  Deletes a page.
  """
  pageDelete(
    """
    ID of a page to delete.
    """
    id: ID!
  ): PageDelete

  """
  Deletes pages.
  """
  pageBulkDelete(
    """
    List of page IDs to delete.
    """
    ids: [ID!]!
  ): PageBulkDelete

  """
  Publish pages.
  """
  pageBulkPublish(
    """
    List of page IDs to (un)publish.
    """
    ids: [ID!]!

    """
    Determine if pages will be published or not.
    """
    isPublished: Boolean!
  ): PageBulkPublish

  """
  Updates an existing page.
  """
  pageUpdate(
    """
    ID of a page to update.
    """
    id: ID!

    """
    Fields required to update a page.
    """
    input: PageInput!
  ): PageUpdate

  """
  Completes creating an order.
  """
  draftOrderComplete(
    """
    ID of the order that will be completed.
    """
    id: ID!

    """
    Client-side generated data required to finalize the payment for a quote order.
    """
    paymentData: JSONString

    """
    ID of the seller to attach the order to
    """
    seller: ID!
  ): DraftOrderComplete

  """
  Completes creating an order.
  """
  nauticalDraftOrderComplete(
    """
    Optional ID of the Nautical Order to be completed. Either 'id' or 'token' must be provided to identify the Nautical Order. If both are provided, only the 'id' field will be used.
    """
    id: ID

    """
    Client-side generated data required to finalize the payment for a quote order.
    """
    paymentData: JSONString

    """
    Optional Token of the Nautical Order to be completed. Used to enable access by storefront user. Either 'id' or 'token' must be provided to identify the Nautical Order. If both are provided, only the 'id' field will be used.
    """
    token: String
  ): NauticalDraftOrderComplete

  """
  Update currency in the existing draft order object.
  """
  draftOrderSetTransactionCurrency(
    """
    Set currency for this nautical order and related items.
    """
    currency: MarketplaceConfigurationCurrencyEnum!

    """
    ID of the draft order to update transaction currency.
    """
    orderId: ID!
  ): DraftOrderSetTransactionCurrency

  """
  Update currency in the existing nautical draft order object, related nautical order lines, child order and their lines.
  """
  nauticalDraftOrderSetTransactionCurrency(
    """
    Set currency for this draft nautical order and related items.
    """
    currency: MarketplaceConfigurationCurrencyEnum!

    """
    ID of the draft nautical order to update transaction currenct.
    """
    nauticalOrderId: ID!
  ): NauticalDraftOrderSetTransactionCurrency

  """
  Creates a new draft order.
  """
  draftOrderCreate(
    """
    Fields required to create an order.
    """
    input: DraftOrderCreateInput!
  ): DraftOrderCreate

  """
  Creates a new Nautical draft order.
  """
  nauticalDraftOrderCreate(
    """
    Fields required to create an order.
    """
    input: NauticalDraftOrderCreateInput!
  ): NauticalDraftOrderCreate

  """
  Creates a new Nautical historical order.
  """
  nauticalHistoricalOrderCreate(
    """
    Fields required to create an historical order.
    """
    input: NauticalHistoricalOrderInput!
  ): NauticalHistoricalOrderCreate
    @deprecated(reason: "This mutation will be removed on February 18, 2025")

  """
  Deletes a draft order.
  """
  draftOrderDelete(
    """
    ID of a draft or quote order to delete.
    """
    id: ID!
  ): DraftOrderDelete

  """
  Deletes a draft order.
  """
  nauticalDraftOrderDelete(
    """
    ID of a Nautical draft to delete
    """
    id: ID!
  ): NauticalDraftOrderDelete

  """
  Deletes draft or quote orders.
  """
  draftOrderBulkDelete(
    """
    List of draft or quote order IDs to delete.
    """
    ids: [ID!]!
  ): DraftOrderBulkDelete

  """
  Deletes draft or quote orders.
  """
  nauticalDraftOrderBulkDelete(
    """
    List of draft or quote order IDs to delete.
    """
    ids: [ID!]!
  ): NauticalDraftOrderBulkDelete

  """
  Deletes order lines.
  """
  draftOrderLinesBulkDelete(
    """
    List of order lines IDs to delete.
    """
    ids: [ID!]!
  ): DraftOrderLinesBulkDelete

  """
  Deletes order lines.
  """
  nauticalDraftOrderLinesBulkDelete(
    """
    List of order lines IDs to delete.
    """
    ids: [ID!]!
  ): NauticalDraftOrderLinesBulkDelete

  """
  Create order lines for draft or quote orders.
  """
  draftOrderLinesCreate(
    """
    ID of the draft order to add the lines to.
    """
    id: ID!

    """
    Fields required to add order lines.
    """
    input: [OrderLineCreateInput!]!
  ): DraftOrderLinesCreate

  """
  Create order lines for a draft or quote order.
  """
  nauticalDraftOrderLinesCreate(
    """
    ID of the draft or quote order to add the lines to.
    """
    id: ID!

    """
    Fields required to add order lines.
    """
    input: [OrderLineCreateInput!]!
  ): NauticalDraftOrderLinesCreate

  """
  Deletes an order line from a draft or quote order.
  """
  draftOrderLineDelete(
    """
    ID of the order line to delete.
    """
    id: ID!
  ): DraftOrderLineDelete

  """
  Deletes an order line from a draft or quote order.
  """
  nauticalDraftOrderLineDelete(
    """
    ID of the order line to delete.
    """
    id: ID!
  ): NauticalDraftOrderLineDelete

  """
  Updates an order line of a draft or quote order.
  """
  draftOrderLineUpdate(
    """
    ID of the order line to update.
    """
    id: ID!

    """
    Fields required to update an order line.
    """
    input: OrderLineInput!
  ): DraftOrderLineUpdate

  """
  Updates an order line of a draft order.
  """
  nauticalDraftOrderLineUpdate(
    """
    ID of the order line to update.
    """
    id: ID!

    """
    Fields required to update an order line.
    """
    input: OrderLineInput!
  ): NauticalDraftOrderLineUpdate

  """
  Updates a draft order.
  """
  draftOrderUpdate(
    """
    ID of a draft order to update.
    """
    id: ID!

    """
    Fields required to update an order.
    """
    input: DraftOrderInput!
  ): DraftOrderUpdate

  """
  Updates a draft or quote nautical order.
  """
  nauticalDraftOrderUpdate(
    """
    ID of Nautical order to update.
    """
    id: ID

    """
    Fields required to update an order.
    """
    input: NauticalDraftOrderInput!

    """
    The order's token for access by storefront user.
    """
    token: String
  ): NauticalDraftOrderUpdate

  """
  Overrides unit net price of an order line of a draft or quote order.
  """
  draftOrderLinePriceOverride(
    """
    ID of the order line to update.
    """
    id: ID!

    """
    Fields required to override price for an order line.
    """
    input: OrderLinePriceOverrideInput!
  ): DraftOrderLinePriceOverride

  """
  Overrides unit net price of a marketplace order line of a draft, or quote order.
  """
  nauticalDraftOrderLinePriceOverride(
    """
    ID of the marketplace order line to update.
    """
    id: ID!

    """
    Fields required to override price for an order line.
    """
    input: OrderLinePriceOverrideInput!
  ): NauticalDraftOrderLinePriceOverride

  """
  Adds note to the order.
  """
  orderAddNote(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a note for the order.
    """
    input: OrderAddNoteInput!
  ): OrderAddNote

  """
  Adds note to the order.
  """
  nauticalOrderAddNote(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a note for the order.
    """
    input: OrderAddNoteInput!
  ): NauticalOrderAddNote

  """
  Add a note to an order line.
  """
  orderLineAddNote(
    """
    ID of the order line to add a note to.
    """
    id: ID!

    """
    Fields required to create a note for the line.
    """
    input: NoteInput!
  ): OrderLineAddNote

  """
  Add a note to a nautical order line.
  """
  nauticalOrderLineAddNote(
    """
    ID of the nautical order line to add a note to.
    """
    id: ID!

    """
    Fields required to create a note for the line.
    """
    input: NoteInput!
  ): NauticalOrderLineAddNote

  """
  Adds return notification note to the order.
  """
  orderReturnNotification(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a return notification for the order.
    """
    input: OrderReturnNotificationInput!
  ): OrderReturnNotification

  """
  Attempts to force a refresh of the existing taxes on a non-placed nautical order.
  """
  nauticalOrderRefreshTaxes(
    """
    ID of the nautical order to refresh taxes for.
    """
    id: ID!
  ): NauticalOrderRefreshTaxes

  """
  Apply an existing voucher code to a nautical order to give a discount.
  """
  nauticalOrderUpdateApplyVoucherCode(
    """
    ID of the nautical order to apply a voucher code to.
    """
    id: ID

    """
    Voucher code to apply to the nautical order.
    """
    voucherCode: String
  ): NauticalOrderUpdateApplyVoucherCode

  """
  Remove a discount from a nautical order.
  """
  nauticalOrderUpdateDeleteDiscount(
    """
    ID of the nautical order to remove a discount from.
    """
    id: ID
  ): NauticalOrderUpdateDeleteDiscount

  """
  Adds return notification note to the order.
  """
  nauticalOrderReturnNotification(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a return notification for the order.
    """
    input: OrderReturnNotificationInput!
  ): NauticalOrderReturnNotification

  """
  Adds return notification note to the order.
  """
  nauticalOrderReturnFromStorefrontNotification(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a return notification for the order.
    """
    input: OrderReturnNotificationInput!
  ): NauticalOrderReturnFromStorefrontNotification

  """
  Adds return notification note to the order.
  """
  vendorOrderReturnFromStorefrontNotification(
    """
    ID of the order to add a note for.
    """
    order: ID!

    """
    Fields required to create a return notification for the order.
    """
    input: OrderReturnNotificationInput!
  ): VendorOrderReturnFromStorefrontNotification

  """
  Cancel an order.
  """
  orderCancel(
    """
    ID of the order to cancel.
    """
    id: ID!
  ): OrderCancel

  """
  Cancel an order.
  """
  nauticalOrderCancel(
    """
    ID of the order to cancel.
    """
    id: ID!
  ): NauticalOrderCancel

  """
  Cancel a nautical quote order.
  """
  nauticalQuoteOrderCancel(
    """
    ID of the nautical order to cancel.
    """
    id: ID!
  ): NauticalQuoteOrderCancel

  """
  Capture a nautical order.
  """
  nauticalOrderCapture(
    """
    Amount of money to capture.
    """
    amount: PositiveDecimal!

    """
    ID of the nautical order to capture.
    """
    id: ID!

    """
    ID of the payment attached to the nautical order to capture. If not specified, the last payment on the order will be used.
    """
    paymentId: ID
  ): NauticalOrderCapture

  """
  Creates new fulfillments for an order.
  """
  orderFulfill(
    """
    Fields required to create an fulfillment.
    """
    input: OrderFulfillInput!

    """
    ID of the order to be fulfilled.
    """
    order: ID
  ): OrderFulfill

  """
  Decline (permanently) part of an order. The buyer will not be charged for the missing stock. Use if stock in a warehouse is damaged, expired, or unavailable.
  """
  orderDeclineFulfillment(
    """
    Fields required to mark specific line items as declined.
    """
    input: DeclineFulfillInput!

    """
    ID of the order that items will be declined on.
    """
    order: ID
  ): OrderDeclineFulfillment

  """
  Cancels existing fulfillment and optionally restocks items.
  """
  orderFulfillmentCancel(
    """
    ID of an fulfillment to cancel.
    """
    id: ID!

    """
    Fields required to cancel an fulfillment.
    """
    input: FulfillmentCancelInput!
  ): FulfillmentCancel

  """
  Returns selected quantity from fulfillment lines and restocks items.
  """
  orderFulfillmentReturn(
    """
    ID of fulfillment to return.
    """
    id: ID!

    """
    Fields required to return an fulfillment.
    """
    input: FulfillmentReturnInput!
  ): FulfillmentReturn

  """
  Updates a fulfillment for an order.
  """
  orderFulfillmentUpdateTracking(
    """
    ID of an fulfillment to update.
    """
    id: ID!

    """
    Fields required to update an fulfillment.
    """
    input: FulfillmentUpdateTrackingInput!
  ): FulfillmentUpdateTracking

  """
  Updated return status of existing fulfillment and optionally restocks items.
  """
  orderFulfillmentUpdateReturnStatus(
    """
    ID of fulfillment to change return statuses on.
    """
    id: ID!

    """
    Fields required to update return status on fulfillment.
    """
    input: FulfillmentUpdateReturnStatusInput!
  ): FulfillmentReturnStatusBulkUpdate

  """
  Processes return requests by grabbing the return status and
  """
  fulfillmentBulkReturn(
    input: [BulkFulfillmentReturnInput!]
  ): FulfillmentBulkReturn

  """
  Marks a fully fulfilled Order as delivered.
  """
  orderMarkAsDelivered(
    """
    ID of order to mark as delivered (must currently be in fulfilled status)
    """
    id: ID!
  ): OrderMarkAsDelivered

  """
  Mark order as manually paid.
  """
  nauticalOrderMarkAsPaid(
    """
    ID of the order to mark paid.
    """
    id: ID!
  ): NauticalOrderMarkAsPaid

  """
  Updates an order.
  """
  orderUpdate(
    """
    ID of an order to update.
    """
    id: ID!

    """
    Fields required to update an order.
    """
    input: OrderUpdateInput!
  ): OrderUpdate

  """
  Updates an order.
  """
  nauticalOrderUpdate(
    """
    ID of order to update
    """
    id: ID!

    """
    Fields required to update an order.
    """
    input: NauticalOrderUpdateInput!
  ): NauticalOrderUpdate

  """
  Modifies the payout status of an order
  """
  orderPayoutStatusUpdate(
    """
    Target order id.
    """
    id: ID!
    input: OrderPayoutStatusUpdateInput!
  ): OrderPayoutStatusUpdate
    @deprecated(reason: "This will be removed on February 26, 2025.")

  """
  Updates a shipping method of the order.
  """
  orderUpdateShipping(
    """
    ID of the order to update a shipping method.
    """
    order: ID!

    """
    Fields required to change shipping method of the order.
    """
    input: OrderUpdateShippingInput
  ): OrderUpdateShipping

  """
  Updates a shipping method of the order.
  """
  nauticalOrderUpdateShipping(
    """
    ID of the order to update a shipping method.
    """
    order: ID!

    """
    Fields required to change shipping methods of the nautical order.
    """
    input: NauticalOrderUpdateShippingInput
  ): NauticalOrderUpdateShipping

  """
  Updates a marketplace shipping method of the order.
  """
  nauticalOrderUpdateMarketplaceShipping(
    """
    ID of the order to update a marketplce shipping method.
    """
    order: ID!

    """
    Fields required to change marketplace shipping methods of the nautical order.
    """
    input: NauticalOrderUpdateMarketplaceShippingInput
  ): NauticalOrderUpdateMarketplaceShipping

  """
  Void a nautical order.
  """
  nauticalOrderVoid(
    """
    ID of the order to void.
    """
    id: ID!

    """
    ID of the payment attached to the nautical order to capture. If not specified, the last payment on the order will be used.
    """
    paymentId: ID
  ): NauticalOrderVoid

  """
  Cancels orders.
  """
  orderBulkCancel(
    """
    List of orders IDs to cancel.
    """
    ids: [ID!]!
  ): OrderBulkCancel

  """
  Cancels nautical order lines, associated order lines, and removes allocations for that order line.
  """
  nauticalOrderLineBulkCancel(
    """
    List of nautical order line IDs to cancel.
    """
    ids: [ID!]!
  ): NauticalOrderLineBulkCancel

  """
  Create and process a new payment for given nautical order. Be aware that in nautical orders flow, payment will be handled as part of this mutation; while in checkout flow, it will be processed as part of CheckoutComplete mutation.
  """
  nauticalOrderPaymentCreate(
    """
    Data required to create a new payment.
    """
    input: PaymentInput!

    """
    Marketplace Order ID.
    """
    orderId: ID!
  ): NauticalOrderPaymentCreate

  """
  Sends a quote order to a customer.
  """
  nauticalQuoteOrderSendToCustomer(
    """
    ID of the order (nautical or seller order, with Quote status) to send to the customer.
    """
    id: ID!

    """
    URL to send customer to for quote confirmation. Whatever URL is sent will have `token` added to the search parameters of the URL, e.g. if you send http://localhost/quote, the generated URL will be http://localhost/quote?token=...
    """
    storefrontUrl: String!
  ): NauticalQuoteOrderSendToCustomer
    @deprecated(
      reason: "The ability to send Order IDs will be removed on February 26, 2025."
    )

  """
  Creates a new order fee.
  """
  orderFeeCreate(
    """
    Fields required to create a new order fee.
    """
    input: OrderFeeInput!
  ): OrderFeeCreate

  """
  Deletes a order fee.
  """
  orderFeeDelete(
    """
    ID of an order fee to delete.
    """
    id: ID!
  ): OrderFeeDelete

  """
  Uploads lines for a draft order via CSV. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  nauticalOrderLinesCsvUpload(
    """
    Represents a csv file, must have at least 3 columns, one being titled 'id_type', one being 'id', and one being 'quantity'.
    """
    file: Upload!

    """
    ID of the nautical order to update lines for.
    """
    orderId: ID!
  ): NauticalOrderLinesCsvUpload

  """
  Uploads lines for a draft order via CSV. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  orderLinesCsvUpload(
    """
    Represents a csv file, must have at least 3 columns, one being titled 'id_type', one being 'id', and one being 'quantity'.
    """
    file: Upload!

    """
    ID of the order to upload lines to.
    """
    orderId: ID!
  ): OrderLinesCsvUpload

  """
  Delete metadata of an object.
  """
  metadataDelete(
    """
    ID of an object to update.
    """
    id: ID!

    """
    Metadata keys to delete.
    """
    keys: [String!]!
  ): MetadataDelete

  """
  Delete object's private metadata.
  """
  privateMetadataDelete(
    """
    ID of an object to update.
    """
    id: ID!

    """
    Metadata keys to delete.
    """
    keys: [String!]!
  ): PrivateMetadataDelete

  """
  Updates metadata of an object.
  """
  metadataUpdate(
    """
    ID of an object to update.
    """
    id: ID!

    """
    Fields required to update the object's metadata.
    """
    input: [MetadataInput!]!
  ): MetadataUpdate

  """
  Updates private metadata of an object.
  """
  privateMetadataUpdate(
    """
    ID of an object to update.
    """
    id: ID!

    """
    Fields required to update the object's metadata.
    """
    input: [MetadataInput!]!
  ): PrivateMetadataUpdate

  """
  Creates a new Menu.
  """
  menuCreate(
    """
    Fields required to create a menu.
    """
    input: MenuCreateInput!
  ): MenuCreate

  """
  Deletes a menu.
  """
  menuDelete(
    """
    ID of a menu to delete.
    """
    id: ID!
  ): MenuDelete

  """
  Deletes menus.
  """
  menuBulkDelete(
    """
    List of menu IDs to delete.
    """
    ids: [ID!]!
  ): MenuBulkDelete

  """
  Updates a menu.
  """
  menuUpdate(
    """
    ID of a menu to update.
    """
    id: ID!

    """
    Fields required to update a menu.
    """
    input: MenuInput!
  ): MenuUpdate

  """
  Creates a new menu item.
  """
  menuItemCreate(
    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemCreateInput!
  ): MenuItemCreate

  """
  Deletes a menu item.
  """
  menuItemDelete(
    """
    ID of a menu item to delete.
    """
    id: ID!
  ): MenuItemDelete

  """
  Deletes menu items.
  """
  menuItemBulkDelete(
    """
    List of menu item IDs to delete.
    """
    ids: [ID!]!
  ): MenuItemBulkDelete

  """
  Updates a menu item.
  """
  menuItemUpdate(
    """
    ID of a menu item to update.
    """
    id: ID!

    """
    Fields required to update a menu item. Only one of `url`, `category`, `page`, `collection` is allowed per item.
    """
    input: MenuItemInput!
  ): MenuItemUpdate

  """
  Moves items of menus.
  """
  menuItemMove(
    """
    ID of the menu.
    """
    menu: ID!

    """
    The menu position data.
    """
    moves: [MenuItemMoveInput!]!
  ): MenuItemMove

  """
  Request an invoice for the order using plugin.
  """
  invoiceRequest(
    """
    Document type (for order requests): 1) Invoice, 2) Packing Slip, 3) Purchase order, 4) Pre-forma-invoice.
    """
    documentType: Int

    """
    Invoice number, if not provided it will be generated.
    """
    number: String

    """
    ID of the order related to invoice.
    """
    orderId: ID

    """
    ID of the refund related to the refund receipt.
    """
    refundId: ID
  ): InvoiceRequest

  """
  Requests deletion of an invoice.
  """
  invoiceRequestDelete(
    """
    ID of an invoice to request the deletion.
    """
    id: ID!
  ): InvoiceRequestDelete

  """
  Creates a ready to send invoice.
  """
  invoiceCreate(
    """
    Fields required when creating an invoice.
    """
    input: InvoiceCreateInput!

    """
    ID of the order related to invoice.
    """
    orderId: ID!
  ): InvoiceCreate

  """
  Deletes an invoice.
  """
  invoiceDelete(
    """
    ID of an invoice to delete.
    """
    id: ID!
  ): InvoiceDelete

  """
  Updates an invoice.
  """
  invoiceUpdate(
    """
    ID of an invoice to update.
    """
    id: ID!

    """
    Fields to use when updating an invoice.
    """
    input: UpdateInvoiceInput!
  ): InvoiceUpdate

  """
  Send an invoice notification to the customer.
  """
  invoiceSendNotification(
    """
    ID of an invoice to be sent.
    """
    id: ID!
  ): InvoiceSendNotification

  """
  Refreshes an invoice.
  """
  invoiceRefresh(
    """
    Document type: 1) Invoice, 2) Packing Slip, 3) Purchase Order. 4) Pre-forma Invoice
    """
    documentType: Int

    """
    ID of an invoice to refresh.
    """
    id: ID!
  ): InvoiceRefresh

  """
  Finalizes an invoice.
  """
  invoiceFinalize(
    """
    ID of an invoice to finalize. This converts 'is_editable' flag to False which prevents refreshing invoice
    """
    id: ID!
  ): InvoiceFinalize

  """
  Cancels an invoice.
  """
  invoiceCancel(
    """
    ID of an invoice to cancel. This converts 'is_valid' flag to False which prevents sending the invoice to customer
    """
    id: ID!
  ): InvoiceCancel

  """
  Update plugin configuration.
  """
  pluginUpdate(
    """
    ID of plugin to update.
    """
    id: ID!

    """
    Fields required to update a plugin configuration.
    """
    input: PluginUpdateInput!
  ): PluginUpdate

  """
  Import foreign catalog.
  """
  catalogImport(
    """
    Plugin ID
    """
    id: ID

    """
    Seller ID
    """
    sellerId: ID
  ): CatalogImport

  """
  Export catalog.
  """
  catalogExport(
    """
    Plugin ID
    """
    id: ID

    """
    Seller ID
    """
    sellerId: ID
  ): CatalogExport

  """
  Export customer list.
  """
  customersExport(
    """
    Plugin ID
    """
    id: ID

    """
    Seller ID
    """
    sellerId: ID
  ): CustomersExport

  """
  Update plugin flow.
  """
  pluginFlowUpdate(
    """
    ID of plugin to update mapping for.
    """
    id: ID!

    """
    Fields required to update a plugins sync settings.
    """
    input: PluginFlowInput
  ): PluginFlowUpdate

  """
  Delete plugin flow.
  """
  pluginFlowDelete(
    """
    ID of flow to delete.
    """
    id: ID!
  ): PluginFlowDelete

  """
  Retrieves an onboarding link for the given vendor from the given gateway if available.
  """
  vendorPayoutOnboardingLinkRequest(
    """
    Payout gateway to retrieve onboarding link from
    """
    gateway: String!

    """
    Refresh url to route back to when onboarding link needs to be refreshed
    """
    refreshUrl: String!

    """
    Return url to route back to after onboarding is completed or interrupted
    """
    returnUrl: String!

    """
    ID of the vendor to retrieve an onboarding link for
    """
    vendorId: ID!

    """
    Whether the vendor to retrieve an onboarding link for is a SELLER or an AFFILIATE
    """
    vendorType: String
      @deprecated(reason: "This will be removed on January 24, 2025.")
  ): VendorPayoutOnboardingLinkRequest

  """
  Refreshes currency exchange rates. Must have a currency exchange app enabled in the app marketplace.
  """
  exchangeRatesRefresh(
    """
    ID of the plugin to use to refresh exchange rates.
    """
    plugin: String!
  ): ExchangeRatesRefresh

  """
  Create a checkout event.
  """
  checkoutEventTriggered(
    """
    ID of the checkout or order that triggered the event.
    """
    checkoutId: String!

    """
    The type of checkout event.
    """
    type: CheckoutEventType!
  ): CheckoutEventTriggered

  """
  Correct a previous journal entry by supplying
  """
  journalEntryCorrect(
    """
    Fields required to create a correction journal entry.
    """
    input: JournalEntryCorrectInput!
  ): JournalEntryCorrect

  """
  Creates a new sale.
  """
  saleCreate(
    """
    Fields required to create a sale.
    """
    input: SaleInput!
  ): SaleCreate

  """
  Deletes a sale.
  """
  saleDelete(
    """
    ID of a sale to delete.
    """
    id: ID!
  ): SaleDelete

  """
  Deletes sales.
  """
  saleBulkDelete(
    """
    List of sale IDs to delete.
    """
    ids: [ID!]!
  ): SaleBulkDelete

  """
  Updates a sale.
  """
  saleUpdate(
    """
    ID of a sale to update.
    """
    id: ID!

    """
    Fields required to update a sale.
    """
    input: SaleInput!
  ): SaleUpdate

  """
  Adds products, variants, categories, or collections to a sale.
  """
  saleCataloguesAdd(
    """
    ID of a sale.
    """
    id: ID!

    """
    Fields required to modify catalogue IDs of sale.
    """
    input: CatalogueInput!
  ): SaleAddCatalogues

  """
  Removes products, variants, categories, or collections from a sale.
  """
  saleCataloguesRemove(
    """
    ID of a sale.
    """
    id: ID!

    """
    Fields required to modify catalogue IDs of sale.
    """
    input: CatalogueInput!
  ): SaleRemoveCatalogues

  """
  Creates a new voucher.
  """
  voucherCreate(
    """
    Fields required to create a voucher.
    """
    input: VoucherInput!
  ): VoucherCreate

  """
  Deletes a voucher.
  """
  voucherDelete(
    """
    ID of a voucher to delete.
    """
    id: ID!
  ): VoucherDelete

  """
  Deletes vouchers.
  """
  voucherBulkDelete(
    """
    List of voucher IDs to delete.
    """
    ids: [ID!]!
  ): VoucherBulkDelete

  """
  Updates a voucher.
  """
  voucherUpdate(
    """
    ID of a voucher to update.
    """
    id: ID!

    """
    Fields required to update a voucher.
    """
    input: VoucherInput!
  ): VoucherUpdate

  """
  Adds products, variants, categories, or collections to a voucher.
  """
  voucherCataloguesAdd(
    """
    ID of a voucher.
    """
    id: ID!

    """
    Fields required to modify catalogue IDs of voucher.
    """
    input: CatalogueInput!
  ): VoucherAddCatalogues

  """
  Removes products, variants, categories, or collections from a voucher.
  """
  voucherCataloguesRemove(
    """
    ID of a voucher.
    """
    id: ID!

    """
    Fields required to modify catalogue IDs of voucher.
    """
    input: CatalogueInput!
  ): VoucherRemoveCatalogues

  """
  Gets and sets Explo dashboard embedding token in cookies
  """
  dashboardEmbeddingToken: DashboardEmbeddingToken

  """
  Export products to csv file.
  """
  productsExport(
    """
    Fields required to export product data
    """
    input: ExportProductsInput!
  ): ProductsExport

  """
  Import products with csv file.
  """
  productsImport(
    """
    Represents a file in a multipart request.
    """
    file: Upload!
  ): ProductsImport

  """
  Adds a gift card or a voucher to a checkout.
  """
  checkoutAddPromoCode(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Gift card code or voucher code.
    """
    promoCode: String!
  ): CheckoutAddPromoCode

  """
  Update billing address in the existing checkout.
  """
  checkoutBillingAddressUpdate(
    """
    The billing address of the checkout.
    """
    billingAddress: AddressInput!

    """
    ID of the checkout.
    """
    checkoutId: ID!
  ): CheckoutBillingAddressUpdate

  """
  Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
  """
  checkoutComplete(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    ID of microsite that checkout was completed from
    """
    microsite: ID
      @deprecated(reason: "This will be removed on January 24, 2025.")

    """
    Client-side generated data required to finalize the payment.
    """
    paymentData: JSONString

    """
    PO Number to be used when checking out with the Purchase Order payment gateway
    """
    poNumber: String

    """
    URL of a view where users should be redirected to see the order details. URL in RFC 1808 format.
    """
    redirectUrl: String

    """
    Determines whether to store the payment source for future usage.
    """
    storeSource: Boolean = false

    """
    ID of the user to override with (only available for use by Marketplace Administrators)
    """
    userOverride: ID

    """
    Determines whether the email sent out is catered to carriers instead of customers
    """
    vehicles: Boolean = false
    volumeDiscount: Float
      @deprecated(reason: "This will be removed on February 1, 2025.")
  ): CheckoutComplete

  """
  Converts checkout to nautical quote order with the same id as checkout has when checkout is ready to be converted into quote order. This mutation should delete current checkout in case when order is created.
  """
  checkoutConvertToNauticalQuoteOrder(
    """
    Checkout ID.
    """
    checkoutId: ID!
  ): CheckoutConvertToNauticalQuoteOrder

  """
  Create a new checkout.
  """
  checkoutCreate(
    """
    Fields required to create checkout.
    """
    input: CheckoutCreateInput!
  ): CheckoutCreate

  """
  Sets the customer as the owner of the checkout.
  """
  checkoutCustomerAttach(
    """
    ID of the checkout.
    """
    checkoutId: ID!
  ): CheckoutCustomerAttach

  """
  Removes the user assigned as the owner of the checkout.
  """
  checkoutCustomerDetach(
    """
    Checkout ID.
    """
    checkoutId: ID!
  ): CheckoutCustomerDetach

  """
  Updates email address in the existing checkout object.
  """
  checkoutEmailUpdate(
    """
    Checkout ID.
    """
    checkoutId: ID

    """
    email.
    """
    email: String!
  ): CheckoutEmailUpdate

  """
  Update currency in the existing checkout object.
  """
  checkoutSetTransactionCurrency(
    """
    Checkout ID.
    """
    checkoutId: ID

    """
    Set currency for this checkout.
    """
    currency: MarketplaceConfigurationCurrencyEnum!
  ): CheckoutSetTransactionCurrency

  """
  Updates the checkout note on the provided checkout.
  """
  checkoutNoteUpdate(
    """
    The ID of the checkout.
    """
    checkoutId: ID!

    """
    The note to update the checkout with.
    """
    note: String!
  ): CheckoutNoteUpdate

  """
  Deletes a CheckoutLine.
  """
  checkoutLineDelete(
    """
    The ID of the checkout.
    """
    checkoutId: ID!

    """
    ID of the checkout line to delete.
    """
    lineId: ID
  ): CheckoutLineDelete

  """
  Adds a checkout line to the existing checkout.
  """
  checkoutLinesAdd(
    """
    The ID of the checkout.
    """
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput!]!
  ): CheckoutLinesAdd

  """
  Updates checkout line in the existing checkout.
  """
  checkoutLinesUpdate(
    """
    The ID of the checkout.
    """
    checkoutId: ID!

    """
    A list of checkout lines, each containing information about an item in the checkout.
    """
    lines: [CheckoutLineInput!]!
  ): CheckoutLinesUpdate

  """
  Remove a gift card or a voucher from a checkout.
  """
  checkoutRemovePromoCode(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Gift card code or voucher code.
    """
    promoCode: String!
  ): CheckoutRemovePromoCode

  """
  Create a new payment for given checkout.
  """
  checkoutPaymentCreate(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Data required to create a new payment.
    """
    input: PaymentInput!
  ): CheckoutPaymentCreate

  """
  Update shipping address in the existing checkout.
  """
  checkoutShippingAddressUpdate(
    """
    ID of the checkout.
    """
    checkoutId: ID!

    """
    The mailing address to where the checkout will be shipped.
    """
    shippingAddress: AddressInput!
  ): CheckoutShippingAddressUpdate

  """
  Updates the seller shipping methods of the checkout.
  """
  checkoutSellerShippingMethodsUpdate(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Seller DB id representation as a string.
    """
    seller: ID!

    """
    Optional override amount for shipping method price.Be aware, you should send this field on each request. For example, if you will set this field and then will send the same shipping method (or a new one) without this field (in the context of the same seller) - the price will be restored based on the shipping method price.
    """
    shippingMethodPriceOverrideAmount: PositiveDecimal
      @deprecated(
        reason: "Price overrides on checkouts are inherently dangerous because checkouts serve both authenticated and unauthenticated users."
      )
    shippingMethodSelection: ID!
  ): CheckoutSellerShippingMethodsUpdate

  """
  Updates the marketplace shipping methods of the checkout.
  """
  checkoutMarketplaceShippingMethodUpdate(
    """
    Checkout ID.
    """
    checkoutId: ID!
    shippingMethodSelection: ID!
  ): CheckoutMarketplaceShippingMethodUpdate

  """
  Bulk clears the seller shipping methods of the checkout.
  """
  checkoutSellerShippingMethodsBulkUpdate(
    """
    Checkout ID.
    """
    checkoutId: ID!
    sellerShippingMethods: [SellerShippingMethodInput!]
  ): CheckoutSellerShippingMethodsBulkUpdate

  """
  Clears the seller shipping methods of the checkout.
  """
  checkoutSellerShippingMethodsClear(
    """
    Checkout ID.
    """
    checkoutId: ID!
  ): CheckoutSellerShippingMethodsClear

  """
  Deletes a checkout.
  """
  checkoutDelete(
    """
    Token of a checkout to delete.
    """
    token: UUID!
  ): CheckoutDelete

  """
  Adds purchase order number to a checkout.
  """
  checkoutAddPoNumbers(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Optional purchase order numbers of documents that outline what the buyer would like to purchase and how much of it they would like to receive
    """
    poNumbers: [String!]!
  ): CheckoutAddPONumbers

  """
  Remove a purchase order from a checkout.
  """
  checkoutRemovePoNumbers(
    """
    Checkout ID.
    """
    checkoutId: ID!

    """
    Purchase order number.
    """
    poNumber: String!
  ): CheckoutRemovePONumbers

  """
  Add a note to a checkout line.
  """
  checkoutLineAddNote(
    """
    ID of the checkout line to add a note to.
    """
    id: ID!

    """
    Fields required to create a note for the line.
    """
    input: NoteInput!
  ): CheckoutLineAddNote

  """
  Creates an attribute.
  """
  attributeCreate(
    """
    Fields required to create an attribute.
    """
    input: AttributeCreateInput!
  ): AttributeCreate

  """
  Deletes an attribute.
  """
  attributeDelete(
    """
    ID of an attribute to delete.
    """
    id: ID!
  ): AttributeDelete

  """
  Deletes attributes.
  """
  attributeBulkDelete(
    """
    List of attribute IDs to delete.
    """
    ids: [ID!]!
  ): AttributeBulkDelete

  """
  Assign attributes to a given product type.
  """
  attributeAssign(
    """
    The operations to perform.
    """
    operations: [AttributeAssignInput!]!

    """
    ID of the product type to assign the attributes into.
    """
    productTypeId: ID!
  ): AttributeAssign

  """
  Un-assign attributes from a given product type.
  """
  attributeUnassign(
    """
    The IDs of the attributes to assign.
    """
    attributeIds: [ID!]!

    """
    ID of the product type to assign the attributes into.
    """
    productTypeId: ID!
  ): AttributeUnassign

  """
  Updates attribute.
  """
  attributeUpdate(
    """
    ID of an attribute to update.
    """
    id: ID!

    """
    Fields required to update an attribute.
    """
    input: AttributeUpdateInput!
  ): AttributeUpdate

  """
  Assign attributes to a given custom field template.
  """
  customAttributeAssign(
    """
    The operations to perform.
    """
    operations: [AttributeAssignInput!]!

    """
    Enum choice of desired model for custom field template.
    """
    template: CustomFieldTemplateEnum!
  ): CustomAttributeAssign

  """
  Un-assign attributes from a given custom field template.
  """
  customAttributeUnassign(
    """
    The IDs of the attributes to assign.
    """
    attributeIds: [ID!]!

    """
    Enum choice of desired model for custom field template.
    """
    template: CustomFieldTemplateEnum!
  ): CustomAttributeUnassign

  """
  Unassign the specified attribute from an instance.
  """
  instanceAttributeUnassign(
    """
    ID of the attribute you wish to remove from the instance.
    """
    attributeId: ID!

    """
    True if removing a custom field attribute, false if removing a product or variant attribute.
    """
    custom: Boolean!

    """
    ID of a product, variant, user, category, or collection.
    """
    instanceId: ID!
  ): InstanceAttributeUnassign

  """
  Creates a value for an attribute.
  """
  attributeValueCreate(
    """
    Attribute to which value will be assigned.
    """
    attribute: ID!

    """
    Fields required to create an AttributeValue.
    """
    input: AttributeValueCreateInput!
  ): AttributeValueCreate

  """
  Deletes a value of an attribute.
  """
  attributeValueDelete(
    """
    ID of a value to delete.
    """
    id: ID!
  ): AttributeValueDelete

  """
  Creates attribute values for a given attribute.
  """
  attributeValueBulkCreate(
    """
    ID of the attribute to create the values for.
    """
    attribute: ID!

    """
    Input list of attribute values to create.
    """
    values: [String!]!
  ): AttributeValueBulkCreate

  """
  Deletes values of attributes.
  """
  attributeValueBulkDelete(
    """
    List of attribute value IDs to delete.
    """
    ids: [ID!]!
  ): AttributeValueBulkDelete

  """
  Updates value of an attribute.
  """
  attributeValueUpdate(
    """
    ID of an AttributeValue to update.
    """
    id: ID!

    """
    Fields required to update an AttributeValue.
    """
    input: AttributeValueCreateInput!
  ): AttributeValueUpdate

  """
  Reorder the values of an attribute.
  """
  attributeValuesReorder(
    """
    ID of an attribute.
    """
    attributeId: ID!

    """
    The list of reordering operations for given attribute values.
    """
    moves: [ReorderInput!]!
  ): AttributeValuesReorder

  """
  Creates a new app.
  """
  appCreate(
    """
    Fields required to create a new app.
    """
    input: AppInput!
  ): AppCreate

  """
  Updates an existing app.
  """
  appUpdate(
    """
    ID of an app to update.
    """
    id: ID!

    """
    Fields required to update an existing app.
    """
    input: AppInput!
  ): AppUpdate

  """
  Deletes an app.
  """
  appDelete(
    """
    ID of an app to delete.
    """
    id: ID!
  ): AppDelete

  """
  Creates a new token.
  """
  appTokenCreate(
    """
    Fields required to create a new auth token.
    """
    input: AppTokenInput!
  ): AppTokenCreate

  """
  Deletes an authentication token assigned to app.
  """
  appTokenDelete(
    """
    ID of an auth token to delete.
    """
    id: ID!
  ): AppTokenDelete

  """
  Verify provided app token.
  """
  appTokenVerify(
    """
    App token to verify.
    """
    token: String!
  ): AppTokenVerify

  """
  Install new app by using app manifest.
  """
  appInstall(
    """
    Fields required to install a new app.
    """
    input: AppInstallInput!
  ): AppInstall

  """
  Retry failed installation of new app.
  """
  appRetryInstall(
    """
    Determine if app will be set active or not.
    """
    activateAfterInstallation: Boolean = true

    """
    ID of failed installation.
    """
    id: ID!
  ): AppRetryInstall

  """
  Delete failed installation.
  """
  appDeleteFailedInstallation(
    """
    ID of failed installation to delete.
    """
    id: ID!
  ): AppDeleteFailedInstallation

  """
  Fetch and validate manifest.
  """
  appFetchManifest(manifestUrl: String!): AppFetchManifest

  """
  Activate the app.
  """
  appActivate(
    """
    ID of app to activate.
    """
    id: ID!
  ): AppActivate

  """
  Deactivate the app.
  """
  appDeactivate(
    """
    ID of app to deactivate.
    """
    id: ID!
  ): AppDeactivate

  """
  Creates a new Nautical customer token.
  """
  createCustomerToken(
    oauthProviderSource: OauthProviderSourceEnum!

    """
    Token received from Oauth Provider (e.g. Firebase, WorkOS, etc.)
    """
    oauthProviderToken: String!
  ): CreateCustomerToken

  """
  Create JWT token.
  """
  tokenCreate(
    """
    Email of a user.
    """
    email: String!

    """
    Password of a user.
    """
    password: String!
  ): CreateToken

  """
  Create authorization URL.
  """
  authUrlGenerate(
    """
    Desired identity provider, if not supplied Nautical will select an appopriate identity provider automatically.
    """
    provider: SsoProviderType
  ): AuthURLGenerate

  """
  Create JWT token (Also creates a user if not previously signed up)
  """
  tokenCreateSso(
    """
    An access token represents the successful authorization of your application to access a user’s profile
    """
    accessCode: String!
  ): TokenCreateSSO

  """
  Refresh JWT token. Mutation tries to take refreshToken from the input.If it fails it will try to take refreshToken from the http-only cookie -refreshToken. csrfToken is required when refreshToken is provided as a cookie.
  """
  tokenRefresh(
    """
    CSRF token required to refresh token. This argument is required when refreshToken is provided as a cookie.
    """
    csrfToken: String

    """
    Refresh token.
    """
    refreshToken: String
  ): RefreshToken

  """
  Verify JWT token.
  """
  tokenVerify(
    """
    JWT token to validate.
    """
    token: String!
  ): VerifyToken

  """
  Deactivate all JWT tokens of the currently authenticated user.
  """
  tokensDeactivateAll: DeactivateAllUserTokens

  """
  Sends an email with the account password modification link.
  """
  passwordRequestReset(
    """
    Email of the user that will be used for password recovery.
    """
    email: String!

    """
    URL of a view where users should be redirected to reset the password. URL in RFC 1808 format.
    """
    redirectUrl: String
  ): PasswordRequestReset

  """
  Confirm user account with token sent by email during registration.
  """
  accountConfirm(
    """
    Email of the user performing account confirmation.
    """
    email: String!

    """
    A one-time token required to confirm the account.
    """
    token: String!
  ): AccountConfirm

  """
  Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
  """
  passwordSet(
    """
    Email of a user.
    """
    email: String!

    """
    Password of a user.
    """
    password: String!

    """
    A one-time token required to set the password.
    """
    token: String!
  ): PasswordSet

  """
  Change the password of the logged in user.
  """
  passwordChange(
    """
    New user password.
    """
    newPassword: String!

    """
    Current user password.
    """
    oldPassword: String!
  ): PasswordChange

  """
  Request email change for the current user.
  """
  emailChangeRequest(
    """
    New user email.
    """
    newEmail: String!

    """
    User password.
    """
    password: String!

    """
    URL of a view where users should be redirected to update the email address. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): EmailChangeRequest

  """
  Confirm the email change of the logged-in user.
  """
  emailChangeConfirm(
    """
    A one-time token required to change the email.
    """
    token: String!
  ): EmailChangeConfirm

  """
  Create a new address for the customer.
  """
  accountAddressCreate(
    """
    Fields required to create address.
    """
    input: AddressInput!

    """
    A type of address. If provided, the new address will be automatically assigned as the customer's default address of that type.
    """
    type: AddressTypeEnum
  ): AccountAddressCreate

  """
  Updates an address of the logged-in user.
  """
  accountAddressUpdate(
    """
    ID of the address to update.
    """
    id: ID!

    """
    Fields required to update the address.
    """
    input: AddressInput!
  ): AccountAddressUpdate

  """
  Delete an address of the logged-in user.
  """
  accountAddressDelete(
    """
    ID of the address to delete.
    """
    id: ID!
  ): AccountAddressDelete

  """
  Sets a default address for the authenticated user.
  """
  accountAddressSetDefault(
    """
    ID of the address to set as default.
    """
    id: ID!

    """
    The type of address.
    """
    type: AddressTypeEnum!
  ): AccountAddressSetDefault

  """
  Register a new user.
  """
  accountRegister(
    """
    Fields required to create a user.
    """
    input: AccountRegisterInput!
  ): AccountRegister

  """
  Updates the account of the logged-in user.
  """
  accountUpdate(
    """
    Fields required to update the account of the logged-in user.
    """
    input: AccountInput!
  ): AccountUpdate

  """
  Sends an email with the account removal link for the logged-in user.
  """
  accountRequestDeletion(
    """
    URL of a view where users should be redirected to delete their account. URL in RFC 1808 format.
    """
    redirectUrl: String!
  ): AccountRequestDeletion

  """
  Remove user account.
  """
  accountDelete(
    """
    A one-time token required to remove account. Sent by email using AccountRequestDeletion mutation.
    """
    token: String!
  ): AccountDelete

  """
  Creates user address.
  """
  addressCreate(
    """
    Fields required to create address.
    """
    input: AddressInput!

    """
    ID of a user to create address for.
    """
    userId: ID!
  ): AddressCreate

  """
  Updates an address.
  """
  addressUpdate(
    """
    ID of the address to update.
    """
    id: ID!

    """
    Fields required to update the address.
    """
    input: AddressInput!
  ): AddressUpdate

  """
  Deletes an address.
  """
  addressDelete(
    """
    ID of the address to delete.
    """
    id: ID!
  ): AddressDelete

  """
  Sets a default address for the given user.
  """
  addressSetDefault(
    """
    ID of the address.
    """
    addressId: ID!

    """
    The type of address.
    """
    type: AddressTypeEnum!

    """
    ID of the user to change the address for.
    """
    userId: ID!
  ): AddressSetDefault

  """
  Creates a new customer.
  """
  customerCreate(
    """
    Fields required to create a customer.
    """
    input: UserCreateInput!
  ): CustomerCreate

  """
  Updates an existing customer.
  """
  customerUpdate(
    """
    ID of a customer to update.
    """
    id: ID!

    """
    Fields required to update a customer.
    """
    input: CustomerInput!
  ): CustomerUpdate

  """
  Deletes a customer.
  """
  customerDelete(
    """
    ID of a customer to delete.
    """
    id: ID!
  ): CustomerDelete

  """
  Deletes customers.
  """
  customerBulkDelete(
    """
    List of user IDs to delete.
    """
    ids: [ID!]!
  ): CustomerBulkDelete

  """
  Creates a new staff user.
  """
  staffCreate(
    """
    Fields required to create a staff user.
    """
    input: StaffCreateInput!
  ): StaffCreate

  """
  Updates an existing staff user.
  """
  staffUpdate(
    """
    ID of a staff user to update.
    """
    id: ID!

    """
    Fields required to update a staff user.
    """
    input: StaffUpdateInput!
  ): StaffUpdate

  """
  Deletes a staff user.
  """
  staffDelete(
    """
    ID of a staff user to delete.
    """
    id: ID!
  ): StaffDelete

  """
  Deletes staff users.
  """
  staffBulkDelete(
    """
    List of user IDs to delete.
    """
    ids: [ID!]!
  ): StaffBulkDelete

  """
  Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
  """
  userAvatarUpdate(
    """
    Represents an image file in a multipart request.
    """
    image: Upload!

    """
    ID of the user to update avatar for
    """
    user: ID!
  ): UserAvatarUpdate

  """
  Deletes a user avatar. Only for staff members.
  """
  userAvatarDelete(
    """
    ID of the user to delete avatar for
    """
    user: ID!
  ): UserAvatarDelete

  """
  Activate or deactivate users.
  """
  userBulkSetActive(
    """
    List of user IDs to (de)activate).
    """
    ids: [ID!]!

    """
    Determine if users will be set active or not.
    """
    isActive: Boolean!
  ): UserBulkSetActive

  """
  Create new permission group.
  """
  permissionGroupCreate(
    """
    Input fields to create permission group.
    """
    input: PermissionGroupCreateInput!
  ): PermissionGroupCreate

  """
  Update permission group.
  """
  permissionGroupUpdate(
    """
    ID of the group to update.
    """
    id: ID!

    """
    Input fields to create permission group.
    """
    input: PermissionGroupUpdateInput!
  ): PermissionGroupUpdate

  """
  Delete permission group.
  """
  permissionGroupDelete(
    """
    ID of the group to delete.
    """
    id: ID!
  ): PermissionGroupDelete
}

"""
EmailTemplate update mutation.
"""
type EmailTemplateUpdate {
  emailTemplate: EmailTemplate
  notificationErrors: [NotificationError!]!
}

type NotificationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: NotificationErrorCode!
}

"""
An enumeration.
"""
enum NotificationErrorCode {
  GRAPHQL_ERROR
  NOT_FOUND
  REQUIRED
  INVALID
}

"""
Input type for email template update.
"""
input EmailTemplateUpdateInput {
  """
  The content of the email template.
  """
  content: String

  """
  The subject of the email template.
  """
  subject: String

  """
  The content of the email template.
  """
  senderEmailAddress: String

  """
  Determine if the email template is custom.
  """
  isCustom: Boolean
}

"""
Update a tenant
"""
type TenantUpdate {
  tenant: Tenant
  tenantErrors: [TenantError!]!
}

type TenantError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: TenantErrorCode!
}

"""
An enumeration.
"""
enum TenantErrorCode {
  NOT_FOUND
  REQUIRED
  GRAPHQL_ERROR
  INVALID
  ALREADY_EXISTS
  NOT_ALLOWED
}

input TenantUpdateInput {
  isActive: Boolean
  name: String
  slug: String
}

"""
Add or attach a document to any allowed entity (note: consider to use DocumentAttach for 'attach' action). Must only receive one of either file or document_id in input.
"""
type DocumentAdd {
  """
  The document that was created or attached.
  """
  document: Document

  """
  List of instances that the document was attached to.
  """
  instances: [DocumentTargetInstance!]!
  documentErrors: [DocumentError!]!
}

union DocumentTargetInstance = Seller | User | Product | ProductVariant

type DocumentError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: DocumentErrorCode!
}

"""
An enumeration.
"""
enum DocumentErrorCode {
  REQUIRED
  NOT_READY
  URL_NOT_SET
  EMAIL_NOT_SET
  NUMBER_NOT_SET
  INVALID_STATUS
  NOT_FOUND
  INVALID
  GRAPHQL_ERROR
  UNSUPPORTED_FILE_TYPE
  FILE_TOO_LARGE
}

"""
Variables of this type must be set to null in mutations. They will be replaced with a filename from a following multipart part containing a binary file. See: https://github.com/jaydenseric/graphql-multipart-request-spec.
"""
scalar Upload

"""
Updates an existing document.
"""
type DocumentUpdate {
  """
  The document that was created or attached.
  """
  document: Document
  documentErrors: [DocumentError!]!
}

input DocumentUpdateInput {
  """
  Optional description to update the document with.
  """
  description: String
}

"""
Attach a document to any allowed entities.
"""
type DocumentAttach {
  """
  The document that was created or attached.
  """
  document: Document

  """
  List of new instances that the document was attached to.
  """
  instances: [DocumentTargetInstance!]!
  documentErrors: [DocumentError!]!
}

"""
Delete or detach a document. Must only receive one of either target_ids or delete = True in input.
"""
type DocumentRemove {
  """
  List of instances that document was detached from.
  """
  instances: [DocumentTargetInstance!]!
  documentErrors: [DocumentError!]!
}

"""
Updates nautical configuration.
"""
type NauticalConfigurationUpdate {
  nauticalConfigurationList: [NauticalConfiguration!]
  nauticalConfigurationErrors: [NauticalConfigurationError!]!
}

type NauticalConfigurationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: NauticalConfigurationErrorCode!
}

"""
An enumeration.
"""
enum NauticalConfigurationErrorCode {
  GRAPHQL_ERROR
  INVALID
}

input NauticalConfigurationInputItem {
  configurationName: String
  configurationValue: Boolean
  configurationValueDatetime: DateTime
  configurationValueString: String
}

"""
Updates marketplace configuration.
"""
type MarketplaceConfigurationUpdate {
  """
  Updated marketplace configuration.
  """
  marketplaceConfiguration: MarketplaceConfiguration
  marketplaceConfigurationErrors: [MarketplaceConfigurationError!]!
}

type MarketplaceConfigurationError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: MarketplaceConfigurationErrorCode!
}

"""
An enumeration.
"""
enum MarketplaceConfigurationErrorCode {
  GRAPHQL_ERROR
  INVALID
}

input MarketplaceConfigurationInput {
  """
  Deprecated: This field will always be overridden as True and will be removed soon.
  """
  isSellerShippingZoneCreationAllowed: Boolean

  """
  True if seller products require approval
  """
  requireProductApproval: Boolean

  """
  True if products require product types to be created
  """
  requireProductTypes: Boolean

  """
  Updates status transformation strategy for payout.
  """
  payoutAutomationStrategy: MarketplaceConfigurationPayoutAutomationStrategyEnum = null

  """
  Update revenue accrual strategy
  """
  revenueAccrualStrategy: RevenueAccrualStrategyEnum = null
    @deprecated(reason: "This will be removed on February 20, 2025.")

  """
  Update available shipping strategy
  """
  availableShippingStrategy: AvailableShippingStrategyEnum = null

  """
  Update attribute template strategy
  """
  attributeTemplateStrategy: AttributeTemplateStrategyEnum = null

  """
  Updates currency of the marketplace. Marketplace currency will be updated after the cache time (approximately 30 seconds)'
  """
  domiciledCurrency: MarketplaceConfigurationCurrencyEnum = null

  """
  Supported currencies for the marketplace
  """
  supportedCurrencies: [String!]

  """
  The default country for the marketplace
  """
  defaultCountry: String

  """
  Supported countries for the marketplace
  """
  supportedCountries: [String!]

  """
  True if sellers can send quotes to customers.
  """
  sellerCanSendQuote: Boolean

  """
  Determines scope for checking duplicated variant attribute sets
  """
  variantUniqueness: VariantUniquenessEnum = null

  """
  List of all default checklists for seller.
  """
  defaultSellerChecklists: [DefaultSellerChecklistInput!]

  """
  True if quote orders trigger stock allocation.
  """
  enableStockAllocationForQuotes: Boolean

  """
  True if offer orders trigger stock allocation.
  """
  enableStockAllocationForOffers: Boolean
    @deprecated(reason: "This will be removed on February 20, 2025.")

  """
  True if draft orders trigger stock allocation.
  """
  enableStockAllocationForDrafts: Boolean

  """
  True if stocks should be validated on payment creation for orders.
  """
  validateStockOnOrderPaymentCreation: Boolean

  """
  IANA timezone to display datetime fields in the marketplace
  """
  timezone: String

  """
  True if it is possible to enable backorders on a per-variant basis
  """
  enableBackorders: Boolean

  """
  Determines the fulfillment model for the marketplace
  """
  fulfillmentModel: FulfillmentModelEnum = null

  """
  Default weight unit.
  """
  defaultWeightUnit: WeightUnitsEnum = null

  """
  Enable automatic fulfillment for all digital products.
  """
  automaticFulfillmentDigitalProducts: Boolean

  """
  Default number of max downloads per digital content URL.
  """
  defaultDigitalMaxDownloads: Int

  """
  Default number of days which digital content URL will be valid.
  """
  defaultDigitalUrlValidDays: Int

  """
  Enable inventory tracking.
  """
  trackInventoryByDefault: Boolean

  """
  Shop site name.
  """
  name: String

  """
  SEO description.
  """
  description: String
  companyAddress: AddressInput

  """
  Default email sender's name.
  """
  defaultMailSenderName: String

  """
  Default email sender's address.
  """
  defaultMailSenderAddress: String

  """
  Default email support address.
  """
  defaultMailSupportAddress: String

  """
  URL of a view where customers can set their password.
  """
  customerSetPasswordUrl: String

  """
  Include taxes in prices.
  """
  includeTaxesInPrices: Boolean

  """
  Charge taxes on shipping.
  """
  chargeTaxesOnShipping: Boolean
}

enum AttributeTemplateStrategyEnum {
  """
  Assigned attributes may only come from templates (ProductType for PIM-specific attribute usage or CustomFieldTemplate for custom field attribute usage), no non-templated attribute assignment is allowed
  """
  STRICT

  """
  Assigned attributes may come from BOTH attribute templates and non-templated attribute assignments
  """
  FLEXIBLE
}

input DefaultSellerChecklistInput {
  title: String!
  description: String!
  completeOn: SellerChecklistCompletionTriggersEnum
  isEnabled: Boolean!
}

"""
Creates a new payout.
"""
type PayoutCreate {
  payoutErrors: [PayoutError!]!
  payout: Payout
}

type PayoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PayoutErrorCode!
}

"""
An enumeration.
"""
enum PayoutErrorCode {
  REQUIRED
  UNIQUE
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  NOT_FOUND_VALID_ORDERS
}

input PayoutCreateInput {
  """
  Vendor type for the payout
  """
  vendorType: String
    @deprecated(reason: "This will be removed on January 24, 2025")

  """
  Payout end date. ISO 8601 standard. Can not be greater than current date.
  """
  endDate: Date!
}

"""
Update vendor payouts connected to the given payout with adjustments and penalties
"""
type PayoutUpdate {
  """
  An updated payout instance.
  """
  payout: Payout
  payoutErrors: [PayoutError!]!
}

input PayoutUpdateInput {
  """
  List of vendor payouts informing how to update the payout.
  """
  vendorPayouts: [VendorPayoutUpdateInput!]!
}

input VendorPayoutUpdateInput {
  """
  The ID of the order line.
  """
  vendorId: ID

  """
  Adjustment amount for the vendor payout
  """
  adjustments: Decimal

  """
  DEPRECATED: Penalty amount for the vendor payout
  """
  penalties: Decimal
  adjustmentDirection: String
}

"""
Deletes a draft payout
"""
type PayoutDelete {
  payoutErrors: [PayoutError!]!
  payout: Payout
}

"""
Modifies the status of a payout
"""
type PayoutStatusUpdate {
  """
  Payout that was updated.
  """
  payout: Payout
  payoutErrors: [PayoutError!]!
}

input PayoutStatusInput {
  status: String!
  vendorPayouts: [VendorPayoutDetails!]
}

input VendorPayoutDetails {
  vendor: String
  payout: String
}

"""
Modifies the dates of a payout
"""
type PayoutDatesUpdate {
  payoutErrors: [PayoutError!]!
  payout: Payout
}

input PayoutDatesInput {
  """
  Payout end date. ISO 8601 standard. Can not be greater than current date.
  """
  endDate: Date!
}

"""
Archive payouts.
"""
type PayoutBulkArchive {
  """
  Returns how many objects were affected.
  """
  count: Int!
  payoutErrors: [PayoutError!]!
}

"""
Creates a VendorPayout for the specified seller in the payout if it does not already exist.
"""
type VendorPayoutCreate {
  """
  Vendor Payout that was created.
  """
  vendorPayout: VendorPayout
  payoutErrors: [PayoutError!]!
}

"""
Modifies the status of a vendor payout
"""
type VendorPayoutStatusUpdate {
  """
  Vendor Payout that was updated.
  """
  vendorPayout: VendorPayout
  payoutErrors: [PayoutError!]!
}

input VendorPayoutStatusInput {
  status: String!
  payoutAmount: String!
}

"""
Include vendor payouts.
"""
type VendorPayoutsBulkInclude {
  """
  Returns how many objects were affected.
  """
  count: Int!
  payoutErrors: [PayoutError!]!
}

"""
Exclude vendor payouts.
"""
type VendorPayoutsBulkExclude {
  """
  Returns how many objects were affected.
  """
  count: Int!
  payoutErrors: [PayoutError!]!
}

"""
Process vendor payouts.
"""
type VendorPayoutsBulkProcess {
  """
  Returns how many objects were affected.
  """
  count: Int!
  payoutErrors: [PayoutError!]!
}

"""
Adds note to the vendor payout.
"""
type VendorPayoutNoteAdd {
  """
  Vendor Payout that was updated.
  """
  vendorPayout: VendorPayout

  """
  Created vendor payout event.
  """
  event: VendorPayoutEvent
  payoutErrors: [PayoutError!]!
}

input VendorPayoutAddNoteInput {
  """
  Note message.
  """
  message: String!
}

"""
Edit a message in even from the vendor payout.
"""
type VendorPayoutNoteUpdate {
  """
  Vendor Payout that was updated.
  """
  vendorPayout: VendorPayout

  """
  Updated vendor payout event.
  """
  event: VendorPayoutEvent
  payoutErrors: [PayoutError!]!
}

input VendorPayoutUpdateNoteInput {
  """
  Note message.
  """
  message: String!
}

"""
Creates a new wishlist
"""
type WishlistCreate {
  wishlistErrors: [WishlistError!]!
  wishlist: Wishlist
}

type WishlistError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: WishlistErrorCode!
}

"""
An enumeration.
"""
enum WishlistErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  FORBIDDEN
}

input WishlistInput {
  """
  Name for the new wishlist.
  """
  name: String!
}

"""
Creates a new wishlist for any buyer if requestor is MPO
"""
type WishlistCreateForBuyer {
  wishlistErrors: [WishlistError!]!
  wishlist: Wishlist
}

input WishlistBuyerInput {
  """
  Name for the new wishlist.
  """
  name: String!

  """
  user id of the buyer the wishlist is being created for
  """
  user: ID!
}

"""
Update a wishlist
"""
type WishlistUpdate {
  wishlistErrors: [WishlistError!]!
  wishlist: Wishlist
}

"""
Update a wishlist
"""
type WishlistDelete {
  wishlistErrors: [WishlistError!]!
  wishlist: Wishlist
}

"""
Set default wishlist for the user.
"""
type WishlistSetDefault {
  """
  The update wishlist.
  """
  wishlist: Wishlist
  wishlistErrors: [WishlistError!]!
}

"""
Update a wishlist item
"""
type WishlistItemUpdate {
  wishlistErrors: [WishlistError!]!
  wishlistItem: WishlistItem
}

input WishlistItemUpdateInput {
  """
  Note for the item in the wishlist.
  """
  note: String

  """
  Date when this item in the wishlist will expire.
  """
  expiryDate: DateTime

  """
  The requested price for this item in latest transaction currency.
  """
  requestedPriceAmount: PositiveDecimal

  """
  The number of items.
  """
  quantity: Int
}

"""
Add product to the current user's or target user's wishlist.
"""
type WishlistAddProduct {
  """
  The wishlist of the current user.
  """
  wishlist: [WishlistItem!]
  wishlistErrors: [WishlistError!]!
}

"""
Remove product from the current user's wishlist.
"""
type WishlistRemoveProduct {
  """
  The wishlist of the current user.
  """
  wishlist: [WishlistItem!]
  wishlistErrors: [WishlistError!]!
}

"""
Add product variant to the current user's wishlist.
"""
type WishlistAddProductVariant {
  """
  The wishlist of the current user.
  """
  wishlist: [WishlistItem!]
  wishlistErrors: [WishlistError!]!
}

"""
Remove product variant from the current user's wishlist.
"""
type WishlistRemoveProductVariant {
  """
  The wishlist of the current user.
  """
  wishlist: [WishlistItem!]
  wishlistErrors: [WishlistError!]!
}

"""
Adds products to a microsite.
"""
type MicrositeAddProducts {
  """
  Microsite to which products will be added.
  """
  microsite: Microsite
  micrositeErrors: [ProductError!]!
}

type ProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ProductErrorCode!

  """
  List of attributes IDs which causes the error.
  """
  attributes: [ID!]
}

"""
An enumeration.
"""
enum ProductErrorCode {
  ALREADY_EXISTS
  ATTRIBUTE_ALREADY_ASSIGNED
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  ATTRIBUTE_VARIANTS_DISABLED
  DUPLICATED_INPUT_ITEM
  GRAPHQL_ERROR
  INVALID
  INVALID_PHONE
  NOT_PRODUCTS_IMAGE
  NOT_PRODUCTS_VARIANT
  NOT_FOUND
  REQUIRED
  UNIQUE
  VARIANT_NO_DIGITAL_CONTENT
  VARIANT_IN_ACTIVE_ORDER
  CATEGORY_CANNOT_BE_ASSIGNED
  CATEGORY_CANNOT_BE_DELETED
  COLLECTION_CANNOT_BE_CHANGED
  COLLECTION_ALLOWED_FOR_PRODUCTS_ONLY
  COLLECTION_ALLOWED_FOR_VARIANTS_ONLY
  INVENTORY_FIELD_CANNOT_BE_EDITED
}

"""
Creates a new microsite.
"""
type MicrositeCreate {
  micrositeErrors: [ProductError!]!
  microsite: Microsite
}

input MicrositeCreateInput {
  """
  Informs whether a microsite is published.
  """
  isPublished: Boolean

  """
  Name of the microsite.
  """
  name: String

  """
  Text to appear in footer of microsite.
  """
  footerText: String

  """
  Slug of the microsite.
  """
  slug: String

  """
  Description of the microsite (plaintext, deprecated for input).
  """
  description: String

  """
  Description of the microsite (HTML).
  """
  descriptionHtml: String

  """
  Banner image file.
  """
  bannerImage: Upload

  """
  Alt text for an image.
  """
  bannerImageAlt: String

  """
  Logo image file.
  """
  logoImage: Upload

  """
  Alt text for an image.
  """
  logoImageAlt: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date

  """
  List of products to be added to the microsite.
  """
  products: [ID!]

  """
  Vendor that microsite belongs to
  """
  vendor: ID!
}

input SeoInput {
  """
  SEO title.
  """
  title: String

  """
  SEO description.
  """
  description: String
}

"""
Deletes a microsite.
"""
type MicrositeDelete {
  micrositeErrors: [ProductError!]!
  microsite: Microsite
}

"""
Reorder the products of a microsite.
"""
type MicrositeReorderProducts {
  """
  Microsite from which products are reordered.
  """
  microsite: Microsite
  micrositeErrors: [ProductError!]!
}

input MoveProductInput {
  """
  The ID of the product to move.
  """
  productId: ID!

  """
  The relative sorting position of the product (from -inf to +inf) starting from the first given product's actual position.1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int
}

"""
Deletes microsites.
"""
type MicrositeBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  micrositeErrors: [ProductError!]!
}

"""
Publish microsites.
"""
type MicrositeBulkPublish {
  """
  Returns how many objects were affected.
  """
  count: Int!
  micrositeErrors: [ProductError!]!
}

"""
Remove products from a microsite.
"""
type MicrositeRemoveProducts {
  """
  Microsite from which products will be removed.
  """
  microsite: Microsite
  micrositeErrors: [ProductError!]!
}

"""
Updates a microsite.
"""
type MicrositeUpdate {
  micrositeErrors: [ProductError!]!
  microsite: Microsite
}

input MicrositeInput {
  """
  Informs whether a microsite is published.
  """
  isPublished: Boolean

  """
  Name of the microsite.
  """
  name: String

  """
  Text to appear in footer of microsite.
  """
  footerText: String

  """
  Slug of the microsite.
  """
  slug: String

  """
  Description of the microsite (plaintext, deprecated for input).
  """
  description: String

  """
  Description of the microsite (HTML).
  """
  descriptionHtml: String

  """
  Banner image file.
  """
  bannerImage: Upload

  """
  Alt text for an image.
  """
  bannerImageAlt: String

  """
  Logo image file.
  """
  logoImage: Upload

  """
  Alt text for an image.
  """
  logoImageAlt: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date
}

"""
Creates a new agreement.
"""
type AgreementCreate {
  agreementErrors: [AgreementError!]!
  agreement: Agreement
}

type AgreementError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: AgreementErrorCode!
}

"""
An enumeration.
"""
enum AgreementErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  EXISTING_VENDOR_AGREEMENTS
  INPUT_INVALID
}

input AgreementInput {
  """
  Agreement internal name.
  """
  slug: String

  """
  Agreement title.
  """
  title: String

  """
  Agreement content (Plaintext, deprecated as input).
  """
  content: String

  """
  Agreement content (HTML).
  """
  contentHtml: String

  """
  Determines if agreement is visible in the storefront.
  """
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Default commission for all orders
  """
  defaultCommission: Decimal

  """
  Is this agreement active?
  """
  isActive: Boolean

  """
  Last update date. ISO 8601 standard.
  """
  updatedAt: String

  """
  Gross Price, Markup, Absolute etc
  """
  commissionType: CommissionTypeEnum

  """
  Percentage by default
  """
  markupCommissionType: MarkupCommissionTypeEnum

  """
  Markup commission percentage for all items
  """
  markupCommissionValue: Decimal
}

"""
Deletes a agreement.
"""
type AgreementDelete {
  agreementErrors: [AgreementError!]!
  agreement: Agreement
}

"""
Deletes agreements.
"""
type AgreementBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  agreementErrors: [AgreementError!]!
}

"""
Publish agreements.
"""
type AgreementBulkPublish {
  """
  Returns how many objects were affected.
  """
  count: Int!
  agreementErrors: [AgreementError!]!
}

"""
Updates an existing agreement.
"""
type AgreementUpdate {
  agreementErrors: [AgreementError!]!
  agreement: Agreement
}

"""
Creates a new agreement fee.
"""
type AgreementFeeCreate {
  agreementErrors: [AgreementError!]!
  agreementFees: AgreementFees
}

input AgreementFeeInput {
  """
  ID of the agreement to create the fee against.
  """
  agreement: ID

  """
  Name of the agreement fee.
  """
  feeName: String

  """
  Type of the fee (one of percentage or fixed)
  """
  feeType: FeeType

  """
  Value of the fee.
  """
  feeValue: Decimal

  """
  Scope of the fee (one of line or total)
  """
  feeScope: FeeScope
}

"""
Deletes an agreement fee.
"""
type AgreementFeeDelete {
  agreementErrors: [AgreementError!]!
  agreementFees: AgreementFees
}

"""
Creates a new agreement commission.
"""
type AgreementCommissionCreate {
  agreementErrors: [AgreementError!]!
  agreementCommission: AgreementCommission
}

input AgreementCommissionCreateInput {
  """
  Type of the commission.
  """
  commissionType: AgreementGranularCommissionType

  """
  Commission rate as a decimal.
  """
  commission: Decimal

  """
  ID of the instance that the commission applies to.
  """
  instance: ID

  """
  ID of the agreement to create the commission rate against.
  """
  agreement: ID
}

enum AgreementGranularCommissionType {
  CATEGORY
}

"""
Deletes an agreement commission.
"""
type AgreementCommissionDelete {
  agreementErrors: [AgreementError!]!
  agreementCommission: AgreementCommission
}

"""
Acknowledge the seller agreement for seller id
"""
type SellerAgreementAcknowledge {
  user: User
  agreementErrors: [AgreementError!]!
}

input SellerAgreementAcknowledgeInput {
  """
  Reason why seller decide to accept the agreement.
  """
  agreementDecisionReason: String
}

"""
Decline the seller agreement for seller id
"""
type SellerAgreementDecline {
  user: User
  agreementErrors: [AgreementError!]!
}

input SellerAgreementDeclineInput {
  """
  Reason why seller decide to decline the agreement.
  """
  agreementDecisionReason: String
}

"""
Creates a new seller agreement mapping.
"""
type SellerAgreementAssign {
  agreementErrors: [AgreementError!]!
  sellerAgreement: AgreementSellers
}

input SellerAgreementInput {
  """
  ID of the agreement that seller will be assigned to
  """
  agreement: ID!

  """
  When this agreement becomes effective for the seller
  """
  effectiveAt: Date!

  """
  ID of seller that agreed to plan
  """
  seller: ID!
}

"""
Deletes a seller agreement mapping.
"""
type SellerAgreementDelete {
  agreementErrors: [AgreementError!]!
  agreementSellers: AgreementSellers
}

"""
Create new Seller and a new staff user and assign created user as Seller owner.
"""
type SellerWithOwnerCreate {
  seller: Seller
  sellerErrors: [SellerError!]!
}

type SellerError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: SellerErrorCode!
}

"""
An enumeration.
"""
enum SellerErrorCode {
  GRAPHQL_ERROR
  INVALID
  INVALID_PHONE
  NOT_FOUND
  REQUIRED
  UNIQUE
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
}

input DetailedSellerInput {
  """
  Seller company name.
  """
  companyName: String!

  """
  ID of plan (agreement) for a seller.
  """
  plan: ID

  """
  Fields required to set the object's metadata.
  """
  metadata: [MetadataInput!]
}

input MetadataInput {
  """
  Key of a metadata item.
  """
  key: String!

  """
  Value of a metadata item.
  """
  value: String!
}

input SellerOwnerCreateInput {
  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  The unique email address of the user.
  """
  email: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String

  """
  Fields required to set the object's metadata.
  """
  metadata: [MetadataInput!]
}

"""
Create seller data.
"""
type SellerDataCreate {
  ok: Boolean
  seller: Seller
  sellerErrors: [SellerError!]!
}

input SellerInput {
  name: String
  slug: String
  identifiers: [String!]
  owner: ID

  """
  ID of the Agreement to assign to the seller. For more fine grained control consider using the sellerAgreementAssign mutation
  """
  plan: ID

  """
  List of checklist to create for this seller. Empty list is to skip all checklists for this seller. Null value will inherit all default checklist from marketplace configuration.
  """
  checklists: [SellerChecklistInput]

  """
  Seller status.
  """
  status: SellerStatusEnum! = PENDING
}

input SellerChecklistInput {
  title: String!
  description: String!
  completeOn: SellerChecklistCompletionTriggersEnum
}

enum SellerStatusEnum {
  """
  Applying
  """
  APPLYING

  """
  Pending
  """
  PENDING

  """
  Approved
  """
  APPROVED

  """
  Declined
  """
  DECLINED

  """
  Paused
  """
  PAUSED

  """
  Suspended
  """
  SUSPENDED

  """
  Banned
  """
  BANNED

  """
  Deactivated
  """
  DEACTIVATED
}

"""
Allows [re-]assign a user to a seller
"""
type SellerUserMappingCreate {
  ok: Boolean
  sellerUser: SellerUserType
  sellerErrors: [SellerError!]!
}

input SellerUserInput {
  seller: ID!
  user: ID!
}

"""
Updates a sellers status and override information
"""
type SellerDataUpdate {
  ok: Boolean
  seller: Seller
  sellerErrors: [SellerError!]!
}

input SellerUpdateInput {
  status: String
  user: ID
  plan: ID
  companyName: String
  storeDescription: String
  slug: String

  """
  This will replace the existing list.
  """
  identifiers: [String!]
}

"""
Create seller note.
"""
type SellerNoteCreate {
  ok: Boolean
  note: String
  sellerErrors: [SellerError!]!
}

input SellerNoteInput {
  message: String
  user: ID
  seller: ID
}

"""
Create a seller logo. Only for MP Admin, MP Staff, or the seller. This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type SellerLogoUpdate {
  """
  An updated seller instance
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Deletes a seller logo. Only for MP Admin, MP Staff, or the seller.
"""
type SellerLogoDelete {
  """
  An updated seller instance
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Create a seller banner.This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type SellerBannerUpdate {
  """
  An updated seller instance
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Create a seller banner.This mutation must be sent as a 'multipart' request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type SellerBannerDelete {
  """
  An updated seller instance
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Creates seller address.
"""
type SellerAddressCreate {
  """
  A seller instance for which the address was created.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
  address: Address
}

"""
Updates an address.
"""
type SellerAddressUpdate {
  """
  A user object for which the address was edited.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
  address: Address
}

"""
Deletes an address.
"""
type SellerAddressDelete {
  """
  A user instance for which the address was deleted.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
  address: Address
}

"""
Sets a default address for the given user.
"""
type SellerAddressSetDefault {
  """
  An updated seller instance.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

enum AddressTypeEnum {
  """
  Billing
  """
  BILLING

  """
  Shipping
  """
  SHIPPING
}

"""
Removes the user owner from a seller (including user's membership in the seller)
"""
type SellerOwnerDelete {
  """
  An updated seller instance with user owner removed
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Create seller shell.
"""
type SellerShellCreate {
  ok: Boolean
  seller: Seller
  sellerErrors: [SellerError!]!
}

"""
Updates settings for the given seller.
"""
type SellerSettingsUpdate {
  """
  An updated seller instance.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

input SellerSettingsUpdateInput {
  """
  Default currency for the seller.
  """
  defaultCurrency: String

  """
  True if marketplace accrues shipping revenue, false if seller
          accrues shipping revenue
  """
  fulfilledByMarketplace: Boolean
}

"""
Marks manually one checklist item as completed.
"""
type SellerOnboardingChecklistComplete {
  checklist: SellerOnboardingChecklist
  checklistErrors: [SellerOnboardingChecklistError!]!
}

type SellerOnboardingChecklistError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: SellerOnboardingChecklistErrorCode!
}

"""
An enumeration.
"""
enum SellerOnboardingChecklistErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""
Updates application for the given seller.
"""
type SellerApplicationUpdate {
  """
  An updated seller instance.
  """
  seller: Seller
  sellerErrors: [SellerError!]!
}

input SellerApplicationUpdateInput {
  """
  Misc. data submitted
  """
  formData: JSONString

  """
  Current status of application.
  """
  checkpoint: SellerApplicationCheckpoint
}

"""
Create designer data.
"""
type DesignerDataCreate {
  ok: Boolean
  designerdata: DesignerDataType
  designerErrors: [MarketplaceConfigurationError!]!
}

input DesignerDataInput {
  name: String
  jsonContent: JSONString
}

"""
Update existing designer data.
"""
type DesignerDataUpdate {
  ok: Boolean
  designerdata: DesignerDataType
  designerErrors: [MarketplaceConfigurationError!]!
}

"""
Creates a new webhook subscription.
"""
type WebhookCreate {
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

type WebhookError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: WebhookErrorCode!
}

"""
An enumeration.
"""
enum WebhookErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input WebhookCreateInput {
  """
  The name of the webhook.
  """
  name: String

  """
  The url to receive the payload.
  """
  targetUrl: String

  """
  The events that webhook wants to subscribe. The CHECKOUT_QUANTITY_CHANGED is depreacted. It will be removed in Nautical 3.0
  """
  events: [WebhookEventTypeEnum!]

  """
  ID of the app to which webhook belongs.
  """
  app: ID

  """
  Determine if webhook will be set active or not.
  """
  isActive: Boolean

  """
  The secret key used to create a hash signature with each payload.
  """
  secretKey: String

  """
  The connection string or service key json string for third party queue services.
  """
  connectionString: String

  """
  The queue name for Microsoft Azure ServiceBus connection
  """
  queueName: String
}

"""
Deletes a webhook subscription.
"""
type WebhookDelete {
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

"""
Updates a webhook subscription.
"""
type WebhookUpdate {
  webhookErrors: [WebhookError!]!
  webhook: Webhook
}

input WebhookUpdateInput {
  """
  The new name of the webhook.
  """
  name: String

  """
  The url to receive the payload.
  """
  targetUrl: String

  """
  The events that webhook wants to subscribe. The CHECKOUT_QUANTITY_CHANGED is depreacted. It will be removed in Nautical 3.0
  """
  events: [WebhookEventTypeEnum!]

  """
  ID of the app to which webhook belongs.
  """
  app: ID

  """
  Determine if webhook will be set active or not.
  """
  isActive: Boolean

  """
  Use to create a hash signature with each payload.
  """
  secretKey: String

  """
  The connection string or service key json string for third party queue services.
  """
  connectionString: String

  """
  The queue name for Microsoft Azure ServiceBus connection
  """
  queueName: String
}

"""
Creates new warehouse.
"""
type WarehouseCreate {
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

type WarehouseError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: WarehouseErrorCode!
}

"""
An enumeration.
"""
enum WarehouseErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

input WarehouseCreateInput {
  """
  Warehouse name.
  """
  name: String!

  """
  Address of the warehouse.
  """
  address: WarehouseAddressInput

  """
  Warehouse slug.
  """
  slug: String

  """
  Company name.
  """
  companyName: String

  """
  Seller ID
  """
  seller: ID!

  """
  The email address of the warehouse.
  """
  email: String

  """
  Shipping zones to assign to the warehouse.
  """
  addShippingZones: [ID!]

  """
  External ID of a warehouse if originating outside of the system.
  """
  externalId: String

  """
  External source of a warehouse if originating outside of the system.
  """
  externalSource: String

  """
  Determines if the warehouse address is same as business address
  """
  isAddressSameAsBusiness: Boolean
}

input WarehouseAddressInput {
  """
  Address.
  """
  streetAddress1: String!

  """
  Address.
  """
  streetAddress2: String

  """
  City.
  """
  city: String!

  """
  District.
  """
  cityArea: String

  """
  Postal code.
  """
  postalCode: String

  """
  Country.
  """
  country: CountryCode!

  """
  State or province.
  """
  countryArea: String

  """
  Phone number.
  """
  phone: String
}

"""
Updates given warehouse.
"""
type WarehouseUpdate {
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

input WarehouseUpdateInput {
  """
  Warehouse name.
  """
  name: String

  """
  Address of the warehouse.
  """
  address: WarehouseAddressInput

  """
  Warehouse slug.
  """
  slug: String

  """
  Company name.
  """
  companyName: String

  """
  Seller ID
  """
  seller: ID

  """
  The email address of the warehouse.
  """
  email: String

  """
  Shipping zones to assign to the warehouse.
  """
  addShippingZones: [ID!]

  """
  External ID of a warehouse if originating outside of the system.
  """
  externalId: String

  """
  External source of a warehouse if originating outside of the system.
  """
  externalSource: String

  """
  Determines if the warehouse address is same as business address
  """
  isAddressSameAsBusiness: Boolean

  """
  Shipping zones to unassign from the warehouse.
  """
  removeShippingZones: [ID!]
}

"""
Deletes selected warehouse.
"""
type WarehouseDelete {
  warehouseErrors: [WarehouseError!]!
  warehouse: Warehouse
}

"""
Creates a content page data object.
"""
type ContentPageDataCreate {
  contentPageData: ContentPageData
  shopErrors: [ShopError!]!
}

type ShopError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ShopErrorCode!
}

"""
An enumeration.
"""
enum ShopErrorCode {
  ALREADY_EXISTS
  CANNOT_FETCH_TAX_RATES
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  NOT_ALLOWED
  STALE_DATA
}

input ContentPageDataCreateInput {
  """
  Id of content page.
  """
  contentId: ID!

  """
  SEO title.
  """
  seoTitle: String

  """
  SEO description.
  """
  seoDescription: String
}

"""
Updates a content page data object.
"""
type ContentPageDataUpdate {
  contentPageData: ContentPageData
  shopErrors: [ShopError!]!
}

input ContentPageDataUpdateInput {
  """
  SEO title.
  """
  seoTitle: String

  """
  SEO description.
  """
  seoDescription: String
}

"""
Creates a new content object.
"""
type ContentCreate {
  """
  Created content instance.
  """
  content: Content
  shopErrors: [ShopError!]!
}

input ContentCreateInput {
  """
  Slug for the content object.
  """
  slug: String!

  """
  Flag to determine if the content is a page or a part of a page. A footer would have this false, but the static content pages would have it true
  """
  isPage: Boolean!
}

"""
Auto saves a content object.
"""
type ContentSave {
  content: Content
  shopErrors: [ShopError!]!
}

input ContentSaveInput {
  """
  Revision of the previous content version
  """
  previousRevision: Int!

  """
  Editor data
  """
  data: JSONString!
}

"""
Discards the latest changes of a content object.
"""
type ContentDiscard {
  content: Content
  shopErrors: [ShopError!]!
}

"""
Publishes a content object.
"""
type ContentPublish {
  content: Content
  shopErrors: [ShopError!]!
}

input ContentPublishInput {
  """
  Revision of the previous content version
  """
  previousRevision: Int!

  """
  Editor data
  """
  data: JSONString!

  """
  The date when this version should be published.
  """
  publicationDate: Date
}

"""
Deletes a voucher.
"""
type ContentDelete {
  shopErrors: [ShopError!]!
  content: Content
}

"""
Duplicate an existing content object.
"""
type ContentDuplicate {
  """
  Duplicate a content instance.
  """
  content: Content
  shopErrors: [ShopError!]!
}

input ContentDuplicateInput {
  """
  Slug for newly duplicated content object
  """
  newSlug: String!
}

"""
Creates a new media object.
"""
type MediaCreate {
  """
  Created media instance.
  """
  media: Media
  shopErrors: [ShopError!]!
}

input MediaCreateInput {
  """
  Alt text for an image.
  """
  alt: String

  """
  Title for the media object.
  """
  title: String!

  """
  Represents an image file for this media object.
  """
  image: Upload!
}

"""
Update a media object.
"""
type MediaUpdate {
  """
  Updated media instance.
  """
  media: Media
  shopErrors: [ShopError!]!
}

input MediaUpdateInput {
  """
  Alt text for an image.
  """
  alt: String

  """
  Title for the media object.
  """
  title: String

  """
  Represents an image file for this media object.
  """
  image: Upload
}

"""
Deletes medias.
"""
type MediaBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  shopErrors: [ShopError!]!
}

"""
Updates site domain of the shop.
"""
type ShopDomainUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input SiteDomainInput {
  """
  Domain name for shop.
  """
  domain: String

  """
  Shop site name.
  """
  name: String

  """
  API url for shop.
  """
  apiUrl: String

  """
  Dasboard url for shop.
  """
  dashboardUrl: String
}

"""
Updates shop settings.
"""
type ShopSettingsUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input ShopSettingsInput {
  """
  Header text.
  """
  headerText: String

  """
  SEO description.
  """
  description: String

  """
  Include taxes in prices.
  """
  includeTaxesInPrices: Boolean

  """
  Charge taxes on shipping.
  """
  chargeTaxesOnShipping: Boolean

  """
  Enable inventory tracking.
  """
  trackInventoryByDefault: Boolean

  """
  Default weight unit.
  """
  defaultWeightUnit: WeightUnitsEnum

  """
  Enable automatic fulfillment for all digital products.
  """
  automaticFulfillmentDigitalProducts: Boolean

  """
  Default number of max downloads per digital content URL.
  """
  defaultDigitalMaxDownloads: Int

  """
  Default number of days which digital content URL will be valid.
  """
  defaultDigitalUrlValidDays: Int

  """
  Default email sender's name.
  """
  defaultMailSenderName: String

  """
  Default email sender's address.
  """
  defaultMailSenderAddress: String

  """
  Default email support address.
  """
  defaultMailSupportAddress: String

  """
  URL of a view where customers can set their password.
  """
  customerSetPasswordUrl: String
}

"""
Fetch tax rates.
"""
type ShopFetchTaxRates {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

"""
Update the shop's address. If the `null` value is passed, the currently selected address will be deleted.
"""
type ShopAddressUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

"""
Create a new checkout theme.
"""
type CheckoutThemeCreate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input CheckoutThemeCreateInput {
  """
  URL of the confirmation page.
  """
  confirmationUrl: String!
}

"""
Update a checkout theme.
"""
type CheckoutThemeUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input CheckoutThemeInput {
  """
  URL of the confirmation page.
  """
  confirmationUrl: String
}

"""
Creates a custom domain
"""
type CustomDomainCreate {
  domain: CustomDomain
  shopErrors: [ShopError!]!
}

input CustomDomainCreateInput {
  """
  The domain to connect to the storefront. Must not start with https:// and must have no trailing slash.
  """
  domain: String!
}

"""
Deletes a custom domain
"""
type CustomDomainDelete {
  shopErrors: [ShopError!]!
  domain: CustomDomain
}

"""
Create a new storefront theme.
"""
type StorefrontThemeCreate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input StorefrontThemeInput {
  """
  Primary color in hex.
  """
  primaryColor: String

  """
  Background color in hex.
  """
  backgroundColor: String

  """
  Logo file.
  """
  logo: Upload

  """
  Favicon file
  """
  faviconImage: Upload

  """
  URL of the favicon.
  """
  faviconUrl: String

  """
  ID of of the selected font.
  """
  font: String

  """
  Font color in hex.
  """
  fontColor: String
}

"""
Update a storefront theme.
"""
type StorefrontThemeUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

"""
Create new seller onboarding settings.
"""
type SellerOnboardingSettingsCreate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input SellerOnboardingSettingsCreateInput {
  """
  Is the MPO accepting new sellers.
  """
  isAcceptingNewSellers: Boolean!

  """
  Summary of the MP for sellers.
  """
  summary: String!

  """
  Welcome message set by MP for sellers.
  """
  welcomeMessage: String

  """
  The fulfillment model used by the MP.
  """
  fulfillmentModel: String!

  """
  A summary of required documents from sellers.
  """
  requiredDocuments: String!

  """
  Text displayed when the MP is not accepting new sellers.
  """
  notAcceptingSellersMessage: String
}

"""
Update seller onboarding settings.
"""
type SellerOnboardingSettingsUpdate {
  """
  Updated shop.
  """
  shop: Shop
  shopErrors: [ShopError!]!
}

input SellerOnboardingSettingsUpdateInput {
  """
  Is the MPO accepting new sellers.
  """
  isAcceptingNewSellers: Boolean

  """
  Summary of the MP for sellers.
  """
  summary: String

  """
  Welcome message set by MP for sellers.
  """
  welcomeMessage: String

  """
  The fulfillment model used by the MP.
  """
  fulfillmentModel: String

  """
  A summary of required documents from sellers.
  """
  requiredDocuments: String

  """
  Text displayed when the MP is not accepting new sellers.
  """
  notAcceptingSellersMessage: String
}

"""
Creates a new shipping price.
"""
type ShippingPriceCreate {
  """
  A shipping zone to which the shipping method belongs.
  """
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

type ShippingError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ShippingErrorCode!

  """
  List of warehouse IDs which causes the error.
  """
  warehouses: [ID!]
}

"""
An enumeration.
"""
enum ShippingErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  MAX_LESS_THAN_MIN
  NOT_FOUND
  REQUIRED
  UNIQUE
  DUPLICATED_INPUT_ITEM
}

input ShippingPriceInput {
  """
  Name of the shipping method.
  """
  name: String

  """
  Shipping price of the shipping method.
  """
  price: PositiveDecimal

  """
  Minimum order price to use this shipping method.
  """
  minimumOrderPrice: PositiveDecimal

  """
  Maximum order price to use this shipping method.
  """
  maximumOrderPrice: PositiveDecimal

  """
  Minimum order weight to use this shipping method.
  """
  minimumOrderWeight: WeightScalar

  """
  Maximum order weight to use this shipping method.
  """
  maximumOrderWeight: WeightScalar

  """
  Shipping type: price or weight based
  """
  type: ShippingMethodTypeEnum

  """
  Shipping zone this method belongs to.
  """
  shippingZone: ID

  """
  Deprecated: This field will always be treated as False and will be removed soon.
  """
  requiresSecondaryAddress: Boolean
}

scalar WeightScalar

"""
Deletes a shipping price.
"""
type ShippingPriceDelete {
  """
  A shipping method to delete.
  """
  shippingMethod: ShippingMethod

  """
  A shipping zone to which the shipping method belongs.
  """
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
}

"""
Deletes shipping prices.
"""
type ShippingPriceBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  shippingErrors: [ShippingError!]!
}

"""
Updates a new shipping price.
"""
type ShippingPriceUpdate {
  """
  A shipping zone to which the shipping method belongs.
  """
  shippingZone: ShippingZone
  shippingErrors: [ShippingError!]!
  shippingMethod: ShippingMethod
}

"""
Creates a new shipping zone.
"""
type ShippingZoneCreate {
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneCreateInput {
  """
  Shipping zone's name. Visible only to the staff.
  """
  name: String

  """
  List of countries in this shipping zone.
  """
  countries: [String!]

  """
  List of warehouses to assign to a shipping zone
  """
  addWarehouses: [ID!]

  """
  Seller ID
  """
  seller: ID!

  """
  List of country areas this shipping zone is limited to.
  """
  countryAreas: [ShippingZoneCountryAreaInput!]
}

input ShippingZoneCountryAreaInput {
  """
  Country code.
  """
  country: String!

  """
  List of country area codes.
  """
  countryAreas: [String!]!
}

"""
Deletes a shipping zone.
"""
type ShippingZoneDelete {
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

"""
Deletes shipping zones.
"""
type ShippingZoneBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  shippingErrors: [ShippingError!]!
}

"""
Updates a new shipping zone.
"""
type ShippingZoneUpdate {
  shippingErrors: [ShippingError!]!
  shippingZone: ShippingZone
}

input ShippingZoneUpdateInput {
  """
  Shipping zone's name. Visible only to the staff.
  """
  name: String

  """
  List of countries in this shipping zone.
  """
  countries: [String!]

  """
  List of warehouses to assign to a shipping zone
  """
  addWarehouses: [ID!]

  """
  Seller ID
  """
  seller: ID

  """
  List of country areas this shipping zone is limited to.
  """
  countryAreas: [ShippingZoneCountryAreaInput!]

  """
  List of warehouses to unassign from a shipping zone
  """
  removeWarehouses: [ID!]
}

"""
Creates a new refund.
"""
type RefundCreate {
  refundErrors: [RefundError!]!
  refund: Refund
}

type RefundError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: RefundErrorCode!
}

"""
An enumeration.
"""
enum RefundErrorCode {
  NOT_FOUND
  REQUIRED
  GRAPHQL_ERROR
  INVALID
  ALREADY_EXISTS
  NOT_ALLOWED
  INVALID_STATUS
  INVALID_QUANTITY
  DUPLICATED_INPUT_ITEM
  INVALID_CHARGED_TO
}

input RefundCreateInput {
  """
  Refund description (plaintext, read-only).
  """
  description: String

  """
  Refund description (html).
  """
  descriptionHtml: String

  """
  External ID associated with the refund. This can be useful for synchronizing refunds from another system. If specified, must be unique.
  """
  externalId: String

  """
  Name of the refund
  """
  name: String!

  """
  ID of the NauticalOrder to associated the refund with
  """
  order: ID!
}

"""
Updates a refund.
"""
type RefundUpdate {
  refundErrors: [RefundError!]!
  refund: Refund
}

input RefundUpdateInput {
  """
  Refund description (plaintext, read-only).
  """
  description: String

  """
  Refund description (html).
  """
  descriptionHtml: String

  """
  External ID associated with the refund. This can be useful for synchronizing refunds from another system. If specified, must be unique.
  """
  externalId: String

  """
  Name of the refund
  """
  name: String
}

"""
Deletes all specified refunds. The refunds must be in the REQUESTED state to be able to be deleted
"""
type RefundBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  refundErrors: [RefundError!]!
}

"""
Updates the status of all specified refunds. All refunds must be able to make the state transition for any of them to update
"""
type RefundsChangeStatus {
  """
  Returns how many objects were affected.
  """
  count: Int!
  refundErrors: [RefundError!]!
}

"""
Adds a refund lines to the existing refund.
"""
type RefundLinesAdd {
  """
  An updated refund.
  """
  refund: Refund
  refundErrors: [RefundError!]!
}

input RefundLineInput {
  """
  To whom the refund will be applied.
  """
  chargedTo: RefundChargeToEnum!
  lineType: RefundLineTypeEnum!

  """
  Reference ID of the instance to which refund will be applied. Allowed instances are NauticalOrder, Order, OrderLine.
  """
  refundScope: ID!

  """
  Refund line amount (in order currency).
  """
  amount: PositiveDecimal
  percentage: PositiveDecimal
  quantity: Int
  quantityFulfilled: Int
  quantityUnfulfilled: Int
}

"""
Update lines in a refund.
"""
type RefundLinesUpdate {
  """
  An updated refund.
  """
  refund: Refund
  refundErrors: [RefundError!]!
}

input RefundLineUpdateInput {
  """
  To whom the refund will be applied.
  """
  chargedTo: RefundChargeToEnum!
  lineType: RefundLineTypeEnum!

  """
  Reference ID of the instance to which refund will be applied. Allowed instances are NauticalOrder, Order, OrderLine.
  """
  refundScope: ID!

  """
  Refund line amount (in order currency).
  """
  amount: PositiveDecimal
  percentage: PositiveDecimal
  quantity: Int
  quantityFulfilled: Int
  quantityUnfulfilled: Int

  """
  ID of the refund line  to update.
  """
  id: ID!
}

"""
Deletes all specified refund lines.
"""
type RefundLineBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  refundErrors: [RefundError!]!
}

"""
Add manual payments to a refund
"""
type RefundPaymentsAdd {
  """
  Updated refund
  """
  refund: Refund
  refundErrors: [RefundError!]!
}

input RefundPaymentInput {
  """
  Payment id for the refund.
  """
  id: ID!

  """
  Refund payment amount.
  """
  amount: PositiveDecimal!
}

"""
Update refund payments.
"""
type RefundPaymentsUpdate {
  """
  Updated refund
  """
  refund: Refund
  refundErrors: [RefundError!]!
}

input RefundPaymentUpdateInput {
  """
  Refund Payment ID for the update.
  """
  id: ID!

  """
  Refund payment amount.
  """
  amount: PositiveDecimal!
}

"""
Deletes specified refund payments. The refund must be in the PROCESSING state.
"""
type RefundPaymentsDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  refundErrors: [RefundError!]!
}

"""
Creates a new price book.
"""
type PriceBookCreate {
  priceBookErrors: [PriceBookError!]!
  priceBook: PriceBook
}

type PriceBookError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PriceBookErrorCode!
}

"""
An enumeration.
"""
enum PriceBookErrorCode {
  NOT_FOUND
  REQUIRED
  GRAPHQL_ERROR
  INVALID
  ALREADY_EXISTS
  NOT_ALLOWED
}

input PriceBookCreateInput {
  """
  Name of the price book
  """
  name: String

  """
  Price book description (plaintext, read-only).
  """
  description: String

  """
  Price book description (html).
  """
  descriptionHtml: String
}

"""
Updates an existing price book.
"""
type PriceBookUpdate {
  priceBookErrors: [PriceBookError!]!
  priceBook: PriceBook
}

input PriceBookUpdateInput {
  """
  Name of the price book
  """
  name: String

  """
  Price book description (plaintext, read-only).
  """
  description: String

  """
  Price book description (html).
  """
  descriptionHtml: String

  """
  Used to re-activate the price book.
  """
  activate: Boolean
}

"""
Deletes a price book.
"""
type PriceBookDelete {
  priceBookErrors: [PriceBookError!]!
  priceBook: PriceBook
}

"""
Deletes price books.
"""
type PriceBookBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  priceBookErrors: [PriceBookError!]!
}

"""
Add a variant to price book.
"""
type PriceBookVariantCreate {
  priceBookErrors: [PriceBookError!]!
  priceBookVariant: PriceBookVariant
}

input PriceBookVariantCreateInput {
  """
  Price of the particular variant to be adjusted if the type selected is OVERRIDEor FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the variant
  """
  currency: String

  """
  Percentage of the particular variant to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  ID of variant that is added to the price book.
  """
  variant: ID!

  """
  ID of price book that variant needs to be added to.
  """
  priceBook: ID!

  """
  Type of the price book variant
  """
  valueType: PriceBookValueTypeEnum!
}

enum PriceBookValueTypeEnum {
  """
  Override
  """
  OVERRIDE

  """
  Adjust Percentage
  """
  ADJUST_PERCENTAGE

  """
  Adjust Fixed
  """
  ADJUST_FIXED
}

"""
Updates an existing price book variant.
"""
type PriceBookVariantUpdate {
  priceBookErrors: [PriceBookError!]!
  priceBookVariant: PriceBookVariant
}

input PriceBookVariantUpdateInput {
  """
  Price of the particular variant to be adjusted if the type selected is OVERRIDEor FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the variant
  """
  currency: String

  """
  Percentage of the particular variant to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  Type of the price book variant
  """
  valueType: PriceBookValueTypeEnum
}

"""
Deletes a price book variant.
"""
type PriceBookVariantDelete {
  priceBookErrors: [PriceBookError!]!
  priceBookVariant: PriceBookVariant
}

"""
Deletes price book's variants.
"""
type PriceBookVariantBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  priceBookErrors: [PriceBookError!]!
}

"""
Add a product to price book.
"""
type PriceBookProductCreate {
  priceBookErrors: [PriceBookError!]!
  priceBookProduct: PriceBookProduct
}

input PriceBookProductCreateInput {
  """
  Price of the particular product to be adjusted if the type selected is OVERRIDEor FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the product
  """
  currency: String

  """
  Percentage of the particular product to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  ID of product that is added to the price book.
  """
  product: ID!

  """
  ID of price book that product needs to be added to.
  """
  priceBook: ID!

  """
  Type of the price book product
  """
  valueType: PriceBookValueTypeEnum!
}

"""
Updates an existing price book product.
"""
type PriceBookProductUpdate {
  priceBookErrors: [PriceBookError!]!
  priceBookProduct: PriceBookProduct
}

input PriceBookProductUpdateInput {
  """
  Price of the particular product to be adjusted if the type selected is OVERRIDEor FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the product
  """
  currency: String

  """
  Percentage of the particular product to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  Type of the price book product
  """
  valueType: PriceBookValueTypeEnum
}

"""
Deletes a price book product.
"""
type PriceBookProductDelete {
  priceBookErrors: [PriceBookError!]!
  priceBookProduct: PriceBookProduct
}

"""
Deletes price book's products.
"""
type PriceBookProductBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  priceBookErrors: [PriceBookError!]!
}

"""
Add a product type to price book.
"""
type PriceBookProductTypeCreate {
  priceBookErrors: [PriceBookError!]!
  priceBookProductType: PriceBookProductType
}

input PriceBookProductTypeCreateInput {
  """
  Price of the particular product type to be adjusted if the value type selected isOVERRIDE or FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the product type
  """
  currency: String

  """
  Percentage of the particular product type to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  ID of product type that is added to the price book.
  """
  productType: ID!

  """
  ID of price book that product type needs to be added to.
  """
  priceBook: ID!

  """
  Value type of the price book product type
  """
  valueType: PriceBookValueTypeEnum!
}

"""
Updates an existing price book product type.
"""
type PriceBookProductTypeUpdate {
  priceBookErrors: [PriceBookError!]!
  priceBookProductType: PriceBookProductType
}

input PriceBookProductTypeUpdateInput {
  """
  Price of the particular product type to be adjusted if the value type selected isOVERRIDE or FIXED.
  """
  priceAmount: Decimal

  """
  Currency of the price that is adjusted for the product type
  """
  currency: String

  """
  Percentage of the particular product type to be adjusted if the type selected is PERCENTAGE
  """
  percentage: Decimal

  """
  Value type of the price book product type
  """
  valueType: PriceBookValueTypeEnum
}

"""
Deletes a price book product type.
"""
type PriceBookProductTypeDelete {
  priceBookErrors: [PriceBookError!]!
  priceBookProductType: PriceBookProductType
}

"""
Deletes price book's product types.
"""
type PriceBookProductTypeBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  priceBookErrors: [PriceBookError!]!
}

"""
Add a user to price book.
"""
type UserAddToPriceBook {
  """
  An updated user instance.
  """
  user: User
  priceBookErrors: [PriceBookError!]!
}

input UserAddToPriceBookInput {
  """
  ID of user that is to be mapped to the price book.
  """
  user: ID!

  """
  ID of price book that user needs to be added to.
  """
  priceBook: ID!
}

"""
Removes a user from price book.
"""
type UserRemoveFromPriceBook {
  """
  An updated user instance.
  """
  user: User
  priceBookErrors: [PriceBookError!]!
}

"""
Creates a new category.
"""
type CategoryCreate {
  productErrors: [ProductError!]!
  category: Category
}

input CategoryInput {
  """
  Category description (plaintext, deprecated as input).
  """
  description: String

  """
  Category description (HTML).
  """
  descriptionHtml: String

  """
  Category name.
  """
  name: String

  """
  Category slug.
  """
  slug: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Background image file.
  """
  backgroundImage: Upload

  """
  Alt text for an image.
  """
  backgroundImageAlt: String

  """
  Is it allowed to assign this category to a product or not.
  """
  allowProductAssignment: Boolean = true

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]
}

input AttributeValueInput {
  """
  ID of the selected attribute.
  """
  id: ID

  """
  The value or slug of an attribute to resolve. If the passed value is non-existent, it will be created.
  """
  values: [String!]

  """
  Value representation of the attribute value (e.g. color value for swatch attributes).
  """
  value: String

  """
  Date and time representation of attribute value.
  """
  dateTime: DateTime

  """
  Supports attribute values with long text (plain text).
  """
  plainText: String

  """
  Supports attribute values with long text (html).
  """
  richText: String

  """
  Numeric value to support money or numeric attribute values.
  """
  amount: Decimal

  """
  Currency to support money attribute values.
  """
  currency: String

  """
  Supports attribute values to reference any other nautical object (should be base64 ID)
  """
  reference: String

  """
  Supports boolean attribute values.
  """
  boolean: Boolean

  """
  Supports file type attribute values.
  """
  file: Upload

  """
  URL type to support external links as attribute values.
  """
  fileUrl: String
}

"""
Deletes a category.
"""
type CategoryDelete {
  productErrors: [ProductError!]!
  category: Category
}

"""
Deletes categories.
"""
type CategoryBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Updates a category.
"""
type CategoryUpdate {
  productErrors: [ProductError!]!
  category: Category
}

"""
Adds products to a collection.
"""
type CollectionAddProducts {
  """
  Collection to which products will be added.
  """
  collection: Collection
  productErrors: [ProductError!]!
}

"""
Adds variants to a collection.
"""
type CollectionAddVariants {
  """
  Collection to which variants will be added.
  """
  collection: Collection
  productErrors: [ProductError!]!
}

"""
Creates a new collection.
"""
type CollectionCreate {
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionCreateInput {
  """
  Informs whether a collection is published.
  """
  isPublished: Boolean

  """
  Informs whether a collection is visible.
  """
  isVisible: Boolean

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Name of the collection.
  """
  name: String

  """
  Slug of the collection.
  """
  slug: String

  """
  Description of the collection (plaintext, deprecated as input).
  """
  description: String

  """
  Description of the collection (HTML).
  """
  descriptionHtml: String

  """
  Background image file.
  """
  backgroundImage: Upload

  """
  Alt text for an image.
  """
  backgroundImageAlt: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date

  """
  List of products to be added to the collection.
  """
  products: [ID!]

  """
  Collection type to assign to the collection.
  """
  type: CollectionTypeEnum
}

"""
Deletes a collection.
"""
type CollectionDelete {
  productErrors: [ProductError!]!
  collection: Collection
}

"""
Reorder the products of a collection.
"""
type CollectionReorderProducts {
  """
  Collection from which products are reordered.
  """
  collection: Collection
  productErrors: [ProductError!]!
}

"""
Deletes collections.
"""
type CollectionBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Publish collections.
"""
type CollectionBulkPublish {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Remove products from a collection.
"""
type CollectionRemoveProducts {
  """
  Collection from which products will be removed.
  """
  collection: Collection
  productErrors: [ProductError!]!
}

"""
Remove variants from a collection.
"""
type CollectionRemoveVariants {
  """
  Collection from which variants will be removed.
  """
  collection: Collection
  productErrors: [ProductError!]!
}

"""
Updates a collection.
"""
type CollectionUpdate {
  productErrors: [ProductError!]!
  collection: Collection
}

input CollectionInput {
  """
  Informs whether a collection is published.
  """
  isPublished: Boolean

  """
  Informs whether a collection is visible.
  """
  isVisible: Boolean

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Name of the collection.
  """
  name: String

  """
  Slug of the collection.
  """
  slug: String

  """
  Description of the collection (plaintext, deprecated as input).
  """
  description: String

  """
  Description of the collection (HTML).
  """
  descriptionHtml: String

  """
  Background image file.
  """
  backgroundImage: Upload

  """
  Alt text for an image.
  """
  backgroundImageAlt: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date
}

"""
Creates a new product.
"""
type ProductCreate {
  productErrors: [ProductError!]!
  product: Product
}

input ProductCreateInput {
  """
  List of attributes.
  """
  attributes: [AttributeValueInput!]

  """
  ID of the type that product belongs to.
  """
  productType: ID

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date

  """
  ID of the product's category.
  """
  category: ID

  """
  Determine if taxes are being charged for the product.
  """
  chargeTaxes: Boolean

  """
  List of IDs of collections that the product belongs to.
  """
  collections: [ID!]

  """
  Choose a currency to assign to the product prices.
  """
  currency: String

  """
  Product description (plaintext, read-only).
  """
  description: String

  """
  Product description (html).
  """
  descriptionHtml: String

  """
  Determines if product is visible to customers.
  """
  isPublished: Boolean

  """
  Product name.
  """
  name: String

  """
  Product slug.
  """
  slug: String

  """
  Tax rate for enabled tax gateway.
  """
  taxCode: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Weight of the Product.
  """
  weight: WeightScalar

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  sku: String

  """
  Size of the variant. Note: this field is only used if product doesn't use variants. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  variantSize: VariantSizeInput = null

  """
  Determines whether to track changes to this variant's inventory. If set to 'false', the product's stock quantity won't reduce when a customer purchases this item. However, even when 'false', you must assign a stock quantity to a warehouse to allow checkouts. Usually, this involves allocating a placeholder stock amount that matches the maximum quantity purchased at once. Note: this field is applicable only for simple products.DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  trackInventory: Boolean

  """
  Default price for product variant. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  basePrice: PositiveDecimal

  """
  Default cost price for product variant. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  costPrice: PositiveDecimal

  """
  Determines if product is visible in product listings (doesn't apply to product collections).
  """
  visibleInListings: Boolean

  """
  Manufacturer product number
  """
  mpn: String

  """
  Product brand
  """
  brand: String

  """
  Manufacturer of the product
  """
  manufacturer: String

  """
  Product model code
  """
  model: String

  """
  Override price for grouped products
  """
  overridePrice: Boolean

  """
  Override currency for product
  """
  overrideCurrency: Boolean

  """
  Substatus the product is to be changed to.
  """
  subStatus: ProductSubStatusEnum

  """
  A reason for why the sub status changed, which will be displayed to the creator of the product.
  """
  subStatusReason: String

  """
  Sort priority for product
  """
  sortPriorityWeight: Decimal

  """
  Set whether this product requires shipping by default, will be overridden by product type if provided
  """
  isShippingRequired: Boolean

  """
  Set whether this product is digital by default, will be overridden by product type if provided
  """
  isDigital: Boolean

  """
  Set whether this product allows price overrides by default, will be controlled by product type if provided
  """
  isPriceOverrideAllowed: Boolean

  """
  ID of the seller that product belongs to.
  """
  seller: ID!

  """
  Stocks of a product available for sale. Note: this field is only used if a product doesn't use variants. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  stocks: [StockInput!]

  """
  Determine if product should be available for purchase.
  """
  isAvailable: Boolean

  """
  Whether to allow backorders for this product variant, if backorders are permitted at the marketplace level
  """
  allowBackorders: Boolean

  """
  A start date from which a product will be available for purchase. When not set and isAvailable is set to True, the current day is assumed.
  """
  startDate: Date

  """
  The external source identifier of a foreign system (e.g. nautical.fulfillment.shopify) if a product originated from that system, used in combination with provided externalId. If submitting externalSource, you must also provide an externalId argument. If these two are provided, the productCreate mutation will attempt to perform an upsert instead of a creation.
  """
  externalSource: String

  """
  The external ID from a foreign system if a product originated from that system, used in combination with provided externalSource. If submitting externalId, you must also provide an externalSource argument. If these two are provided, the productCreate mutation will attempt to perform an upsert instead of a creation.
  """
  externalId: String
}

"""
Represents size of a specific variant.
"""
input VariantSizeInput {
  length: Decimal
  width: Decimal
  height: Decimal

  """
  Size units for length, width and height.
  """
  sizeUnits: DistanceUnitsEnum
}

input StockInput {
  """
  Warehouse in which the stock is located.
  """
  warehouse: ID!

  """
  Quantity of items in the warehouse.
  """
  quantity: Int

  """
  Threshold of available quantity to allow backorders. Should be zero or negative.
  """
  outOfStockThreshold: Int = 0

  """
  Determines whether 'quantityAllocated' is added to the 'quantity' input or is ignored when updating the stock levels. When true, the 'quantity' input is added to 'quantityAllocated', resulting in the new stock quantity. When false (default), the 'quantity' input directly replaces the stock quantity, ignoring 'quantityAllocated'.
  """
  includeAllocations: Boolean = false
}

"""
Deletes a product.
"""
type ProductDelete {
  productErrors: [ProductError!]!
  product: Product
}

"""
Deletes products.
"""
type ProductBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Publish products.
"""
type ProductBulkPublish {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Update product category for multiple products
"""
type ProductBulkCategoryUpdate {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Updates an existing product.
"""
type ProductUpdate {
  productErrors: [ProductError!]!
  product: Product
}

input ProductInput {
  """
  List of attributes.
  """
  attributes: [AttributeValueInput!]

  """
  ID of the type that product belongs to.
  """
  productType: ID

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: Date

  """
  ID of the product's category.
  """
  category: ID

  """
  Determine if taxes are being charged for the product.
  """
  chargeTaxes: Boolean

  """
  List of IDs of collections that the product belongs to.
  """
  collections: [ID!]

  """
  Choose a currency to assign to the product prices.
  """
  currency: String

  """
  Product description (plaintext, read-only).
  """
  description: String

  """
  Product description (html).
  """
  descriptionHtml: String

  """
  Determines if product is visible to customers.
  """
  isPublished: Boolean

  """
  Product name.
  """
  name: String

  """
  Product slug.
  """
  slug: String

  """
  Tax rate for enabled tax gateway.
  """
  taxCode: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Weight of the Product.
  """
  weight: WeightScalar

  """
  Stock keeping unit of a product. Note: this field is only used if a product doesn't use variants. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  sku: String

  """
  Size of the variant. Note: this field is only used if product doesn't use variants. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  variantSize: VariantSizeInput = null

  """
  Determines whether to track changes to this variant's inventory. If set to 'false', the product's stock quantity won't reduce when a customer purchases this item. However, even when 'false', you must assign a stock quantity to a warehouse to allow checkouts. Usually, this involves allocating a placeholder stock amount that matches the maximum quantity purchased at once. Note: this field is applicable only for simple products.DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  trackInventory: Boolean

  """
  Default price for product variant. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  basePrice: PositiveDecimal

  """
  Default cost price for product variant. DEPRECATED: All products are now configurable instead of simple. This field will be removed after 2024-07-01.
  """
  costPrice: PositiveDecimal

  """
  Determines if product is visible in product listings (doesn't apply to product collections).
  """
  visibleInListings: Boolean

  """
  Manufacturer product number
  """
  mpn: String

  """
  Product brand
  """
  brand: String

  """
  Manufacturer of the product
  """
  manufacturer: String

  """
  Product model code
  """
  model: String

  """
  Override price for grouped products
  """
  overridePrice: Boolean

  """
  Override currency for product
  """
  overrideCurrency: Boolean

  """
  Substatus the product is to be changed to.
  """
  subStatus: ProductSubStatusEnum

  """
  A reason for why the sub status changed, which will be displayed to the creator of the product.
  """
  subStatusReason: String

  """
  Sort priority for product
  """
  sortPriorityWeight: Decimal

  """
  Set whether this product requires shipping by default, will be overridden by product type if provided
  """
  isShippingRequired: Boolean

  """
  Set whether this product is digital by default, will be overridden by product type if provided
  """
  isDigital: Boolean

  """
  Set whether this product allows price overrides by default, will be controlled by product type if provided
  """
  isPriceOverrideAllowed: Boolean
}

"""
Set product availability for purchase date.
"""
type ProductSetAvailabilityForPurchase {
  product: Product
  productErrors: [ProductError!]!
}

"""
Create a product image. If URL is present, image will be taken from provided URL. If no URL provided, then this mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type ProductImageCreate {
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageCreateInput {
  """
  Alt text for an image.
  """
  alt: String

  """
  Represents an image file in a multipart request.
  """
  image: Upload

  """
  URL of image to upload
  """
  url: String

  """
  ID of an product.
  """
  product: ID!

  """
  Only for use by Marketplace Operator, if true then the image ownership will transfer to the seller that owns the product it is being assigned to, if false or not provided then image ownership will not transfer.
  """
  transferImageOwnership: Boolean = false

  """
  External ID of the product image if originating from outside the system.
  """
  externalId: String

  """
  External source of the product image if originating from outside the system.
  """
  externalSource: String
}

"""
Reorder the variants of a product. Mutation updates updated_at on product and triggers PRODUCT_UPDATED webhook.
"""
type ProductReorderVariants {
  product: Product
  productErrors: [ProductError!]!
}

input ReorderInput {
  """
  The ID of the item to move.
  """
  id: ID!

  """
  The new relative sorting position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged.
  """
  sortOrder: Int
}

"""
Deletes a product image.
"""
type ProductImageDelete {
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

"""
Deletes product images.
"""
type ProductImageBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Changes ordering of the product image.
"""
type ProductImageReorder {
  product: Product
  images: [ProductImage!]
  productErrors: [ProductError!]!
}

"""
Updates a product image.
"""
type ProductImageUpdate {
  product: Product
  image: ProductImage
  productErrors: [ProductError!]!
}

input ProductImageUpdateInput {
  """
  Alt text for an image.
  """
  alt: String
}

"""
Creates a new product type.
"""
type ProductTypeCreate {
  productErrors: [ProductError!]!
  productType: ProductType
}

input ProductTypeInput {
  """
  Name of the product type.
  """
  name: String

  """
  Product type slug.
  """
  slug: String

  """
  Allow variant price to be overridden for products in this product type in the checkout or in quote and draft orders.
  """
  isPriceOverrideAllowed: Boolean

  """
  List of attributes shared among all product variants.
  """
  productAttributes: [ID!]

  """
  List of attributes used to distinguish between different variants of a product.
  """
  variantAttributes: [ID!]

  """
  Determines if shipping is required for products of this variant.
  """
  isShippingRequired: Boolean

  """
  Determines if products are digital.
  """
  isDigital: Boolean

  """
  Weight of the ProductType items.
  """
  weight: WeightScalar

  """
  Tax rate for enabled tax gateway.
  """
  taxCode: String

  """
  ID of the Seller that created the Product Type, or null if Marketplace Operator
  """
  createdBy: String
}

"""
Deletes a product type.
"""
type ProductTypeDelete {
  productErrors: [ProductError!]!
  productType: ProductType
}

"""
Deletes product types.
"""
type ProductTypeBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Updates an existing product type.
"""
type ProductTypeUpdate {
  productErrors: [ProductError!]!
  productType: ProductType
}

"""
Reorder the attributes of a product type.
"""
type ProductTypeReorderAttributes {
  """
  Product type from which attributes are reordered.
  """
  productType: ProductType
  productErrors: [ProductError!]!
}

enum AttributeTypeEnum {
  PRODUCT
  VARIANT
  CUSTOM
}

"""
Create new digital content. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type DigitalContentCreate {
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

input DigitalContentUploadInput {
  """
  Use default digital content settings for this product.
  """
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """
  Overwrite default automatic_fulfillment setting for variant.
  """
  automaticFulfillment: Boolean

  """
  Represents an file in a multipart request.
  """
  contentFile: Upload!
}

"""
Remove digital content assigned to given variant.
"""
type DigitalContentDelete {
  variant: ProductVariant
  productErrors: [ProductError!]!
}

"""
Update digital content.
"""
type DigitalContentUpdate {
  variant: ProductVariant
  content: DigitalContent
  productErrors: [ProductError!]!
}

input DigitalContentInput {
  """
  Use default digital content settings for this product.
  """
  useDefaultSettings: Boolean!

  """
  Determines how many times a download link can be accessed by a customer.
  """
  maxDownloads: Int

  """
  Determines for how many days a download link is active since it was generated.
  """
  urlValidDays: Int

  """
  Overwrite default automatic_fulfillment setting for variant.
  """
  automaticFulfillment: Boolean
}

"""
Generate new URL to digital content.
"""
type DigitalContentUrlCreate {
  productErrors: [ProductError!]!
  digitalContentUrl: DigitalContentUrl
}

input DigitalContentUrlCreateInput {
  """
  Digital content ID which URL will belong to.
  """
  content: ID!
}

"""
Creates a new variant for a product.
"""
type ProductVariantCreate {
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantCreateInput {
  """
  Product ID of which type is the variant.
  """
  product: ID!

  """
  List of attributes specific to this variant.
  """
  attributes: [AttributeValueInput!]!

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Cost price of the variant.
  """
  costPrice: PositiveDecimal

  """
  Description of the product variant.
  """
  description: String

  """
  Product variant description (HTML).
  """
  descriptionHtml: String

  """
  Price of the particular variant.
  """
  price: PositiveDecimal

  """
  Currency of the product variant
  """
  currency: String

  """
  Stock keeping unit.
  """
  sku: String

  """
  Whether to override the currency for this product variant
  """
  overrideCurrency: Boolean

  """
  Determines whether to track changes to this variant's inventory. If set to 'false', the product's stock quantity won't reduce when a customer purchases this item. However, even when 'false', you must assign a stock quantity to a warehouse to allow checkouts. Usually, this involves allocating a placeholder stock amount that matches the maximum quantity purchased at once.
  """
  trackInventory: Boolean

  """
  Seller that owns the variant. (Only usable with MANAGE_MARKETPLACE permission).
  """
  seller: ID

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Weight of the Product Variant.
  """
  weight: WeightScalar

  """
  Size of the Product Variant.
  """
  size: VariantSizeInput

  """
  Name for the variant.
  """
  name: String

  """
  True if variant requires quote pricing.
  """
  requiresQuote: Boolean

  """
  Substatus the variant is to be changed to.
  """
  subStatus: ProductVariantSubStatusEnum

  """
  Informs whether a collection is published. All variants are published by default
  """
  isPublished: Boolean

  """
  The datetime when this variant will become available. This field may contain a past, future date or can be empty (so it is always published if isPublished is true)
  """
  publishedAt: DateTime

  """
  Whether to allow backorders for this product variant, if backorders are permitted at the marketplace level
  """
  allowBackorders: Boolean

  """
  Set whether this variant requires shipping by default, will be overridden by product type attached to product if available
  """
  isShippingRequired: Boolean

  """
  Set whether this variant is digital by default, will be overridden by product type attached to product if available
  """
  isDigital: Boolean

  """
  Set whether this variant allows price overrides by default, will be overridden by product type attached to product if available
  """
  isPriceOverrideAllowed: Boolean

  """
  Stocks of a product available for sale.
  """
  stocks: [StockInput!]

  """
  The external source identifier of a foreign system (e.g. nautical.fulfillment.shopify) if a product variant originated from that system, used in combination with provided externalId. If submitting externalSource, you must also provide an externalId argument. If these two are provided, the productVariantCreate mutation will attempt to perform an upsert instead of a creation.
  """
  externalSource: String

  """
  The external ID from a foreign system if a product variant originated from that system, used in combination with provided externalSource. If submitting externalId, you must also provide an externalSource argument. If these two are provided, the productVariantCreate mutation will attempt to perform an upsert instead of a creation.
  """
  externalId: String
}

"""
Deletes a product variant.
"""
type ProductVariantDelete {
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

"""
Creates product variants for a given product.
"""
type ProductVariantBulkCreate {
  """
  Returns how many objects were created.
  """
  count: Int!

  """
  List of the created variants.
  """
  productVariants: [ProductVariant!]!
  bulkProductErrors: [BulkProductError!]!
}

type BulkProductError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ProductErrorCode!

  """
  List of attributes IDs which causes the error.
  """
  attributes: [ID!]

  """
  Index of an input list item that caused the error.
  """
  index: Int

  """
  List of warehouse IDs which causes the error.
  """
  warehouses: [ID!]
}

input ProductVariantBulkCreateInput {
  """
  Product ID of which type is the variant.
  """
  product: ID

  """
  List of attributes specific to this variant.
  """
  attributes: [AttributeValueInput!]!

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Cost price of the variant.
  """
  costPrice: PositiveDecimal

  """
  Description of the product variant.
  """
  description: String

  """
  Product variant description (HTML).
  """
  descriptionHtml: String

  """
  Price of the particular variant.
  """
  price: PositiveDecimal

  """
  Currency of the product variant
  """
  currency: String

  """
  Stock keeping unit.
  """
  sku: String

  """
  Whether to override the currency for this product variant
  """
  overrideCurrency: Boolean

  """
  Determines whether to track changes to this variant's inventory. If set to 'false', the product's stock quantity won't reduce when a customer purchases this item. However, even when 'false', you must assign a stock quantity to a warehouse to allow checkouts. Usually, this involves allocating a placeholder stock amount that matches the maximum quantity purchased at once.
  """
  trackInventory: Boolean

  """
  Seller that owns the variant. (Only usable with MANAGE_MARKETPLACE permission).
  """
  seller: ID

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Weight of the Product Variant.
  """
  weight: WeightScalar

  """
  Size of the Product Variant.
  """
  size: VariantSizeInput

  """
  Name for the variant.
  """
  name: String

  """
  True if variant requires quote pricing.
  """
  requiresQuote: Boolean

  """
  Substatus the variant is to be changed to.
  """
  subStatus: ProductVariantSubStatusEnum

  """
  Informs whether a collection is published. All variants are published by default
  """
  isPublished: Boolean

  """
  The datetime when this variant will become available. This field may contain a past, future date or can be empty (so it is always published if isPublished is true)
  """
  publishedAt: DateTime

  """
  Whether to allow backorders for this product variant, if backorders are permitted at the marketplace level
  """
  allowBackorders: Boolean

  """
  Set whether this variant requires shipping by default, will be overridden by product type attached to product if available
  """
  isShippingRequired: Boolean

  """
  Set whether this variant is digital by default, will be overridden by product type attached to product if available
  """
  isDigital: Boolean

  """
  Set whether this variant allows price overrides by default, will be overridden by product type attached to product if available
  """
  isPriceOverrideAllowed: Boolean

  """
  Stocks of a product available for sale.
  """
  stocks: [StockInput!]

  """
  The external source identifier of a foreign system (e.g. nautical.fulfillment.shopify) if a product variant originated from that system, used in combination with provided externalId. If submitting externalSource, you must also provide an externalId argument.
  """
  externalSource: String

  """
  The external ID from a foreign system if a product variant originated from that system, used in combination with provided externalSource. If submitting externalId, you must also provide an externalSource argument.
  """
  externalId: String
}

"""
Deletes product variants.
"""
type ProductVariantBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Creates stocks for product variant.
"""
type ProductVariantStocksCreate {
  """
  Updated product variant.
  """
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

type BulkStockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ProductErrorCode!

  """
  List of attributes IDs which causes the error.
  """
  attributes: [ID!]

  """
  Index of an input list item that caused the error.
  """
  index: Int
}

"""
Delete stocks from product variant.
"""
type ProductVariantStocksDelete {
  """
  Updated product variant.
  """
  productVariant: ProductVariant
  stockErrors: [StockError!]!
}

type StockError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: StockErrorCode!
}

"""
An enumeration.
"""
enum StockErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

"""
Update stocks for product variant.
"""
type ProductVariantStocksUpdate {
  """
  Updated product variant.
  """
  productVariant: ProductVariant
  bulkStockErrors: [BulkStockError!]!
}

"""
Updates an existing variant for product.
"""
type ProductVariantUpdate {
  productErrors: [ProductError!]!
  productVariant: ProductVariant
}

input ProductVariantInput {
  """
  Product ID of which type is the variant.
  """
  product: ID

  """
  List of attributes specific to this variant.
  """
  attributes: [AttributeValueInput!]

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Cost price of the variant.
  """
  costPrice: PositiveDecimal

  """
  Description of the product variant.
  """
  description: String

  """
  Product variant description (HTML).
  """
  descriptionHtml: String

  """
  Price of the particular variant.
  """
  price: PositiveDecimal

  """
  Currency of the product variant
  """
  currency: String

  """
  Stock keeping unit.
  """
  sku: String

  """
  Whether to override the currency for this product variant
  """
  overrideCurrency: Boolean

  """
  Determines whether to track changes to this variant's inventory. If set to 'false', the product's stock quantity won't reduce when a customer purchases this item. However, even when 'false', you must assign a stock quantity to a warehouse to allow checkouts. Usually, this involves allocating a placeholder stock amount that matches the maximum quantity purchased at once.
  """
  trackInventory: Boolean

  """
  Seller that owns the variant. (Only usable with MANAGE_MARKETPLACE permission).
  """
  seller: ID

  """
  Search engine optimization fields.
  """
  seo: SeoInput

  """
  Weight of the Product Variant.
  """
  weight: WeightScalar

  """
  Size of the Product Variant.
  """
  size: VariantSizeInput

  """
  Name for the variant.
  """
  name: String

  """
  True if variant requires quote pricing.
  """
  requiresQuote: Boolean

  """
  Substatus the variant is to be changed to.
  """
  subStatus: ProductVariantSubStatusEnum

  """
  Informs whether a collection is published. All variants are published by default
  """
  isPublished: Boolean

  """
  The datetime when this variant will become available. This field may contain a past, future date or can be empty (so it is always published if isPublished is true)
  """
  publishedAt: DateTime

  """
  Whether to allow backorders for this product variant, if backorders are permitted at the marketplace level
  """
  allowBackorders: Boolean

  """
  Set whether this variant requires shipping by default, will be overridden by product type attached to product if available
  """
  isShippingRequired: Boolean

  """
  Set whether this variant is digital by default, will be overridden by product type attached to product if available
  """
  isDigital: Boolean

  """
  Set whether this variant allows price overrides by default, will be overridden by product type attached to product if available
  """
  isPriceOverrideAllowed: Boolean
}

"""
Set default variant for a product. Mutation triggers PRODUCT_UPDATED webhook.
"""
type ProductVariantSetDefault {
  product: Product
  productErrors: [ProductError!]!
}

"""
Assign an image to a product variant.
"""
type ProductVariantImageAssign {
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""
Unassign an image from a product variant.
"""
type ProductVariantImageUnassign {
  productVariant: ProductVariant
  image: ProductImage
  productErrors: [ProductError!]!
}

"""
Creates a new feature for either a product or a variant.
"""
type FeatureCreate {
  feature: Feature
  productErrors: [ProductError!]!
}

"""
Represents a single feature for either product or variant.
"""
union Feature = ProductFeature | VariantFeature

input FeatureCreateInput {
  """
  Name (key) of the feature.
  """
  name: String

  """
  Description (value) of the feature.
  """
  description: String

  """
  List of available options.
  """
  options: [String]

  """
  Feature type to assign to the feature.
  """
  featureType: FeatureTypeEnum

  """
  ID of the product or variant the feature belongs to.
  """
  id: ID!
}

"""
Updates a feature.
"""
type FeatureUpdate {
  feature: Feature
  productErrors: [ProductError!]!
}

input FeatureInput {
  """
  Name (key) of the feature.
  """
  name: String

  """
  Description (value) of the feature.
  """
  description: String

  """
  List of available options.
  """
  options: [String]

  """
  Feature type to assign to the feature.
  """
  featureType: FeatureTypeEnum
}

"""
Deletes a feature.
"""
type FeatureDelete {
  product: Product
  variant: ProductVariant
  productErrors: [ProductError!]!
}

"""
Creates a new product or variant feature on a product type.
"""
type ProductTypeFeatureCreate {
  productType: ProductType
  productErrors: [ProductError!]!
}

input ProductTypeFeatureCreateInput {
  """
  Name (key) of the feature.
  """
  name: String

  """
  Description (value) of the feature.
  """
  description: String

  """
  List of available options.
  """
  options: [String]

  """
  Feature type to assign to the feature.
  """
  featureType: FeatureTypeEnum

  """
  ID of the product type for which to create the feature.
  """
  id: ID!

  """
  True if feature will be a variant feature, false if feature will be a product feature.
  """
  isVariantFeature: Boolean!
}

"""
Updates a product or variant feature on a product type.
"""
type ProductTypeFeatureUpdate {
  productType: ProductType
  productErrors: [ProductError!]!
}

input ProductTypeFeatureInput {
  """
  Name (key) of the feature.
  """
  name: String

  """
  Description (value) of the feature.
  """
  description: String

  """
  List of available options.
  """
  options: [String]

  """
  Feature type to assign to the feature.
  """
  featureType: FeatureTypeEnum
}

"""
Deletes a product or variant feature on a product type.
"""
type ProductTypeFeatureDelete {
  productType: ProductType
  productErrors: [ProductError!]!
}

"""
Create a new location for the product.
"""
type ProductLocationCreate {
  """
  A product instance for which the location was created.
  """
  product: Product

  """
  A location instance which was created
  """
  location: Location
  productErrors: [ProductError!]!
}

input LocationInput {
  """
  Company or organization.
  """
  companyName: String

  """
  Address.
  """
  streetAddress1: String

  """
  Address.
  """
  streetAddress2: String

  """
  City.
  """
  city: String

  """
  District.
  """
  cityArea: String

  """
  Postal code.
  """
  postalCode: String

  """
  Country.
  """
  country: CountryCode

  """
  State or province.
  """
  countryArea: String

  """
  Phone number.
  """
  phone: String

  """
  Longitude of the location.
  """
  lon: Float

  """
  Latitude of the location.
  """
  lat: Float

  """
  Kind of the location.
  """
  locationKind: LocationKindEnum
}

"""
Updates a location for a product.
"""
type ProductLocationUpdate {
  """
  A product instance for which the location was updated.
  """
  product: Product

  """
  A location instance which was updated
  """
  location: Location
  productErrors: [ProductError!]!
}

"""
Delete a location for a product.
"""
type ProductLocationDelete {
  """
  A product instance for which a location was deleted
  """
  product: Product
  productErrors: [ProductError!]!
}

"""
Sets a location type.
"""
type ProductSetLocationType {
  """
  An updated product instance.
  """
  product: Product

  """
  An updated location instance.
  """
  location: Location
  productErrors: [ProductError!]!
}

"""
Captures the authorized payment amount.
"""
type PaymentCapture {
  """
  Updated payment.
  """
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type PaymentError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PaymentErrorCode!
}

"""
An enumeration.
"""
enum PaymentErrorCode {
  BILLING_ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PARTIAL_PAYMENT_NOT_ALLOWED
  SHIPPING_ADDRESS_NOT_SET
  INVALID_SHIPPING_METHOD
  SHIPPING_METHOD_NOT_SET
  PAYMENT_ERROR
  NOT_SUPPORTED_GATEWAY
  INSUFFICIENT_STOCK
}

"""
Voids the authorized payment.
"""
type PaymentVoid {
  """
  Updated payment.
  """
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""
Creates a new page.
"""
type PageCreate {
  pageErrors: [PageError!]!
  page: Page
}

type PageError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PageErrorCode!
}

"""
An enumeration.
"""
enum PageErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PageInput {
  """
  Page internal name.
  """
  slug: String

  """
  Page title.
  """
  title: String

  """
  Page content (Plaintext, deprecated as input).
  """
  content: String

  """
  Page content (HTML).
  """
  contentHtml: String

  """
  Determines if page is visible in the storefront.
  """
  isPublished: Boolean

  """
  Publication date. ISO 8601 standard.
  """
  publicationDate: String

  """
  Search engine optimization fields.
  """
  seo: SeoInput
}

"""
Deletes a page.
"""
type PageDelete {
  pageErrors: [PageError!]!
  page: Page
}

"""
Deletes pages.
"""
type PageBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  pageErrors: [PageError!]!
}

"""
Publish pages.
"""
type PageBulkPublish {
  """
  Returns how many objects were affected.
  """
  count: Int!
  pageErrors: [PageError!]!
}

"""
Updates an existing page.
"""
type PageUpdate {
  pageErrors: [PageError!]!
  page: Page
}

"""
Completes creating an order.
"""
type DraftOrderComplete {
  """
  Completed order.
  """
  order: Order
  orderErrors: [OrderError!]!
}

type OrderError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: OrderErrorCode!

  """
  Warehouse ID which causes the error.
  """
  warehouse: ID

  """
  Order line ID which causes the error.
  """
  orderLine: ID

  """
  Variant ID which causes the error.
  """
  variant: ID
}

"""
An enumeration.
"""
enum OrderErrorCode {
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  BILLING_ADDRESS_NOT_SET
  CANNOT_ADD_FEE
  CANNOT_CANCEL_FULFILLMENT
  CANNOT_RETURN_FULFILLMENT
  CANNOT_UPDATE_FULFILLMENT
  CANNOT_DECLINE_FULFILLMENT
  CANNOT_CANCEL_ORDER
  CANNOT_FULFILL_ORDER
  CANNOT_DELETE
  CANNOT_REFUND
  CAPTURE_INACTIVE_PAYMENT
  NOT_EDITABLE
  FULFILL_ORDER_LINE
  GRAPHQL_ERROR
  INVALID
  INVALID_PHONE
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  NOT_FOUND
  ORDER_NO_SHIPPING_ADDRESS
  PAYMENT_ERROR
  PAYMENT_MISSING
  PERMISSION_DENIED
  PAYOUT_STATUS_CHANGE_NOT_ALLOWED
  QUOTE_PAYMENT_ERROR
  REQUIRED
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_REQUIRED
  TAX_ERROR
  UNIQUE
  VOID_INACTIVE_PAYMENT
  ZERO_QUANTITY
  INSUFFICIENT_STOCK
  DUPLICATED_INPUT_ITEM
  PRICE_OVERRIDE_NOT_ALLOWED
  VOUCHER_NOT_APPLICABLE
}

"""
Completes creating an order.
"""
type NauticalDraftOrderComplete {
  """
  Completed nautical order.
  """
  order: NauticalOrder

  """
  List of seller orders.
  """
  sellerOrders: [Order!]
  orderErrors: [OrderError!]!
}

"""
Update currency in the existing draft order object.
"""
type DraftOrderSetTransactionCurrency {
  """
  Draft Order to update transaction currency.
  """
  order: Order
  orderErrors: [OrderError!]!
}

"""
Update currency in the existing nautical draft order object, related nautical order lines, child order and their lines.
"""
type NauticalDraftOrderSetTransactionCurrency {
  """
  Draft Nautical Order to update transaction currency.
  """
  nauticalOrder: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Creates a new draft order.
"""
type DraftOrderCreate {
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderCreateInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Customer associated with the draft order.
  """
  user: ID

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  A note from a customer. Visible by customers in the order summary.
  """
  customerNote: String

  """
  Sub status the order is to be changed to. Draft orders can have or
          be given a sub status of AWAITING_PAYMENT. Quote order can have or be given a
          sub status of either QUOTE_REQUESTED or IN_REVIEW.
  """
  subStatus: OrderSubStatusEnum

  """
  Variant line input consisting of variant ID and quantity of products.
  """
  lines: [OrderLineCreateInput!]
  seller: ID

  """
  Specify which nautical order we want to create (DRAFT, by default).
  """
  status: DraftOrderInitialStatus = DRAFT

  """
  Optional transaction currency code. Domiciled currency will be used as fallback.
  """
  transactionCurrency: String
}

input OrderLineCreateInput {
  """
  Number of variant items ordered.
  """
  quantity: Int!

  """
  Product variant ID.
  """
  variantId: ID!
}

enum DraftOrderInitialStatus {
  DRAFT
  QUOTE
}

"""
Creates a new Nautical draft order.
"""
type NauticalDraftOrderCreate {
  orderErrors: [OrderError!]!
  nauticalOrder: NauticalOrder
}

input NauticalDraftOrderCreateInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Customer associated with the draft order.
  """
  user: ID

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  A note from a customer. Visible by customers in the order summary.
  """
  customerNote: String

  """
  Sub status the order is to be changed to. Draft orders can have or
          be given a sub status of AWAITING_PAYMENT. Quote order can have or be given a
          sub status of either QUOTE_REQUESTED or IN_REVIEW.
  """
  subStatus: OrderSubStatusEnum

  """
  Optional purchase order numbers of documents that outline what the buyer would like to purchase and how much of it they would like to receive
  """
  poNumbers: [String!]

  """
  Variant line input consisting of variant ID and quantity of products.
  """
  lines: [OrderLineCreateInput!]
  seller: ID

  """
  Specify which nautical order we want to create (DRAFT, by default).
  """
  status: DraftOrderInitialStatus = DRAFT

  """
  Optional transaction currency code. Domiciled currency will be used as fallback.
  """
  transactionCurrency: String
}

"""
Creates a new Nautical historical order.
"""
type NauticalHistoricalOrderCreate {
  orderErrors: [OrderError!]!
  nauticalOrder: NauticalOrder
}

input NauticalHistoricalOrderInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  Customer associated with the draft order.
  """
  user: ID

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Discount amount for the order.
  """
  discount: PositiveDecimal

  """
  Shipping price without taxes.
  """
  shippingPriceNetAmount: PositiveDecimal

  """
  Shipping price with taxes.
  """
  shippingPriceGrossAmount: PositiveDecimal

  """
  Total price without taxes.
  """
  totalNetAmount: PositiveDecimal

  """
  Total price with taxes.
  """
  totalGrossAmount: PositiveDecimal

  """
  Currency code.
  """
  currency: String

  """
  A note from a customer. Visible by customers in the order summary.
  """
  customerNote: String

  """
  Variant line input consisting of variant ID and quantity of products.
  """
  lines: [HistoricalOrderLineInput!]
  seller: ID

  """
  Created date time of historical order in ISO 8601 format.
  """
  created: DateTime

  """
  Order ID in the external source.
  """
  externalId: String
  externalInventoryId: String

  """
  External source name.
  """
  externalSource: String
}

input HistoricalOrderLineInput {
  """
  Number of variant items ordered.
  """
  quantity: Int!

  """
  Product variant ID.
  """
  variantId: ID!

  """
  Total price without taxes.
  """
  unitPriceNetAmount: PositiveDecimal

  """
  Total price with taxes.
  """
  unitPriceGrossAmount: PositiveDecimal

  """
  Order ID in the external source.
  """
  externalId: String
}

"""
Deletes a draft order.
"""
type DraftOrderDelete {
  orderErrors: [OrderError!]!
  order: Order
}

"""
Deletes a draft order.
"""
type NauticalDraftOrderDelete {
  orderErrors: [OrderError!]!
  nauticalOrder: NauticalOrder
}

"""
Deletes draft or quote orders.
"""
type DraftOrderBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  orderErrors: [OrderError!]!
}

"""
Deletes draft or quote orders.
"""
type NauticalDraftOrderBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  orderErrors: [OrderError!]!
}

"""
Deletes order lines.
"""
type DraftOrderLinesBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  orderErrors: [OrderError!]!
}

"""
Deletes order lines.
"""
type NauticalDraftOrderLinesBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  orderErrors: [OrderError!]!
}

"""
Create order lines for draft or quote orders.
"""
type DraftOrderLinesCreate {
  """
  A related draft order.
  """
  order: Order

  """
  List of newly added order lines.
  """
  orderLines: [OrderLine!]
  orderErrors: [OrderError!]!
}

"""
Create order lines for a draft or quote order.
"""
type NauticalDraftOrderLinesCreate {
  """
  A related draft or quote order.
  """
  order: NauticalOrder

  """
  List of newly added order lines.
  """
  orderLines: [NauticalOrderLine!]
  orderErrors: [OrderError!]!
}

"""
Deletes an order line from a draft or quote order.
"""
type DraftOrderLineDelete {
  """
  A related draft or quote order.
  """
  order: Order

  """
  An order line that was deleted.
  """
  orderLine: OrderLine
  orderErrors: [OrderError!]!
}

"""
Deletes an order line from a draft or quote order.
"""
type NauticalDraftOrderLineDelete {
  """
  A related draft or quote order.
  """
  order: NauticalOrder

  """
  An order line that was deleted.
  """
  orderLine: NauticalOrderLine
  orderErrors: [OrderError!]!
}

"""
Updates an order line of a draft or quote order.
"""
type DraftOrderLineUpdate {
  """
  A related draft or quote order.
  """
  order: Order
  orderErrors: [OrderError!]!
  orderLine: OrderLine
}

input OrderLineInput {
  """
  Number of variant items ordered.
  """
  quantity: Int!
}

"""
Updates an order line of a draft order.
"""
type NauticalDraftOrderLineUpdate {
  """
  A related draft order.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
  nauticalOrderLine: NauticalOrderLine
}

"""
Updates a draft order.
"""
type DraftOrderUpdate {
  orderErrors: [OrderError!]!
  order: Order
}

input DraftOrderInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Customer associated with the draft order.
  """
  user: ID

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  A note from a customer. Visible by customers in the order summary.
  """
  customerNote: String

  """
  Sub status the order is to be changed to. Draft orders can have or
          be given a sub status of AWAITING_PAYMENT. Quote order can have or be given a
          sub status of either QUOTE_REQUESTED or IN_REVIEW.
  """
  subStatus: OrderSubStatusEnum
}

"""
Updates a draft or quote nautical order.
"""
type NauticalDraftOrderUpdate {
  orderErrors: [OrderError!]!
  nauticalOrder: NauticalOrder
}

input NauticalDraftOrderInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Customer associated with the draft order.
  """
  user: ID

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  A note from a customer. Visible by customers in the order summary.
  """
  customerNote: String

  """
  Sub status the order is to be changed to. Draft orders can have or
          be given a sub status of AWAITING_PAYMENT. Quote order can have or be given a
          sub status of either QUOTE_REQUESTED or IN_REVIEW.
  """
  subStatus: OrderSubStatusEnum

  """
  Optional purchase order numbers of documents that outline what the buyer would like to purchase and how much of it they would like to receive
  """
  poNumbers: [String!]
}

"""
Overrides unit net price of an order line of a draft or quote order.
"""
type DraftOrderLinePriceOverride {
  """
  A related draft, or quote order.
  """
  order: Order
  orderErrors: [OrderError!]!
  orderLine: OrderLine
}

input OrderLinePriceOverrideInput {
  """
  Amount used to override order line unit price amount (in the order currency)
  """
  overrideAmount: PositiveDecimal!

  """
  Reason for price override
  """
  unitPriceOverriddenNote: String!
}

"""
Overrides unit net price of a marketplace order line of a draft, or quote order.
"""
type NauticalDraftOrderLinePriceOverride {
  """
  A related draft, or quote marketplace order.
  """
  nauticalOrder: NauticalOrder
  orderErrors: [OrderError!]!
  nauticalOrderLine: NauticalOrderLine
}

"""
Adds note to the order.
"""
type OrderAddNote {
  """
  Order with the note added.
  """
  order: Order

  """
  Order note created.
  """
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input OrderAddNoteInput {
  """
  Note message.
  """
  message: String!
}

"""
Adds note to the order.
"""
type NauticalOrderAddNote {
  """
  Order with the note added.
  """
  order: NauticalOrder

  """
  Order note created.
  """
  event: NauticalOrderEvent
  orderErrors: [OrderError!]!
}

"""
Add a note to an order line.
"""
type OrderLineAddNote {
  orderErrors: [OrderError!]!
  orderLine: OrderLine
}

input NoteInput {
  """
  Note
  """
  note: String!
}

"""
Add a note to a nautical order line.
"""
type NauticalOrderLineAddNote {
  orderErrors: [OrderError!]!
  nauticalOrderLine: NauticalOrderLine
}

"""
Adds return notification note to the order.
"""
type OrderReturnNotification {
  """
  Order with return notification note added.
  """
  order: Order

  """
  Order return notification created.
  """
  event: OrderEvent
  orderErrors: [OrderError!]!
}

input OrderReturnNotificationInput {
  """
  Status of the return.
  """
  returnStatus: String!

  """
  Status of the return.
  """
  productNames: String
}

"""
Attempts to force a refresh of the existing taxes on a non-placed nautical order.
"""
type NauticalOrderRefreshTaxes {
  """
  Nautical order with refreshed taxes.
  """
  nauticalOrder: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Apply an existing voucher code to a nautical order to give a discount.
"""
type NauticalOrderUpdateApplyVoucherCode {
  """
  Nautical order with voucher code applied leading to a discount.
  """
  nauticalOrder: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Remove a discount from a nautical order.
"""
type NauticalOrderUpdateDeleteDiscount {
  """
  Nautical order with no discount.
  """
  nauticalOrder: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Adds return notification note to the order.
"""
type NauticalOrderReturnNotification {
  """
  Order with return notification note added.
  """
  order: NauticalOrder

  """
  Order return notification created.
  """
  event: NauticalOrderEvent
  orderErrors: [OrderError!]!
}

"""
Adds return notification note to the order.
"""
type NauticalOrderReturnFromStorefrontNotification {
  """
  Order with return notification note added.
  """
  order: NauticalOrder

  """
  Order return notification created.
  """
  event: NauticalOrderEvent
  orderErrors: [OrderError!]!
}

"""
Adds return notification note to the order.
"""
type VendorOrderReturnFromStorefrontNotification {
  """
  Order with return notification note added.
  """
  order: Order

  """
  Order return notification created.
  """
  event: [OrderEvent!]
  orderErrors: [OrderError!]!
}

"""
Cancel an order.
"""
type OrderCancel {
  """
  Canceled order.
  """
  order: Order
  orderErrors: [OrderError!]!
}

"""
Cancel an order.
"""
type NauticalOrderCancel {
  """
  Canceled order.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Cancel a nautical quote order.
"""
type NauticalQuoteOrderCancel {
  """
  Canceled nautical quote order.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Capture a nautical order.
"""
type NauticalOrderCapture {
  """
  Captured Nautical Order.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Creates new fulfillments for an order.
"""
type OrderFulfill {
  """
  List of created fulfillments.
  """
  fulfillments: [Fulfillment!]

  """
  Fulfilled order.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input OrderFulfillInput {
  """
  List of items informing how to fulfill the order.
  """
  lines: [OrderFulfillLineInput!]!

  """
  If true, send an email notification to the customer.
  """
  notifyCustomer: Boolean

  """
  Only for use by marketplace administrators, if true, this will
          allow Marketplace Admin users to fulfill order lines with null variants.
  """
  allowNullVariants: Boolean

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]
}

input OrderFulfillLineInput {
  """
  The ID of the order line.
  """
  orderLineId: ID

  """
  List of stock items to create.
  """
  stocks: [OrderFulfillStockInput!]!
}

input OrderFulfillStockInput {
  """
  The number of line items to be fulfilled from the given warehouse.
  """
  quantity: Int!

  """
  ID of the warehouse from which the item will be fulfilled.
  """
  warehouse: ID!
}

"""
Decline (permanently) part of an order. The buyer will not be charged for the missing stock. Use if stock in a warehouse is damaged, expired, or unavailable.
"""
type OrderDeclineFulfillment {
  """
  List of created declined fulfillments.
  """
  fulfillments: [Fulfillment!]

  """
  The order that has been partially declined.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input DeclineFulfillInput {
  """
  If true, send an email notification to the customer.
  """
  notifyCustomer: Boolean = true

  """
  List of items that cannot be fulfilled for this order.
  """
  lines: [DeclineFulfillLineInput!]!
}

input DeclineFulfillLineInput {
  """
  The ID of the order line that will have fulfillments declined.
  """
  orderLineId: ID!

  """
  List of stock items to permanently decline and deallocate.
  """
  stocks: [DeclineFulfillStockInput!]!
}

input DeclineFulfillStockInput {
  """
  The number of line items to be declined and deallocated from the given warehouse.
  """
  quantityDeclined: Int!

  """
  ID of the warehouse from which the item will be fulfilled.
  """
  warehouse: ID!
}

"""
Cancels existing fulfillment and optionally restocks items.
"""
type FulfillmentCancel {
  """
  A canceled fulfillment.
  """
  fulfillment: Fulfillment

  """
  Order which fulfillment was cancelled.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentCancelInput {
  """
  ID of warehouse where items will be restock.
  """
  warehouseId: ID!
}

"""
Returns selected quantity from fulfillment lines and restocks items.
"""
type FulfillmentReturn {
  """
  A returned fulfillment.
  """
  fulfillment: Fulfillment

  """
  Order which fulfillment was returned for.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentReturnInput {
  """
  ID of the fulfillment line that a return is being made against
  """
  fulfillmentLineId: ID!

  """
  Number of items being returned for the given fulfillment line
  """
  returnQuantity: Int!
}

"""
Updates a fulfillment for an order.
"""
type FulfillmentUpdateTracking {
  """
  A fulfillment with updated tracking.
  """
  fulfillment: Fulfillment

  """
  Order for which fulfillment was updated.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentUpdateTrackingInput {
  """
  Fulfillment tracking number.
  """
  trackingNumber: String

  """
  Fulfillment tracking url.
  """
  trackingUrl: String

  """
  Fulfillment tracking company.
  """
  trackingCompany: String

  """
  If true, send an email notification to the customer.
  """
  notifyCustomer: Boolean = false
}

"""
Updated return status of existing fulfillment and optionally restocks items.
"""
type FulfillmentReturnStatusBulkUpdate {
  """
  A returned fulfillment.
  """
  fulfillment: Fulfillment

  """
  Order which fulfillment was returned.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input FulfillmentUpdateReturnStatusInput {
  """
  Return status that fulfillment should be updated with.
  """
  status: String!
}

"""
Processes return requests by grabbing the return status and
"""
type FulfillmentBulkReturn {
  """
  List of returned fulfillments.
  """
  fulfillments: [Fulfillment!]
  orderErrors: [OrderError!]!
}

input BulkFulfillmentReturnInput {
  """
  ID of an fulfillment to return
  """
  fulfillmentId: ID!

  """
  ID of the fulfillment line being returned
  """
  lineId: ID!

  """
  ID of the order line that the fulfillment line is hooked in to
  """
  orderLineId: ID

  """
  Total quantity of the fulfillment line
  """
  quantity: Int!

  """
  Quantity being returned for given fulfillment line
  """
  returnRequestedQty: Int!

  """
  Status of the return
  """
  decision: String

  """
  Customer-stated reason for the return
  """
  returnReason: String
}

"""
Marks a fully fulfilled Order as delivered.
"""
type OrderMarkAsDelivered {
  orderErrors: [OrderError!]!
  order: Order
}

"""
Mark order as manually paid.
"""
type NauticalOrderMarkAsPaid {
  """
  Order marked as paid.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Updates an order.
"""
type OrderUpdate {
  orderErrors: [OrderError!]!
  order: Order
}

input OrderUpdateInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput
}

"""
Updates an order.
"""
type NauticalOrderUpdate {
  orderErrors: [OrderError!]!
  nauticalOrder: NauticalOrder
}

input NauticalOrderUpdateInput {
  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Email address of the customer.
  """
  userEmail: String

  """
  Shipping address of the customer.
  """
  shippingAddress: AddressInput

  """
  Optional purchase order numbers of documents that outline what the buyer would like to purchase and how much of it they would like to receive
  """
  poNumbers: [String!]
}

"""
Modifies the payout status of an order
"""
type OrderPayoutStatusUpdate {
  """
  Order that was updated.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input OrderPayoutStatusUpdateInput {
  payoutStatus: OrderPayoutStatusEnum!
}

"""
Updates a shipping method of the order.
"""
type OrderUpdateShipping {
  """
  Order with updated shipping method.
  """
  order: Order
  orderErrors: [OrderError!]!
}

input OrderUpdateShippingInput {
  """
  ID of the selected shipping method.
  """
  shippingMethod: ID

  """
  Allows freeze shipping price and make it independent from the related shipping method price. If you make shipping price manual, and want unfreeze it (restore sync based on shipping method price) you can transfer 'false' value for this field.
  """
  isManual: Boolean

  """
  Manual price, that allows overwrite shipping method price. When this field provided, then 'isManual' will be set to the 'true'. You cannot transfer this field, when you explicitly transferring 'isManual: false' too (except the case, when this price will be equals to actual shipping method price).
  """
  newPrice: PositiveDecimal
}

"""
Updates a shipping method of the order.
"""
type NauticalOrderUpdateShipping {
  """
  Nautical Order with updated shipping method.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

input NauticalOrderUpdateShippingInput {
  """
  PK of seller to update shipping for on nautical order.
  """
  seller: ID

  """
  ID of the selected shipping method.
  """
  shippingMethod: ID

  """
  Allows freeze shipping price and make it independent from the related shipping method price. If you make shipping price manual, and want unfreeze it (restore sync based on shipping method price) you can transfer 'false' value for this field.
  """
  isManual: Boolean

  """
  Manual price, that allows overwrite shipping method price. When this field provided, then 'isManual' will be set to the 'true'. You cannot transfer this field, when you explicitly transferring 'isManual: false' too (except the case, when this price will be equals to actual shipping method price).
  """
  newPrice: PositiveDecimal
}

"""
Updates a marketplace shipping method of the order.
"""
type NauticalOrderUpdateMarketplaceShipping {
  """
  Nautical Order with updated marketplaceshipping method.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

input NauticalOrderUpdateMarketplaceShippingInput {
  """
  ID of the selected shipping method.
  """
  shippingMethod: ID!

  """
  Allows freeze shipping price and make it independent from the related shipping method price. If you make shipping price manual, and want unfreeze it (restore sync based on shipping method price) you can transfer 'false' value for this field.
  """
  isManual: Boolean

  """
  Manual price, that allows overwrite shipping method price. When this field provided, then 'isManual' will be set to the 'true'. You cannot transfer this field, when you explicitly transferring 'isManual: false' too (except the case, when this price will be equals to actual shipping method price).
  """
  newPrice: PositiveDecimal
}

"""
Void a nautical order.
"""
type NauticalOrderVoid {
  """
  A voided order.
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Cancels orders.
"""
type OrderBulkCancel {
  """
  Returns how many objects were affected.
  """
  count: Int!
  orderErrors: [OrderError!]!
}

"""
Cancels nautical order lines, associated order lines, and removes allocations for that order line.
"""
type NauticalOrderLineBulkCancel {
  """
  Returns how many objects were affected.
  """
  count: Int!

  """
  The nautical order that had a line cancelled.
  """
  order: NauticalOrder
}

"""
Create and process a new payment for given nautical order. Be aware that in nautical orders flow, payment will be handled as part of this mutation; while in checkout flow, it will be processed as part of CheckoutComplete mutation.
"""
type NauticalOrderPaymentCreate {
  """
  Related marketplace order object.
  """
  order: NauticalOrder

  """
  A newly created payment.
  """
  payment: Payment
  paymentErrors: [PaymentError!]!
}

input PaymentInput {
  """
  A gateway to use with that payment.
  """
  gateway: String!

  """
  Client-side generated payment token, representing customer's billing data in a secure manner.
  """
  token: String

  """
  Total amount of the transaction, including all taxes and discounts. If no amount is provided, the checkout total will be used.
  """
  amount: PositiveDecimal

  """
  Volume discount applicable to the checkout
  """
  volumeDiscount: PositiveDecimal

  """
  [Deprecated] Billing address. If empty, the billing address associated with the checkout instance will be used. Use `checkoutCreate` or `checkoutBillingAddressUpdate` mutations to set it. This field will be removed after 2020-07-31.
  """
  billingAddress: AddressInput

  """
  URL of a storefront view where user should be redirected after requiring additional actions. Payment with additional actions will not be finished if this field is not provided.
  """
  returnUrl: String
}

"""
Sends a quote order to a customer.
"""
type NauticalQuoteOrderSendToCustomer {
  """
  Nautical order to send to customer
  """
  order: NauticalOrder
  orderErrors: [OrderError!]!
}

"""
Creates a new order fee.
"""
type OrderFeeCreate {
  """
  An order fee that was created.
  """
  orderFee: OrderFee
  orderErrors: [OrderError!]!
}

input OrderFeeInput {
  """
  ID of the order to create the fee against.
  """
  order: ID!

  """
  Name of the order fee.
  """
  name: String!

  """
  Notes of the order fee.
  """
  notes: String

  """
  Value of the fee in domiciled currency.
  """
  feeValue: Decimal!
}

"""
Deletes a order fee.
"""
type OrderFeeDelete {
  """
  An order fee that was deleted.
  """
  orderFee: OrderFee
  orderErrors: [OrderError!]!
}

"""
Uploads lines for a draft order via CSV. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type NauticalOrderLinesCsvUpload {
  """
  The nautical order.
  """
  nauticalOrder: NauticalOrder

  """
  The csv file download link with error annotations.
  """
  csvFile: ImportFile

  """
  The number of successfully uploaded lines from the csv.
  """
  successfulLines: Int

  """
  The number of lines that failed to upload.
  """
  failedLines: Int
  orderErrors: [OrderError!]!
}

"""
Represents a job data of exported file.
"""
type ImportFile implements Node & Job {
  """
  The ID of the object
  """
  id: ID!
  user: User
  app: App

  """
  Job status.
  """
  status: JobStatusEnum!

  """
  Created date time of job in ISO 8601 format.
  """
  createdAt: DateTime!

  """
  Date time of job last update in ISO 8601 format.
  """
  updatedAt: DateTime!

  """
  Job message.
  """
  message: String

  """
  The URL of file to download.
  """
  url: String

  """
  List of events associated with the import.
  """
  events: [ImportEvent!]
}

"""
History log of import file.
"""
type ImportEvent implements Node {
  """
  The ID of the object
  """
  id: ID!

  """
  Date when event happened at in ISO 8601 format.
  """
  date: DateTime!

  """
  Import event type.
  """
  type: ImportEventsEnum!

  """
  User who performed the action.
  """
  user: User

  """
  App which performed the action.
  """
  app: App

  """
  Content of the event.
  """
  message: String!
}

enum ImportEventsEnum {
  """
  Data import was started.
  """
  IMPORT_PENDING

  """
  Data import was completed successfully.
  """
  IMPORT_SUCCESS

  """
  Import Failed
  """
  IMPORT_FAILED

  """
  Data import failed.
  """
  IMPORT_DELETED

  """
  Import file was deleted.
  """
  IMPORTED_FILE_SENT
}

"""
Uploads lines for a draft order via CSV. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type OrderLinesCsvUpload {
  """
  The order.
  """
  order: Order

  """
  The csv file download link with error annotations.
  """
  csvFile: ImportFile

  """
  The number of successfully uploaded lines from the csv.
  """
  successfulLines: Int

  """
  The number of lines that failed to upload from the csv.
  """
  failedLines: Int
  orderErrors: [OrderError!]!
}

"""
Delete metadata of an object.
"""
type MetadataDelete {
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

type MetadataError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: MetadataErrorCode!
}

"""
An enumeration.
"""
enum MetadataErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

"""
Delete object's private metadata.
"""
type PrivateMetadataDelete {
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Updates metadata of an object.
"""
type MetadataUpdate {
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Updates private metadata of an object.
"""
type PrivateMetadataUpdate {
  metadataErrors: [MetadataError!]!
  item: ObjectWithMetadata
}

"""
Creates a new Menu.
"""
type MenuCreate {
  menuErrors: [MenuError!]!
  menu: Menu
}

type MenuError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: MenuErrorCode!
}

"""
An enumeration.
"""
enum MenuErrorCode {
  CANNOT_ASSIGN_NODE
  GRAPHQL_ERROR
  INVALID
  INVALID_MENU_ITEM
  NO_MENU_ITEM_PROVIDED
  NOT_FOUND
  REQUIRED
  TOO_MANY_MENU_ITEMS
  UNIQUE
}

input MenuCreateInput {
  """
  Name of the menu.
  """
  name: String!

  """
  Slug of the menu. Will be generated if not provided.
  """
  slug: String

  """
  List of menu items.
  """
  items: [MenuItemInput!]
}

input MenuItemInput {
  """
  Name of the menu item.
  """
  name: String

  """
  URL of the pointed item.
  """
  url: String

  """
  Category to which item points.
  """
  category: ID

  """
  Collection to which item points.
  """
  collection: ID

  """
  Page to which item points.
  """
  page: ID
}

"""
Deletes a menu.
"""
type MenuDelete {
  menuErrors: [MenuError!]!
  menu: Menu
}

"""
Deletes menus.
"""
type MenuBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  menuErrors: [MenuError!]!
}

"""
Updates a menu.
"""
type MenuUpdate {
  menuErrors: [MenuError!]!
  menu: Menu
}

input MenuInput {
  """
  Name of the menu.
  """
  name: String

  """
  Slug of the menu.
  """
  slug: String
}

"""
Creates a new menu item.
"""
type MenuItemCreate {
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

input MenuItemCreateInput {
  """
  Name of the menu item.
  """
  name: String!

  """
  URL of the pointed item.
  """
  url: String

  """
  Category to which item points.
  """
  category: ID

  """
  Collection to which item points.
  """
  collection: ID

  """
  Page to which item points.
  """
  page: ID

  """
  Menu to which item belongs.
  """
  menu: ID!

  """
  ID of the parent menu. If empty, menu will be top level menu.
  """
  parent: ID
}

"""
Deletes a menu item.
"""
type MenuItemDelete {
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

"""
Deletes menu items.
"""
type MenuItemBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  menuErrors: [MenuError!]!
}

"""
Updates a menu item.
"""
type MenuItemUpdate {
  menuErrors: [MenuError!]!
  menuItem: MenuItem
}

"""
Moves items of menus.
"""
type MenuItemMove {
  """
  Assigned menu to move within.
  """
  menu: Menu
  menuErrors: [MenuError!]!
}

input MenuItemMoveInput {
  """
  The menu item ID to move.
  """
  itemId: ID!

  """
  ID of the parent menu. If equals to "null", menu will be top level menu. If not transferred, parent will not be changed.
  """
  parentId: ID

  """
  The new relative offset from the current position of the item (from -inf to +inf). 1 moves the item one position forward, -1 moves the item one position backward, 0 leaves the item unchanged. Be aware, if parent was changed and you want to set new position, then you should take into account, that on parent change, item will be appended to parent children.
  """
  relativeOffset: Int

  """
  Set to 'true', if you want receive an error in case, when new calculated position (based on offset) is invalid: has negative value, or greater than number of parent elements.
  """
  isStrictOffset: Boolean = false
}

"""
Request an invoice for the order using plugin.
"""
type InvoiceRequest {
  """
  Order related to an invoice.
  """
  order: Order

  """
  Nautical order related to an invoice.
  """
  nauticalOrder: NauticalOrder

  """
  Refund related to an refund receipt.
  """
  refund: Refund
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

type InvoiceError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: InvoiceErrorCode!
}

"""
An enumeration.
"""
enum InvoiceErrorCode {
  REQUIRED
  NOT_READY
  URL_NOT_SET
  EMAIL_NOT_SET
  NUMBER_NOT_SET
  NOT_FOUND
  INVALID_STATUS
  NOT_ALLOWED
}

"""
Requests deletion of an invoice.
"""
type InvoiceRequestDelete {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Creates a ready to send invoice.
"""
type InvoiceCreate {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

input InvoiceCreateInput {
  """
  Invoice number.
  """
  number: String!

  """
  URL of an invoice to download.
  """
  url: String!
}

"""
Deletes an invoice.
"""
type InvoiceDelete {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Updates an invoice.
"""
type InvoiceUpdate {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

input UpdateInvoiceInput {
  """
  Invoice number
  """
  number: String

  """
  URL of an invoice to download.
  """
  url: String
}

"""
Send an invoice notification to the customer.
"""
type InvoiceSendNotification {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Refreshes an invoice.
"""
type InvoiceRefresh {
  """
  Order related to an invoice.
  """
  order: Order

  """
  Nautical order related to an invoice.
  """
  nauticalOrder: NauticalOrder
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Finalizes an invoice.
"""
type InvoiceFinalize {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Cancels an invoice.
"""
type InvoiceCancel {
  invoiceErrors: [InvoiceError!]!
  invoice: Invoice
}

"""
Update plugin configuration.
"""
type PluginUpdate {
  plugin: Plugin
  pluginsErrors: [PluginError!]!
}

type PluginError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PluginErrorCode!
}

"""
An enumeration.
"""
enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  NOT_ACTIVE
  REQUIRED
  UNIQUE
  NOT_ALLOWED
}

input PluginUpdateInput {
  """
  Indicates whether the plugin should be enabled.
  """
  active: Boolean

  """
  Configuration of the plugin.
  """
  configuration: [ConfigurationItemInput!]

  """
  Indicates whether the plugin should be configurable by sellers.
  """
  allowSellers: Boolean

  """
  Indicates the seller that is making the update, null if marketplace.
  """
  seller: ID
}

input ConfigurationItemInput {
  """
  Name of the field to update.
  """
  name: String!

  """
  Value of the given field to update.
  """
  value: GenericScalar
}

"""
Import foreign catalog.
"""
type CatalogImport {
  ok: Boolean

  """
  Plugin ID
  """
  plugin: ID
  pluginsErrors: [PluginError!]!
}

"""
Export catalog.
"""
type CatalogExport {
  ok: Boolean

  """
  Plugin ID
  """
  plugin: ID
  pluginsErrors: [PluginError!]!
}

"""
Export customer list.
"""
type CustomersExport {
  ok: Boolean

  """
  Plugin ID
  """
  plugin: ID
  pluginsErrors: [PluginError!]!
}

"""
Update plugin flow.
"""
type PluginFlowUpdate {
  flow: Flow
  pluginsErrors: [PluginError!]!
}

input PluginFlowInput {
  """
  Indicates the seller that is making the update, null if marketplace.
  """
  seller: ID

  """
  Indicates the process in the UPPERCASE_FORMAT that this flow maps for.
  """
  process: String!

  """
  Indicates the mapping for the given process and plugin.
  """
  mapping: JSONString!

  """
  Form ID from typeform
  """
  formId: String!
}

"""
Delete plugin flow.
"""
type PluginFlowDelete {
  pluginsErrors: [PluginError!]!
}

"""
Retrieves an onboarding link for the given vendor from the given gateway if available.
"""
type VendorPayoutOnboardingLinkRequest {
  """
  Onboarding link for the given vendor from the given gateway if available.
  """
  link: String

  """
  Vendor that was updated with onboarding link.
  """
  vendor: Vendor
  pluginsErrors: [PluginError!]!
}

"""
Refreshes currency exchange rates. Must have a currency exchange app enabled in the app marketplace.
"""
type ExchangeRatesRefresh {
  pluginsErrors: [PluginError!]!
}

"""
Create a checkout event.
"""
type CheckoutEventTriggered {
  """
  The created checkout event.
  """
  checkoutEvent: CheckoutEvent
  pluginsErrors: [PluginError!]!
}

"""
Correct a previous journal entry by supplying
"""
type JournalEntryCorrect {
  financialErrors: [FinancialError!]!
  journalEntry: JournalEntry
}

type FinancialError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: FinancialErrorCode!
}

"""
An enumeration.
"""
enum FinancialErrorCode {
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
}

input JournalEntryCorrectInput {
  """
  ID of the journal entry to be corrected
  """
  correctingJournalEntry: ID!

  """
  Description to add to the journal entry ID
  """
  description: String

  """
  Ledger entries to insert for the journal entry
  """
  ledgerEntries: [LedgerEntryInput!]
}

input LedgerEntryInput {
  """
  Amount of the entry
  """
  amount: Decimal!

  """
  ID of the ledger to insert the amount into
  """
  ledger: ID!
}

"""
Creates a new sale.
"""
type SaleCreate {
  discountErrors: [DiscountError!]!
  sale: Sale
}

type DiscountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: DiscountErrorCode!
}

"""
An enumeration.
"""
enum DiscountErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input SaleInput {
  """
  Sale name.
  """
  name: String

  """
  Fixed or percentage.
  """
  type: DiscountValueTypeEnum

  """
  Value of the sale.
  """
  value: PositiveDecimal

  """
  Products related to the sale.
  """
  products: [ID!]

  """
  Variants related to the sale.
  """
  variants: [ID!]

  """
  Categories related to the sale.
  """
  categories: [ID!]

  """
  Collections related to the sale.
  """
  collections: [ID!]

  """
  Start date of the sale in ISO 8601 format.
  """
  startDate: DateTime

  """
  End date of the sale in ISO 8601 format.
  """
  endDate: DateTime

  """
  Min purchase amount required to apply the voucher.
  """
  minSpentAmount: PositiveDecimal

  """
  Minimal quantity of checkout items required to apply the voucher.
  """
  minCheckoutItemsQuantity: Int

  """
  Sale type: SPECIFICT PRODUCT or SHIPPING
  """
  saleType: SaleTypeEnum
}

"""
Deletes a sale.
"""
type SaleDelete {
  discountErrors: [DiscountError!]!
  sale: Sale
}

"""
Deletes sales.
"""
type SaleBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  discountErrors: [DiscountError!]!
}

"""
Updates a sale.
"""
type SaleUpdate {
  discountErrors: [DiscountError!]!
  sale: Sale
}

"""
Adds products, variants, categories, or collections to a sale.
"""
type SaleAddCatalogues {
  """
  Sale of which catalogue IDs will be modified.
  """
  sale: Sale
  discountErrors: [DiscountError!]!
}

input CatalogueInput {
  """
  Products related to the discount.
  """
  products: [ID!]

  """
  Variants related to the discount.
  """
  variants: [ID!]

  """
  Categories related to the discount.
  """
  categories: [ID!]

  """
  Collections related to the discount.
  """
  collections: [ID!]
}

"""
Removes products, variants, categories, or collections from a sale.
"""
type SaleRemoveCatalogues {
  """
  Sale of which catalogue IDs will be modified.
  """
  sale: Sale
  discountErrors: [DiscountError!]!
}

"""
Creates a new voucher.
"""
type VoucherCreate {
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

input VoucherInput {
  """
  Voucher type: PRODUCT, CATEGORY SHIPPING or ENTIRE_ORDER.
  """
  type: VoucherTypeEnum

  """
  Voucher name.
  """
  name: String

  """
  Code to use the voucher.
  """
  code: String

  """
  Start date of the voucher in ISO 8601 format.
  """
  startDate: DateTime

  """
  End date of the voucher in ISO 8601 format.
  """
  endDate: DateTime

  """
  Choices: fixed or percentage.
  """
  discountValueType: DiscountValueTypeEnum

  """
  Value of the voucher.
  """
  discountValue: PositiveDecimal

  """
  Products discounted by the voucher.
  """
  products: [ID!]

  """
  Variants discounted by the voucher.
  """
  variants: [ID!]

  """
  Collections discounted by the voucher.
  """
  collections: [ID!]

  """
  Categories discounted by the voucher.
  """
  categories: [ID!]

  """
  Min purchase amount required to apply the voucher.
  """
  minAmountSpent: PositiveDecimal

  """
  Minimal quantity of checkout items required to apply the voucher.
  """
  minCheckoutItemsQuantity: Int

  """
  Country codes that can be used with the shipping voucher.
  """
  countries: [String!]

  """
  Voucher should be applied to the cheapest item or entire order.
  """
  applyOncePerOrder: Boolean

  """
  Voucher should be applied once per customer.
  """
  applyOncePerCustomer: Boolean

  """
  Limit number of times this voucher can be used in total.
  """
  usageLimit: Int
}

"""
Deletes a voucher.
"""
type VoucherDelete {
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""
Deletes vouchers.
"""
type VoucherBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  discountErrors: [DiscountError!]!
}

"""
Updates a voucher.
"""
type VoucherUpdate {
  discountErrors: [DiscountError!]!
  voucher: Voucher
}

"""
Adds products, variants, categories, or collections to a voucher.
"""
type VoucherAddCatalogues {
  """
  Voucher of which catalogue IDs will be modified.
  """
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

"""
Removes products, variants, categories, or collections from a voucher.
"""
type VoucherRemoveCatalogues {
  """
  Voucher of which catalogue IDs will be modified.
  """
  voucher: Voucher
  discountErrors: [DiscountError!]!
}

"""
Gets and sets Explo dashboard embedding token in cookies
"""
type DashboardEmbeddingToken {
  """
  JWT token for embedding
  """
  token: String
}

"""
Export products to csv file.
"""
type ProductsExport {
  """
  The newly created export file job which is responsible for export data.
  """
  exportFile: ExportFile
  exportErrors: [ExportError!]!
}

type ExportError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ExportErrorCode!
}

"""
An enumeration.
"""
enum ExportErrorCode {
  INVALID
  NOT_FOUND
  REQUIRED
}

input ExportProductsInput {
  """
  Determine which products should be exported.
  """
  scope: ExportScope!

  """
  Filtering options for products.
  """
  filter: ProductFilterInput

  """
  List of products IDS to export.
  """
  ids: [ID!]

  """
  Input with info about fields which should be exported.
  """
  exportInfo: ExportInfoInput

  """
  Type of exported file.
  """
  fileType: FileTypesEnum!
}

enum ExportScope {
  """
  Export all products.
  """
  ALL

  """
  Export products with given ids.
  """
  IDS

  """
  Export the filtered products.
  """
  FILTER
}

input ExportInfoInput {
  """
  List of attribute ids witch should be exported.
  """
  attributes: [ID!]

  """
  List of warehouse ids witch should be exported.
  """
  warehouses: [ID!]

  """
  List of product fields witch should be exported.
  """
  fields: [ProductFieldEnum!]
}

enum ProductFieldEnum {
  NAME
  DESCRIPTION
  PRODUCT_TYPE
  CATEGORY
  VISIBLE
  AVAILABLE_FOR_PURCHASE
  SEARCHABLE
  PRODUCT_WEIGHT
  COLLECTIONS
  CHARGE_TAXES
  PRODUCT_IMAGES
  VARIANT_SKU
  VARIANT_PRICE
  COST_PRICE
  VARIANT_WEIGHT
  VARIANT_IMAGES
}

enum FileTypesEnum {
  """
  Plain CSV file.
  """
  CSV

  """
  Excel XLSX file.
  """
  XLSX
}

"""
Import products with csv file.
"""
type ProductsImport {
  """
  The newly created import file which is responsible for import data.
  """
  importFile: ImportFile
  importErrors: [ImportError!]!
}

type ImportError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ImportErrorCode!
}

"""
An enumeration.
"""
enum ImportErrorCode {
  INVALID
  NOT_FOUND
  REQUIRED
}

"""
Adds a gift card or a voucher to a checkout.
"""
type CheckoutAddPromoCode {
  """
  The checkout with the added gift card or voucher.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

type CheckoutError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: CheckoutErrorCode!

  """
  List of variant IDs which causes the error.
  """
  variants: [ID!]
}

"""
An enumeration.
"""
enum CheckoutErrorCode {
  BILLING_ADDRESS_NOT_SET
  CHECKOUT_NOT_FULLY_PAID
  GRAPHQL_ERROR
  PRODUCT_NOT_PUBLISHED
  PRODUCT_UNAVAILABLE_FOR_PURCHASE
  INSUFFICIENT_STOCK
  INVALID
  INVALID_PHONE
  INVALID_SHIPPING_METHOD
  LOGIN_REQUIRED_FOR_CHECKOUT
  NOT_FOUND
  PAYMENT_ERROR
  QUANTITY_GREATER_THAN_LIMIT
  ORDER_PRICE_LESS_THAN_LIMIT
  REQUIRED
  SHIPPING_ADDRESS_NOT_SET
  SHIPPING_METHOD_NOT_APPLICABLE
  SHIPPING_METHOD_NOT_SET
  SHIPPING_NOT_REQUIRED
  TAX_ERROR
  UNIQUE
  VOUCHER_NOT_APPLICABLE
  ZERO_QUANTITY
  PRICE_OVERRIDE_NOT_ALLOWED
  DOES_NOT_EXIST
}

"""
Update billing address in the existing checkout.
"""
type CheckoutBillingAddressUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Completes the checkout. As a result a new order is created and a payment charge is made. This action requires a successful payment before it can be performed. In case additional confirmation step as 3D secure is required confirmationNeeded flag will be set to True and no order created until payment is confirmed with second call of this mutation.
"""
type CheckoutComplete {
  """
  Placed order.
  """
  order: NauticalOrder

  """
  Set to true if payment needs to be confirmed before checkout is complete.
  """
  confirmationNeeded: Boolean!

  """
  Confirmation data used to process additional authorization steps.
  """
  confirmationData: JSONString
  checkoutErrors: [CheckoutError!]!
}

"""
Converts checkout to nautical quote order with the same id as checkout has when checkout is ready to be converted into quote order. This mutation should delete current checkout in case when order is created.
"""
type CheckoutConvertToNauticalQuoteOrder {
  """
  Created Nautical Quote Order.
  """
  order: NauticalOrder
  checkoutErrors: [CheckoutError!]!
}

"""
Create a new checkout.
"""
type CheckoutCreate {
  """
  Whether the checkout was created or the current active one was returned. Refer to checkoutLinesAdd and checkoutLinesUpdate to merge a cart with an active checkout.
  """
  created: Boolean
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

input CheckoutCreateInput {
  """
  A list of checkout lines, each containing information about an item in the checkout.
  """
  lines: [CheckoutLineInput!]!

  """
  The customer's email address.
  """
  email: String

  """
  The mailing address to where the checkout will be shipped. Note: the address will be ignored if the checkout doesn't contain shippable items.
  """
  shippingAddress: AddressInput

  """
  Billing address of the customer.
  """
  billingAddress: AddressInput

  """
  Currency for this checkout.
  """
  currency: MarketplaceConfigurationCurrencyEnum
}

input CheckoutLineInput {
  """
  The number of items purchased.
  """
  quantity: Int!

  """
  ID of the product variant.
  """
  variantId: ID!
}

"""
Sets the customer as the owner of the checkout.
"""
type CheckoutCustomerAttach {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Removes the user assigned as the owner of the checkout.
"""
type CheckoutCustomerDetach {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Updates email address in the existing checkout object.
"""
type CheckoutEmailUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Update currency in the existing checkout object.
"""
type CheckoutSetTransactionCurrency {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Updates the checkout note on the provided checkout.
"""
type CheckoutNoteUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Deletes a CheckoutLine.
"""
type CheckoutLineDelete {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Adds a checkout line to the existing checkout.
"""
type CheckoutLinesAdd {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Updates checkout line in the existing checkout.
"""
type CheckoutLinesUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Remove a gift card or a voucher from a checkout.
"""
type CheckoutRemovePromoCode {
  """
  The checkout with the removed gift card or voucher.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Create a new payment for given checkout.
"""
type CheckoutPaymentCreate {
  """
  Related checkout object.
  """
  checkout: Checkout

  """
  A newly created payment.
  """
  payment: Payment
  paymentErrors: [PaymentError!]!
}

"""
Update shipping address in the existing checkout.
"""
type CheckoutShippingAddressUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Updates the seller shipping methods of the checkout.
"""
type CheckoutSellerShippingMethodsUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Updates the marketplace shipping methods of the checkout.
"""
type CheckoutMarketplaceShippingMethodUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Bulk clears the seller shipping methods of the checkout.
"""
type CheckoutSellerShippingMethodsBulkUpdate {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

input SellerShippingMethodInput {
  """
  Seller DB id representation as a string.
  """
  seller: ID!
  shippingMethodSelection: ID!

  """
  Optional override amount for shipping method price.Be aware, you should send this field on each request. For example, if you will set this field and then will send the same shipping method (or a new one) without this field (in the context of the same seller) - the price will be restored based on the shipping method price.
  """
  shippingMethodPriceOverrideAmount: PositiveDecimal
}

"""
Clears the seller shipping methods of the checkout.
"""
type CheckoutSellerShippingMethodsClear {
  """
  An updated checkout.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Deletes a checkout.
"""
type CheckoutDelete {
  checkoutErrors: [CheckoutError!]!
  checkout: Checkout
}

"""
Adds purchase order number to a checkout.
"""
type CheckoutAddPONumbers {
  """
  The checkout with the added purchase order numbers.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Remove a purchase order from a checkout.
"""
type CheckoutRemovePONumbers {
  """
  The checkout with the removed purchase order number.
  """
  checkout: Checkout
  checkoutErrors: [CheckoutError!]!
}

"""
Add a note to a checkout line.
"""
type CheckoutLineAddNote {
  checkoutErrors: [CheckoutError!]!
  checkoutLine: CheckoutLine
}

"""
Creates an attribute.
"""
type AttributeCreate {
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeCreateInput {
  """
  The input type to use for entering attribute values in the dashboard.
  """
  inputType: AttributeInputTypeEnum

  """
  Name of an attribute displayed in the interface.
  """
  name: String!

  """
  Internal representation of an attribute name.
  """
  slug: String

  """
  List of attribute's values.
  """
  values: [AttributeValueCreateInput!]

  """
  Whether the attribute requires values to be passed or not.
  """
  valueRequired: Boolean

  """
  Whether the attribute is for variants only.
  """
  isVariantOnly: Boolean

  """
  Whether the attribute should be visible or not in storefront.
  """
  visibleInStorefront: Boolean

  """
  Whether the attribute can be filtered in storefront.
  """
  filterableInStorefront: Boolean

  """
  Whether the attribute can be filtered in dashboard.
  """
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """
  Whether the attribute can be displayed in the admin product list.
  """
  availableInGrid: Boolean

  """
  ID of the Seller that created the Attribute, or null if Marketplace Operator
  """
  createdBy: String
}

input AttributeValueCreateInput {
  """
  Name of a value displayed in the interface.
  """
  name: String!

  """
  Supporting information like color, links, etc.
  """
  value: String

  """
  Date and time representation of attribute value.
  """
  dateTime: DateTime

  """
  Supports attribute values with long text (plain text).
  """
  plainText: String

  """
  Supports attribute values with long text (html).
  """
  richText: String

  """
  Numeric value to support money or numeric attribute values.
  """
  amount: Decimal

  """
  Currency to support money attribute values.
  """
  currency: String

  """
  Supports attribute values to reference any other nautical object (should be base64 ID)
  """
  reference: String

  """
  Supports boolean attribute values.
  """
  boolean: Boolean

  """
  Supports file type attribute values.
  """
  file: Upload

  """
  URL type to support external links as attribute values.
  """
  fileUrl: String
}

"""
Deletes an attribute.
"""
type AttributeDelete {
  productErrors: [ProductError!]!
  attribute: Attribute
}

"""
Deletes attributes.
"""
type AttributeBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Assign attributes to a given product type.
"""
type AttributeAssign {
  """
  The updated product type.
  """
  productType: ProductType
  productErrors: [ProductError!]!
}

input AttributeAssignInput {
  """
  The ID of the attribute to assign.
  """
  id: ID!

  """
  The attribute type to be assigned as.
  """
  type: AttributeTypeEnum!
}

"""
Un-assign attributes from a given product type.
"""
type AttributeUnassign {
  """
  The updated product type.
  """
  productType: ProductType
  productErrors: [ProductError!]!
}

"""
Updates attribute.
"""
type AttributeUpdate {
  attribute: Attribute
  productErrors: [ProductError!]!
}

input AttributeUpdateInput {
  """
  Name of an attribute displayed in the interface.
  """
  name: String

  """
  Internal representation of an attribute name.
  """
  slug: String

  """
  IDs of values to be removed from this attribute.
  """
  removeValues: [ID!]

  """
  New values to be created for this attribute.
  """
  addValues: [AttributeValueCreateInput!]

  """
  Whether the attribute requires values to be passed or not.
  """
  valueRequired: Boolean

  """
  Whether the attribute is for variants only.
  """
  isVariantOnly: Boolean

  """
  Whether the attribute should be visible or not in storefront.
  """
  visibleInStorefront: Boolean

  """
  Whether the attribute can be filtered in storefront.
  """
  filterableInStorefront: Boolean

  """
  Whether the attribute can be filtered in dashboard.
  """
  filterableInDashboard: Boolean

  """
  The position of the attribute in the storefront navigation (0 by default).
  """
  storefrontSearchPosition: Int

  """
  Whether the attribute can be displayed in the admin product list.
  """
  availableInGrid: Boolean

  """
  ID of the Seller that created the Attribute, or null if Marketplace Operator
  """
  createdBy: String
}

"""
Assign attributes to a given custom field template.
"""
type CustomAttributeAssign {
  """
  The updated custom field template.
  """
  customFieldTemplate: CustomFieldTemplate
  attributeErrors: [ProductError!]!
}

"""
Un-assign attributes from a given custom field template.
"""
type CustomAttributeUnassign {
  """
  The updated custom field template.
  """
  customFieldTemplate: CustomFieldTemplate
  attributeErrors: [ProductError!]!
}

"""
Unassign the specified attribute from an instance.
"""
type InstanceAttributeUnassign {
  instance: CustomFieldInstance
  attributeErrors: [AttributeError!]!
}

union CustomFieldInstance =
    User
  | Product
  | ProductVariant
  | Category
  | Collection

type AttributeError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: ProductErrorCode!

  """
  List of values which caused the error.
  """
  values: [String!]
}

"""
Creates a value for an attribute.
"""
type AttributeValueCreate {
  """
  The updated attribute.
  """
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

"""
Deletes a value of an attribute.
"""
type AttributeValueDelete {
  """
  The updated attribute.
  """
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

"""
Creates attribute values for a given attribute.
"""
type AttributeValueBulkCreate {
  """
  Returns how many objects were created.
  """
  count: Int!

  """
  List of the created attribute values.
  """
  attributeValues: [AttributeValue!]!
  attributeErrors: [AttributeError!]!
}

"""
Deletes values of attributes.
"""
type AttributeValueBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  productErrors: [ProductError!]!
}

"""
Updates value of an attribute.
"""
type AttributeValueUpdate {
  """
  The updated attribute.
  """
  attribute: Attribute
  productErrors: [ProductError!]!
  attributeValue: AttributeValue
}

"""
Reorder the values of an attribute.
"""
type AttributeValuesReorder {
  """
  Attribute from which values are reordered.
  """
  attribute: Attribute
  productErrors: [ProductError!]!
}

"""
Creates a new app.
"""
type AppCreate {
  """
  The newly created authentication token.
  """
  authToken: String
  appErrors: [AppError!]!
  app: App
}

type AppError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: AppErrorCode!

  """
  List of permissions which causes the error.
  """
  permissions: [PermissionEnum!]
}

"""
An enumeration.
"""
enum AppErrorCode {
  FORBIDDEN
  GRAPHQL_ERROR
  INVALID
  INVALID_STATUS
  INVALID_PERMISSION
  INVALID_URL_FORMAT
  INVALID_MANIFEST_FORMAT
  MANIFEST_URL_CANT_CONNECT
  NOT_FOUND
  REQUIRED
  UNIQUE
  OUT_OF_SCOPE_APP
  OUT_OF_SCOPE_PERMISSION
}

input AppInput {
  """
  Name of the app.
  """
  name: String

  """
  List of permission code names to assign to this app.
  """
  permissions: [PermissionEnum!]

  """
  User to be associated with this app.
  """
  user: ID
}

"""
Updates an existing app.
"""
type AppUpdate {
  appErrors: [AppError!]!
  app: App
}

"""
Deletes an app.
"""
type AppDelete {
  appErrors: [AppError!]!
  app: App
}

"""
Creates a new token.
"""
type AppTokenCreate {
  """
  The newly created authentication token.
  """
  authToken: String
  appErrors: [AppError!]!
  appToken: AppToken
}

input AppTokenInput {
  """
  Name of the token.
  """
  name: String

  """
  ID of app.
  """
  app: ID!
}

"""
Deletes an authentication token assigned to app.
"""
type AppTokenDelete {
  appErrors: [AppError!]!
  appToken: AppToken
}

"""
Verify provided app token.
"""
type AppTokenVerify {
  """
  Determine if token is valid or not.
  """
  valid: Boolean!
  appErrors: [AppError!]!
}

"""
Install new app by using app manifest.
"""
type AppInstall {
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

input AppInstallInput {
  """
  Name of the app to install.
  """
  appName: String

  """
  Url to app's manifest in JSON format.
  """
  manifestUrl: String

  """
  Determine if app will be set active or not.
  """
  activateAfterInstallation: Boolean = true

  """
  List of permission code names to assign to this app.
  """
  permissions: [PermissionEnum!]
}

"""
Retry failed installation of new app.
"""
type AppRetryInstall {
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

"""
Delete failed installation.
"""
type AppDeleteFailedInstallation {
  appErrors: [AppError!]!
  appInstallation: AppInstallation
}

"""
Fetch and validate manifest.
"""
type AppFetchManifest {
  manifest: Manifest
  appErrors: [AppError!]!
}

"""
The manifest definition.
"""
type Manifest {
  identifier: String!
  version: String!
  name: String!
  about: String
  permissions: [Permission!]
  appUrl: String
  configurationUrl: String
  tokenTargetUrl: String
  dataPrivacy: String
  dataPrivacyUrl: String
  homepageUrl: String
  supportUrl: String
}

"""
Activate the app.
"""
type AppActivate {
  appErrors: [AppError!]!
  app: App
}

"""
Deactivate the app.
"""
type AppDeactivate {
  appErrors: [AppError!]!
  app: App
}

"""
Creates a new Nautical customer token.
"""
type CreateCustomerToken {
  """
  Token created by Nautical to be used to sync users across several Oauth providers.
  """
  nauticalToken: String

  """
  Refresh token for renewing the nautical_token (access token). This refresh token expires after 1 hour
  """
  refreshToken: String
  authErrors: [AuthError!]!
}

type AuthError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code
  """
  code: String!
}

enum OauthProviderSourceEnum {
  FIREBASE
  WORKOS
}

"""
Create JWT token.
"""
type CreateToken {
  """
  JWT token, required to authenticate.
  """
  token: String

  """
  JWT refresh token, required to re-generate access token.
  """
  refreshToken: String

  """
  CSRF token required to re-generate access token.
  """
  csrfToken: String

  """
  A user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

type AccountError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: AccountErrorCode!
}

"""
An enumeration.
"""
enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  ACCOUNT_NOT_ACTIVE
  ATTRIBUTE_CANNOT_BE_ASSIGNED
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INVALID
  INVALID_PHONE
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  MUST_CHOOSE_PERMISSION_GROUP
  INVALID_CREDENTIALS
  NO_SELLER
  NOT_FOUND
  OUT_OF_SCOPE_SERVICE_ACCOUNT
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_IDENTICAL
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
  JWT_SIGNATURE_EXPIRED
  JWT_INVALID_TOKEN
  JWT_DECODE_ERROR
  JWT_MISSING_TOKEN
  JWT_INVALID_CSRF_TOKEN
}

"""
Create authorization URL.
"""
type AuthURLGenerate {
  """
  Generated auth URL for google login.
  """
  authUrl: String
  accountErrors: [AccountError!]!
}

"""
An enumeration.
"""
enum SsoProviderType {
  GitHubOAuth
  GoogleOAuth
  MicrosoftOAuth
}

"""
Create JWT token (Also creates a user if not previously signed up)
"""
type TokenCreateSSO {
  """
  JWT token, required to authenticate.
  """
  token: String

  """
  JWT refresh token, required to re-generate access token.
  """
  refreshToken: String

  """
  CSRF token required to re-generate access token.
  """
  csrfToken: String

  """
  A user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Refresh JWT token. Mutation tries to take refreshToken from the input.If it fails it will try to take refreshToken from the http-only cookie -refreshToken. csrfToken is required when refreshToken is provided as a cookie.
"""
type RefreshToken {
  """
  JWT token, required to authenticate.
  """
  token: String

  """
  A user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Verify JWT token.
"""
type VerifyToken {
  """
  User assigned to token.
  """
  user: User

  """
  Determine if token is valid or not.
  """
  isValid: Boolean!

  """
  JWT payload.
  """
  payload: GenericScalar
  accountErrors: [AccountError!]!
}

"""
Deactivate all JWT tokens of the currently authenticated user.
"""
type DeactivateAllUserTokens {
  accountErrors: [AccountError!]!
}

"""
Sends an email with the account password modification link.
"""
type PasswordRequestReset {
  accountErrors: [AccountError!]!
}

"""
Confirm user account with token sent by email during registration.
"""
type AccountConfirm {
  """
  An activated user account.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Sets the user's password from the token sent by email using the RequestPasswordReset mutation.
"""
type PasswordSet {
  """
  JWT token, required to authenticate.
  """
  token: String

  """
  JWT refresh token, required to re-generate access token.
  """
  refreshToken: String

  """
  CSRF token required to re-generate access token.
  """
  csrfToken: String

  """
  A user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Change the password of the logged in user.
"""
type PasswordChange {
  """
  A user instance with a new password.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Request email change for the current user.
"""
type EmailChangeRequest {
  """
  A user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Confirm the email change of the logged-in user.
"""
type EmailChangeConfirm {
  """
  A user instance with a new email.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Create a new address for the customer.
"""
type AccountAddressCreate {
  """
  A user instance for which the address was created.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Updates an address of the logged-in user.
"""
type AccountAddressUpdate {
  """
  A user object for which the address was edited.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Delete an address of the logged-in user.
"""
type AccountAddressDelete {
  """
  A user instance for which the address was deleted.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Sets a default address for the authenticated user.
"""
type AccountAddressSetDefault {
  """
  An updated user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Register a new user.
"""
type AccountRegister {
  """
  Informs whether users need to confirm their email address.
  """
  requiresConfirmation: Boolean
  accountErrors: [AccountError!]!
  user: User
}

input AccountRegisterInput {
  """
  The email address of the user.
  """
  email: String!

  """
  Password.
  """
  password: String!

  """
  Base of frontend URL that will be needed to create confirmation URL.
  """
  redirectUrl: String

  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  Optional name of the company that a user is associated with.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Billing address of the user.
  """
  defaultBillingAddress: AddressInput

  """
  Shipping address of the user.
  """
  defaultShippingAddress: AddressInput
}

"""
Updates the account of the logged-in user.
"""
type AccountUpdate {
  accountErrors: [AccountError!]!
  user: User
}

input AccountInput {
  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  Company name.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Billing address of the customer.
  """
  defaultBillingAddress: AddressInput

  """
  Shipping address of the customer.
  """
  defaultShippingAddress: AddressInput

  """
  Marketplace VAT identification number
  """
  vatIdentificationNumber: String
}

"""
Sends an email with the account removal link for the logged-in user.
"""
type AccountRequestDeletion {
  accountErrors: [AccountError!]!
}

"""
Remove user account.
"""
type AccountDelete {
  accountErrors: [AccountError!]!
  user: User
}

"""
Creates user address.
"""
type AddressCreate {
  """
  A user instance for which the address was created.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Updates an address.
"""
type AddressUpdate {
  """
  A user object for which the address was edited.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Deletes an address.
"""
type AddressDelete {
  """
  A user instance for which the address was deleted.
  """
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

"""
Sets a default address for the given user.
"""
type AddressSetDefault {
  """
  An updated user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Creates a new customer.
"""
type CustomerCreate {
  accountErrors: [AccountError!]!
  user: User
}

input UserCreateInput {
  """
  Billing address of the customer.
  """
  defaultBillingAddress: AddressInput

  """
  Shipping address of the customer.
  """
  defaultShippingAddress: AddressInput

  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  The unique email address of the user.
  """
  email: String

  """
  User account is active.
  """
  isActive: Boolean

  """
  User is staff member.
  """
  isStaff: Boolean

  """
  A note about the user.
  """
  note: String

  """
  Only filled out if the account is a business account.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Password url
  """
  passwordUrl: String

  """
  Tax exempt code
  """
  taxExemptCode: String

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Marketplace VAT identification number
  """
  vatIdentificationNumber: String

  """
  Indicates whether a 'set password' email should be sent to the customer.
  """
  sendCustomerSetPasswordEmail: Boolean

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String
}

"""
Updates an existing customer.
"""
type CustomerUpdate {
  accountErrors: [AccountError!]!
  user: User
}

input CustomerInput {
  """
  Billing address of the customer.
  """
  defaultBillingAddress: AddressInput

  """
  Shipping address of the customer.
  """
  defaultShippingAddress: AddressInput

  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  The unique email address of the user.
  """
  email: String

  """
  User account is active.
  """
  isActive: Boolean

  """
  User is staff member.
  """
  isStaff: Boolean

  """
  A note about the user.
  """
  note: String

  """
  Only filled out if the account is a business account.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Password url
  """
  passwordUrl: String

  """
  Tax exempt code
  """
  taxExemptCode: String

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  Marketplace VAT identification number
  """
  vatIdentificationNumber: String

  """
  Indicates whether a 'set password' email should be sent to the customer.
  """
  sendCustomerSetPasswordEmail: Boolean
}

"""
Deletes a customer.
"""
type CustomerDelete {
  accountErrors: [AccountError!]!
  user: User
}

"""
Deletes customers.
"""
type CustomerBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  accountErrors: [AccountError!]!
}

"""
Creates a new staff user.
"""
type StaffCreate {
  staffErrors: [StaffError!]!
  user: User
}

type StaffError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: AccountErrorCode!

  """
  List of permissions which causes the error.
  """
  permissions: [PermissionEnum!]

  """
  List of permission group IDs which cause the error.
  """
  groups: [ID!]

  """
  List of user IDs which causes the error.
  """
  users: [ID!]
}

input StaffCreateInput {
  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  The unique email address of the user.
  """
  email: String

  """
  User account is active.
  """
  isActive: Boolean

  """
  User is staff member.
  """
  isStaff: Boolean

  """
  A note about the user.
  """
  note: String

  """
  Only filled out if the account is a business account.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Password url
  """
  passwordUrl: String

  """
  Tax exempt code
  """
  taxExemptCode: String

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  List of permission group IDs to which user should be assigned.
  """
  addGroups: [ID!]

  """
  ID of the seller to which the staff member belongs.
  """
  sellerId: ID

  """
  URL of a view where users should be redirected to set the password. URL in RFC 1808 format.
  """
  redirectUrl: String
}

"""
Updates an existing staff user.
"""
type StaffUpdate {
  staffErrors: [StaffError!]!
  user: User
}

input StaffUpdateInput {
  """
  Given name.
  """
  firstName: String

  """
  Family name.
  """
  lastName: String

  """
  The unique email address of the user.
  """
  email: String

  """
  User account is active.
  """
  isActive: Boolean

  """
  User is staff member.
  """
  isStaff: Boolean

  """
  A note about the user.
  """
  note: String

  """
  Only filled out if the account is a business account.
  """
  companyName: String

  """
  Personal phone number.
  """
  personalPhone: String

  """
  Password url
  """
  passwordUrl: String

  """
  Tax exempt code
  """
  taxExemptCode: String

  """
  List of custom fields.
  """
  customFields: [AttributeValueInput!]

  """
  List of permission group IDs to which user should be assigned.
  """
  addGroups: [ID!]

  """
  ID of the seller to which the staff member belongs.
  """
  sellerId: ID

  """
  List of permission group IDs from which user should be unassigned.
  """
  removeGroups: [ID!]
}

"""
Deletes a staff user.
"""
type StaffDelete {
  staffErrors: [StaffError!]!
  user: User
}

"""
Deletes staff users.
"""
type StaffBulkDelete {
  """
  Returns how many objects were affected.
  """
  count: Int!
  staffErrors: [StaffError!]!
}

"""
Create a user avatar. Only for staff members. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec
"""
type UserAvatarUpdate {
  """
  An updated user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Deletes a user avatar. Only for staff members.
"""
type UserAvatarDelete {
  """
  An updated user instance.
  """
  user: User
  accountErrors: [AccountError!]!
}

"""
Activate or deactivate users.
"""
type UserBulkSetActive {
  """
  Returns how many objects were affected.
  """
  count: Int!
  accountErrors: [AccountError!]!
}

"""
Create new permission group.
"""
type PermissionGroupCreate {
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  """
  Name of a field that caused the error. A value of `null` indicates that the error isn't associated with a particular field.
  """
  field: String

  """
  The error message.
  """
  message: String!

  """
  The error code.
  """
  code: PermissionGroupErrorCode!

  """
  List of permissions which causes the error.
  """
  permissions: [PermissionEnum!]

  """
  List of user IDs which causes the error.
  """
  users: [ID!]
}

"""
An enumeration.
"""
enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
}

input PermissionGroupCreateInput {
  """
  List of permission code names to assign to this group.
  """
  addPermissions: [PermissionEnum!]

  """
  List of users to assign to this group.
  """
  addUsers: [ID!]

  """
  Group name.
  """
  name: String!
}

"""
Update permission group.
"""
type PermissionGroupUpdate {
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupUpdateInput {
  """
  List of permission code names to assign to this group.
  """
  addPermissions: [PermissionEnum!]

  """
  List of users to assign to this group.
  """
  addUsers: [ID!]

  """
  Group name.
  """
  name: String

  """
  List of permission code names to unassign from this group.
  """
  removePermissions: [PermissionEnum!]

  """
  List of users to unassign from this group.
  """
  removeUsers: [ID!]
}

"""
Delete permission group.
"""
type PermissionGroupDelete {
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

"""
A string-serialized scalar represents a set of fields that's passed to a federated directive, such as @key, @requires, or @provides
"""
scalar FieldSet

"""
This string-serialized scalar represents a JWT scope
"""
scalar federation__Scope

"""
This string-serialized scalar represents an authorization policy.
"""
scalar federation__Policy
